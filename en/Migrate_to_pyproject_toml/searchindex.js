Search.setIndex({"docnames": ["ADMINISTRATA", "API", "CHANGELOG", "CONTACT", "CREDITS", "DISCLAIMER", "EFFICIENCY", "EXAMPLES", "FAQ", "GIT", "GUIDELINES", "INSTALLATION", "LICENSE", "NIX-README", "PUBLICATIONS", "README", "SOLVERS", "USAGE", "VIEWERS", "VKML", "contents", "design", "external_definitions", "generated/examples", "generated/examples.benchmarking", "generated/examples.benchmarking.benchmarker", "generated/examples.benchmarking.size", "generated/examples.benchmarking.steps", "generated/examples.benchmarking.utils", "generated/examples.benchmarking.versions", "generated/examples.cahnHilliard", "generated/examples.cahnHilliard.mesh2D", "generated/examples.cahnHilliard.mesh2DCoupled", "generated/examples.cahnHilliard.mesh3D", "generated/examples.cahnHilliard.sphere", "generated/examples.cahnHilliard.sphereDaemon", "generated/examples.cahnHilliard.tanh1D", "generated/examples.cahnHilliard.test", "generated/examples.chemotaxis", "generated/examples.chemotaxis.input", "generated/examples.chemotaxis.input2D", "generated/examples.chemotaxis.parameters", "generated/examples.chemotaxis.test", "generated/examples.convection", "generated/examples.convection.advection", "generated/examples.convection.advection.explicitUpwind", "generated/examples.convection.advection.implicitUpwind", "generated/examples.convection.advection.vanLeerUpwind", "generated/examples.convection.exponential1D", "generated/examples.convection.exponential1D.cylindricalMesh1D", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform", "generated/examples.convection.exponential1D.mesh1D", "generated/examples.convection.exponential1D.tri2D", "generated/examples.convection.exponential1DBack", "generated/examples.convection.exponential1DBack.mesh1D", "generated/examples.convection.exponential1DSource", "generated/examples.convection.exponential1DSource.mesh1D", "generated/examples.convection.exponential1DSource.tri2D", "generated/examples.convection.exponential2D", "generated/examples.convection.exponential2D.cylindricalMesh2D", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform", "generated/examples.convection.exponential2D.mesh2D", "generated/examples.convection.exponential2D.tri2D", "generated/examples.convection.peclet", "generated/examples.convection.powerLaw1D", "generated/examples.convection.powerLaw1D.mesh1D", "generated/examples.convection.powerLaw1D.tri2D", "generated/examples.convection.robin", "generated/examples.convection.source", "generated/examples.convection.test", "generated/examples.diffusion", "generated/examples.diffusion.anisotropy", "generated/examples.diffusion.circle", "generated/examples.diffusion.circleQuad", "generated/examples.diffusion.coupled", "generated/examples.diffusion.electrostatics", "generated/examples.diffusion.explicit", "generated/examples.diffusion.explicit.mesh1D", "generated/examples.diffusion.explicit.mixedelement", "generated/examples.diffusion.explicit.test", "generated/examples.diffusion.explicit.tri2D", "generated/examples.diffusion.mesh1D", "generated/examples.diffusion.mesh20x20", "generated/examples.diffusion.mesh20x20Coupled", "generated/examples.diffusion.nthOrder", "generated/examples.diffusion.nthOrder.input4thOrder1D", "generated/examples.diffusion.nthOrder.input4thOrder_line", "generated/examples.diffusion.nthOrder.test", "generated/examples.diffusion.steadyState", "generated/examples.diffusion.steadyState.mesh1D", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput", "generated/examples.diffusion.steadyState.mesh20x20", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput", "generated/examples.diffusion.steadyState.mesh20x20.isotropy", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput", "generated/examples.diffusion.steadyState.mesh50x50", "generated/examples.diffusion.steadyState.mesh50x50.input", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput", "generated/examples.diffusion.steadyState.otherMeshes", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput", "generated/examples.diffusion.steadyState.otherMeshes.prism", "generated/examples.diffusion.steadyState.test", "generated/examples.diffusion.test", "generated/examples.diffusion.variable", "generated/examples.elphf", "generated/examples.elphf.diffusion", "generated/examples.elphf.diffusion.mesh1D", "generated/examples.elphf.diffusion.mesh1Ddimensional", "generated/examples.elphf.diffusion.mesh2D", "generated/examples.elphf.input", "generated/examples.elphf.phase", "generated/examples.elphf.phaseDiffusion", "generated/examples.elphf.poisson", "generated/examples.elphf.test", "generated/examples.flow", "generated/examples.flow.stokesCavity", "generated/examples.flow.test", "generated/examples.levelSet", "generated/examples.levelSet.advection", "generated/examples.levelSet.advection.circle", "generated/examples.levelSet.advection.mesh1D", "generated/examples.levelSet.advection.test", "generated/examples.levelSet.advection.trench", "generated/examples.levelSet.distanceFunction", "generated/examples.levelSet.distanceFunction.circle", "generated/examples.levelSet.distanceFunction.interior", "generated/examples.levelSet.distanceFunction.mesh1D", "generated/examples.levelSet.distanceFunction.square", "generated/examples.levelSet.distanceFunction.test", "generated/examples.levelSet.electroChem", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation", "generated/examples.levelSet.electroChem.adsorption", "generated/examples.levelSet.electroChem.gapFillDistanceVariable", "generated/examples.levelSet.electroChem.gapFillMesh", "generated/examples.levelSet.electroChem.gold", "generated/examples.levelSet.electroChem.howToWriteAScript", "generated/examples.levelSet.electroChem.leveler", "generated/examples.levelSet.electroChem.lines", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation", "generated/examples.levelSet.electroChem.simpleTrenchSystem", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "generated/examples.levelSet.electroChem.test", "generated/examples.levelSet.electroChem.trenchMesh", "generated/examples.levelSet.surfactant", "generated/examples.levelSet.surfactant.circle", "generated/examples.levelSet.surfactant.expandingCircle", "generated/examples.levelSet.surfactant.square", "generated/examples.levelSet.surfactant.test", "generated/examples.levelSet.test", "generated/examples.meshing", "generated/examples.meshing.gmshRefinement", "generated/examples.meshing.inputGrid2D", "generated/examples.meshing.sphere", "generated/examples.meshing.test", "generated/examples.parallel", "generated/examples.phase", "generated/examples.phase.anisotropy", "generated/examples.phase.anisotropyOLD", "generated/examples.phase.binary", "generated/examples.phase.binaryCoupled", "generated/examples.phase.impingement", "generated/examples.phase.impingement.mesh20x20", "generated/examples.phase.impingement.mesh40x1", "generated/examples.phase.impingement.test", "generated/examples.phase.missOrientation", "generated/examples.phase.missOrientation.circle", "generated/examples.phase.missOrientation.mesh1D", "generated/examples.phase.missOrientation.modCircle", "generated/examples.phase.missOrientation.test", "generated/examples.phase.phaseViewer", "generated/examples.phase.polyxtal", "generated/examples.phase.polyxtalCoupled", "generated/examples.phase.quaternary", "generated/examples.phase.simple", "generated/examples.phase.symmetry", "generated/examples.phase.test", "generated/examples.reactiveWetting", "generated/examples.reactiveWetting.liquidVapor1D", "generated/examples.reactiveWetting.liquidVapor2D", "generated/examples.reactiveWetting.test", "generated/examples.riemann", "generated/examples.riemann.acoustics", "generated/examples.riemann.test", "generated/examples.test", "generated/examples.updating", "generated/examples.updating.update0_1to1_0", "generated/examples.updating.update1_0to2_0", "generated/examples.updating.update2_0to3_0", "generated/fipy", "generated/fipy.boundaryConditions", "generated/fipy.boundaryConditions.boundaryCondition", "generated/fipy.boundaryConditions.constraint", "generated/fipy.boundaryConditions.fixedFlux", "generated/fipy.boundaryConditions.fixedValue", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition", "generated/fipy.boundaryConditions.test", "generated/fipy.matrices", "generated/fipy.matrices.offsetSparseMatrix", "generated/fipy.matrices.petscMatrix", "generated/fipy.matrices.scipyMatrix", "generated/fipy.matrices.sparseMatrix", "generated/fipy.matrices.test", "generated/fipy.matrices.trilinosMatrix", "generated/fipy.meshes", "generated/fipy.meshes.abstractMesh", "generated/fipy.meshes.builders", "generated/fipy.meshes.builders.abstractGridBuilder", "generated/fipy.meshes.builders.grid1DBuilder", "generated/fipy.meshes.builders.grid2DBuilder", "generated/fipy.meshes.builders.grid3DBuilder", "generated/fipy.meshes.builders.periodicGrid1DBuilder", "generated/fipy.meshes.builders.utilityClasses", "generated/fipy.meshes.cylindricalGrid1D", "generated/fipy.meshes.cylindricalGrid2D", "generated/fipy.meshes.cylindricalNonUniformGrid1D", "generated/fipy.meshes.cylindricalNonUniformGrid2D", "generated/fipy.meshes.cylindricalUniformGrid1D", "generated/fipy.meshes.cylindricalUniformGrid2D", "generated/fipy.meshes.factoryMeshes", "generated/fipy.meshes.gmshMesh", "generated/fipy.meshes.grid1D", "generated/fipy.meshes.grid2D", "generated/fipy.meshes.grid3D", "generated/fipy.meshes.mesh", "generated/fipy.meshes.mesh1D", "generated/fipy.meshes.mesh2D", "generated/fipy.meshes.nonUniformGrid1D", "generated/fipy.meshes.nonUniformGrid2D", "generated/fipy.meshes.nonUniformGrid3D", "generated/fipy.meshes.periodicGrid1D", "generated/fipy.meshes.periodicGrid2D", "generated/fipy.meshes.periodicGrid3D", "generated/fipy.meshes.representations", "generated/fipy.meshes.representations.abstractRepresentation", "generated/fipy.meshes.representations.gridRepresentation", "generated/fipy.meshes.representations.meshRepresentation", "generated/fipy.meshes.skewedGrid2D", "generated/fipy.meshes.sphericalNonUniformGrid1D", "generated/fipy.meshes.sphericalUniformGrid1D", "generated/fipy.meshes.test", "generated/fipy.meshes.topologies", "generated/fipy.meshes.topologies.abstractTopology", "generated/fipy.meshes.topologies.gridTopology", "generated/fipy.meshes.topologies.meshTopology", "generated/fipy.meshes.tri2D", "generated/fipy.meshes.uniformGrid", "generated/fipy.meshes.uniformGrid1D", "generated/fipy.meshes.uniformGrid2D", "generated/fipy.meshes.uniformGrid3D", "generated/fipy.solvers", "generated/fipy.solvers.convergence", "generated/fipy.solvers.petsc", "generated/fipy.solvers.petsc.comms", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper", "generated/fipy.solvers.petsc.comms.petscCommWrapper", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper", "generated/fipy.solvers.petsc.dummySolver", "generated/fipy.solvers.petsc.linearBicgSolver", "generated/fipy.solvers.petsc.linearCGSSolver", "generated/fipy.solvers.petsc.linearCGSolver", "generated/fipy.solvers.petsc.linearGMRESSolver", "generated/fipy.solvers.petsc.linearLUSolver", "generated/fipy.solvers.petsc.petscConvergence", "generated/fipy.solvers.petsc.petscKrylovSolver", "generated/fipy.solvers.petsc.petscSolver", "generated/fipy.solvers.petsc.preconditioners", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner", "generated/fipy.solvers.petsc.preconditioners.hyprePreconditioner", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner", "generated/fipy.solvers.preconditioner", "generated/fipy.solvers.pyAMG", "generated/fipy.solvers.pyAMG.preconditioners", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "generated/fipy.solvers.pyamgx", "generated/fipy.solvers.pyamgx.aggregationAMGSolver", "generated/fipy.solvers.pyamgx.classicalAMGSolver", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver", "generated/fipy.solvers.pyamgx.linearCGSolver", "generated/fipy.solvers.pyamgx.linearFGMRESSolver", "generated/fipy.solvers.pyamgx.linearGMRESSolver", "generated/fipy.solvers.pyamgx.linearLUSolver", "generated/fipy.solvers.pyamgx.preconditioners", "generated/fipy.solvers.pyamgx.pyAMGXSolver", "generated/fipy.solvers.pyamgx.pyamgxConvergence", "generated/fipy.solvers.pyamgx.smoothers", "generated/fipy.solvers.scipy", "generated/fipy.solvers.scipy.linearBicgstabSolver", "generated/fipy.solvers.scipy.linearCGSSolver", "generated/fipy.solvers.scipy.linearCGSolver", "generated/fipy.solvers.scipy.linearGMRESSolver", "generated/fipy.solvers.scipy.linearLUSolver", "generated/fipy.solvers.scipy.preconditioners", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner", "generated/fipy.solvers.scipy.scipyConvergence", "generated/fipy.solvers.scipy.scipyKrylovSolver", "generated/fipy.solvers.scipy.scipySolver", "generated/fipy.solvers.solver", "generated/fipy.solvers.test", "generated/fipy.solvers.trilinos", "generated/fipy.solvers.trilinos.aztecConvergence", "generated/fipy.solvers.trilinos.comms", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "generated/fipy.solvers.trilinos.linearBicgstabSolver", "generated/fipy.solvers.trilinos.linearCGSSolver", "generated/fipy.solvers.trilinos.linearCGSolver", "generated/fipy.solvers.trilinos.linearGMRESSolver", "generated/fipy.solvers.trilinos.linearLUSolver", "generated/fipy.solvers.trilinos.preconditioners", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver", "generated/fipy.solvers.trilinos.trilinosMLTest", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver", "generated/fipy.solvers.trilinos.trilinosSolver", "generated/fipy.steppers", "generated/fipy.steppers.pidStepper", "generated/fipy.steppers.pseudoRKQSStepper", "generated/fipy.steppers.stepper", "generated/fipy.terms", "generated/fipy.terms.abstractBinaryTerm", "generated/fipy.terms.abstractConvectionTerm", "generated/fipy.terms.abstractDiffusionTerm", "generated/fipy.terms.abstractUpwindConvectionTerm", "generated/fipy.terms.advectionTerm", "generated/fipy.terms.asymmetricConvectionTerm", "generated/fipy.terms.binaryTerm", "generated/fipy.terms.cellTerm", "generated/fipy.terms.centralDiffConvectionTerm", "generated/fipy.terms.coupledBinaryTerm", "generated/fipy.terms.diffusionTerm", "generated/fipy.terms.diffusionTermCorrection", "generated/fipy.terms.diffusionTermNoCorrection", "generated/fipy.terms.explicitDiffusionTerm", "generated/fipy.terms.explicitSourceTerm", "generated/fipy.terms.explicitUpwindConvectionTerm", "generated/fipy.terms.exponentialConvectionTerm", "generated/fipy.terms.faceTerm", "generated/fipy.terms.firstOrderAdvectionTerm", "generated/fipy.terms.hybridConvectionTerm", "generated/fipy.terms.implicitDiffusionTerm", "generated/fipy.terms.implicitSourceTerm", "generated/fipy.terms.nonDiffusionTerm", "generated/fipy.terms.powerLawConvectionTerm", "generated/fipy.terms.residualTerm", "generated/fipy.terms.sourceTerm", "generated/fipy.terms.term", "generated/fipy.terms.test", "generated/fipy.terms.transientTerm", "generated/fipy.terms.unaryTerm", "generated/fipy.terms.upwindConvectionTerm", "generated/fipy.terms.vanLeerConvectionTerm", "generated/fipy.testFiPy", "generated/fipy.tests", "generated/fipy.tests.doctestPlus", "generated/fipy.tests.lateImportTest", "generated/fipy.tests.test", "generated/fipy.tests.testProgram", "generated/fipy.tools", "generated/fipy.tools.changelog", "generated/fipy.tools.comms", "generated/fipy.tools.comms.commWrapper", "generated/fipy.tools.comms.dummyComm", "generated/fipy.tools.copy_script", "generated/fipy.tools.debug", "generated/fipy.tools.decorators", "generated/fipy.tools.dimensions", "generated/fipy.tools.dimensions.DictWithDefault", "generated/fipy.tools.dimensions.NumberDict", "generated/fipy.tools.dimensions.physicalField", "generated/fipy.tools.dump", "generated/fipy.tools.inline", "generated/fipy.tools.logging", "generated/fipy.tools.logging.environment", "generated/fipy.tools.numerix", "generated/fipy.tools.parser", "generated/fipy.tools.sharedtempfile", "generated/fipy.tools.test", "generated/fipy.tools.timer", "generated/fipy.tools.vector", "generated/fipy.variables", "generated/fipy.variables.addOverFacesVariable", "generated/fipy.variables.arithmeticCellToFaceVariable", "generated/fipy.variables.betaNoiseVariable", "generated/fipy.variables.binaryOperatorVariable", "generated/fipy.variables.cellToFaceVariable", "generated/fipy.variables.cellVariable", "generated/fipy.variables.constant", "generated/fipy.variables.constraintMask", "generated/fipy.variables.coupledCellVariable", "generated/fipy.variables.distanceVariable", "generated/fipy.variables.exponentialNoiseVariable", "generated/fipy.variables.faceGradContributionsVariable", "generated/fipy.variables.faceGradVariable", "generated/fipy.variables.faceVariable", "generated/fipy.variables.gammaNoiseVariable", "generated/fipy.variables.gaussCellGradVariable", "generated/fipy.variables.gaussianNoiseVariable", "generated/fipy.variables.harmonicCellToFaceVariable", "generated/fipy.variables.histogramVariable", "generated/fipy.variables.interfaceAreaVariable", "generated/fipy.variables.interfaceFlagVariable", "generated/fipy.variables.leastSquaresCellGradVariable", "generated/fipy.variables.levelSetDiffusionVariable", "generated/fipy.variables.meshVariable", "generated/fipy.variables.minmodCellToFaceVariable", "generated/fipy.variables.modCellGradVariable", "generated/fipy.variables.modCellToFaceVariable", "generated/fipy.variables.modFaceGradVariable", "generated/fipy.variables.modPhysicalField", "generated/fipy.variables.modularVariable", "generated/fipy.variables.noiseVariable", "generated/fipy.variables.operatorVariable", "generated/fipy.variables.scharfetterGummelFaceVariable", "generated/fipy.variables.surfactantConvectionVariable", "generated/fipy.variables.surfactantVariable", "generated/fipy.variables.test", "generated/fipy.variables.unaryOperatorVariable", "generated/fipy.variables.uniformNoiseVariable", "generated/fipy.variables.variable", "generated/fipy.viewers", "generated/fipy.viewers.matplotlibViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "generated/fipy.viewers.matplotlibViewer.test", "generated/fipy.viewers.mayaviViewer", "generated/fipy.viewers.mayaviViewer.mayaviClient", "generated/fipy.viewers.mayaviViewer.mayaviDaemon", "generated/fipy.viewers.mayaviViewer.test", "generated/fipy.viewers.multiViewer", "generated/fipy.viewers.test", "generated/fipy.viewers.testinteractive", "generated/fipy.viewers.tsvViewer", "generated/fipy.viewers.viewer", "generated/fipy.viewers.vtkViewer", "generated/fipy.viewers.vtkViewer.test", "generated/fipy.viewers.vtkViewer.vtkCellViewer", "generated/fipy.viewers.vtkViewer.vtkFaceViewer", "generated/fipy.viewers.vtkViewer.vtkViewer", "glossary", "introduction", "manual", "numerical/discret", "numerical/equation", "numerical/index", "numerical/scheme", "references", "tutorial/generated/package", "tutorial/generated/package.subpackage", "tutorial/generated/package.subpackage.base", "tutorial/generated/package.subpackage.object", "tutorial/index"], "filenames": ["ADMINISTRATA.rst", "API.rst", "CHANGELOG.rst", "CONTACT.rst", "CREDITS.rst", "DISCLAIMER.rst", "EFFICIENCY.rst", "EXAMPLES.rst", "FAQ.rst", "GIT.rst", "GUIDELINES.rst", "INSTALLATION.rst", "LICENSE.rst", "NIX-README.rst", "PUBLICATIONS.rst", "README.rst", "SOLVERS.rst", "USAGE.rst", "VIEWERS.rst", "VKML.rst", "contents.rst", "design.rst", "external_definitions.rst", "generated/examples.rst", "generated/examples.benchmarking.rst", "generated/examples.benchmarking.benchmarker.rst", "generated/examples.benchmarking.size.rst", "generated/examples.benchmarking.steps.rst", "generated/examples.benchmarking.utils.rst", "generated/examples.benchmarking.versions.rst", "generated/examples.cahnHilliard.rst", "generated/examples.cahnHilliard.mesh2D.rst", "generated/examples.cahnHilliard.mesh2DCoupled.rst", "generated/examples.cahnHilliard.mesh3D.rst", "generated/examples.cahnHilliard.sphere.rst", "generated/examples.cahnHilliard.sphereDaemon.rst", "generated/examples.cahnHilliard.tanh1D.rst", "generated/examples.cahnHilliard.test.rst", "generated/examples.chemotaxis.rst", "generated/examples.chemotaxis.input.rst", "generated/examples.chemotaxis.input2D.rst", "generated/examples.chemotaxis.parameters.rst", "generated/examples.chemotaxis.test.rst", "generated/examples.convection.rst", "generated/examples.convection.advection.rst", "generated/examples.convection.advection.explicitUpwind.rst", "generated/examples.convection.advection.implicitUpwind.rst", "generated/examples.convection.advection.vanLeerUpwind.rst", "generated/examples.convection.exponential1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform.rst", "generated/examples.convection.exponential1D.mesh1D.rst", "generated/examples.convection.exponential1D.tri2D.rst", "generated/examples.convection.exponential1DBack.rst", "generated/examples.convection.exponential1DBack.mesh1D.rst", "generated/examples.convection.exponential1DSource.rst", "generated/examples.convection.exponential1DSource.mesh1D.rst", "generated/examples.convection.exponential1DSource.tri2D.rst", "generated/examples.convection.exponential2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform.rst", "generated/examples.convection.exponential2D.mesh2D.rst", "generated/examples.convection.exponential2D.tri2D.rst", "generated/examples.convection.peclet.rst", "generated/examples.convection.powerLaw1D.rst", "generated/examples.convection.powerLaw1D.mesh1D.rst", "generated/examples.convection.powerLaw1D.tri2D.rst", "generated/examples.convection.robin.rst", "generated/examples.convection.source.rst", "generated/examples.convection.test.rst", "generated/examples.diffusion.rst", "generated/examples.diffusion.anisotropy.rst", "generated/examples.diffusion.circle.rst", "generated/examples.diffusion.circleQuad.rst", "generated/examples.diffusion.coupled.rst", "generated/examples.diffusion.electrostatics.rst", "generated/examples.diffusion.explicit.rst", "generated/examples.diffusion.explicit.mesh1D.rst", "generated/examples.diffusion.explicit.mixedelement.rst", "generated/examples.diffusion.explicit.test.rst", "generated/examples.diffusion.explicit.tri2D.rst", "generated/examples.diffusion.mesh1D.rst", "generated/examples.diffusion.mesh20x20.rst", "generated/examples.diffusion.mesh20x20Coupled.rst", "generated/examples.diffusion.nthOrder.rst", "generated/examples.diffusion.nthOrder.input4thOrder1D.rst", "generated/examples.diffusion.nthOrder.input4thOrder_line.rst", "generated/examples.diffusion.nthOrder.test.rst", "generated/examples.diffusion.steadyState.rst", "generated/examples.diffusion.steadyState.mesh1D.rst", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic.rst", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.rst", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.isotropy.rst", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput.rst", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror.rst", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh50x50.rst", "generated/examples.diffusion.steadyState.mesh50x50.input.rst", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.rst", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem.rst", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.prism.rst", "generated/examples.diffusion.steadyState.test.rst", "generated/examples.diffusion.test.rst", "generated/examples.diffusion.variable.rst", "generated/examples.elphf.rst", "generated/examples.elphf.diffusion.rst", "generated/examples.elphf.diffusion.mesh1D.rst", "generated/examples.elphf.diffusion.mesh1Ddimensional.rst", "generated/examples.elphf.diffusion.mesh2D.rst", "generated/examples.elphf.input.rst", "generated/examples.elphf.phase.rst", "generated/examples.elphf.phaseDiffusion.rst", "generated/examples.elphf.poisson.rst", "generated/examples.elphf.test.rst", "generated/examples.flow.rst", "generated/examples.flow.stokesCavity.rst", "generated/examples.flow.test.rst", "generated/examples.levelSet.rst", "generated/examples.levelSet.advection.rst", "generated/examples.levelSet.advection.circle.rst", "generated/examples.levelSet.advection.mesh1D.rst", "generated/examples.levelSet.advection.test.rst", "generated/examples.levelSet.advection.trench.rst", "generated/examples.levelSet.distanceFunction.rst", "generated/examples.levelSet.distanceFunction.circle.rst", "generated/examples.levelSet.distanceFunction.interior.rst", "generated/examples.levelSet.distanceFunction.mesh1D.rst", "generated/examples.levelSet.distanceFunction.square.rst", "generated/examples.levelSet.distanceFunction.test.rst", "generated/examples.levelSet.electroChem.rst", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation.rst", "generated/examples.levelSet.electroChem.adsorption.rst", "generated/examples.levelSet.electroChem.gapFillDistanceVariable.rst", "generated/examples.levelSet.electroChem.gapFillMesh.rst", "generated/examples.levelSet.electroChem.gold.rst", "generated/examples.levelSet.electroChem.howToWriteAScript.rst", "generated/examples.levelSet.electroChem.leveler.rst", "generated/examples.levelSet.electroChem.lines.rst", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer.rst", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer.rst", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation.rst", "generated/examples.levelSet.electroChem.simpleTrenchSystem.rst", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation.rst", "generated/examples.levelSet.electroChem.test.rst", "generated/examples.levelSet.electroChem.trenchMesh.rst", "generated/examples.levelSet.surfactant.rst", "generated/examples.levelSet.surfactant.circle.rst", "generated/examples.levelSet.surfactant.expandingCircle.rst", "generated/examples.levelSet.surfactant.square.rst", "generated/examples.levelSet.surfactant.test.rst", "generated/examples.levelSet.test.rst", "generated/examples.meshing.rst", "generated/examples.meshing.gmshRefinement.rst", "generated/examples.meshing.inputGrid2D.rst", "generated/examples.meshing.sphere.rst", "generated/examples.meshing.test.rst", "generated/examples.parallel.rst", "generated/examples.phase.rst", "generated/examples.phase.anisotropy.rst", "generated/examples.phase.anisotropyOLD.rst", "generated/examples.phase.binary.rst", "generated/examples.phase.binaryCoupled.rst", "generated/examples.phase.impingement.rst", "generated/examples.phase.impingement.mesh20x20.rst", "generated/examples.phase.impingement.mesh40x1.rst", "generated/examples.phase.impingement.test.rst", "generated/examples.phase.missOrientation.rst", "generated/examples.phase.missOrientation.circle.rst", "generated/examples.phase.missOrientation.mesh1D.rst", "generated/examples.phase.missOrientation.modCircle.rst", "generated/examples.phase.missOrientation.test.rst", "generated/examples.phase.phaseViewer.rst", "generated/examples.phase.polyxtal.rst", "generated/examples.phase.polyxtalCoupled.rst", "generated/examples.phase.quaternary.rst", "generated/examples.phase.simple.rst", "generated/examples.phase.symmetry.rst", "generated/examples.phase.test.rst", "generated/examples.reactiveWetting.rst", "generated/examples.reactiveWetting.liquidVapor1D.rst", "generated/examples.reactiveWetting.liquidVapor2D.rst", "generated/examples.reactiveWetting.test.rst", "generated/examples.riemann.rst", "generated/examples.riemann.acoustics.rst", "generated/examples.riemann.test.rst", "generated/examples.test.rst", "generated/examples.updating.rst", "generated/examples.updating.update0_1to1_0.rst", "generated/examples.updating.update1_0to2_0.rst", "generated/examples.updating.update2_0to3_0.rst", "generated/fipy.rst", "generated/fipy.boundaryConditions.rst", "generated/fipy.boundaryConditions.boundaryCondition.rst", "generated/fipy.boundaryConditions.constraint.rst", "generated/fipy.boundaryConditions.fixedFlux.rst", "generated/fipy.boundaryConditions.fixedValue.rst", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition.rst", "generated/fipy.boundaryConditions.test.rst", "generated/fipy.matrices.rst", "generated/fipy.matrices.offsetSparseMatrix.rst", "generated/fipy.matrices.petscMatrix.rst", "generated/fipy.matrices.scipyMatrix.rst", "generated/fipy.matrices.sparseMatrix.rst", "generated/fipy.matrices.test.rst", "generated/fipy.matrices.trilinosMatrix.rst", "generated/fipy.meshes.rst", "generated/fipy.meshes.abstractMesh.rst", "generated/fipy.meshes.builders.rst", "generated/fipy.meshes.builders.abstractGridBuilder.rst", "generated/fipy.meshes.builders.grid1DBuilder.rst", "generated/fipy.meshes.builders.grid2DBuilder.rst", "generated/fipy.meshes.builders.grid3DBuilder.rst", "generated/fipy.meshes.builders.periodicGrid1DBuilder.rst", "generated/fipy.meshes.builders.utilityClasses.rst", "generated/fipy.meshes.cylindricalGrid1D.rst", "generated/fipy.meshes.cylindricalGrid2D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid1D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid2D.rst", "generated/fipy.meshes.cylindricalUniformGrid1D.rst", "generated/fipy.meshes.cylindricalUniformGrid2D.rst", "generated/fipy.meshes.factoryMeshes.rst", "generated/fipy.meshes.gmshMesh.rst", "generated/fipy.meshes.grid1D.rst", "generated/fipy.meshes.grid2D.rst", "generated/fipy.meshes.grid3D.rst", "generated/fipy.meshes.mesh.rst", "generated/fipy.meshes.mesh1D.rst", "generated/fipy.meshes.mesh2D.rst", "generated/fipy.meshes.nonUniformGrid1D.rst", "generated/fipy.meshes.nonUniformGrid2D.rst", "generated/fipy.meshes.nonUniformGrid3D.rst", "generated/fipy.meshes.periodicGrid1D.rst", "generated/fipy.meshes.periodicGrid2D.rst", "generated/fipy.meshes.periodicGrid3D.rst", "generated/fipy.meshes.representations.rst", "generated/fipy.meshes.representations.abstractRepresentation.rst", "generated/fipy.meshes.representations.gridRepresentation.rst", "generated/fipy.meshes.representations.meshRepresentation.rst", "generated/fipy.meshes.skewedGrid2D.rst", "generated/fipy.meshes.sphericalNonUniformGrid1D.rst", "generated/fipy.meshes.sphericalUniformGrid1D.rst", "generated/fipy.meshes.test.rst", "generated/fipy.meshes.topologies.rst", "generated/fipy.meshes.topologies.abstractTopology.rst", "generated/fipy.meshes.topologies.gridTopology.rst", "generated/fipy.meshes.topologies.meshTopology.rst", "generated/fipy.meshes.tri2D.rst", "generated/fipy.meshes.uniformGrid.rst", "generated/fipy.meshes.uniformGrid1D.rst", "generated/fipy.meshes.uniformGrid2D.rst", "generated/fipy.meshes.uniformGrid3D.rst", "generated/fipy.solvers.rst", "generated/fipy.solvers.convergence.rst", "generated/fipy.solvers.petsc.rst", "generated/fipy.solvers.petsc.comms.rst", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper.rst", "generated/fipy.solvers.petsc.comms.petscCommWrapper.rst", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper.rst", "generated/fipy.solvers.petsc.dummySolver.rst", "generated/fipy.solvers.petsc.linearBicgSolver.rst", "generated/fipy.solvers.petsc.linearCGSSolver.rst", "generated/fipy.solvers.petsc.linearCGSolver.rst", "generated/fipy.solvers.petsc.linearGMRESSolver.rst", "generated/fipy.solvers.petsc.linearLUSolver.rst", "generated/fipy.solvers.petsc.petscConvergence.rst", "generated/fipy.solvers.petsc.petscKrylovSolver.rst", "generated/fipy.solvers.petsc.petscSolver.rst", "generated/fipy.solvers.petsc.preconditioners.rst", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.hyprePreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.preconditioner.rst", "generated/fipy.solvers.pyAMG.rst", "generated/fipy.solvers.pyAMG.preconditioners.rst", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.rst", "generated/fipy.solvers.pyamgx.rst", "generated/fipy.solvers.pyamgx.aggregationAMGSolver.rst", "generated/fipy.solvers.pyamgx.classicalAMGSolver.rst", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver.rst", "generated/fipy.solvers.pyamgx.linearCGSolver.rst", "generated/fipy.solvers.pyamgx.linearFGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearLUSolver.rst", "generated/fipy.solvers.pyamgx.preconditioners.rst", "generated/fipy.solvers.pyamgx.pyAMGXSolver.rst", "generated/fipy.solvers.pyamgx.pyamgxConvergence.rst", "generated/fipy.solvers.pyamgx.smoothers.rst", "generated/fipy.solvers.scipy.rst", "generated/fipy.solvers.scipy.linearBicgstabSolver.rst", "generated/fipy.solvers.scipy.linearCGSSolver.rst", "generated/fipy.solvers.scipy.linearCGSolver.rst", "generated/fipy.solvers.scipy.linearGMRESSolver.rst", "generated/fipy.solvers.scipy.linearLUSolver.rst", "generated/fipy.solvers.scipy.preconditioners.rst", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner.rst", "generated/fipy.solvers.scipy.scipyConvergence.rst", "generated/fipy.solvers.scipy.scipyKrylovSolver.rst", "generated/fipy.solvers.scipy.scipySolver.rst", "generated/fipy.solvers.solver.rst", "generated/fipy.solvers.test.rst", "generated/fipy.solvers.trilinos.rst", "generated/fipy.solvers.trilinos.aztecConvergence.rst", "generated/fipy.solvers.trilinos.comms.rst", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.linearBicgstabSolver.rst", "generated/fipy.solvers.trilinos.linearCGSSolver.rst", "generated/fipy.solvers.trilinos.linearCGSolver.rst", "generated/fipy.solvers.trilinos.linearGMRESSolver.rst", "generated/fipy.solvers.trilinos.linearLUSolver.rst", "generated/fipy.solvers.trilinos.preconditioners.rst", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.rst", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver.rst", "generated/fipy.solvers.trilinos.trilinosMLTest.rst", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver.rst", "generated/fipy.solvers.trilinos.trilinosSolver.rst", "generated/fipy.steppers.rst", "generated/fipy.steppers.pidStepper.rst", "generated/fipy.steppers.pseudoRKQSStepper.rst", "generated/fipy.steppers.stepper.rst", "generated/fipy.terms.rst", "generated/fipy.terms.abstractBinaryTerm.rst", "generated/fipy.terms.abstractConvectionTerm.rst", "generated/fipy.terms.abstractDiffusionTerm.rst", "generated/fipy.terms.abstractUpwindConvectionTerm.rst", "generated/fipy.terms.advectionTerm.rst", "generated/fipy.terms.asymmetricConvectionTerm.rst", "generated/fipy.terms.binaryTerm.rst", "generated/fipy.terms.cellTerm.rst", "generated/fipy.terms.centralDiffConvectionTerm.rst", "generated/fipy.terms.coupledBinaryTerm.rst", "generated/fipy.terms.diffusionTerm.rst", "generated/fipy.terms.diffusionTermCorrection.rst", "generated/fipy.terms.diffusionTermNoCorrection.rst", "generated/fipy.terms.explicitDiffusionTerm.rst", "generated/fipy.terms.explicitSourceTerm.rst", "generated/fipy.terms.explicitUpwindConvectionTerm.rst", "generated/fipy.terms.exponentialConvectionTerm.rst", "generated/fipy.terms.faceTerm.rst", "generated/fipy.terms.firstOrderAdvectionTerm.rst", "generated/fipy.terms.hybridConvectionTerm.rst", "generated/fipy.terms.implicitDiffusionTerm.rst", "generated/fipy.terms.implicitSourceTerm.rst", "generated/fipy.terms.nonDiffusionTerm.rst", "generated/fipy.terms.powerLawConvectionTerm.rst", "generated/fipy.terms.residualTerm.rst", "generated/fipy.terms.sourceTerm.rst", "generated/fipy.terms.term.rst", "generated/fipy.terms.test.rst", "generated/fipy.terms.transientTerm.rst", "generated/fipy.terms.unaryTerm.rst", "generated/fipy.terms.upwindConvectionTerm.rst", "generated/fipy.terms.vanLeerConvectionTerm.rst", "generated/fipy.testFiPy.rst", "generated/fipy.tests.rst", "generated/fipy.tests.doctestPlus.rst", "generated/fipy.tests.lateImportTest.rst", "generated/fipy.tests.test.rst", "generated/fipy.tests.testProgram.rst", "generated/fipy.tools.rst", "generated/fipy.tools.changelog.rst", "generated/fipy.tools.comms.rst", "generated/fipy.tools.comms.commWrapper.rst", "generated/fipy.tools.comms.dummyComm.rst", "generated/fipy.tools.copy_script.rst", "generated/fipy.tools.debug.rst", "generated/fipy.tools.decorators.rst", "generated/fipy.tools.dimensions.rst", "generated/fipy.tools.dimensions.DictWithDefault.rst", "generated/fipy.tools.dimensions.NumberDict.rst", "generated/fipy.tools.dimensions.physicalField.rst", "generated/fipy.tools.dump.rst", "generated/fipy.tools.inline.rst", "generated/fipy.tools.logging.rst", "generated/fipy.tools.logging.environment.rst", "generated/fipy.tools.numerix.rst", "generated/fipy.tools.parser.rst", "generated/fipy.tools.sharedtempfile.rst", "generated/fipy.tools.test.rst", "generated/fipy.tools.timer.rst", "generated/fipy.tools.vector.rst", "generated/fipy.variables.rst", "generated/fipy.variables.addOverFacesVariable.rst", "generated/fipy.variables.arithmeticCellToFaceVariable.rst", "generated/fipy.variables.betaNoiseVariable.rst", "generated/fipy.variables.binaryOperatorVariable.rst", "generated/fipy.variables.cellToFaceVariable.rst", "generated/fipy.variables.cellVariable.rst", "generated/fipy.variables.constant.rst", "generated/fipy.variables.constraintMask.rst", "generated/fipy.variables.coupledCellVariable.rst", "generated/fipy.variables.distanceVariable.rst", "generated/fipy.variables.exponentialNoiseVariable.rst", "generated/fipy.variables.faceGradContributionsVariable.rst", "generated/fipy.variables.faceGradVariable.rst", "generated/fipy.variables.faceVariable.rst", "generated/fipy.variables.gammaNoiseVariable.rst", "generated/fipy.variables.gaussCellGradVariable.rst", "generated/fipy.variables.gaussianNoiseVariable.rst", "generated/fipy.variables.harmonicCellToFaceVariable.rst", "generated/fipy.variables.histogramVariable.rst", "generated/fipy.variables.interfaceAreaVariable.rst", "generated/fipy.variables.interfaceFlagVariable.rst", "generated/fipy.variables.leastSquaresCellGradVariable.rst", "generated/fipy.variables.levelSetDiffusionVariable.rst", "generated/fipy.variables.meshVariable.rst", "generated/fipy.variables.minmodCellToFaceVariable.rst", "generated/fipy.variables.modCellGradVariable.rst", "generated/fipy.variables.modCellToFaceVariable.rst", "generated/fipy.variables.modFaceGradVariable.rst", "generated/fipy.variables.modPhysicalField.rst", "generated/fipy.variables.modularVariable.rst", "generated/fipy.variables.noiseVariable.rst", "generated/fipy.variables.operatorVariable.rst", "generated/fipy.variables.scharfetterGummelFaceVariable.rst", "generated/fipy.variables.surfactantConvectionVariable.rst", "generated/fipy.variables.surfactantVariable.rst", "generated/fipy.variables.test.rst", "generated/fipy.variables.unaryOperatorVariable.rst", "generated/fipy.variables.uniformNoiseVariable.rst", "generated/fipy.variables.variable.rst", "generated/fipy.viewers.rst", "generated/fipy.viewers.matplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer.rst", "generated/fipy.viewers.matplotlibViewer.test.rst", "generated/fipy.viewers.mayaviViewer.rst", "generated/fipy.viewers.mayaviViewer.mayaviClient.rst", "generated/fipy.viewers.mayaviViewer.mayaviDaemon.rst", "generated/fipy.viewers.mayaviViewer.test.rst", "generated/fipy.viewers.multiViewer.rst", "generated/fipy.viewers.test.rst", "generated/fipy.viewers.testinteractive.rst", "generated/fipy.viewers.tsvViewer.rst", "generated/fipy.viewers.viewer.rst", "generated/fipy.viewers.vtkViewer.rst", "generated/fipy.viewers.vtkViewer.test.rst", "generated/fipy.viewers.vtkViewer.vtkCellViewer.rst", "generated/fipy.viewers.vtkViewer.vtkFaceViewer.rst", "generated/fipy.viewers.vtkViewer.vtkViewer.rst", "glossary.rst", "introduction.rst", "manual.rst", "numerical/discret.rst", "numerical/equation.rst", "numerical/index.rst", "numerical/scheme.rst", "references.rst", "tutorial/generated/package.rst", "tutorial/generated/package.subpackage.rst", "tutorial/generated/package.subpackage.base.rst", "tutorial/generated/package.subpackage.object.rst", "tutorial/index.rst"], "titles": ["Git practices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fipy</span></code> Package Documentation", "Change Log", "Contact", "Contributors", "Disclaimer", "Efficiency", "Examples", "Frequently Asked Questions", "Git usage", "Development Guidelines", "Installation", "Terms of Use", "Nix Installation", "Publications", "Overview", "Solvers", "Using FiPy", "Viewers", "Virtual Kinetics of Materials Laboratory", "FiPy Contents", "Design and Implementation", "External Command-line Flags", "examples", "examples.benchmarking", "examples.benchmarking.benchmarker", "examples.benchmarking.size", "examples.benchmarking.steps", "examples.benchmarking.utils", "examples.benchmarking.versions", "examples.cahnHilliard", "examples.cahnHilliard.mesh2D", "examples.cahnHilliard.mesh2DCoupled", "examples.cahnHilliard.mesh3D", "examples.cahnHilliard.sphere", "examples.cahnHilliard.sphereDaemon", "examples.cahnHilliard.tanh1D", "examples.cahnHilliard.test", "examples.chemotaxis", "examples.chemotaxis.input", "examples.chemotaxis.input2D", "examples.chemotaxis.parameters", "examples.chemotaxis.test", "examples.convection", "examples.convection.advection", "examples.convection.advection.explicitUpwind", "examples.convection.advection.implicitUpwind", "examples.convection.advection.vanLeerUpwind", "examples.convection.exponential1D", "examples.convection.exponential1D.cylindricalMesh1D", "examples.convection.exponential1D.cylindricalMesh1DNonUniform", "examples.convection.exponential1D.mesh1D", "examples.convection.exponential1D.tri2D", "examples.convection.exponential1DBack", "examples.convection.exponential1DBack.mesh1D", "examples.convection.exponential1DSource", "examples.convection.exponential1DSource.mesh1D", "examples.convection.exponential1DSource.tri2D", "examples.convection.exponential2D", "examples.convection.exponential2D.cylindricalMesh2D", "examples.convection.exponential2D.cylindricalMesh2DNonUniform", "examples.convection.exponential2D.mesh2D", "examples.convection.exponential2D.tri2D", "examples.convection.peclet", "examples.convection.powerLaw1D", "examples.convection.powerLaw1D.mesh1D", "examples.convection.powerLaw1D.tri2D", "examples.convection.robin", "examples.convection.source", "examples.convection.test", "examples.diffusion", "examples.diffusion.anisotropy", "examples.diffusion.circle", "examples.diffusion.circleQuad", "examples.diffusion.coupled", "examples.diffusion.electrostatics", "examples.diffusion.explicit", "examples.diffusion.explicit.mesh1D", "examples.diffusion.explicit.mixedelement", "examples.diffusion.explicit.test", "examples.diffusion.explicit.tri2D", "examples.diffusion.mesh1D", "examples.diffusion.mesh20x20", "examples.diffusion.mesh20x20Coupled", "examples.diffusion.nthOrder", "examples.diffusion.nthOrder.input4thOrder1D", "examples.diffusion.nthOrder.input4thOrder_line", "examples.diffusion.nthOrder.test", "examples.diffusion.steadyState", "examples.diffusion.steadyState.mesh1D", "examples.diffusion.steadyState.mesh1D.inputPeriodic", "examples.diffusion.steadyState.mesh1D.tri2Dinput", "examples.diffusion.steadyState.mesh20x20", "examples.diffusion.steadyState.mesh20x20.gmshinput", "examples.diffusion.steadyState.mesh20x20.isotropy", "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "examples.diffusion.steadyState.mesh20x20.orthoerror", "examples.diffusion.steadyState.mesh20x20.tri2Dinput", "examples.diffusion.steadyState.mesh50x50", "examples.diffusion.steadyState.mesh50x50.input", "examples.diffusion.steadyState.mesh50x50.tri2Dinput", "examples.diffusion.steadyState.otherMeshes", "examples.diffusion.steadyState.otherMeshes.cubicalProblem", "examples.diffusion.steadyState.otherMeshes.grid3Dinput", "examples.diffusion.steadyState.otherMeshes.prism", "examples.diffusion.steadyState.test", "examples.diffusion.test", "examples.diffusion.variable", "examples.elphf", "examples.elphf.diffusion", "examples.elphf.diffusion.mesh1D", "examples.elphf.diffusion.mesh1Ddimensional", "examples.elphf.diffusion.mesh2D", "examples.elphf.input", "examples.elphf.phase", "examples.elphf.phaseDiffusion", "examples.elphf.poisson", "examples.elphf.test", "examples.flow", "examples.flow.stokesCavity", "examples.flow.test", "examples.levelSet", "examples.levelSet.advection", "examples.levelSet.advection.circle", "examples.levelSet.advection.mesh1D", "examples.levelSet.advection.test", "examples.levelSet.advection.trench", "examples.levelSet.distanceFunction", "examples.levelSet.distanceFunction.circle", "examples.levelSet.distanceFunction.interior", "examples.levelSet.distanceFunction.mesh1D", "examples.levelSet.distanceFunction.square", "examples.levelSet.distanceFunction.test", "examples.levelSet.electroChem", "examples.levelSet.electroChem.adsorbingSurfactantEquation", "examples.levelSet.electroChem.adsorption", "examples.levelSet.electroChem.gapFillDistanceVariable", "examples.levelSet.electroChem.gapFillMesh", "examples.levelSet.electroChem.gold", "examples.levelSet.electroChem.howToWriteAScript", "examples.levelSet.electroChem.leveler", "examples.levelSet.electroChem.lines", "examples.levelSet.electroChem.matplotlibSurfactantViewer", "examples.levelSet.electroChem.mayaviSurfactantViewer", "examples.levelSet.electroChem.metalIonDiffusionEquation", "examples.levelSet.electroChem.simpleTrenchSystem", "examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "examples.levelSet.electroChem.test", "examples.levelSet.electroChem.trenchMesh", "examples.levelSet.surfactant", "examples.levelSet.surfactant.circle", "examples.levelSet.surfactant.expandingCircle", "examples.levelSet.surfactant.square", "examples.levelSet.surfactant.test", "examples.levelSet.test", "examples.meshing", "examples.meshing.gmshRefinement", "examples.meshing.inputGrid2D", "examples.meshing.sphere", "examples.meshing.test", "examples.parallel", "examples.phase", "examples.phase.anisotropy", "examples.phase.anisotropyOLD", "examples.phase.binary", "examples.phase.binaryCoupled", "examples.phase.impingement", "examples.phase.impingement.mesh20x20", "examples.phase.impingement.mesh40x1", "examples.phase.impingement.test", "examples.phase.missOrientation", "examples.phase.missOrientation.circle", "examples.phase.missOrientation.mesh1D", "examples.phase.missOrientation.modCircle", "examples.phase.missOrientation.test", "examples.phase.phaseViewer", "examples.phase.polyxtal", "examples.phase.polyxtalCoupled", "examples.phase.quaternary", "examples.phase.simple", "examples.phase.symmetry", "examples.phase.test", "examples.reactiveWetting", "examples.reactiveWetting.liquidVapor1D", "examples.reactiveWetting.liquidVapor2D", "examples.reactiveWetting.test", "examples.riemann", "examples.riemann.acoustics", "examples.riemann.test", "examples.test", "examples.updating", "examples.updating.update0_1to1_0", "examples.updating.update1_0to2_0", "examples.updating.update2_0to3_0", "fipy", "fipy.boundaryConditions", "fipy.boundaryConditions.boundaryCondition", "fipy.boundaryConditions.constraint", "fipy.boundaryConditions.fixedFlux", "fipy.boundaryConditions.fixedValue", "fipy.boundaryConditions.nthOrderBoundaryCondition", "fipy.boundaryConditions.test", "fipy.matrices", "fipy.matrices.offsetSparseMatrix", "fipy.matrices.petscMatrix", "fipy.matrices.scipyMatrix", "fipy.matrices.sparseMatrix", "fipy.matrices.test", "fipy.matrices.trilinosMatrix", "fipy.meshes", "fipy.meshes.abstractMesh", "fipy.meshes.builders", "fipy.meshes.builders.abstractGridBuilder", "fipy.meshes.builders.grid1DBuilder", "fipy.meshes.builders.grid2DBuilder", "fipy.meshes.builders.grid3DBuilder", "fipy.meshes.builders.periodicGrid1DBuilder", "fipy.meshes.builders.utilityClasses", "fipy.meshes.cylindricalGrid1D", "fipy.meshes.cylindricalGrid2D", "fipy.meshes.cylindricalNonUniformGrid1D", "fipy.meshes.cylindricalNonUniformGrid2D", "fipy.meshes.cylindricalUniformGrid1D", "fipy.meshes.cylindricalUniformGrid2D", "fipy.meshes.factoryMeshes", "fipy.meshes.gmshMesh", "fipy.meshes.grid1D", "fipy.meshes.grid2D", "fipy.meshes.grid3D", "fipy.meshes.mesh", "fipy.meshes.mesh1D", "fipy.meshes.mesh2D", "fipy.meshes.nonUniformGrid1D", "fipy.meshes.nonUniformGrid2D", "fipy.meshes.nonUniformGrid3D", "fipy.meshes.periodicGrid1D", "fipy.meshes.periodicGrid2D", "fipy.meshes.periodicGrid3D", "fipy.meshes.representations", "fipy.meshes.representations.abstractRepresentation", "fipy.meshes.representations.gridRepresentation", "fipy.meshes.representations.meshRepresentation", "fipy.meshes.skewedGrid2D", "fipy.meshes.sphericalNonUniformGrid1D", "fipy.meshes.sphericalUniformGrid1D", "fipy.meshes.test", "fipy.meshes.topologies", "fipy.meshes.topologies.abstractTopology", "fipy.meshes.topologies.gridTopology", "fipy.meshes.topologies.meshTopology", "fipy.meshes.tri2D", "fipy.meshes.uniformGrid", "fipy.meshes.uniformGrid1D", "fipy.meshes.uniformGrid2D", "fipy.meshes.uniformGrid3D", "fipy.solvers", "fipy.solvers.convergence", "fipy.solvers.petsc", "fipy.solvers.petsc.comms", "fipy.solvers.petsc.comms.parallelPETScCommWrapper", "fipy.solvers.petsc.comms.petscCommWrapper", "fipy.solvers.petsc.comms.serialPETScCommWrapper", "fipy.solvers.petsc.dummySolver", "fipy.solvers.petsc.linearBicgSolver", "fipy.solvers.petsc.linearCGSSolver", "fipy.solvers.petsc.linearCGSolver", "fipy.solvers.petsc.linearGMRESSolver", "fipy.solvers.petsc.linearLUSolver", "fipy.solvers.petsc.petscConvergence", "fipy.solvers.petsc.petscKrylovSolver", "fipy.solvers.petsc.petscSolver", "fipy.solvers.petsc.preconditioners", "fipy.solvers.petsc.preconditioners.defaultPreconditioner", "fipy.solvers.petsc.preconditioners.hyprePreconditioner", "fipy.solvers.petsc.preconditioners.icPreconditioner", "fipy.solvers.petsc.preconditioners.iluPreconditioner", "fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "fipy.solvers.petsc.preconditioners.luPreconditioner", "fipy.solvers.petsc.preconditioners.petscPreconditioner", "fipy.solvers.petsc.preconditioners.ssorPreconditioner", "fipy.solvers.preconditioner", "fipy.solvers.pyAMG", "fipy.solvers.pyAMG.preconditioners", "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "fipy.solvers.pyamgx", "fipy.solvers.pyamgx.aggregationAMGSolver", "fipy.solvers.pyamgx.classicalAMGSolver", "fipy.solvers.pyamgx.linearBiCGStabSolver", "fipy.solvers.pyamgx.linearCGSolver", "fipy.solvers.pyamgx.linearFGMRESSolver", "fipy.solvers.pyamgx.linearGMRESSolver", "fipy.solvers.pyamgx.linearLUSolver", "fipy.solvers.pyamgx.preconditioners", "fipy.solvers.pyamgx.pyAMGXSolver", "fipy.solvers.pyamgx.pyamgxConvergence", "fipy.solvers.pyamgx.smoothers", "fipy.solvers.scipy", "fipy.solvers.scipy.linearBicgstabSolver", "fipy.solvers.scipy.linearCGSSolver", "fipy.solvers.scipy.linearCGSolver", "fipy.solvers.scipy.linearGMRESSolver", "fipy.solvers.scipy.linearLUSolver", "fipy.solvers.scipy.preconditioners", "fipy.solvers.scipy.preconditioners.iluPreconditioner", "fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "fipy.solvers.scipy.preconditioners.scipyPreconditioner", "fipy.solvers.scipy.scipyConvergence", "fipy.solvers.scipy.scipyKrylovSolver", "fipy.solvers.scipy.scipySolver", "fipy.solvers.solver", "fipy.solvers.test", "fipy.solvers.trilinos", "fipy.solvers.trilinos.aztecConvergence", "fipy.solvers.trilinos.comms", "fipy.solvers.trilinos.comms.epetraCommWrapper", "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "fipy.solvers.trilinos.linearBicgstabSolver", "fipy.solvers.trilinos.linearCGSSolver", "fipy.solvers.trilinos.linearCGSolver", "fipy.solvers.trilinos.linearGMRESSolver", "fipy.solvers.trilinos.linearLUSolver", "fipy.solvers.trilinos.preconditioners", "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "fipy.solvers.trilinos.preconditioners.icPreconditioner", "fipy.solvers.trilinos.preconditioners.iluPreconditioner", "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "fipy.solvers.trilinos.trilinosAztecOOSolver", "fipy.solvers.trilinos.trilinosMLTest", "fipy.solvers.trilinos.trilinosNonlinearSolver", "fipy.solvers.trilinos.trilinosSolver", "fipy.steppers", "fipy.steppers.pidStepper", "fipy.steppers.pseudoRKQSStepper", "fipy.steppers.stepper", "fipy.terms", "fipy.terms.abstractBinaryTerm", "fipy.terms.abstractConvectionTerm", "fipy.terms.abstractDiffusionTerm", "fipy.terms.abstractUpwindConvectionTerm", "fipy.terms.advectionTerm", "fipy.terms.asymmetricConvectionTerm", "fipy.terms.binaryTerm", "fipy.terms.cellTerm", "fipy.terms.centralDiffConvectionTerm", "fipy.terms.coupledBinaryTerm", "fipy.terms.diffusionTerm", "fipy.terms.diffusionTermCorrection", "fipy.terms.diffusionTermNoCorrection", "fipy.terms.explicitDiffusionTerm", "fipy.terms.explicitSourceTerm", "fipy.terms.explicitUpwindConvectionTerm", "fipy.terms.exponentialConvectionTerm", "fipy.terms.faceTerm", "fipy.terms.firstOrderAdvectionTerm", "fipy.terms.hybridConvectionTerm", "fipy.terms.implicitDiffusionTerm", "fipy.terms.implicitSourceTerm", "fipy.terms.nonDiffusionTerm", "fipy.terms.powerLawConvectionTerm", "fipy.terms.residualTerm", "fipy.terms.sourceTerm", "fipy.terms.term", "fipy.terms.test", "fipy.terms.transientTerm", "fipy.terms.unaryTerm", "fipy.terms.upwindConvectionTerm", "fipy.terms.vanLeerConvectionTerm", "fipy.testFiPy", "fipy.tests", "fipy.tests.doctestPlus", "fipy.tests.lateImportTest", "fipy.tests.test", "fipy.tests.testProgram", "fipy.tools", "fipy.tools.changelog", "fipy.tools.comms", "fipy.tools.comms.commWrapper", "fipy.tools.comms.dummyComm", "fipy.tools.copy_script", "fipy.tools.debug", "fipy.tools.decorators", "fipy.tools.dimensions", "fipy.tools.dimensions.DictWithDefault", "fipy.tools.dimensions.NumberDict", "fipy.tools.dimensions.physicalField", "fipy.tools.dump", "fipy.tools.inline", "fipy.tools.logging", "fipy.tools.logging.environment", "fipy.tools.numerix", "fipy.tools.parser", "fipy.tools.sharedtempfile", "fipy.tools.test", "fipy.tools.timer", "fipy.tools.vector", "fipy.variables", "fipy.variables.addOverFacesVariable", "fipy.variables.arithmeticCellToFaceVariable", "fipy.variables.betaNoiseVariable", "fipy.variables.binaryOperatorVariable", "fipy.variables.cellToFaceVariable", "fipy.variables.cellVariable", "fipy.variables.constant", "fipy.variables.constraintMask", "fipy.variables.coupledCellVariable", "fipy.variables.distanceVariable", "fipy.variables.exponentialNoiseVariable", "fipy.variables.faceGradContributionsVariable", "fipy.variables.faceGradVariable", "fipy.variables.faceVariable", "fipy.variables.gammaNoiseVariable", "fipy.variables.gaussCellGradVariable", "fipy.variables.gaussianNoiseVariable", "fipy.variables.harmonicCellToFaceVariable", "fipy.variables.histogramVariable", "fipy.variables.interfaceAreaVariable", "fipy.variables.interfaceFlagVariable", "fipy.variables.leastSquaresCellGradVariable", "fipy.variables.levelSetDiffusionVariable", "fipy.variables.meshVariable", "fipy.variables.minmodCellToFaceVariable", "fipy.variables.modCellGradVariable", "fipy.variables.modCellToFaceVariable", "fipy.variables.modFaceGradVariable", "fipy.variables.modPhysicalField", "fipy.variables.modularVariable", "fipy.variables.noiseVariable", "fipy.variables.operatorVariable", "fipy.variables.scharfetterGummelFaceVariable", "fipy.variables.surfactantConvectionVariable", "fipy.variables.surfactantVariable", "fipy.variables.test", "fipy.variables.unaryOperatorVariable", "fipy.variables.uniformNoiseVariable", "fipy.variables.variable", "fipy.viewers", "fipy.viewers.matplotlibViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "fipy.viewers.matplotlibViewer.matplotlib1DViewer", "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "fipy.viewers.matplotlibViewer.matplotlib2DViewer", "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "fipy.viewers.matplotlibViewer.test", "fipy.viewers.mayaviViewer", "fipy.viewers.mayaviViewer.mayaviClient", "fipy.viewers.mayaviViewer.mayaviDaemon", "fipy.viewers.mayaviViewer.test", "fipy.viewers.multiViewer", "fipy.viewers.test", "fipy.viewers.testinteractive", "fipy.viewers.tsvViewer", "fipy.viewers.viewer", "fipy.viewers.vtkViewer", "fipy.viewers.vtkViewer.test", "fipy.viewers.vtkViewer.vtkCellViewer", "fipy.viewers.vtkViewer.vtkFaceViewer", "fipy.viewers.vtkViewer.vtkViewer", "Glossary", "Introduction", "FiPy Manual", "Finite Volume Method", "General Conservation Equation", "Theoretical and Numerical Background", "Numerical Schemes", "References", "package", "package.subpackage", "package.subpackage.base", "package.subpackage.object", "How to Read the Modules Documentation"], "terms": {"refer": [0, 2, 8, 15, 16, 20, 21, 71, 81, 119, 179, 183, 193, 235, 250, 292, 473, 481, 482], "usag": [0, 5, 6, 20, 472], "current": [0, 2, 8, 9, 11, 13, 15, 16, 17, 19, 47, 138, 139, 140, 145, 183, 192, 194, 336, 339, 378, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "convent": [0, 20, 472, 475], "whether": [0, 8, 10, 12, 16, 19, 21, 74, 135, 140, 142, 143, 145, 175, 256, 378, 382, 393, 394, 398, 400, 414, 443, 446, 447, 448, 449, 450, 451, 452, 454, 455], "fix": [0, 8, 9, 11, 20, 72, 73, 75, 81, 90, 116, 162, 176, 177, 179, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472], "bug": [0, 2, 3, 8, 21, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "ad": [0, 2, 4, 9, 11, 17, 21, 114, 119, 167, 168, 176, 177, 179, 191, 198, 199, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 357, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 481], "featur": [0, 3, 8, 21, 119, 471, 478], "all": [0, 2, 3, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 31, 32, 75, 81, 96, 102, 106, 110, 116, 139, 142, 143, 145, 154, 157, 159, 162, 164, 165, 175, 176, 177, 183, 185, 189, 191, 192, 193, 210, 225, 262, 269, 270, 309, 315, 317, 318, 319, 320, 335, 337, 338, 348, 378, 382, 388, 393, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 474, 475, 477, 481, 482], "work": [0, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 47, 63, 74, 81, 119, 163, 164, 165, 179, 183, 191, 192, 194, 336, 341, 372, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 472, 474, 481], "fipi": [0, 2, 3, 4, 6, 9, 10, 13, 14, 15, 16, 18, 19, 21, 23, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 139, 140, 142, 143, 145, 157, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 471, 472, 474, 475, 476, 477, 479, 480, 481, 483], "should": [0, 2, 6, 8, 9, 10, 11, 15, 16, 17, 47, 52, 62, 72, 73, 74, 81, 91, 138, 145, 164, 165, 179, 183, 191, 192, 193, 225, 255, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 389, 393, 398, 399, 402, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 481, 482], "conduct": [0, 8, 81, 474, 477], "pull": [0, 20, 472], "request": [0, 2, 3, 16, 256, 268], "If": [0, 3, 7, 8, 11, 14, 16, 17, 21, 34, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 74, 75, 77, 78, 81, 85, 110, 111, 112, 113, 114, 115, 116, 123, 138, 139, 140, 142, 143, 145, 163, 164, 165, 167, 168, 175, 178, 179, 191, 192, 193, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 309, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 388, 389, 393, 394, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 474, 481, 482], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 131, 135, 137, 138, 139, 140, 145, 150, 151, 157, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 196, 198, 200, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 262, 267, 268, 269, 270, 271, 272, 278, 280, 305, 307, 308, 309, 315, 321, 334, 335, 336, 338, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 381, 382, 388, 389, 393, 394, 397, 398, 399, 400, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 449, 451, 452, 454, 455, 459, 464, 465, 471, 472, 474, 475, 476, 477, 478, 481, 482], "alreadi": [0, 3, 10, 191, 382, 393], "report": [0, 2, 3, 17, 20, 378, 472], "github": [0, 2, 8, 9, 11, 15, 16, 20, 176, 177, 336, 383, 471], "issu": [0, 2, 8, 9, 11, 15, 17, 20, 21, 164, 165, 183, 192, 193, 383, 389, 414, 454], "name": [0, 2, 5, 8, 10, 11, 17, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 142, 143, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 193, 210, 225, 229, 255, 256, 309, 343, 378, 382, 389, 393, 394, 397, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 481, 482], "accordingli": 0, "issue12345": 0, "summary_of_what_branch_address": 0, "checkout": [0, 9, 11], "b": [0, 2, 14, 16, 17, 21, 31, 32, 103, 140, 164, 165, 167, 179, 225, 256, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474, 478], "edit": [0, 2, 11, 139, 341, 478], "add": [0, 2, 11, 14, 17, 20, 56, 113, 114, 179, 198, 199, 200, 210, 225, 229, 255, 256, 309, 343, 368, 382, 393, 444, 459], "emac": 0, "commit": 0, "m": [0, 11, 14, 17, 20, 74, 111, 113, 135, 140, 142, 145, 162, 163, 164, 165, 176, 177, 178, 179, 183, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 340, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 464, 472, 478], "refactoring_stage_a": 0, "refactoring_stage_b": 0, "sure": [0, 9, 11, 17, 135, 192], "up": [0, 2, 3, 6, 8, 11, 14, 17, 18, 21, 31, 32, 72, 73, 119, 139, 163, 178, 225, 444, 459, 474], "date": [0, 2], "fetch": [0, 9, 11], "origin": [0, 2, 21, 167, 176, 177, 220, 221, 222, 223, 224, 243, 244, 252, 253, 254, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "state": [0, 2, 8, 9, 11, 12, 31, 32, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 107, 114, 139, 145, 179, 183, 191, 475, 476], "diff": [0, 36, 192, 193], "resolv": [0, 2, 8, 11, 191, 348], "ani": [0, 2, 7, 8, 9, 10, 11, 12, 15, 16, 17, 20, 21, 31, 32, 75, 116, 139, 140, 142, 143, 145, 175, 179, 191, 192, 193, 200, 225, 235, 255, 268, 348, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 474, 475, 481, 482], "conflict": [0, 2, 11], "test": [0, 2, 4, 6, 7, 8, 9, 11, 13, 16, 20, 23, 32, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 72, 73, 77, 78, 80, 81, 82, 83, 91, 93, 95, 96, 97, 99, 100, 102, 103, 104, 107, 110, 114, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 139, 150, 151, 163, 164, 165, 167, 168, 171, 172, 173, 175, 180, 187, 191, 194, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 268, 336, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 376, 382, 393, 394, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458, 463, 471, 472], "fipy_test": [0, 7, 11, 13, 17, 194], "necessari": [0, 2, 8, 11, 17, 21, 67, 77, 80, 81, 162, 163, 164, 165, 168, 176, 177, 183, 191, 192, 193, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 475, 481], "fork": 0, "repositori": [0, 2, 8, 9, 11, 21, 383, 471], "remot": 0, "link": [0, 2, 3, 9, 11, 21], "your": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 74, 81, 191, 192, 193, 309, 393, 398, 471, 481], "myfork": 0, "myforkurl": 0, "push": 0, "now": [0, 2, 3, 8, 9, 11, 13, 16, 17, 32, 72, 73, 75, 81, 110, 111, 112, 116, 119, 139, 163, 164, 165, 179, 191, 192, 193, 471, 474], "creat": [0, 2, 6, 8, 12, 17, 20, 34, 36, 49, 50, 51, 59, 60, 71, 72, 73, 77, 81, 82, 83, 85, 110, 111, 112, 113, 114, 115, 126, 130, 139, 142, 143, 158, 162, 163, 167, 168, 171, 172, 173, 176, 177, 178, 179, 180, 191, 192, 196, 200, 220, 221, 222, 223, 224, 225, 232, 233, 235, 236, 237, 242, 243, 244, 250, 252, 253, 262, 269, 270, 278, 280, 291, 297, 298, 299, 300, 301, 305, 307, 308, 309, 315, 317, 318, 319, 320, 334, 335, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 367, 369, 370, 372, 374, 375, 378, 382, 393, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 464, 465, 466, 468, 469, 470, 471, 472, 474, 481, 482], "against": [0, 6, 16, 17, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 77, 78, 81, 163, 164, 165, 167, 179, 191, 382, 393, 445], "usnistgov": [0, 3, 8, 9, 11], "The": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 31, 32, 33, 34, 36, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 85, 90, 91, 94, 95, 97, 99, 100, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 137, 138, 139, 140, 142, 143, 145, 150, 151, 152, 157, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 191, 192, 193, 194, 198, 199, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 271, 272, 307, 308, 309, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 389, 393, 398, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 483], "initi": [0, 2, 8, 11, 16, 17, 21, 31, 32, 49, 50, 51, 56, 59, 60, 71, 77, 81, 82, 83, 85, 90, 110, 112, 115, 119, 123, 126, 130, 138, 139, 142, 143, 145, 151, 152, 163, 164, 165, 167, 168, 171, 172, 173, 178, 179, 183, 184, 191, 192, 225, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 410, 414, 418, 428, 434, 435, 437, 439], "autom": [0, 2, 4, 6, 21, 192], "check": [0, 2, 9, 10, 11, 17, 21, 47, 78, 81, 111, 126, 152, 225, 394, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "statu": [0, 2, 9, 11, 256], "absolut": [0, 8, 16, 95, 111, 126, 256, 263, 264, 265, 266, 269, 291, 297, 298, 299, 300, 301, 307, 308, 382, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471], "failur": [0, 2, 8, 45, 46, 81, 268, 378, 379], "still": [0, 2, 8, 11, 16, 74, 114, 179, 191, 192, 256, 268, 398, 474], "an": [0, 2, 3, 6, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 31, 32, 36, 49, 50, 59, 60, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 108, 110, 111, 112, 113, 114, 115, 116, 119, 129, 135, 138, 139, 151, 158, 162, 163, 164, 165, 168, 171, 172, 173, 176, 177, 179, 183, 191, 192, 194, 200, 225, 263, 264, 265, 266, 269, 348, 378, 382, 393, 394, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 449, 450, 451, 466, 471, 472, 474, 475, 477, 478, 481, 482], "experiment": [0, 2, 81, 138, 139, 140, 145, 162, 176, 177], "you": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 31, 32, 33, 34, 74, 81, 138, 140, 145, 162, 163, 176, 177, 191, 192, 193, 225, 263, 264, 265, 266, 268, 269, 309, 398, 472, 481, 482], "would": [0, 10, 11, 15, 16, 17, 31, 33, 34, 81, 119, 164, 165, 179, 183, 192, 194, 382, 400, 474], "its": [0, 2, 6, 11, 12, 16, 17, 19, 21, 47, 81, 130, 139, 162, 176, 177, 192, 196, 200, 225, 269, 270, 278, 280, 305, 307, 308, 309, 334, 335, 338, 339, 351, 361, 369, 370, 382, 393, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 447, 454, 465, 474, 481], "impact": [0, 16], "mai": [0, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 21, 47, 81, 164, 165, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 309, 389, 398, 474, 482], "prepend": 0, "wip": 0, "titl": [0, 2, 12, 20, 39, 40, 142, 143, 162, 175, 176, 177, 340, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "thi": [0, 2, 5, 6, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 31, 32, 34, 36, 45, 46, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 99, 100, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 135, 137, 138, 139, 140, 145, 150, 151, 152, 157, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 196, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 268, 269, 270, 278, 280, 305, 307, 308, 309, 334, 335, 336, 338, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 381, 382, 389, 393, 398, 399, 400, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 459, 465, 471, 472, 474, 476, 477, 481, 482], "prevent": [0, 6, 140, 183, 184, 379, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 481], "being": [0, 9, 11, 12, 17, 49, 50, 51, 59, 60, 77, 81, 94, 95, 99, 100, 104, 179, 191, 250, 414, 471, 474, 481, 482], "befor": [0, 2, 8, 9, 10, 11, 16, 17, 22, 31, 32, 81, 164, 165, 178, 191, 192, 203, 268, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 388, 482], "": [0, 2, 3, 4, 6, 7, 10, 11, 14, 16, 17, 20, 21, 31, 32, 39, 67, 72, 73, 81, 108, 111, 113, 116, 139, 140, 142, 145, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 183, 184, 191, 192, 199, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 271, 272, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 446, 447, 449, 450, 451, 452, 454, 455, 471, 472, 476, 478, 481], "allow": [0, 2, 6, 8, 11, 16, 17, 19, 21, 86, 96, 116, 119, 171, 172, 173, 179, 183, 184, 378, 393, 399, 471, 477], "run": [0, 2, 6, 7, 9, 10, 11, 16, 17, 18, 19, 20, 21, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 75, 77, 81, 85, 91, 96, 106, 110, 111, 112, 113, 114, 115, 116, 138, 139, 140, 145, 154, 157, 159, 163, 167, 168, 178, 179, 185, 189, 191, 194, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 268, 378, 381, 382, 397, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 457, 458, 459, 471, 472], "pleas": [0, 2, 3, 7, 8, 11, 14, 15, 16, 191, 192, 193], "respect": [0, 2, 16, 108, 113, 115, 163, 164, 165, 168, 178, 183, 200, 474, 475], "resourc": [0, 2, 3, 11, 15, 17, 194], "do": [0, 2, 3, 7, 9, 10, 11, 16, 17, 20, 21, 47, 81, 129, 131, 139, 140, 179, 183, 191, 192, 193, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 262, 341, 382, 400, 403, 444, 459, 464, 472, 481, 482], "bulk": [0, 135, 138, 139, 145, 164, 165], "local": [0, 19, 72, 73, 81, 95, 151, 225, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 471], "machin": [0, 16, 17, 19, 21], "own": [0, 2, 7, 9, 11, 16, 17, 21, 81, 191, 192, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 479, 480, 483], "account": [0, 3, 11, 17, 138, 164, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "have": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 32, 68, 71, 77, 78, 80, 81, 86, 108, 110, 111, 112, 113, 114, 115, 119, 130, 138, 140, 145, 162, 164, 165, 176, 177, 178, 179, 191, 192, 193, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 262, 348, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 454, 464, 474, 475, 481], "lot": [0, 96, 378], "enabl": [0, 2, 15, 16, 17, 20, 21, 194, 379, 472], "servic": [0, 12], "can": [0, 2, 3, 6, 7, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 31, 32, 34, 36, 49, 50, 51, 56, 59, 60, 65, 68, 71, 72, 73, 74, 77, 81, 82, 83, 85, 90, 107, 108, 110, 111, 112, 114, 115, 119, 123, 124, 126, 128, 130, 140, 145, 150, 151, 157, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 183, 191, 192, 193, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 263, 264, 265, 266, 268, 269, 309, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 454, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483], "avoid": [0, 2, 11, 119, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "individu": [0, 2, 7, 8, 21, 193], "skip": [0, 17, 378], "ci": [0, 2, 471], "messag": [0, 3, 16, 17, 20, 81, 389, 471, 472], "when": [0, 2, 6, 7, 8, 9, 11, 15, 16, 17, 19, 21, 81, 110, 119, 126, 139, 140, 164, 165, 179, 191, 192, 193, 210, 224, 225, 256, 268, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 399, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 474, 475, 482], "readi": [0, 9, 11, 225], "successfulli": [0, 9, 11], "pass": [0, 2, 9, 11, 16, 17, 51, 81, 119, 191, 192, 193, 194, 263, 264, 265, 266, 269, 336, 339, 378, 382, 393, 402, 449, 450, 454, 471, 481], "send": [0, 3], "mail": [0, 2, 8, 15, 17, 20, 192, 193], "list": [0, 2, 8, 9, 10, 11, 14, 15, 20, 21, 22, 72, 73, 81, 110, 111, 112, 142, 143, 175, 192, 193, 194, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 315, 393, 397, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 474, 482], "about": [0, 2, 3, 6, 7, 8, 9, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 81, 157, 162, 164, 165, 179, 191, 192, 194, 256, 292, 309, 336, 348, 397], "develop": [0, 2, 3, 4, 9, 12, 13, 14, 15, 16, 17, 19, 20, 194, 472, 478], "automat": [0, 2, 7, 8, 11, 17, 21, 31, 32, 33, 34, 81, 82, 83, 164, 165, 183, 191, 192, 382, 394, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 449, 450, 459, 481, 482], "see": [0, 2, 3, 6, 7, 11, 15, 16, 17, 18, 19, 20, 21, 22, 36, 72, 73, 81, 82, 83, 110, 111, 112, 119, 138, 140, 145, 162, 163, 164, 165, 167, 168, 176, 177, 179, 191, 192, 193, 197, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 352, 359, 360, 363, 367, 374, 378, 399, 454, 459, 471, 472, 474, 476], "respond": 0, "without": [0, 2, 6, 11, 12, 16, 17, 19, 21, 68, 81, 167, 168, 176, 177, 183, 192, 378, 379, 382, 393, 400, 434, 454, 481], "further": [0, 2, 3, 10, 11, 17, 21, 47, 119, 145, 164, 165, 352, 359, 360, 363, 367, 374], "action": [0, 21, 139, 157, 167, 399, 471, 481], "part": [0, 8, 9, 11, 19, 21, 36, 81, 108, 138, 183, 225, 250, 474], "administr": [0, 14], "onli": [0, 2, 6, 7, 9, 10, 11, 13, 17, 18, 19, 20, 21, 33, 34, 74, 75, 81, 112, 114, 116, 119, 137, 138, 140, 142, 143, 163, 164, 165, 175, 179, 183, 191, 198, 199, 225, 242, 348, 351, 354, 355, 356, 357, 361, 362, 370, 372, 378, 382, 393, 398, 402, 407, 410, 414, 415, 419, 421, 423, 434, 435, 438, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 474, 477], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 20, 21, 31, 32, 33, 34, 36, 47, 51, 52, 57, 65, 66, 68, 71, 72, 73, 74, 78, 80, 81, 82, 83, 85, 86, 90, 93, 94, 95, 104, 107, 110, 111, 115, 119, 123, 124, 130, 137, 138, 139, 140, 142, 143, 145, 162, 163, 164, 165, 167, 168, 175, 178, 179, 183, 184, 191, 192, 193, 194, 200, 203, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 262, 268, 270, 285, 286, 287, 288, 289, 290, 291, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 322, 332, 333, 335, 337, 338, 339, 340, 341, 342, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 383, 389, 393, 394, 397, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482], "interfac": [0, 2, 4, 7, 8, 11, 14, 16, 17, 19, 21, 108, 126, 135, 138, 139, 150, 151, 152, 162, 164, 165, 175, 176, 177, 179, 263, 264, 265, 266, 267, 285, 286, 287, 288, 289, 290, 291, 292, 295, 297, 298, 299, 300, 301, 317, 318, 319, 320, 321, 400, 414, 439, 471, 478], "particularli": [0, 9, 11, 72, 73, 81], "long": [0, 2, 16, 47, 111, 164, 165, 192, 382, 393, 398, 482], "histori": 0, "consid": [0, 2, 8, 11, 68, 75, 81, 119, 162, 176, 177, 178, 192, 309, 474], "squash": 0, "we": [0, 2, 3, 6, 8, 9, 10, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 97, 110, 111, 112, 113, 114, 115, 116, 119, 129, 131, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 225, 235, 341, 372, 393, 398, 403, 407, 414, 415, 419, 421, 442, 474, 481, 482], "azur": [0, 2, 471], "cloud": [0, 2, 471], "These": [0, 2, 6, 7, 8, 10, 11, 16, 19, 21, 31, 32, 72, 73, 115, 119, 475, 479, 480, 481, 483], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21, 32, 36, 39, 40, 47, 52, 57, 68, 72, 73, 74, 75, 81, 82, 83, 91, 108, 110, 111, 112, 113, 114, 115, 116, 119, 135, 138, 139, 140, 145, 151, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 183, 191, 192, 193, 194, 199, 225, 236, 237, 242, 250, 254, 255, 260, 309, 314, 336, 348, 351, 354, 355, 356, 357, 361, 362, 370, 372, 378, 382, 385, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448, 454, 471, 474, 475, 476, 477, 481, 482], "configur": [0, 2, 3, 16, 17, 292, 295], "fipysourc": [0, 17], "pipelin": [0, 2, 4, 459], "yml": [0, 11], "workflow": 0, "docs4nist": 0, "nix": [0, 2, 20, 397, 472], "In": [0, 2, 3, 7, 8, 9, 11, 15, 16, 17, 19, 21, 47, 71, 72, 73, 74, 77, 78, 80, 81, 86, 93, 108, 111, 119, 138, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 179, 183, 191, 378, 414, 435, 474, 475, 479, 480, 481, 483], "order": [0, 2, 3, 5, 8, 9, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 45, 46, 72, 73, 74, 81, 85, 86, 91, 93, 97, 119, 128, 129, 131, 139, 145, 162, 164, 165, 179, 183, 191, 192, 198, 199, 200, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 348, 354, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 449, 450, 475, 476, 482], "focu": [0, 2, 16, 178], "breakag": [0, 21], "introduc": [0, 2, 16, 21, 63, 67, 111, 112, 119, 162, 176, 177, 192, 193], "normal": [0, 2, 16, 17, 139, 183, 184, 236, 237, 339, 407, 410, 414, 415, 419, 421, 423, 435, 439, 442, 454, 474], "built": [0, 2, 9, 11, 16, 21, 123, 139, 157, 163, 167, 168, 176, 177, 229, 230, 231], "one": [0, 2, 3, 8, 10, 11, 14, 16, 17, 19, 21, 47, 51, 72, 73, 75, 81, 85, 91, 110, 111, 112, 113, 114, 115, 116, 124, 130, 162, 164, 165, 168, 171, 173, 176, 177, 178, 179, 192, 196, 225, 254, 263, 264, 265, 266, 269, 270, 271, 272, 278, 280, 305, 307, 308, 309, 334, 338, 351, 361, 368, 369, 370, 379, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 447, 448, 454, 464, 465, 471, 474, 479, 480, 481, 482, 483], "wherea": [0, 482], "nightli": 0, "build": [0, 2, 9, 11, 16, 17, 18, 21, 77, 119, 139, 157, 163, 167, 178, 179, 225, 255, 268, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "environ": [0, 2, 8, 14, 16, 20, 21, 193, 444, 471, 472, 476], "catch": 0, "prerequisit": [0, 2, 9, 11, 17], "A": [0, 2, 8, 9, 11, 12, 14, 15, 16, 17, 18, 21, 31, 32, 67, 71, 77, 80, 90, 91, 107, 110, 114, 116, 119, 139, 140, 142, 143, 145, 157, 162, 163, 164, 165, 167, 168, 175, 176, 177, 179, 184, 192, 193, 194, 210, 225, 256, 263, 264, 265, 266, 267, 269, 339, 340, 348, 372, 378, 381, 382, 393, 394, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 478], "latest": [0, 9, 11, 15, 17, 471], "set": [0, 2, 4, 8, 15, 16, 17, 19, 20, 21, 32, 68, 71, 72, 73, 75, 81, 83, 107, 108, 116, 119, 123, 124, 126, 128, 129, 130, 131, 139, 140, 142, 143, 151, 157, 163, 164, 165, 167, 168, 175, 179, 180, 192, 193, 194, 203, 210, 225, 229, 252, 255, 256, 268, 309, 336, 343, 381, 382, 393, 394, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 472, 474, 476, 478, 481], "conda_environment_not_lock": 0, "variabl": [0, 2, 4, 6, 7, 11, 16, 20, 21, 32, 36, 49, 50, 51, 56, 59, 60, 63, 72, 73, 81, 82, 83, 85, 90, 94, 95, 104, 111, 119, 123, 124, 126, 128, 130, 139, 142, 143, 150, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 179, 183, 191, 192, 193, 197, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476], "queue": 0, "time": [0, 2, 6, 8, 9, 11, 15, 16, 17, 19, 21, 22, 31, 32, 33, 34, 71, 74, 77, 78, 80, 81, 82, 83, 91, 110, 114, 123, 124, 135, 138, 139, 140, 145, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 179, 183, 184, 192, 199, 221, 225, 231, 233, 236, 242, 250, 339, 342, 372, 402, 421, 444, 471, 474, 475, 477], "lock": [0, 2, 11, 17], "solver": [0, 2, 4, 8, 11, 13, 14, 15, 20, 21, 31, 33, 34, 36, 47, 52, 54, 56, 57, 61, 62, 63, 66, 80, 81, 82, 83, 85, 86, 90, 91, 97, 99, 100, 103, 110, 111, 113, 115, 119, 139, 163, 164, 165, 167, 168, 171, 172, 173, 178, 179, 183, 184, 191, 192, 194, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 471, 472, 473, 474], "petsc": [0, 2, 17, 20, 21, 31, 32, 110, 165, 183, 184, 192, 471, 472], "scipi": [0, 2, 8, 10, 13, 17, 20, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 164, 165, 179, 291, 378, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 471, 472, 474], "trilino": [0, 2, 4, 17, 20, 21, 31, 32, 81, 86, 110, 163, 165, 194, 471, 472], "file": [0, 2, 7, 9, 10, 11, 15, 17, 20, 21, 39, 40, 41, 72, 73, 77, 78, 80, 93, 94, 95, 96, 97, 99, 100, 104, 138, 139, 140, 142, 143, 145, 163, 167, 168, 171, 172, 173, 175, 225, 382, 394, 400, 407, 415, 419, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 481], "render": [0, 2, 8, 15, 21, 81, 194, 439, 466, 468, 469, 470], "filenam": [0, 8, 17, 72, 73, 113, 142, 143, 167, 175, 225, 394, 410, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "templat": [0, 7], "platform": [0, 2, 8, 9, 11, 18, 397, 471], "done": [0, 8, 9, 11, 17, 192], "new": [0, 2, 6, 8, 11, 16, 21, 71, 81, 114, 115, 139, 145, 164, 165, 168, 179, 192, 193, 221, 225, 231, 233, 236, 242, 250, 378, 382, 389, 393, 394, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 482], "valid": [0, 2, 17], "everyth": [0, 11, 192], "As": [0, 6, 7, 8, 10, 15, 17, 21, 72, 73, 74, 81, 145, 164, 165, 178, 183, 191, 192, 194, 382, 393, 400, 471, 482], "2025": 0, "04": [0, 20, 151, 472, 478], "30": [0, 6, 20, 108, 112, 113, 114, 115, 142, 164, 165, 178, 179, 382, 393, 419, 421, 472, 478], "extrem": [0, 2, 17, 192, 309], "slow": [0, 2, 8, 11, 17, 31, 32, 33, 34, 164, 165, 192, 477], "due": [0, 2, 6, 8, 16, 67, 72, 73, 86, 140, 162, 164, 165, 176, 177, 183, 268, 378, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474], "url": [0, 2, 478], "encod": [0, 382, 400], "replac": [0, 2, 17, 81, 119, 179, 192, 193, 194, 225, 398, 403, 464], "21": [0, 2, 113, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 393, 475, 478], "call": [0, 2, 15, 16, 17, 21, 81, 139, 183, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 268, 269, 335, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 481, 482], "764": [0, 2], "mamba": [0, 11], "org": [0, 2, 3, 8, 11, 16, 17, 72, 73, 271, 272, 399, 471, 478], "3737": 0, "14481": 0, "content": [0, 2, 225, 464, 479, 480, 483], "changelog": [0, 2, 20], "rst": [0, 2], "instal": [0, 2, 5, 8, 9, 10, 16, 17, 19, 20, 21, 22, 138, 145, 162, 176, 177, 397, 471, 472, 473, 478], "manag": [0, 2, 11, 13, 17, 81, 402, 471], "sphinx": [0, 2, 17, 471], "extens": [0, 2, 8, 11, 15, 16, 139, 167, 194, 394, 410, 414, 471], "correspond": [0, 15, 67, 81, 140, 145, 198, 199, 200, 225, 382, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "doc": [0, 2, 16, 17, 378, 399, 471, 478], "c": [0, 2, 6, 11, 13, 14, 16, 17, 21, 67, 81, 103, 135, 139, 140, 145, 162, 163, 164, 165, 175, 176, 177, 183, 341, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 478], "html": [0, 3, 8, 11, 16, 17, 336, 399, 471], "re": [0, 2, 8, 11, 21, 67, 71, 81, 115, 116, 164, 165, 178, 179, 341, 382, 393], "3": [0, 6, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 31, 34, 36, 47, 49, 50, 59, 60, 63, 67, 68, 72, 73, 74, 77, 81, 85, 95, 107, 110, 111, 112, 113, 115, 119, 123, 126, 128, 129, 131, 137, 139, 140, 142, 143, 145, 150, 151, 158, 164, 165, 167, 173, 175, 176, 177, 178, 179, 183, 184, 192, 193, 194, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 322, 327, 348, 362, 378, 382, 383, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 448, 457, 458, 464, 471, 472, 474, 475, 477, 478], "affect": [0, 2, 8, 17], "result": [0, 2, 6, 7, 8, 10, 12, 15, 16, 17, 18, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 95, 97, 99, 100, 104, 107, 110, 111, 112, 113, 115, 116, 119, 123, 124, 128, 130, 135, 138, 139, 140, 145, 150, 162, 164, 165, 176, 177, 179, 180, 183, 191, 192, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 268, 348, 372, 382, 393, 397, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 454, 471, 474, 477], "log": [0, 15, 16, 20, 115, 142, 164, 165, 175, 178, 183, 184, 382, 393, 446, 447, 448, 449, 450, 451, 452, 454, 455, 472, 473], "txt": [0, 2, 382, 400], "rel": [0, 2, 16, 21, 31, 32, 111, 183, 256, 263, 264, 265, 266, 269, 291, 297, 298, 299, 300, 301, 307, 308, 382, 393, 398], "fipy_changelog": 0, "after": [0, 2, 10, 16, 17, 21, 32, 47, 113, 115, 119, 164, 165, 179, 192, 268, 382, 389, 393, 398, 414], "x": [0, 2, 7, 8, 9, 11, 13, 15, 16, 17, 18, 20, 22, 36, 40, 51, 54, 56, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 139, 142, 143, 150, 151, 157, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 191, 192, 193, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 457, 458, 459, 464, 471], "y": [0, 7, 8, 9, 11, 14, 15, 17, 18, 20, 40, 52, 57, 71, 72, 73, 82, 83, 94, 112, 119, 123, 126, 128, 129, 131, 139, 142, 143, 150, 151, 158, 162, 163, 167, 171, 173, 175, 176, 177, 179, 180, 192, 193, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458, 464, 471], "mileston": 0, "z": [0, 9, 11, 20, 158, 162, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 457, 458], "obtain": [0, 2, 7, 8, 9, 17, 20, 31, 33, 34, 75, 81, 116, 119, 139, 140, 157, 163, 164, 165, 179, 191, 193, 225, 421, 434, 472, 474, 476, 477], "rest": [0, 139], "format": [0, 2, 17, 32, 36, 382, 393, 394, 397, 402, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 464, 466, 468, 469, 470, 471], "everi": [0, 19, 21, 81, 138, 145, 315, 382, 393, 398], "close": [0, 2, 19, 21, 74, 81, 119, 183, 225, 382, 400, 454], "sinc": [0, 2, 6, 21, 110, 111, 112, 114, 116, 164, 165, 179, 192, 193, 235, 339, 340, 341, 477], "last": [0, 2, 8, 119, 164, 165, 183, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 352, 359, 360, 363, 367, 374, 375, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "major": [0, 2, 8, 16, 183], "curat": [0, 7], "output": [0, 2, 15, 19, 31, 32, 33, 34, 36, 119, 225, 309, 336, 398, 464], "so": [0, 3, 6, 10, 11, 16, 17, 19, 20, 21, 31, 33, 34, 67, 74, 81, 90, 110, 113, 115, 119, 139, 142, 143, 162, 164, 165, 167, 168, 175, 176, 177, 178, 179, 183, 184, 191, 192, 225, 256, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 393, 398, 402, 414, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 472, 474, 477, 482], "clear": [0, 2, 17, 21], "what": [0, 2, 10, 16, 17, 20, 21, 81, 183, 192, 336, 398, 403, 472, 481], "big": 0, "deal": [0, 10, 11, 17, 21, 137], "sometim": [0, 2, 8, 72, 73], "redund": [0, 21], "e": [0, 2, 8, 10, 11, 14, 15, 17, 19, 54, 56, 57, 61, 66, 74, 75, 81, 108, 113, 114, 116, 139, 164, 165, 168, 179, 183, 184, 191, 193, 255, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 449, 450, 464, 474, 475, 476, 478, 479, 480, 483], "g": [0, 8, 10, 11, 14, 15, 17, 19, 39, 72, 73, 81, 95, 108, 113, 114, 164, 165, 178, 179, 193, 225, 255, 340, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 449, 450, 464, 474, 476, 478, 479, 480, 483], "issue123": 0, "blah": 0, "prefer": [0, 2, 8, 10, 11, 17, 72, 73, 474], "given": [0, 2, 6, 7, 11, 15, 16, 17, 21, 36, 49, 50, 51, 52, 57, 59, 60, 62, 66, 67, 71, 75, 77, 78, 81, 100, 108, 115, 119, 128, 129, 131, 135, 138, 139, 140, 145, 151, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 180, 183, 191, 192, 198, 199, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 378, 382, 389, 393, 394, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 459, 474, 475, 479, 480, 483], "under": [0, 2, 14, 21, 31, 32, 81, 162, 176, 177, 178, 183, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 482], "altern": [0, 7, 11, 17, 142, 143, 175, 224, 398, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 481], "item": [0, 192, 193], "remov": [0, 2, 8, 9, 11, 19, 119, 140, 162, 394, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454], "appropri": [0, 2, 8, 11, 17, 81, 85, 113, 115, 167, 178, 179, 183, 191, 200, 223, 341, 382, 393, 474, 481], "move": [0, 2, 7, 8, 11, 14, 81, 93, 119, 142, 143, 164, 165, 179, 191], "thank": [0, 2, 119], "mention": [0, 11, 81, 477], "recogn": 0, "outsid": [0, 158, 235, 464], "contributor": [0, 20, 472, 473], "requir": [0, 2, 6, 8, 15, 16, 17, 18, 19, 20, 21, 32, 49, 50, 59, 60, 68, 74, 77, 80, 81, 91, 119, 138, 139, 140, 145, 158, 164, 165, 167, 168, 176, 177, 179, 183, 192, 193, 224, 225, 235, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 472, 474, 482], "pygithub": 0, "panda": [0, 17, 471], "doesn": [0, 2, 3, 17, 20, 31, 32, 33, 34, 183, 225, 262, 444, 472], "t": [0, 2, 3, 9, 10, 11, 14, 16, 17, 20, 21, 31, 32, 33, 34, 36, 71, 72, 73, 74, 77, 78, 81, 108, 110, 114, 123, 124, 135, 139, 140, 145, 150, 151, 162, 163, 164, 165, 168, 171, 172, 173, 176, 177, 178, 179, 183, 184, 192, 193, 225, 255, 262, 343, 348, 362, 372, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 472, 475, 476, 478, 481, 482], "show": [0, 2, 3, 6, 16, 17, 45, 46, 119, 140, 142, 143, 145, 167, 397, 434], "green": [0, 2], "box": [0, 2, 19, 81, 162, 176, 177, 180, 191, 250], "note": [0, 3, 21, 31, 32, 67, 81, 162, 179, 210, 225, 229, 255, 256, 271, 272, 309, 343, 421, 444], "tag": [0, 2, 3, 9, 11], "abov": [0, 6, 8, 10, 15, 17, 21, 36, 81, 119, 139, 140, 145, 164, 165, 179, 180, 250, 348, 382, 393, 481], "annot": [0, 388], "upon": [0, 12, 21, 72, 73], "success": [0, 8, 9, 11, 74, 164, 165, 402], "system": [0, 2, 9, 11, 13, 15, 16, 17, 74, 81, 110, 111, 112, 115, 135, 138, 162, 163, 167, 168, 176, 177, 178, 179, 183, 198, 199, 200, 234, 254, 255, 256, 322, 331, 336, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 474, 475, 476, 478], "product": [0, 2, 5, 11, 16, 21, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "artifact": 0, "place": [0, 2, 8, 10, 11, 21, 32, 175, 341, 394, 398, 448], "dist": [0, 2], "linux": [0, 2, 11, 13, 16, 19, 22, 110, 471], "none": [0, 2, 10, 31, 33, 34, 72, 73, 110, 111, 112, 113, 115, 116, 139, 142, 143, 162, 165, 175, 176, 177, 183, 184, 197, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 306, 307, 308, 309, 312, 321, 336, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 381, 382, 389, 393, 394, 398, 399, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 482], "whl": 0, "tar": 0, "gz": [0, 139, 163, 167, 168, 171, 172, 173, 394, 410], "also": [0, 2, 3, 4, 6, 8, 11, 16, 17, 18, 19, 21, 31, 32, 72, 73, 74, 81, 82, 83, 119, 138, 140, 142, 143, 145, 150, 164, 165, 175, 183, 192, 263, 264, 265, 266, 268, 269, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 389, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 474, 475], "windows_nt": 0, "thei": [0, 3, 8, 10, 11, 15, 16, 17, 21, 74, 81, 164, 165, 192, 193, 194, 348, 378, 393, 482], "same": [0, 2, 8, 16, 17, 19, 32, 74, 80, 81, 90, 95, 97, 99, 100, 104, 111, 112, 113, 114, 115, 139, 140, 164, 165, 167, 178, 179, 191, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 464, 474], "attach": [0, 2, 481], "associ": [0, 17, 21, 138, 139, 164, 165], "pypi": [0, 2, 471], "twine": 0, "fipy_vers": 0, "onc": [0, 3, 6, 11, 13, 75, 81, 113, 115, 130, 157, 164, 165, 178, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393], "receiv": [0, 2, 17], "amend": 0, "ask": [0, 2, 3, 10, 15, 20, 192, 193, 472, 473], "maintain": [0, 16, 17, 110, 111, 112, 192, 193, 414, 439], "process": [0, 2, 6, 11, 14, 15, 16, 17, 19, 20, 21, 31, 32, 162, 164, 165, 176, 177, 178, 194, 225, 271, 272, 315, 340, 393, 457, 458, 471, 472, 475, 476], "hour": [0, 17, 19, 21, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "don": [0, 2, 10, 20, 162, 176, 177, 179, 183, 184, 192, 193, 255, 348, 472, 481, 482], "wish": [0, 7, 8, 11, 17, 67, 71, 138, 140, 145, 163, 180, 192], "wait": [0, 21, 164, 165], "trigger": [0, 443], "some": [0, 2, 6, 8, 9, 10, 11, 15, 16, 17, 21, 31, 32, 33, 34, 39, 40, 63, 72, 73, 81, 86, 90, 119, 139, 167, 183, 192, 193, 255, 260, 263, 264, 265, 266, 269, 309, 314, 348, 362, 385, 478], "reason": [0, 2, 8, 11, 16, 21, 32, 78, 81, 119, 139, 179, 192, 309, 382, 393, 464, 474], "manual": [0, 2, 7, 8, 16, 19, 20, 31, 32, 33, 34, 72, 73, 191, 421, 472, 478, 482], "gener": [0, 2, 6, 9, 11, 14, 16, 17, 20, 21, 81, 96, 116, 139, 164, 165, 179, 191, 192, 193, 196, 200, 224, 225, 229, 230, 231, 266, 268, 289, 290, 292, 300, 320, 389, 393, 400, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 444, 445, 466, 471, 472, 474, 476, 477, 481], "revis": [0, 2, 9, 11], "version": [0, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 20, 21, 81, 119, 184, 191, 192, 193, 225, 235, 339, 340, 341, 383, 397, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472], "number": [0, 2, 8, 9, 11, 17, 21, 51, 63, 75, 78, 80, 81, 86, 107, 110, 111, 112, 115, 116, 119, 135, 138, 139, 140, 142, 145, 157, 164, 165, 175, 178, 179, 191, 192, 221, 224, 225, 231, 233, 234, 236, 237, 242, 250, 253, 254, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 343, 354, 372, 382, 388, 393, 398, 407, 410, 415, 418, 419, 421, 423, 428, 434, 435, 437, 442, 446, 447, 448, 449, 450, 451, 452, 454, 455, 474, 475, 477], "sha256": 0, "openssl": 0, "dgst": 0, "path": [0, 10, 15, 17, 71, 139, 163, 167, 168, 171, 172, 173, 225, 457, 458], "reset": [0, 81, 145, 163, 167], "0": [0, 6, 8, 10, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 139, 140, 142, 143, 145, 150, 151, 157, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 187, 191, 192, 193, 199, 200, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 268, 271, 272, 291, 297, 298, 299, 300, 301, 307, 308, 339, 340, 341, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 393, 398, 400, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 464, 472, 474, 477], "nist": [0, 2, 3, 6, 8, 11, 12, 15, 17, 194, 393, 471], "gov": [0, 3, 8, 11, 15, 16, 17, 471], "how": [1, 2, 3, 7, 11, 17, 20, 21, 31, 32, 67, 72, 73, 81, 139, 157, 158, 164, 165, 167, 191, 192, 193, 378, 434, 472, 473, 481], "read": [1, 2, 3, 11, 20, 21, 167, 191, 192, 193, 225, 382, 394, 400, 410, 472, 473], "modul": [1, 2, 4, 7, 8, 10, 11, 15, 16, 17, 19, 20, 21, 23, 24, 30, 38, 43, 44, 48, 53, 55, 58, 64, 70, 76, 84, 88, 89, 92, 98, 101, 108, 109, 118, 121, 122, 127, 133, 149, 155, 161, 166, 170, 182, 186, 190, 191, 192, 193, 194, 195, 202, 209, 211, 238, 246, 255, 257, 258, 271, 281, 282, 284, 296, 302, 311, 313, 322, 339, 343, 376, 377, 378, 381, 382, 384, 390, 393, 396, 398, 399, 400, 404, 407, 415, 419, 421, 435, 444, 445, 457, 466, 473, 474, 478, 479, 480, 481], "releas": [2, 6, 9, 11, 16, 17, 20, 21, 162, 176, 177, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472, 473], "harmon": [2, 8, 16, 31, 33, 34, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "spars": [2, 11, 15, 16, 17, 179, 194, 202, 255, 271, 272, 302, 303, 304, 471, 474], "consist": [2, 7, 8, 11, 16, 115, 137, 165, 225, 263, 264, 265, 266, 269, 474, 476], "interpret": [2, 8, 15, 16, 17, 21, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 337, 338, 481, 482], "converg": [2, 8, 17, 20, 74, 81, 164, 165, 167, 179, 183, 184, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 306, 307, 308, 309, 312, 317, 318, 319, 320, 321, 335, 337, 338, 372, 472], "criteria": [2, 81, 268], "improv": [2, 4, 6, 11, 16, 17, 74, 119, 179, 191, 193, 398, 471, 474, 477], "effici": [2, 16, 20, 21, 49, 50, 51, 59, 60, 164, 165, 191, 472, 473, 474], "matric": [2, 15, 16, 20, 21, 194, 200, 255, 271, 272, 471, 474], "support": [2, 4, 8, 11, 16, 17, 18, 20, 183, 191, 192, 225, 262, 270, 309, 317, 318, 319, 320, 335, 336, 337, 338, 383, 393, 404, 444, 471, 472, 474, 482], "more": [2, 3, 6, 7, 9, 10, 11, 16, 17, 20, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 74, 81, 86, 113, 115, 119, 123, 138, 140, 145, 164, 165, 168, 179, 183, 191, 192, 193, 224, 225, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 337, 338, 348, 362, 382, 393, 399, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448, 449, 450, 464, 472, 474, 481], "precondition": [2, 16, 20, 86, 110, 163, 183, 184, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338], "perform": [2, 8, 11, 17, 19, 20, 21, 31, 32, 33, 34, 85, 151, 164, 165, 179, 255, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 382, 393, 398, 471, 472], "greatli": [2, 4, 11], "expand": [2, 119, 151, 164, 165], "document": [2, 3, 5, 7, 9, 11, 12, 16, 17, 20, 21, 81, 398, 399, 471, 472, 473, 481], "default": [2, 6, 11, 13, 19, 20, 22, 67, 81, 82, 83, 91, 97, 110, 138, 139, 142, 143, 157, 163, 167, 175, 176, 177, 183, 184, 191, 192, 224, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 389, 393, 397, 398, 399, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 472, 482], "toler": [2, 8, 9, 11, 20, 36, 47, 52, 54, 56, 57, 61, 62, 66, 81, 90, 91, 97, 99, 100, 103, 110, 111, 113, 115, 119, 164, 165, 167, 168, 178, 183, 184, 191, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 382, 393, 398, 472], "adequ": [2, 5, 224, 225], "most": [2, 7, 8, 9, 11, 16, 17, 18, 21, 49, 50, 51, 59, 60, 71, 81, 138, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 352, 359, 360, 363, 367, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 474, 481], "problem": [2, 4, 6, 7, 8, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 56, 57, 59, 60, 62, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 93, 94, 95, 96, 97, 99, 100, 102, 104, 110, 111, 112, 113, 114, 115, 116, 123, 124, 128, 130, 139, 158, 162, 164, 165, 168, 176, 177, 178, 179, 183, 184, 191, 192, 194, 256, 309, 322, 329, 348, 362, 414, 475], "pyamg": [2, 20, 472], "from": [2, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 97, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 135, 137, 138, 139, 140, 142, 143, 145, 157, 158, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 268, 269, 302, 303, 304, 322, 324, 335, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 379, 382, 383, 393, 394, 397, 398, 399, 400, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 464, 472, 474, 477, 478, 481, 482], "fipy_solv": [2, 16, 17], "command": [2, 7, 8, 9, 11, 13, 15, 16, 20, 81, 91, 123, 128, 130, 138, 139, 140, 145, 157, 179, 194, 381, 399, 459, 472], "line": [2, 8, 10, 11, 15, 16, 20, 21, 34, 72, 73, 78, 81, 90, 91, 95, 138, 139, 140, 145, 157, 158, 162, 175, 179, 194, 225, 250, 381, 398, 399, 444, 448, 449, 450, 454, 459, 472, 474], "flag": [2, 8, 11, 16, 20, 162, 163, 176, 177, 268, 378, 472], "implement": [2, 6, 11, 14, 15, 16, 17, 20, 119, 145, 163, 164, 165, 194, 198, 199, 200, 210, 225, 229, 245, 255, 256, 263, 264, 265, 266, 269, 309, 336, 343, 440, 444, 456, 460, 462, 467, 472, 473], "suit": [2, 3, 11, 15, 20, 139, 183, 184, 194, 262, 263, 264, 265, 266, 269, 270, 309, 317, 318, 319, 320, 335, 337, 338, 376, 471, 472, 474], "right": [2, 8, 16, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 90, 108, 110, 114, 115, 116, 119, 123, 126, 129, 131, 135, 138, 139, 140, 150, 162, 163, 164, 165, 168, 176, 177, 178, 179, 183, 184, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 268, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 472, 475, 476], "drop": [2, 8, 11, 13, 81, 119, 225], "pyspars": [2, 16, 32, 471], "which": [2, 3, 6, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 75, 78, 81, 93, 113, 114, 116, 119, 139, 164, 165, 167, 179, 183, 184, 191, 192, 199, 224, 378, 382, 389, 393, 398, 399, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 454, 474, 476, 481, 482], "python": [2, 3, 6, 7, 8, 13, 14, 15, 16, 17, 18, 20, 22, 81, 91, 138, 139, 140, 142, 143, 145, 157, 162, 176, 177, 178, 179, 183, 192, 194, 309, 382, 393, 397, 399, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 457, 458, 459, 471, 472, 474, 478, 481, 482], "7": [2, 6, 15, 16, 17, 31, 34, 72, 73, 81, 95, 100, 110, 111, 112, 115, 119, 139, 140, 145, 158, 164, 165, 167, 183, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 362, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 478], "year": [2, 21, 192, 193, 340], "beyond": [2, 21], "end": [2, 3, 7, 17, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 113, 115, 116, 129, 131, 138, 139, 140, 145, 162, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 191, 378, 394, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 477, 482], "life": 2, "mainten": 2, "address": [2, 3, 11, 16, 21], "compat": [2, 16, 17, 111, 192, 193, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "recent": [2, 6, 9, 11, 16, 21, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 352, 359, 360, 363, 367, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "numpi": [2, 20, 21, 31, 32, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 472, 474], "conda": [2, 16, 17, 20, 397, 471, 472, 473], "specifi": [2, 5, 10, 16, 17, 19, 78, 80, 81, 175, 192, 193, 198, 199, 200, 224, 225, 343, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 471, 474, 481, 482], "numer": [2, 4, 6, 8, 10, 14, 15, 16, 17, 20, 36, 49, 50, 51, 59, 60, 74, 81, 91, 135, 163, 179, 183, 191, 192, 194, 256, 312, 340, 341, 352, 359, 360, 363, 367, 374, 382, 393, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 440, 442, 443, 456, 460, 467, 471, 472, 473, 474, 478], "error": [2, 12, 16, 17, 20, 21, 36, 72, 73, 81, 93, 95, 96, 114, 119, 150, 151, 164, 165, 191, 194, 225, 263, 264, 265, 266, 267, 269, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 321, 336, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472, 474], "13": [2, 6, 16, 110, 162, 163, 168, 176, 177, 179, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 478], "scipymatrix": [2, 20], "_scipymatrix": 2, "csr": 2, "either": [2, 8, 9, 11, 12, 16, 17, 21, 74, 81, 158, 164, 165, 179, 192, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 414, 421, 444, 474, 481, 482], "ignor": [2, 17, 164, 165, 178, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 267, 321, 339, 348, 399], "upgrad": [2, 8, 11], "crash": 2, "our": [2, 3, 8, 9, 11, 15, 16, 17, 81, 164, 165, 179, 191, 192, 193, 194], "parallel": [2, 4, 10, 11, 20, 194, 224, 225, 260, 271, 272, 314, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 385, 471, 472], "1054": 2, "recommend": [2, 5, 17, 20, 192, 193, 393, 472, 474, 482], "although": [2, 8, 9, 11, 16, 17, 21, 31, 32, 81, 108, 112, 114, 163, 164, 165, 179, 191, 192, 402, 414, 474, 475], "2_": 2, "_102": 2, "broken": [2, 9, 11, 16, 21, 139], "maco": [2, 16, 110, 471], "timer": [2, 20, 176, 177], "context": [2, 17, 210, 225, 229, 255, 256, 309, 343, 382, 393, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444], "995": 2, "switch": [2, 6, 119, 194, 471], "recip": [2, 11, 13, 341, 478], "flake": 2, "992": 2, "tweak": 2, "991": 2, "much": [2, 3, 7, 8, 16, 17, 21, 31, 32, 81, 90, 110, 115, 164, 165, 178, 179, 183, 184, 191, 192, 256, 481], "inform": [2, 11, 15, 16, 17, 157, 176, 177, 191, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 397, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471], "990": 2, "inclus": [2, 17, 442], "readm": [2, 20, 472, 473], "988": 2, "pin": [2, 11], "985": 2, "1049": 2, "break": [2, 10, 17, 31, 113, 183, 184], "thing": [2, 3, 8, 10, 11, 16, 17, 191, 192, 256, 474, 481, 482], "1010": 2, "exampl": [2, 3, 6, 8, 10, 11, 15, 16, 17, 19, 20, 21, 194, 378, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 459, 473, 474, 475, 482], "diffus": [2, 4, 14, 15, 16, 17, 19, 20, 31, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 108, 113, 115, 116, 119, 135, 137, 139, 140, 145, 158, 162, 164, 165, 176, 177, 178, 179, 191, 194, 340, 348, 351, 354, 355, 356, 357, 361, 362, 370, 372, 472, 475, 476, 477], "mesh1d": [2, 7, 8, 15, 16, 17, 20, 52, 57, 61, 62, 66, 78, 80, 93, 94, 95, 99, 100, 104, 111, 112, 115, 164, 165, 232, 474], "No": [2, 11, 81, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 297, 298, 299, 300], "flux": [2, 8, 20, 31, 33, 34, 67, 81, 119, 162, 164, 165, 176, 177, 179, 183, 472, 474], "steadi": [2, 8, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 107, 114, 179, 191], "alwai": [2, 7, 8, 9, 11, 15, 17, 31, 32, 33, 34, 81, 196, 224, 269, 270, 278, 280, 305, 307, 308, 309, 334, 335, 338, 351, 361, 369, 370, 398, 428, 435, 443, 447, 465, 474, 481], "give": [2, 8, 11, 17, 21, 113, 115, 145, 178, 179, 225, 348, 378, 402, 414], "zero": [2, 8, 16, 17, 67, 68, 81, 82, 83, 126, 130, 138, 179, 180, 183, 255, 262, 268, 348, 362, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 449, 450], "1000": [2, 6, 16, 31, 33, 34, 36, 52, 54, 56, 57, 63, 65, 66, 85, 111, 128, 164, 165, 178, 191, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 450, 451, 452, 457, 458], "constrain": [2, 17, 20, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 104, 113, 116, 119, 139, 178, 183, 184, 193, 197, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444], "gradient": [2, 14, 20, 31, 32, 39, 81, 82, 83, 108, 114, 119, 162, 164, 165, 167, 168, 176, 177, 179, 183, 263, 264, 265, 287, 288, 292, 297, 298, 299, 317, 318, 319, 348, 362, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471, 472, 474], "997": 2, "futur": [2, 6, 9, 11, 16, 17, 191, 471], "standard_librari": 2, "967": 2, "sign": [2, 3, 20, 192, 382, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "robin": [2, 7, 20, 472], "condit": [2, 10, 16, 20, 21, 31, 32, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 86, 90, 102, 112, 119, 128, 130, 139, 142, 143, 164, 165, 167, 168, 171, 172, 173, 179, 183, 191, 192, 193, 195, 196, 198, 199, 200, 201, 225, 256, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 400, 414, 472, 475, 476], "963": 2, "broke": [2, 256], "world": [2, 19], "961": 2, "represent": [2, 8, 20, 81, 138, 142, 143, 175, 179, 210, 229, 230, 231, 232, 233, 234, 250, 251, 252, 253, 254, 256, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "index": [2, 8, 11, 164, 165, 254, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471], "952": 2, "uncaught": 2, "except": [2, 10, 34, 49, 50, 59, 60, 72, 73, 78, 81, 139, 162, 164, 165, 176, 177, 179, 210, 225, 229, 255, 256, 309, 343, 378, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 481], "944": 2, "viewer": [2, 11, 17, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 140, 142, 143, 145, 157, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 407, 415, 419, 421, 442, 471, 472, 473], "865": 2, "search": [2, 22, 192, 444, 445, 466], "websit": [2, 9, 11], "729": 2, "8": [2, 6, 10, 11, 16, 34, 57, 72, 73, 80, 81, 90, 91, 95, 97, 119, 139, 140, 145, 158, 162, 164, 165, 178, 179, 183, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 372, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 478], "673": 2, "deprec": [2, 3, 8, 17, 20, 142, 143, 175, 194, 339, 340, 341, 389, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "properli": [2, 8, 11, 17, 183, 192, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "properti": [2, 4, 12, 16, 21, 31, 32, 138, 139, 140, 142, 143, 145, 175, 176, 177, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "512": [2, 16], "coeffici": [2, 4, 17, 20, 32, 36, 49, 50, 51, 59, 60, 67, 71, 77, 81, 94, 108, 110, 114, 119, 138, 139, 140, 145, 162, 163, 164, 165, 176, 177, 179, 191, 199, 200, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 438, 471, 472, 474, 475, 477], "implicitsourceterm": [2, 17, 20, 31, 32, 39, 40, 67, 68, 113, 114, 115, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 183, 184, 192, 372, 474], "930": 2, "get": [2, 3, 8, 11, 13, 16, 17, 18, 21, 81, 119, 164, 165, 183, 184, 398, 414], "again": [2, 72, 73, 75, 77, 78, 80, 81, 93, 95, 97, 99, 100, 104, 111, 112, 113, 115, 116, 119, 164, 165, 178, 179, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 362], "925": 2, "discourag": 2, "stackoverflow": [2, 15, 20, 302, 303, 304], "876": 2, "875": [2, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "791": 2, "896": 2, "poor": [2, 115, 475], "garbag": 2, "collect": [2, 11, 16, 20, 162, 175, 397, 404, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448, 452, 461, 471], "petsc4pi": [2, 11, 16, 17, 260, 471], "18": [2, 81, 107, 176, 177, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 393, 438, 475, 478], "wa": [2, 4, 6, 8, 10, 12, 16, 17, 21, 81, 163, 164, 165, 167, 168, 171, 172, 173, 191, 192, 256, 268, 378, 382, 393, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471], "memori": [2, 6, 16, 32, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "leak": 2, "term": [2, 15, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 59, 60, 68, 74, 78, 86, 113, 114, 119, 138, 139, 140, 164, 165, 167, 168, 176, 177, 179, 183, 191, 192, 194, 199, 200, 203, 472, 475, 476, 477], "justerrorvector": [2, 20, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "isn": [2, 11, 20, 472], "strictli": 2, "contribut": [2, 4, 17, 21, 74, 198, 199, 200, 348, 357, 362], "jon83carvalho": 2, "clarifi": 2, "mani": [2, 7, 8, 9, 11, 15, 16, 17, 19, 21, 77, 78, 80, 81, 119, 164, 165, 179, 191, 192, 194, 378, 471, 476, 481], "point": [2, 7, 8, 10, 16, 17, 21, 34, 71, 72, 73, 75, 81, 90, 95, 116, 119, 139, 158, 162, 164, 165, 176, 177, 179, 192, 225, 242, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "migrat": [2, 3, 7], "continu": [2, 8, 9, 11, 15, 16, 17, 20, 68, 75, 90, 113, 116, 119, 192, 471, 472, 473, 474], "integr": [2, 7, 9, 11, 17, 20, 21, 164, 165, 382, 393, 471, 472, 473, 474], "updat": [2, 4, 8, 11, 15, 16, 20, 36, 81, 119, 138, 142, 143, 145, 164, 165, 175, 183, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 472], "wheel": 2, "distribut": [2, 11, 12, 15, 17, 19, 21, 75, 116, 407, 415, 419, 421, 423, 435, 442, 459, 471], "substanti": [2, 6, 165], "refactor": [2, 4, 20, 225, 472], "across": [2, 315, 454, 474], "863": 2, "refin": [2, 8, 91, 97, 225], "851": 2, "debug": [2, 17, 20, 21, 378], "848": 2, "contact": [2, 7, 14, 15, 20, 191, 472, 478], "singl": [2, 8, 10, 17, 19, 21, 31, 32, 33, 34, 74, 75, 110, 114, 116, 164, 165, 179, 183, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 268, 339, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 461], "page": [2, 11, 17, 340, 471], "847": 2, "822": 2, "type": [2, 7, 8, 11, 15, 17, 18, 21, 49, 50, 51, 59, 60, 81, 91, 138, 139, 140, 145, 157, 167, 179, 191, 199, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 389, 393, 394, 397, 398, 399, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 471], "798": 2, "py3k": [2, 471], "797": 2, "795": 2, "stop": [2, 164, 165, 379], "divid": [2, 16, 20, 250, 382, 393, 398, 439, 454, 474, 476], "warn": [2, 8, 17, 111, 192, 256, 309, 381, 389], "lu": [2, 16, 267, 271, 275, 277, 291, 292, 301, 302, 303, 321, 322, 325, 471, 474], "790": 2, "sharedtemporaryfil": [2, 20, 382, 400], "bi": 2, "769": 2, "rais": [2, 10, 113, 210, 225, 256, 378, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "importerror": [2, 49, 50, 59, 60, 72, 73, 78, 81, 162, 164, 165, 176, 177, 179, 191], "try": [2, 9, 11, 16, 34, 49, 50, 59, 60, 72, 73, 78, 81, 119, 139, 162, 164, 165, 176, 177, 179, 192, 268], "unpack": [2, 11, 17], "768": 2, "disabl": 2, "tvtk": [2, 10, 17, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 378], "aren": 2, "met": [2, 16], "tabul": 2, "depend": [2, 9, 11, 16, 17, 19, 20, 21, 72, 73, 81, 115, 119, 139, 151, 164, 165, 179, 192, 199, 225, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 443, 471, 472, 474, 477, 481], "763": 2, "749": 2, "stoke": [2, 119], "caviti": [2, 119], "non": [2, 8, 11, 12, 16, 17, 31, 32, 33, 34, 36, 47, 50, 60, 72, 73, 81, 93, 95, 96, 138, 162, 164, 165, 176, 177, 183, 229, 230, 231, 322, 329, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 394, 421, 471, 474], "newtonian": 2, "748": 2, "721": 2, "862": 2, "could": [2, 6, 8, 15, 17, 72, 73, 116, 164, 165, 178, 183, 191, 192, 414], "load": [2, 95, 104, 394, 471], "qt": [2, 393], "plugin": 2, "xcb": 2, "858": 2, "856": 2, "facevari": [2, 17, 20, 67, 81, 110, 111, 112, 113, 115, 119, 192, 196, 198, 199, 200, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 367, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 438, 439, 442, 454, 455, 464, 466, 468, 469, 470, 472, 474], "doe": [2, 9, 11, 16, 17, 18, 20, 21, 81, 113, 115, 119, 164, 165, 179, 184, 191, 200, 225, 250, 263, 264, 265, 266, 269, 336, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398, 399, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 471, 472, 474, 481], "accumul": [2, 138, 379], "850": 2, "849": 2, "py27": 2, "fail": [2, 10, 16, 17, 81, 191, 382, 393, 414], "841": 2, "matplotlib2dview": [2, 20, 450, 455], "accept": [2, 8, 9, 11, 16, 164, 165, 192, 348, 351, 354, 355, 356, 357, 361, 362, 370, 372, 393], "color": [2, 10, 176, 177, 445, 446, 447, 449, 450, 451, 452, 454], "map": [2, 17, 168, 225, 378], "string": [2, 16, 225, 263, 264, 265, 266, 269, 378, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 482], "836": 2, "coupl": [2, 7, 8, 14, 15, 20, 21, 32, 83, 108, 119, 162, 163, 164, 165, 168, 176, 177, 183, 194, 340, 472, 474, 476], "high": [2, 4, 16, 20, 23, 52, 62, 86, 119, 400, 471, 472], "incompat": [2, 11, 191, 192, 193, 382, 393], "833": 2, "tool": [2, 3, 11, 14, 15, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 111, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 157, 158, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 225, 372, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 471, 474], "dump": [2, 8, 20, 167, 410], "undocu": [2, 17], "gzip": [2, 394], "828": [2, 6], "colorbar": [2, 20, 119, 142, 175, 176, 177, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455], "true": [2, 8, 17, 21, 31, 32, 52, 62, 63, 67, 68, 71, 74, 81, 90, 91, 95, 97, 99, 100, 103, 107, 110, 113, 128, 135, 138, 140, 145, 158, 162, 164, 165, 168, 175, 176, 177, 178, 179, 183, 184, 187, 191, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 381, 382, 388, 393, 394, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448, 450, 451, 452, 454, 455], "longer": [2, 9, 11, 16, 18, 21, 81, 119, 165, 179, 191, 192, 339, 471], "flow": [2, 8, 17, 20, 179, 183, 322, 329, 340, 475, 478], "826": 2, "gmsh": [2, 4, 10, 16, 20, 71, 72, 73, 104, 138, 140, 145, 193, 225, 378, 471, 472], "818": 2, "gridnd": 2, "mesh": [2, 4, 8, 10, 11, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 96, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 137, 138, 139, 140, 142, 143, 145, 150, 151, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 199, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 394, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 461, 464, 465, 466, 467, 468, 469, 470, 472, 474, 478], "cartesian": [2, 162, 176, 177, 224, 250, 407, 415, 419, 421, 442, 476], "811": [2, 393], "9": [2, 6, 8, 9, 11, 14, 16, 72, 73, 81, 82, 83, 95, 99, 107, 111, 113, 139, 140, 145, 162, 163, 164, 165, 168, 176, 177, 183, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 398, 403, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 445, 450, 451, 452, 457, 458, 478], "__repr__": [2, 20, 196, 197, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 314, 315, 316, 317, 318, 319, 320, 321, 335, 336, 337, 338, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 385, 386, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444], "throw": [2, 8, 72, 73], "ab": [2, 36, 71, 81, 95, 119, 124, 128, 129, 131, 164, 165, 179, 183, 184, 225, 348, 362, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "801": 2, "circleci": [2, 471], "36": 2, "serial": [2, 10, 11, 17, 20, 224, 225, 242, 321, 378, 382, 472], "800": [2, 139, 162], "conda2_env": 2, "realli": [2, 8, 11, 16, 19, 341], "796": 2, "phase": [2, 4, 6, 8, 14, 15, 16, 17, 19, 20, 21, 31, 32, 36, 108, 110, 112, 113, 115, 183, 192, 194, 475, 478], "polyxt": [2, 7, 8, 20], "freez": [2, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "792": 2, "circlequad": [2, 20], "781": 2, "matplolibview": 2, "ax": [2, 8, 20, 52, 57, 142, 162, 163, 175, 176, 177, 398, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 461], "778": 2, "binder": [2, 20, 472], "762": 2, "equat": [2, 14, 15, 16, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 129, 130, 131, 135, 138, 139, 140, 145, 150, 151, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 180, 183, 191, 193, 194, 198, 199, 200, 224, 225, 337, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 472, 476, 477], "742": 2, "mag": [2, 20, 167, 168, 176, 177, 183, 184, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "735": 2, "pip": [2, 11, 17, 397, 471], "734": 2, "residu": [2, 8, 20, 81, 90, 110, 113, 115, 119, 164, 165, 178, 179, 183, 184, 256, 262, 266, 268, 270, 289, 290, 292, 294, 300, 306, 309, 312, 317, 318, 319, 320, 335, 337, 338, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 471], "688": [2, 478], "need": [2, 3, 8, 9, 10, 11, 16, 17, 19, 21, 31, 32, 33, 34, 47, 51, 74, 81, 112, 119, 139, 162, 164, 165, 176, 177, 179, 183, 191, 192, 193, 203, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 259, 260, 314, 315, 343, 385, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 459, 478, 481, 482], "circl": [2, 7, 8, 17, 20, 34, 73, 158, 167, 168, 176, 177, 225, 414, 434], "676": 2, "explicitli": [2, 8, 16, 77, 81, 116, 162, 164, 165, 176, 177, 179, 191, 339, 398], "609": 2, "clearli": [2, 8, 21, 164, 165], "400": [2, 6, 110, 114, 115, 164, 165, 167, 178, 179], "globalvalu": [2, 17, 20, 31, 47, 103, 119, 179, 187, 348, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 438, 439, 442], "method": [2, 8, 10, 15, 16, 17, 19, 20, 21, 74, 80, 81, 119, 130, 157, 164, 165, 179, 183, 191, 192, 193, 194, 256, 268, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471, 472, 475, 476, 478, 481, 482], "assort": 2, "convect": [2, 15, 17, 20, 108, 164, 165, 178, 191, 194, 322, 329, 340, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 367, 370, 372, 374, 375, 438, 472, 475, 476, 477], "boundari": [2, 20, 21, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 90, 102, 113, 115, 119, 128, 130, 137, 138, 139, 140, 142, 143, 145, 164, 165, 167, 168, 171, 172, 173, 178, 179, 183, 191, 192, 193, 195, 196, 198, 199, 200, 201, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 472, 476], "spheric": [2, 224, 243, 244], "There": [2, 11, 16, 17, 135, 138, 164, 165, 179, 192, 414], "known": [2, 7, 8, 17, 21, 31, 32, 162, 164, 165, 176, 177, 414, 474, 476], "vtk": [2, 18, 444, 459, 466, 468, 469, 470], "bitrot": 2, "ha": [2, 6, 7, 8, 11, 13, 15, 16, 17, 18, 19, 21, 31, 32, 33, 34, 47, 50, 60, 63, 72, 73, 74, 75, 81, 90, 112, 113, 114, 115, 116, 119, 138, 139, 140, 142, 157, 167, 168, 175, 178, 179, 192, 193, 194, 200, 268, 309, 382, 383, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 446, 447, 448, 449, 450, 451, 452, 454, 455, 471, 474], "start": [2, 9, 11, 13, 31, 32, 33, 34, 113, 115, 119, 135, 162, 163, 164, 165, 176, 177, 178, 180, 192, 250, 378, 403, 459], "demis": 2, "nonuniformgrid1d": [2, 20, 220, 224, 235, 243], "figur": [2, 6, 17, 142, 162, 175, 176, 177, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 474], "out": [2, 11, 12, 16, 17, 67, 162, 164, 176, 177, 183, 250, 268, 378, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474], "747": 2, "spherical1d": 2, "uniform": [2, 75, 81, 110, 111, 112, 114, 115, 116, 162, 164, 165, 167, 176, 177, 178, 254, 394, 407, 415, 419, 421, 442], "nonuniform": [2, 478], "732": 2, "klkuhlm": 2, "neumann": [2, 20, 82, 83, 198, 472], "bc": [2, 36, 85, 86], "constraint": [2, 17, 20, 68, 139, 178, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "719": 2, "atism": 2, "vertex": [2, 20, 93, 221, 225, 231, 233, 236, 242, 250, 472, 476], "invers": [2, 382, 393, 419], "716": 2, "726": 2, "mayavicli": [2, 20, 34, 158, 457], "663": 2, "datamin": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 110, 111, 112, 113, 115, 123, 124, 126, 128, 130, 139, 142, 143, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 180, 192, 407, 415, 419, 421, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "datamax": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 110, 111, 112, 113, 115, 123, 124, 126, 128, 130, 139, 142, 143, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 180, 192, 407, 415, 419, 421, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "argument": [2, 8, 16, 119, 138, 140, 142, 143, 145, 157, 175, 192, 193, 194, 292, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 399, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 481, 482], "662": 2, "scale": [2, 21, 81, 90, 110, 111, 113, 115, 119, 142, 164, 165, 175, 178, 183, 184, 251, 256, 419, 446, 447, 448, 449, 450, 451, 452, 454, 455], "arg": [2, 179, 194, 220, 221, 222, 223, 225, 235, 236, 237, 242, 243, 244, 339, 340, 341, 378, 388, 389, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 446, 447, 449, 451, 452, 454, 455, 459], "primarili": [2, 7, 17, 81, 381, 474], "711": 2, "plm_rsh_agent": 2, "710": 2, "708": 2, "703": [2, 478], "fortran": [2, 6, 21, 162, 163, 167, 168, 171, 172, 173, 471], "arrai": [2, 6, 8, 15, 17, 21, 36, 52, 71, 91, 103, 123, 128, 129, 131, 139, 164, 165, 176, 177, 184, 194, 254, 339, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471], "solv": [2, 14, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 139, 150, 151, 152, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 183, 191, 192, 193, 255, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471, 472, 474, 475, 476], "701": 2, "while": [2, 4, 6, 8, 16, 17, 21, 31, 32, 33, 34, 63, 67, 71, 74, 81, 113, 139, 164, 165, 176, 177, 179, 183, 184, 263, 264, 265, 266, 268, 269, 382, 393, 474, 477], "700": 2, "print": [2, 15, 16, 17, 20, 21, 31, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 113, 115, 116, 119, 124, 126, 128, 129, 130, 131, 139, 150, 151, 152, 163, 164, 165, 167, 168, 171, 172, 173, 178, 179, 183, 184, 187, 191, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 378, 382, 388, 393, 394, 398, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "statement": [2, 191], "processor": [2, 10, 16, 17, 110, 382, 400, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471], "write": [2, 8, 20, 21, 72, 73, 74, 81, 119, 139, 145, 164, 165, 167, 183, 191, 192, 225, 382, 394, 400, 410], "timetest": 2, "forg": [2, 11, 17, 20, 472], "upload": [2, 20, 472], "pdf": [2, 14, 16, 17, 478], "option": [2, 6, 8, 10, 16, 17, 20, 22, 142, 143, 175, 183, 194, 262, 263, 264, 265, 266, 269, 270, 285, 286, 287, 288, 289, 290, 292, 293, 309, 317, 318, 319, 320, 335, 336, 337, 338, 378, 382, 389, 393, 398, 402, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 472, 482], "fipy_display_matrix": [2, 17], "legaci": [2, 9, 11, 17, 20, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 472], "matplotlib": [2, 8, 11, 17, 20, 142, 175, 176, 177, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 471, 472], "symlog": 2, "clean": [2, 225, 378], "benchmark": [2, 16, 20], "699": [2, 478], "stipul": 2, "forc": [2, 17], "miniconda": 2, "_cellvolumeaveragevari": 2, "class": [2, 4, 8, 10, 16, 17, 21, 85, 110, 111, 112, 113, 114, 115, 116, 119, 142, 143, 162, 175, 176, 177, 191, 192, 193, 196, 197, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 342, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 379, 380, 381, 382, 383, 385, 386, 393, 398, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 481, 482], "express": [2, 6, 8, 11, 12, 13, 17, 21, 32, 36, 110, 119, 162, 164, 165, 176, 177, 179, 183, 225, 343, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474], "bad": [2, 3], "stack": [2, 11], "make": [2, 7, 10, 11, 13, 16, 17, 20, 21, 31, 33, 34, 36, 71, 108, 115, 119, 135, 164, 165, 176, 177, 178, 179, 183, 191, 192, 193, 225, 256, 357, 381, 382, 393, 410, 414, 418, 421, 423, 428, 434, 437, 438, 439, 443, 471, 472, 473, 474, 481], "698": 2, "nick": [2, 476], "croft": [2, 476, 478], "thesi": [2, 476, 478], "681": 2, "header": 2, "footer": 2, "680": 2, "nixpkg": 2, "661": 2, "658": 2, "692": 2, "copi": [2, 3, 7, 9, 11, 12, 17, 20, 81, 110, 111, 112, 113, 114, 115, 116, 183, 184, 315, 378, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471], "script": [2, 7, 15, 17, 20, 23, 31, 32, 72, 73, 81, 123, 124, 128, 130, 139, 145, 178, 183, 191, 192, 193, 225, 377, 457, 458, 459, 471, 472, 481], "669": 2, "input": [2, 7, 8, 15, 16, 19, 20, 21, 32, 40, 41, 63, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 90, 93, 94, 95, 97, 100, 104, 107, 116, 138, 139, 140, 145, 164, 165, 179, 183, 184, 191, 382, 393, 398], "deadlock": 2, "643": 2, "bring": 2, "sourc": [2, 7, 9, 11, 14, 15, 16, 17, 18, 20, 32, 56, 57, 67, 71, 74, 108, 113, 114, 119, 139, 162, 164, 165, 167, 168, 176, 177, 178, 179, 192, 194, 368, 369, 435, 459, 471, 472, 475, 476], "translat": [2, 6, 21, 164, 165, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "pya": 2, "woodscn": 2, "spell": [2, 17], "657": 2, "window": [2, 11, 16, 17, 19, 142, 143, 175, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 464, 465, 466, 468, 469, 470, 471], "648": 2, "647": 2, "645": 2, "gmshmesh": [2, 20], "py": [2, 6, 7, 10, 15, 16, 17, 34, 78, 80, 81, 90, 91, 93, 94, 95, 100, 104, 107, 111, 113, 138, 139, 140, 145, 157, 176, 177, 179, 191, 309, 457, 458, 459, 481], "6": [2, 6, 8, 14, 15, 16, 17, 31, 32, 33, 34, 36, 47, 52, 72, 73, 81, 85, 95, 103, 110, 111, 112, 113, 115, 119, 126, 139, 140, 142, 143, 145, 150, 162, 164, 165, 167, 168, 176, 177, 178, 179, 183, 184, 192, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 362, 382, 393, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 464, 477, 478], "644": 2, "xfong": 2, "655": 2, "mayavi": [2, 8, 11, 17, 20, 138, 143, 145, 444, 457, 458, 459, 471, 472], "wont": 2, "hendrik410": 2, "646": 2, "branch": [2, 20, 162, 176, 177, 472], "601": 2, "recurs": [2, 16, 474], "mess": 2, "597": 2, "compress": [2, 11, 394, 478], "archiv": [2, 9, 11, 15, 17, 20], "557": 2, "facegradaverag": 2, "stupid": 2, "552": 2, "458": 2, "wrong": [2, 8, 192], "preced": [2, 16, 17], "lx": [2, 74, 77, 80, 90, 91, 94, 95, 97, 99, 100, 104, 126, 128, 142, 143, 168, 183, 184, 192, 224, 393], "dx": [2, 17, 31, 32, 33, 36, 39, 40, 51, 52, 54, 56, 57, 63, 65, 66, 67, 68, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 139, 142, 143, 151, 157, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 191, 192, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 352, 359, 360, 362, 363, 367, 374, 375, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 445, 450, 451, 452, 454, 455, 457, 458, 464], "nonuniformgrid": 2, "457": 2, "special": [2, 12, 17, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 162, 164, 165, 176, 177, 368, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 481, 482], "includ": [2, 4, 7, 11, 12, 15, 16, 17, 19, 68, 119, 138, 162, 164, 165, 176, 177, 178, 192, 193, 194, 225, 464, 474, 475, 481], "432": 2, "340": 2, "packag": [2, 8, 10, 13, 16, 17, 18, 20, 21, 23, 72, 73, 142, 143, 162, 164, 165, 176, 177, 269, 335, 339, 340, 341, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 397, 414, 447, 457, 458, 471, 472, 473, 483], "just": [2, 7, 8, 16, 17, 21, 78, 81, 164, 165, 178, 179, 256, 382, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 449, 450, 476], "master": [2, 9, 11, 20, 472], "predominantli": 2, "devop": 2, "been": [2, 6, 7, 8, 11, 15, 16, 17, 21, 63, 75, 81, 130, 138, 139, 140, 145, 157, 164, 165, 178, 191, 192, 193, 194, 225, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474], "easier": [2, 8, 16, 21, 183, 191, 192, 193, 225], "It": [2, 3, 6, 8, 11, 16, 17, 18, 19, 31, 32, 49, 50, 52, 59, 60, 62, 74, 81, 96, 119, 139, 140, 164, 165, 179, 191, 192, 200, 225, 250, 268, 269, 335, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 459, 464, 471], "possibl": [2, 8, 10, 16, 17, 21, 52, 62, 74, 81, 111, 164, 165, 179, 225, 268, 292, 336, 378, 382, 393, 445, 454, 475], "minim": [2, 3, 6, 8, 266, 320, 322, 329, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471], "base": [2, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 81, 91, 119, 138, 139, 140, 142, 143, 145, 157, 163, 175, 179, 194, 196, 197, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 381, 382, 385, 386, 393, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 472, 474, 478, 482], "travisci": [2, 471], "appveyor": [2, 471], "badg": 2, "636": 2, "615": 2, "issue555": 2, "licens": [2, 11, 21], "613": [2, 478], "607": 2, "600": [2, 421], "explain": [2, 7, 8, 11, 17, 139], "where": [2, 10, 15, 16, 17, 19, 20, 21, 31, 32, 33, 34, 36, 63, 67, 71, 75, 78, 81, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 139, 140, 142, 143, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 183, 184, 191, 192, 196, 197, 198, 199, 200, 339, 348, 352, 357, 359, 360, 363, 365, 367, 372, 374, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472, 474, 475, 477], "596": 2, "correct": [2, 8, 10, 17, 36, 75, 81, 112, 114, 116, 119, 151, 167, 168, 176, 177, 183, 225, 393, 394, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 445, 466, 474], "en_u": [2, 17], "dictionari": [2, 17, 378], "594": 2, "smoothedaggregationsolv": 2, "593": 2, "585": 2, "tarbal": 2, "582": 2, "navier": [2, 119], "viscou": [2, 119], "limit": [2, 8, 12, 15, 16, 17, 81, 119, 135, 142, 143, 162, 164, 165, 175, 176, 177, 179, 183, 192, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "580": 2, "stokescav": [2, 7, 8, 20], "579": 2, "rowin": 2, "inlin": [2, 4, 6, 8, 11, 17, 20, 194, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471], "578": 2, "577": 2, "epetra": [2, 314, 315], "vector": [2, 8, 16, 20, 32, 72, 73, 74, 81, 90, 110, 115, 119, 164, 178, 183, 184, 191, 192, 199, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398, 414, 455, 472, 474], "numarrai": [2, 471], "574": 2, "codaci": 2, "572": 2, "pytrilino": [2, 16, 17, 471], "unavail": [2, 49, 50, 59, 60, 179], "570": 2, "shwina": 2, "569": 2, "gpu": [2, 16], "via": [2, 8, 11, 14, 17, 137, 474], "pyamgx": [2, 17, 20, 472], "567": 2, "dedic": 2, "public": [2, 8, 12, 18, 20, 21, 393, 471, 472, 473, 478], "domain": [2, 17, 21, 31, 32, 36, 71, 72, 73, 75, 78, 81, 82, 90, 91, 110, 111, 112, 116, 119, 130, 139, 162, 163, 164, 165, 167, 168, 171, 176, 177, 179, 180, 183, 209, 224, 225, 322, 323, 325, 327, 328, 454, 474, 476], "556": 2, "550": 2, "546": 2, "ensur": [2, 81, 382, 388, 393], "dtype": [2, 20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "float": [2, 10, 21, 50, 60, 71, 142, 143, 164, 165, 175, 192, 196, 198, 199, 200, 224, 250, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "matrix": [2, 8, 11, 16, 17, 20, 21, 71, 74, 81, 86, 119, 162, 164, 165, 176, 177, 179, 183, 184, 192, 199, 255, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471, 474, 475], "multipli": [2, 20, 21, 256, 343, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 382, 393], "544": 2, "revert": [2, 225], "issue534": 2, "physic": [2, 8, 14, 19, 21, 74, 111, 139, 179, 183, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 475, 477, 478], "field": [2, 4, 6, 8, 14, 15, 16, 17, 19, 20, 21, 36, 68, 74, 81, 108, 112, 113, 114, 115, 119, 139, 140, 145, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 183, 192, 194, 348, 382, 393, 398, 410, 454, 475, 478], "mishandl": 2, "compound": 2, "unit": [2, 12, 20, 21, 111, 119, 126, 139, 140, 145, 377, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "536": 2, "532": 2, "race": [2, 400], "524": 2, "max": [2, 4, 16, 20, 31, 47, 71, 74, 95, 113, 119, 129, 139, 151, 158, 164, 165, 183, 184, 187, 192, 315, 348, 362, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454], "min": [2, 20, 31, 32, 33, 34, 36, 113, 128, 158, 183, 184, 192, 315, 348, 362, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454], "global": [2, 14, 17, 21, 151, 152, 378], "520": 2, "gitter": 2, "chat": 2, "516": 2, "badger": 2, "489": 2, "631": 2, "628": 2, "627": 2, "omp_num_thread": [2, 16, 17], "625": [2, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "setup": [2, 108, 110, 114, 116, 123, 124, 128, 130], "import": [2, 4, 8, 10, 16, 17, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 142, 143, 157, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 379, 382, 393, 394, 397, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458, 464, 481], "623": 2, "621": 2, "plot": [2, 16, 17, 18, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 139, 140, 142, 143, 145, 157, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 407, 415, 419, 421, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 472], "617": 2, "pick": [2, 11], "1st": 2, "valu": [2, 6, 7, 8, 10, 19, 20, 21, 31, 32, 36, 39, 40, 52, 54, 57, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 138, 139, 140, 142, 143, 145, 151, 157, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 196, 197, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 263, 264, 265, 266, 269, 309, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 393, 398, 399, 404, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 472, 474, 477, 482], "1d": [2, 18, 36, 49, 50, 51, 56, 59, 60, 77, 78, 80, 81, 85, 93, 94, 95, 96, 99, 100, 104, 107, 110, 111, 113, 114, 115, 116, 135, 142, 143, 157, 164, 165, 175, 178, 179, 184, 191, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 414, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471], "cellvari": [2, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 142, 157, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 225, 235, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398, 407, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 464, 465, 466, 468, 469, 470, 472], "611": 2, "cannot": [2, 8, 9, 11, 17, 21, 32, 74, 119, 192, 210, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 343, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 474], "610": 2, "anisotropi": [2, 6, 7, 8, 17, 19, 20, 163, 176, 177], "contour": [2, 18, 91, 140, 142, 143, 162, 449, 450, 452, 471], "displai": [2, 17, 18, 20, 21, 36, 72, 73, 81, 96, 113, 115, 138, 139, 140, 142, 143, 145, 162, 175, 176, 177, 388, 389, 398, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471], "legend": [2, 175, 445, 448], "608": 2, "var": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 139, 142, 143, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "object": [2, 4, 6, 8, 14, 15, 17, 20, 68, 72, 73, 81, 91, 95, 123, 124, 128, 130, 137, 139, 142, 143, 157, 162, 175, 176, 177, 179, 180, 191, 192, 194, 196, 197, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 256, 262, 263, 264, 265, 266, 269, 270, 280, 285, 286, 291, 295, 297, 298, 299, 300, 301, 307, 308, 309, 315, 317, 318, 319, 320, 335, 336, 337, 338, 342, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 381, 382, 385, 393, 394, 398, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 472, 474, 481], "callabl": [2, 402], "603": 2, "basic": [2, 8, 11, 16, 17, 19, 21, 157, 225, 383, 399], "602": 2, "592": 2, "590": 2, "pyamgsolv": 2, "584": 2, "anim": [2, 142, 143], "jupyt": [2, 11], "notebook": [2, 11], "566": 2, "565": 2, "empti": [2, 176, 177, 378], "env": [2, 11, 397], "564": 2, "board": 2, "561": 2, "cast": [2, 8, 382, 393, 474, 478], "data": [2, 15, 16, 18, 20, 21, 36, 139, 142, 143, 163, 167, 168, 171, 172, 173, 175, 194, 225, 393, 394, 397, 398, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 471, 472, 481], "int64": 2, "int32": 2, "accord": [2, 179], "rule": [2, 34, 158, 164, 165], "safe": [2, 67], "555": 2, "551": 2, "spew": 2, "545": 2, "543": 2, "integ": [2, 81, 192, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "539": 2, "explicit": [2, 8, 11, 17, 20, 32, 45, 74, 81, 139, 163, 164, 165, 168, 171, 172, 173, 179, 183, 192, 193, 343, 352, 359, 360, 363, 367, 368, 374, 375, 474, 477], "mixedel": [2, 20], "538": 2, "534": 2, "physicalfield": [2, 20, 111, 113, 382, 443], "533": 2, "531": 2, "drop_tol": 2, "linalg": [2, 16, 302, 303, 304], "splu": 2, "gone": 2, "530": 2, "instruct": [2, 7, 9, 11, 17, 481, 482], "528": 2, "525": [2, 112], "guyer": [2, 4, 14, 108, 478], "osx": 2, "513": 2, "510": 2, "weav": [2, 8, 11, 17, 21, 471], "509": 2, "unabl": [2, 16], "506": 2, "spatial": [2, 8, 20, 31, 33, 34, 81, 119, 472], "vari": [2, 8, 20, 21, 72, 73, 81, 90, 167, 454, 472], "anisotrop": [2, 4, 19, 20, 71, 162, 176, 177, 472], "488": 2, "gmshgrid": 2, "435": 2, "fatal": 2, "spmatrix": 2, "h": [2, 14, 17, 164, 165, 176, 177, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 475, 478], "found": [2, 7, 9, 11, 15, 16, 17, 21, 49, 50, 51, 59, 60, 81, 91, 119, 140, 162, 164, 165, 176, 177, 179, 191, 192, 193, 256, 471, 479, 480, 481, 483], "434": 2, "ez_setup": 2, "502": 2, "gmane": [2, 3, 8], "defunct": [2, 3, 471], "recvobj": 2, "allgath": [2, 20, 315], "sendobj": [2, 315], "492": 2, "restor": [2, 16], "trail": 2, "whitespac": 2, "expect": [2, 7, 8, 16, 17, 77, 78, 81, 164, 165, 179, 398, 474], "485": 2, "pep": [2, 10, 471], "440": 2, "483": 2, "provid": [2, 3, 8, 9, 11, 12, 15, 16, 17, 19, 21, 86, 90, 110, 111, 112, 135, 139, 194, 225, 269, 335, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 400, 464, 471, 474, 481, 482], "_facetocelldistanceratio": [2, 17], "why": [2, 16, 20, 256, 378, 472], "scalar": [2, 16, 17, 192, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "481": 2, "strip": 2, "white": 2, "space": [2, 21, 50, 60, 81, 140, 145, 158, 164, 165, 179, 192, 223, 224, 253, 254, 421, 475], "eof": 2, "r": [2, 14, 19, 31, 32, 33, 34, 39, 40, 49, 50, 59, 60, 68, 71, 81, 119, 139, 140, 142, 145, 151, 158, 162, 164, 165, 176, 177, 178, 183, 184, 225, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 457, 458, 478], "479": 2, "uniformgrid3d": [2, 20, 224], "_celltocellid": 2, "concaten": [2, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "478": 2, "pkgw": 2, "incorrect": [2, 81, 343, 398], "axi": [2, 8, 19, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 126, 175, 191, 192, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448], "477": 2, "472": 2, "471": 2, "sort": 2, "entri": [2, 17, 198, 199, 393], "469": 2, "syntax": [2, 11, 15, 17, 21, 164, 165, 191, 192, 193], "466": 2, "465": 2, "cahnhilliard": [2, 6, 7, 8, 17, 20], "mesh2dcoupl": [2, 7, 8, 17, 20], "463": [2, 14], "typeset": 2, "analyt": [2, 8, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 85, 91, 107, 113, 114, 115, 116, 135, 179, 191, 372], "solut": [2, 8, 15, 16, 17, 21, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 130, 135, 151, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 179, 183, 184, 191, 192, 194, 200, 256, 262, 270, 309, 317, 318, 319, 320, 335, 337, 338, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471, 474, 476, 477], "460": 2, "pdflatex": 2, "head": [2, 6], "459": [2, 393], "purg": 2, "gist": [2, 383], "456": [2, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375], "duplic": [2, 3, 378, 382, 393, 410, 414, 418, 423, 428, 434, 437, 438, 439, 443], "ufunc": [2, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "454": 2, "452": 2, "getter": [2, 193], "setter": [2, 193], "450": 2, "448": 2, "ipython": [2, 17, 471], "447": 2, "proper": [2, 119, 225], "446": 2, "robust": [2, 255], "distutil": 2, "strictvers": 2, "442": 2, "compar": [2, 6, 11, 16, 17, 36, 47, 71, 81, 91, 135, 140, 162, 163, 164, 165, 167, 168, 171, 172, 173, 179, 225, 372, 382, 393, 398, 407, 415, 419, 421], "tupl": [2, 8, 110, 111, 112, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 394, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 474], "441": 2, "two": [2, 8, 10, 11, 16, 17, 19, 21, 31, 32, 74, 82, 83, 99, 110, 111, 112, 113, 115, 119, 128, 129, 131, 162, 164, 165, 167, 168, 171, 176, 177, 178, 183, 191, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 398, 414, 438, 474, 478, 481], "439": 2, "alfrenardi": 2, "issue426": 2, "typo": 2, "431": 2, "raybsmith": 2, "429": 2, "matplotlibview": [2, 8, 20, 176, 177], "428": 2, "period": [2, 47, 90, 168, 235, 236, 237], "3d": [2, 18, 33, 113, 158, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 471], "424": 2, "419": 2, "498": 2, "nonlinear": [2, 8], "496": 2, "linearbicgstabsolv": [2, 20, 165], "take": [2, 16, 17, 20, 21, 77, 81, 113, 126, 162, 164, 165, 176, 177, 178, 179, 183, 192, 193, 221, 225, 231, 233, 236, 242, 250, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472], "494": 2, "493": 2, "review": [2, 14, 20, 472, 478], "io": [2, 16, 336, 382, 400, 471], "access": [2, 17, 19, 21, 162, 176, 177, 192, 382, 383, 400, 481], "leav": [2, 11, 19, 81, 119, 164, 165], "comment": [2, 11, 17, 21], "491": 2, "mpi4pi": [2, 11, 16, 17, 315, 471], "484": 2, "482": 2, "compliant": 2, "476": 2, "setuptool": 2, "475": 2, "grid3d": [2, 20, 33, 102, 103, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 457, 458], "470": 2, "mesh3d": [2, 20], "celltocellid": 2, "467": 2, "sequenc": [2, 21, 382, 393, 398], "462": 2, "incorrectli": 2, "455": 2, "445": 2, "dendriteview": [2, 162], "put": [2, 17, 20, 31, 33, 34, 192, 382, 393, 398, 403, 472], "over": [2, 10, 17, 21, 31, 32, 33, 34, 36, 63, 81, 90, 110, 119, 130, 162, 164, 165, 178, 179, 192, 193, 398, 435, 449, 450, 471, 474, 476, 477], "bar": [2, 176, 177, 178, 183, 393, 445, 446, 447, 449, 450, 451, 452], "443": 2, "api": [2, 8, 16, 383], "nice": [2, 449, 450, 471], "438": 2, "mac": [2, 11, 13, 19, 22], "o": [2, 4, 11, 13, 16, 17, 22, 71, 72, 73, 139, 163, 164, 165, 167, 168, 171, 172, 173], "437": 2, "mislead": 2, "433": 2, "430": 2, "427": 2, "425": [2, 176, 177], "warren": [2, 4, 14, 108, 162, 163, 167, 168, 176, 177, 478], "web": [2, 11, 19], "421": 2, "matplotlib2dgridview": [2, 20, 162, 176, 177], "function": [2, 8, 10, 11, 16, 17, 19, 21, 31, 32, 36, 72, 73, 81, 108, 112, 123, 124, 130, 137, 139, 140, 145, 150, 164, 165, 167, 178, 179, 183, 192, 193, 194, 203, 221, 224, 225, 231, 233, 236, 242, 250, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 380, 382, 383, 387, 388, 389, 393, 394, 397, 398, 399, 400, 402, 403, 414, 435, 444, 445, 459, 466, 474, 475, 476, 481], "416": 2, "reflect": [2, 382, 393, 410, 414, 418, 423, 428, 434, 437, 438, 439, 443], "415": 2, "matplotlibgrid2dview": 2, "414": 2, "periodicgrid3d": [2, 20], "413": 2, "remind": 2, "user": [2, 3, 8, 9, 11, 13, 15, 16, 17, 19, 21, 31, 32, 33, 34, 81, 162, 176, 177, 179, 191, 192, 193, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 439, 442, 443, 477], "differ": [2, 8, 9, 11, 16, 17, 19, 21, 31, 32, 33, 34, 47, 72, 73, 77, 80, 81, 94, 95, 96, 99, 100, 104, 108, 110, 111, 112, 115, 138, 140, 145, 164, 165, 167, 168, 179, 180, 191, 192, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 268, 343, 382, 393, 398, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 454, 461, 474, 476, 478], "conserv": [2, 8, 17, 20, 31, 32, 74, 81, 139, 151, 152, 162, 164, 165, 176, 177, 183, 435, 439, 472, 476], "412": 2, "pickl": [2, 8, 167, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 309, 314, 315, 316, 343, 385, 386, 394, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444], "commun": [2, 3, 15, 16, 17, 21, 71, 124, 126, 128, 130, 139, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 259, 260, 314, 315, 382, 385, 394, 400, 414], "unnecessari": 2, "grid": [2, 16, 17, 81, 119, 164, 165, 168, 179, 220, 221, 222, 223, 224, 232, 233, 235, 236, 237, 242, 243, 244, 252, 253, 254, 438, 454, 471, 476], "408": 2, "407": 2, "strang": 2, "loop": [2, 34, 72, 73, 77, 80, 81, 82, 83, 95, 119, 139, 158, 164, 165, 178, 225], "reshap": [2, 20, 162, 176, 177, 382, 393, 398], "404": 2, "never": [2, 9, 11, 16, 179, 481], "401": 2, "sweep": [2, 16, 17, 20, 67, 71, 74, 81, 113, 114, 119, 164, 165, 179, 183, 184, 192, 193, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 472], "instead": [2, 3, 8, 9, 11, 17, 19, 21, 81, 119, 138, 164, 165, 168, 179, 191, 192, 193, 339, 340, 341, 342, 389, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 481], "295": 2, "must": [2, 10, 17, 21, 31, 32, 51, 75, 81, 111, 114, 116, 119, 162, 164, 165, 167, 168, 176, 177, 179, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 343, 352, 359, 360, 363, 367, 374, 375, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 449, 450, 454, 464, 474, 477, 482], "zizou": 2, "signific": [2, 9, 11, 15, 16, 194], "level": [2, 4, 15, 16, 17, 20, 23, 123, 124, 126, 128, 129, 130, 131, 194, 268, 322, 327, 328, 329, 330, 331, 332, 333, 400, 414, 449, 450, 471, 472, 478], "handl": [2, 11, 21, 49, 50, 51, 59, 60, 164, 165, 191, 225], "lsmlib": [2, 10, 17, 20, 414, 472], "scikit": [2, 17, 20, 414, 472], "fmm": [2, 17, 20, 414, 472], "librari": [2, 11, 16, 17, 21, 22, 49, 50, 59, 60, 72, 73, 78, 81, 164, 165, 179, 399, 471, 474], "magnitud": [2, 16, 17, 31, 32, 81, 108, 183, 184, 348, 362, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 455], "faster": [2, 6, 21, 179, 477], "than": [2, 3, 6, 8, 10, 11, 15, 16, 17, 21, 47, 65, 66, 81, 90, 91, 110, 115, 119, 140, 164, 165, 167, 168, 178, 179, 183, 184, 191, 192, 193, 225, 268, 348, 362, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 449, 450, 474, 481], "prototyp": 2, "streamplot": [2, 454], "control": [2, 14, 17, 19, 31, 32, 33, 34, 139, 140, 145, 157, 164, 165, 183, 340, 341, 454, 474], "git": [2, 20, 192, 193, 472, 473, 478], "particip": 2, "398": [2, 478], "home": [2, 22], "redirect": [2, 8], "397": 2, "sphinxcontrib": [2, 17], "bibtex": [2, 17], "396": 2, "googl": [2, 3], "395": 2, "ubuntu": 2, "393": 2, "cylindricalnonuniformgrid2d": [2, 20, 224], "exteriorfac": [2, 17, 20, 72, 73, 104, 119, 183, 184, 192, 222, 235, 236, 237, 244, 252], "392": 2, "exit_nist": 2, "cgi": 2, "391": 2, "p\u00e9clet": [2, 51, 63, 191, 192], "inequ": [2, 477], "388": 2, "64": [2, 16], "int": [2, 123, 126, 139, 157, 167, 183, 200, 221, 224, 225, 231, 233, 236, 242, 250, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 343, 382, 398, 400, 402, 410, 418, 423, 428, 434, 435, 437, 443, 449, 450, 455], "384": 2, "382": 2, "381": 2, "377": 2, "vanleerconvectionterm": [2, 20, 47, 183, 184, 474, 477], "minmod": 2, "slope": [2, 16], "376": 2, "committicketupdat": 2, "375": [2, 112, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 478], "_formatinteg": 2, "373": 2, "372": 2, "cylindr": [2, 49, 50, 59, 60, 220, 221, 222, 223, 224], "371": 2, "binari": [2, 6, 7, 8, 9, 10, 11, 14, 16, 17, 20, 21, 115, 165, 178, 203, 225, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 478], "370": 2, "368": 2, "well": [2, 3, 8, 9, 11, 15, 16, 17, 21, 31, 32, 108, 164, 165, 178, 179, 184, 191, 192, 194, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 475], "367": 2, "promot": 2, "366": 2, "unop": [2, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "365": 2, "renam": [2, 191, 192], "instanc": [2, 7, 17, 51, 192, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 466], "364": 2, "factori": [2, 81, 178, 191, 224, 444, 445, 466], "360": 2, "css": 2, "356": 2, "353": 2, "ohloh": 2, "repo": 2, "352": 2, "getvers": 2, "350": 2, "element": [2, 6, 15, 36, 72, 73, 78, 108, 137, 157, 225, 229, 230, 231, 340, 348, 370, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 474, 476, 478], "347": 2, "activ": [2, 9, 11, 16, 17, 21, 397], "frame": [2, 8, 457, 458], "front": [2, 102, 162, 164, 165, 176, 177, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 439], "339": 2, "loki": 2, "337": 2, "interact": [2, 3, 7, 11, 15, 17, 19, 21, 36, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 110, 111, 112, 113, 114, 115, 116, 139, 163, 164, 165, 167, 168, 178, 179, 191, 382, 393, 463], "between": [2, 11, 16, 17, 20, 21, 31, 32, 81, 108, 110, 138, 140, 162, 164, 165, 168, 171, 176, 177, 179, 183, 191, 192, 224, 242, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 393, 398, 402, 414, 434, 471, 472, 474, 477], "336": 2, "clash": 2, "334": 2, "citat": [2, 17], "go": [2, 11, 13, 21, 110, 111, 112, 162, 163, 164, 165, 167, 168, 176, 177], "doi": [2, 14, 471, 478], "333": 2, "seem": [2, 16, 17, 164, 165, 191, 454, 481], "331": 2, "330": 2, "facevalu": [2, 20, 164, 165, 178, 183, 184, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "facecent": [2, 17, 72, 73, 81, 82, 83, 104, 119, 164, 165, 178, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "329": 2, "background": [2, 8, 20, 21, 225, 472, 473], "326": 2, "gmsh2d": [2, 17, 20, 71, 72, 73, 95, 137, 193, 225], "323": 2, "getfacecent": [2, 192], "return": [2, 17, 32, 72, 73, 81, 82, 83, 110, 111, 112, 113, 114, 115, 116, 128, 129, 131, 164, 165, 167, 176, 177, 178, 179, 183, 184, 191, 192, 196, 197, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 306, 307, 308, 309, 312, 314, 315, 316, 317, 318, 319, 320, 321, 335, 336, 337, 338, 339, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 385, 386, 389, 393, 394, 397, 398, 399, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 459, 466], "319": 2, "transientterm": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 63, 71, 72, 73, 74, 77, 78, 81, 82, 83, 90, 110, 111, 112, 113, 114, 115, 123, 124, 126, 128, 130, 139, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 183, 184, 192, 193, 343, 352, 359, 360, 363, 367, 374, 375, 474], "dt": [2, 8, 17, 31, 32, 33, 34, 36, 39, 40, 47, 63, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 90, 110, 111, 112, 113, 114, 115, 123, 124, 126, 135, 139, 150, 151, 152, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 183, 184, 193, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 419], "318": 2, "311": 2, "305": 2, "mpirun": [2, 17], "np": [2, 17], "wd": 2, "hang": 2, "sandbox": 2, "buildbot": [2, 4], "297": 2, "gnuplot": 2, "291": [2, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375], "efficiency_test": 2, "choke": 2, "liquidvapor2d": [2, 20], "289": [2, 478], "diffusionterm": [2, 8, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 183, 184, 191, 192, 348, 351, 352, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 374, 375, 474], "_test": 2, "287": 2, "275": 2, "bunter": 2, "274": 2, "norm2": 2, "272": 2, "269": 2, "gridxd": 2, "255": 2, "mask": [2, 8, 17, 128, 192, 196, 198, 199, 200, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "253": 2, "promin": 2, "245": [2, 145], "_binaryterm": 2, "228": 2, "attempt": [2, 11, 16, 17, 18, 21, 81, 191, 194, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 457, 458], "mpi": [2, 16, 20, 224, 259, 260, 314, 315, 382, 385, 388, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 471, 472], "225": 2, "mostli": [2, 224, 225], "209": [2, 119], "rhie": [2, 119], "chow": [2, 119], "180": [2, 176, 177], "arithmet": [2, 8, 21, 168, 176, 177, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471], "face": [2, 8, 17, 21, 31, 33, 34, 36, 68, 72, 73, 81, 85, 119, 157, 164, 165, 167, 168, 176, 177, 183, 191, 192, 196, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 455, 474], "cell": [2, 6, 8, 14, 16, 17, 19, 20, 21, 31, 33, 34, 50, 60, 67, 71, 72, 73, 81, 82, 83, 107, 119, 140, 145, 157, 164, 165, 183, 192, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 452, 454, 455, 464, 472, 476, 478], "distanc": [2, 17, 123, 124, 130, 139, 150, 183, 414, 474], "calcul": [2, 6, 8, 15, 16, 17, 18, 19, 21, 31, 33, 34, 51, 72, 73, 81, 90, 91, 119, 130, 139, 164, 165, 175, 183, 191, 192, 194, 229, 230, 231, 256, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "128": 2, "123": [2, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 398], "numerix": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 103, 107, 111, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 139, 150, 151, 152, 157, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458, 474], "dot": [2, 17, 20, 71, 113, 114, 115, 119, 138, 139, 140, 151, 163, 192, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "tensor": [2, 20, 94, 162, 176, 177, 472], "103": 2, "subscrib": [2, 3], "_markstal": 2, "attributeerror": [2, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "61": 2, "implicitdiffusionterm": [2, 20, 191, 192, 200, 474], "simpl": [2, 7, 8, 17, 19, 20, 21, 31, 32, 72, 73, 81, 107, 110, 113, 114, 116, 119, 140, 164, 165, 167, 168, 178, 348, 362, 393, 414, 438, 439, 459, 476], "346": 2, "text": [2, 7, 8, 15, 16, 17, 21, 32, 36, 49, 51, 56, 59, 60, 75, 81, 85, 108, 110, 114, 115, 116, 126, 129, 131, 135, 139, 142, 143, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 191, 198, 199, 200, 256, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 474, 475, 477], "trunk": 2, "342": 2, "transient": [2, 15, 17, 20, 72, 73, 77, 78, 81, 82, 83, 108, 163, 178, 179, 194, 472, 475, 476], "implicit": [2, 8, 11, 17, 32, 46, 81, 82, 83, 85, 163, 164, 165, 167, 168, 178, 179, 191, 343, 365, 368, 369, 474], "338": 2, "svntogit": 2, "bump": [2, 14], "increas": [2, 8, 16, 21, 31, 32, 33, 34, 63, 74, 81, 164, 165, 183, 225, 256, 268, 449, 450, 474, 477], "capabl": [2, 8, 11, 16, 17, 18, 21, 259, 260, 314, 315, 385, 474], "eas": 2, "few": [2, 16, 19, 21, 75, 138, 414, 479, 480, 481, 483], "exist": [2, 3, 9, 10, 11, 15, 21, 139, 145, 162, 176, 177, 191, 192, 194, 225, 378, 382, 393, 434, 471, 475, 481], "mechan": [2, 8, 14, 17, 21, 138, 145, 167, 471, 478], "partit": [2, 4, 16, 17, 192, 225], "pervas": [2, 4, 10], "full": [2, 4, 11, 21, 108, 140, 178, 191, 194, 481], "namespac": [2, 17, 192, 193], "update2_0to3_0": [2, 7, 20], "detail": [2, 8, 11, 15, 16, 17, 21, 49, 50, 51, 59, 60, 72, 73, 119, 164, 165, 167, 168, 176, 177, 191, 336, 352, 359, 360, 363, 367, 374, 378, 399], "contain": [2, 7, 8, 11, 21, 22, 115, 119, 139, 180, 192, 193, 229, 230, 231, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 479, 480, 483], "timestep": [2, 20, 81, 85, 113, 162, 164, 165, 176, 177, 179, 183, 184, 191, 192, 193, 340, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 421, 472], "brought": [2, 16], "unavoid": 2, "guidanc": [2, 8], "332": 2, "x86_64": 2, "324": 2, "317": [2, 14], "gmshimport": [2, 10], "share": [2, 19, 382, 400], "316": 2, "caus": [2, 8, 15, 16, 17, 119, 162, 176, 177, 191, 192, 210, 225, 229, 255, 256, 309, 343, 444], "313": 2, "307": 2, "306": [2, 478], "302": 2, "301": 2, "pycomm": 2, "debian": 2, "300": [2, 119, 164, 165, 419], "mesh2d": [2, 6, 20, 33, 34, 221, 225, 233, 236, 242, 250], "299": 2, "298": [2, 113, 139, 140, 145], "consumpt": [2, 138, 140], "growth": [2, 6, 19, 21, 163, 176, 177, 478], "repeat": [2, 179], "especi": [2, 16, 19, 21, 477], "294": 2, "293": 2, "sphere": [2, 7, 8, 20], "segfault": 2, "292": 2, "290": 2, "inconsequenti": 2, "288": 2, "themselv": 2, "286": 2, "285": 2, "284": 2, "transpos": [2, 71], "281": 2, "nthorderdiffusionterm": 2, "280": 2, "convectionterm": [2, 8, 17, 68, 164, 183, 184, 191, 192], "277": 2, "step": [2, 6, 8, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 72, 73, 74, 77, 78, 80, 81, 82, 83, 91, 112, 113, 114, 123, 124, 126, 135, 138, 139, 140, 145, 150, 151, 152, 162, 163, 164, 165, 167, 168, 171, 172, 173, 179, 183, 184, 191, 192, 225, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 339, 341, 342, 372, 414, 421, 471, 472, 474], "273": 2, "diffusiontermnocorrect": [2, 20, 354], "270": [2, 176, 177], "too": [2, 8, 11, 16, 17, 31, 33, 34, 256], "267": [2, 478], "reduc": [2, 6, 21, 81, 114, 164, 165, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474, 476], "chemotaxi": [2, 20], "264": 2, "input2d": [2, 20], "261": 2, "260": 2, "259": 2, "shorthand": [2, 481], "cellcent": [2, 8, 20, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 85, 86, 90, 91, 94, 95, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 123, 124, 126, 128, 130, 139, 142, 143, 151, 158, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458], "etc": [2, 192, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "258": [2, 478], "gmshexport": 2, "252": 2, "benni": [2, 119], "interpol": [2, 31, 33, 34, 119, 140, 164, 165, 179, 183, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 454, 474, 476], "patch": [2, 3, 8, 16, 82, 83, 454], "250": [2, 139, 140, 145], "tex": 2, "quaternari": [2, 7, 16, 20, 115], "247": 2, "var1": [2, 17, 47, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "var0": [2, 17, 464], "sensibli": 2, "243": [2, 394], "reconstrain": 2, "242": 2, "240": 2, "profil": [2, 39, 75, 77, 78, 81, 116], "merg": [2, 9, 11, 20, 378, 472], "237": 2, "236": 2, "mix": [2, 16, 229, 230, 231, 343, 471], "235": 2, "propag": 2, "231": [2, 340], "factorymesh": [2, 20], "keyword": [2, 8, 140, 142, 143, 145, 175, 378, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "223": [2, 445], "218": 2, "absenc": [2, 16], "enthought": [2, 10, 18, 471], "216": 2, "fresh": [2, 9, 11, 17], "213": 2, "206": 2, "gnuplot1d": 2, "205": 2, "203": 2, "help": [2, 3, 7, 8, 11, 17, 191, 192, 193, 194, 378, 459], "202": 2, "manipul": [2, 7, 192, 481], "lead": [2, 16, 138, 162, 176, 177, 474, 477], "201": [2, 340], "veloc": [2, 8, 14, 68, 119, 123, 124, 126, 139, 151, 164, 165, 179, 183, 474], "faq": [2, 3, 8, 192], "200": [2, 63, 75, 81, 113, 116, 126, 140, 142, 176, 177], "195": 2, "multipl": [2, 6, 8, 10, 11, 16, 17, 21, 72, 73, 81, 116, 178, 200, 393, 444, 471, 474], "163": [2, 478], "infinit": [2, 8, 36, 75, 78, 81, 116, 179], "162": [2, 119], "ones": [2, 8, 11, 157, 176, 177, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "130": 2, "86": 2, "ly": [2, 126, 128, 142, 143, 192, 224], "lz": [2, 224], "77": [2, 6, 47, 398], "hasold": [2, 8, 39, 40, 71, 74, 81, 113, 115, 123, 124, 126, 128, 130, 139, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 183, 184, 372, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "self": [2, 10, 11, 108, 110, 111, 112, 113, 114, 115, 116, 142, 143, 162, 175, 176, 177, 196, 197, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 306, 307, 308, 309, 312, 314, 315, 316, 317, 318, 319, 320, 321, 335, 336, 337, 338, 343, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 385, 386, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 481, 482], "old": [2, 8, 17, 20, 32, 81, 162, 163, 164, 165, 167, 168, 176, 179, 183, 184, 192, 193, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 394, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "44": [2, 382, 393], "282": 2, "279": 2, "nummesh": [2, 193], "submodul": 2, "278": 2, "form": [2, 15, 16, 17, 20, 21, 31, 32, 33, 34, 36, 71, 74, 81, 90, 114, 119, 137, 140, 164, 165, 168, 178, 179, 183, 192, 193, 354, 368, 382, 393, 472, 474, 475, 477, 481], "268": 2, "slave": 2, "262": 2, "256": 2, "grid1d": [2, 17, 20, 36, 39, 51, 54, 56, 63, 65, 67, 68, 74, 75, 77, 81, 85, 91, 110, 111, 113, 114, 115, 116, 124, 130, 164, 165, 168, 175, 178, 179, 183, 191, 192, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 394, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 457, 458, 464], "251": 2, "241": 2, "238": 2, "predict": [2, 14, 119, 164, 165, 477, 478], "233": 2, "treat": [2, 8, 21, 179, 461], "upwind": [2, 17, 45, 46, 348, 359, 362, 374, 477], "224": [2, 445], "align": [2, 8, 17, 36, 74, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "222": 2, "__add__": [2, 20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393], "221": [2, 445], "219": 2, "matforg": 2, "hammer": 2, "208": 2, "207": 2, "ndarrai": [2, 339, 398, 443], "196": 2, "won": [2, 9, 11, 162, 176, 177, 482], "152": 2, "138": 2, "100": [2, 6, 10, 19, 31, 32, 33, 34, 36, 39, 40, 49, 50, 59, 60, 67, 74, 77, 78, 81, 113, 119, 135, 142, 157, 158, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 183, 184, 382, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 445, 448, 450, 451, 454, 455, 457, 458], "80": [2, 119, 164, 165], "idl": [2, 17], "46": [2, 478], "45": [2, 110, 111, 112, 139, 145, 382, 393, 464, 478], "slice": [2, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "produc": [2, 8, 17, 399, 423, 471], "diagnost": [2, 17], "232": 2, "becaus": [2, 8, 10, 11, 16, 17, 21, 31, 32, 33, 34, 63, 75, 81, 115, 116, 119, 162, 164, 165, 168, 176, 177, 179, 183, 184, 191, 192, 254, 348, 378, 414], "sighup": 2, "230": 2, "226": 2, "backend": [2, 8], "flush_ev": 2, "217": 2, "unpickl": [2, 394], "191": 2, "spheredaemon": [2, 20, 34], "miss": [2, 10, 11], "187": 2, "garbl": 2, "complet": [2, 11, 16, 17, 20, 21, 140, 192, 193, 256, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 472, 474], "independ": [2, 8, 11, 17, 21, 164, 165, 183, 471, 474], "199": 2, "dummi": [2, 17, 115], "notimplementederror": [2, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 343], "instanti": [2, 16, 17, 21, 66, 139, 191, 203, 343, 393, 407, 410, 414, 415, 419, 421, 423, 435, 439, 442], "abstract": [2, 8, 21, 191, 196, 269, 270, 278, 280, 305, 307, 308, 309, 334, 335, 338, 343, 351, 361, 369, 370, 428, 435, 447, 465, 481], "198": 2, "cylindricalgrid1d": [2, 20, 49, 50, 224], "197": 2, "tell": [2, 20, 31, 32, 33, 34, 139, 191, 472], "194": [2, 478], "larg": [2, 6, 8, 11, 16, 17, 21, 81, 135, 137, 164, 165, 256, 348, 378, 399, 421], "valueerror": [2, 8, 10, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "193": 2, "192": 2, "typeerror": [2, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 343, 382, 393], "small": [2, 8, 16, 31, 32, 81, 139, 145, 162, 163, 176, 177, 183, 256, 382, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "beli": 2, "advanc": [2, 8, 81, 164, 165], "did": [2, 16, 17, 162, 176, 177], "increment": [2, 191], "er": 2, "older": [2, 3, 7, 8, 16], "simul": [2, 6, 11, 14, 15, 16, 17, 19, 31, 32, 33, 34, 90, 138, 139, 140, 145, 162, 167, 168, 176, 177, 194, 224, 225, 340, 421, 478], "entir": [2, 17, 34, 158, 162, 176, 177, 183], "avail": [2, 5, 9, 11, 12, 13, 15, 16, 17, 18, 34, 72, 73, 78, 81, 139, 164, 165, 179, 183, 184, 194, 459, 471, 474, 477, 481], "itself": [2, 191, 192, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "190": 2, "rang": [2, 8, 36, 39, 40, 47, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 110, 111, 112, 113, 114, 115, 119, 123, 124, 126, 135, 139, 142, 143, 150, 151, 152, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 178, 179, 180, 225, 315, 372, 418, 421, 437, 438, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 475], "182": 2, "binop": [2, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "2_0": [2, 192], "179": [2, 119], "easy_instal": 2, "177": 2, "169": 2, "webpag": 2, "internet": 2, "explor": [2, 11, 21], "156": 2, "153": [2, 14, 478], "math": [2, 3, 163], "direct": [2, 10, 12, 16, 17, 31, 32, 33, 34, 93, 192, 200, 223, 224, 225, 242, 250, 267, 321, 407, 410, 414, 415, 419, 421, 423, 435, 439, 442, 454, 471, 481], "symmetri": [2, 19, 20, 162, 176, 177, 223, 268], "getcel": [2, 192], "enforc": 2, "both": [2, 7, 8, 11, 13, 16, 17, 18, 21, 49, 50, 51, 59, 60, 78, 81, 115, 119, 135, 140, 164, 165, 191, 192, 255, 268, 315, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 475], "clearer": [2, 8, 191, 192], "levelset": [2, 6, 7, 8, 20], "distancefunct": [2, 7, 20, 142, 143], "comparison": [2, 20, 119, 163, 164, 165, 472], "subtl": 2, "unlik": [2, 81, 191, 481], "veri": [2, 6, 8, 9, 11, 16, 17, 21, 137, 164, 165, 176, 177, 178, 179, 192, 193, 378, 414, 481], "188": 2, "smtpsenderrefus": 2, "553": 2, "trac": 2, "matdl": 2, "osi": 2, "sender": 2, "u": [2, 3, 7, 8, 14, 17, 20, 21, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 119, 123, 124, 150, 164, 165, 179, 183, 184, 191, 192, 193, 348, 352, 359, 360, 362, 363, 367, 374, 414, 418, 437, 438, 472, 475, 476, 481], "184": [2, 393], "exportasmesh": 2, "183": 2, "linearjorsolv": 2, "__init__": [2, 10, 110, 111, 112, 113, 115, 116, 162, 176, 177, 482], "rather": [2, 8, 10, 17, 21, 65, 66, 81, 91, 167, 179, 191, 192, 382, 393, 439, 474, 479, 480, 481, 483], "pysparsesolv": 2, "181": 2, "151": [2, 478], "mayavi2": [2, 459], "176": 2, "win32": 2, "175": 2, "offset": [2, 192, 382, 393, 421, 423, 442], "170": 2, "__invert__": [2, 20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "154": [2, 14], "update1_0to2_0": [2, 7, 20], "hold": [2, 12, 17, 81, 139, 197, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "rank": [2, 8, 20, 71, 119, 184, 192, 315, 352, 359, 360, 363, 367, 374, 375, 382, 388, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 454, 455, 464, 466, 472, 474], "simpler": [2, 21, 191], "determin": [2, 8, 21, 31, 32, 179, 183, 225, 339, 354, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 446, 447, 449, 450, 451, 452, 454, 455, 474, 475], "diagon": [2, 8, 17, 119, 179, 183, 192, 250, 255, 262, 292, 302, 304], "hand": [2, 8, 16, 21, 31, 32, 68, 81, 90, 110, 114, 115, 164, 178, 183, 184, 192, 268, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "side": [2, 16, 17, 19, 68, 75, 81, 90, 102, 110, 114, 115, 116, 164, 165, 178, 183, 184, 225, 268, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "simplifi": [2, 10, 116, 164, 165, 178, 192, 193, 471], "167": 2, "166": 2, "vectorcel": 2, "vectorfac": 2, "165": 2, "section": [2, 6, 8, 11, 12, 17, 72, 73, 81, 163, 183, 191, 341, 474], "149": 2, "143": 2, "141": 2, "toolset": 2, "140": [2, 478], "136": 2, "135": 2, "127": 2, "fragil": [2, 11], "54": [2, 382, 393], "161": 2, "160": 2, "157": 2, "temp": 2, "widow": 2, "155": 2, "appear": [2, 3, 8, 12, 15, 16, 17, 81, 91, 138, 142, 143, 145, 175, 179, 268, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 474], "150": [2, 478], "pythonxi": 2, "148": 2, "147": 2, "cg": [2, 264, 265, 288, 298, 299, 318, 319, 471], "145": [2, 14, 478], "144": 2, "intermitt": 2, "142": [2, 382, 393], "139": 2, "bitten": 2, "137": [2, 14], "backport": 2, "manuscript": 2, "131": [2, 17], "126": 2, "125": [2, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "emb": [2, 21], "obsolet": [2, 11, 32, 339], "124": 2, "121": [2, 176, 177], "simpletrenchsystem": [2, 6, 20, 138, 139, 140], "120": [2, 442], "118": [2, 183, 184], "117": 2, "getfacesbottom": [2, 191], "getfacestop": [2, 191], "lack": [2, 16], "descript": [2, 140, 145, 225], "115": 2, "view": [2, 8, 11, 15, 17, 18, 34, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 116, 142, 157, 162, 167, 175, 191, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471], "cahn": [2, 16, 17, 19, 20, 31, 32, 33, 34, 36, 162, 176, 177, 179, 354, 474, 475, 478], "hilliard": [2, 17, 20, 31, 32, 33, 34, 36, 162, 176, 177, 354, 474, 475, 478], "113": [2, 478], "macbook": 2, "pro": [2, 9, 11, 478], "intel": 2, "112": 2, "111": [2, 113], "grid2d": [2, 16, 20, 31, 32, 40, 61, 66, 78, 82, 83, 93, 94, 112, 119, 123, 126, 128, 137, 139, 142, 143, 157, 162, 163, 167, 176, 177, 180, 184, 191, 192, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 352, 359, 360, 362, 363, 367, 374, 375, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 450, 451, 452, 454, 455, 457, 458, 464], "110": 2, "dimensionless": [2, 75, 111, 116, 135, 162, 176, 177, 382, 393], "elphf": [2, 16, 20], "109": [2, 478], "doctest": [2, 7, 10, 15, 17, 21, 81, 194, 378], "__array__": [2, 20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "108": 2, "107": [2, 478], "106": [2, 14], "105": [2, 12], "useless": 2, "102": 2, "dict": [2, 142, 143, 175, 292, 336, 378, 397, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471], "97": 2, "nan": [2, 72, 73, 81, 464], "correctli": [2, 32, 47, 119, 348, 372], "96": [2, 119], "95": 2, "code": [2, 4, 6, 7, 9, 10, 11, 12, 17, 18, 20, 21, 68, 72, 73, 74, 81, 119, 124, 150, 157, 162, 163, 164, 165, 167, 168, 171, 172, 173, 180, 191, 269, 335, 382, 393, 398, 454, 471, 472], "92": 2, "pygist": 2, "dead": 2, "offici": [2, 9, 11], "84": 2, "83": 2, "zerodivisionerror": 2, "cellterm": [2, 20, 369, 372], "getold": 2, "79": [2, 6, 14, 398], "67": [2, 393], "unstructur": [2, 18, 471, 474, 478], "tsvviewer": [2, 8, 20, 72, 73, 113], "shape": [2, 20, 21, 32, 47, 162, 176, 177, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "34": [2, 393], "infin": [2, 8, 81, 398], "122": [2, 176, 177], "119": 2, "116": 2, "104": 2, "matplotlibvectorview": [2, 20], "_plot": [2, 162, 176, 177], "101": 2, "autoscal": [2, 142, 143, 175, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "93": 2, "91": [2, 16, 478], "76": [2, 139, 145], "75": [2, 17, 382, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 438, 439, 442, 464], "auto": [2, 446, 447, 449, 450, 451, 452, 454, 455], "docstr": [2, 378, 389], "74": [2, 14], "combin": [2, 8, 11, 15, 16, 17, 21, 115, 183, 194, 382, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474, 475], "51": [2, 95, 478], "__pos__": 2, "50": [2, 14, 39, 40, 81, 90, 100, 119, 162, 445, 450, 451, 454, 455, 457, 458], "39": [2, 164, 165], "72": [2, 464], "19": [2, 6, 16, 81, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 393, 475, 478], "98": [2, 14], "case": [2, 6, 8, 10, 11, 15, 16, 17, 21, 39, 40, 47, 49, 50, 51, 56, 59, 60, 63, 71, 74, 75, 77, 78, 80, 81, 102, 103, 106, 107, 115, 116, 129, 131, 135, 139, 140, 154, 159, 162, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 183, 185, 189, 191, 192, 193, 224, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 389, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 477, 479, 480, 481, 482, 483], "94": [2, 243], "90": [2, 81, 119, 175, 176, 177, 445, 448, 457, 458], "87": [2, 6, 478], "length": [2, 10, 21, 72, 73, 81, 85, 91, 163, 179, 224, 225, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 454, 455], "convert": [2, 8, 21, 162, 176, 177, 191, 382, 393, 398, 399, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454], "needless": 2, "rebuild": [2, 17], "66": 2, "guid": [2, 6, 16], "variou": [2, 9, 11, 17, 21, 108, 139, 477], "62": [2, 6, 140], "unrecogn": 2, "token": [2, 383], "13c": 2, "55": [2, 113, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "intern": [2, 20, 21, 192, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472], "52": [2, 14, 478], "facevectorvari": 2, "48": 2, "inherit": [2, 10, 21, 192, 481], "hidden": [2, 21], "42": [2, 17, 164, 165], "model": [2, 4, 6, 7, 9, 11, 14, 15, 16, 19, 20, 21, 31, 32, 39, 40, 108, 115, 138, 139, 140, 142, 143, 145, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 194, 472, 475, 478], "addoverfacesvari": [2, 20], "gross": 2, "41": [2, 464], "iter": [2, 16, 20, 21, 36, 47, 52, 54, 56, 57, 61, 66, 81, 82, 83, 110, 111, 112, 113, 115, 119, 162, 163, 167, 168, 176, 177, 178, 179, 191, 192, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 306, 307, 308, 309, 312, 317, 318, 319, 320, 321, 335, 336, 337, 338, 339, 342, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 421, 471, 472, 474], "norm": [2, 16, 81, 90, 110, 115, 164, 178, 256, 268, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398, 454], "dimens": [2, 11, 20, 21, 32, 51, 72, 73, 75, 81, 83, 111, 119, 124, 128, 129, 130, 131, 162, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 192, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 398, 410, 414, 418, 421, 428, 434, 435, 437, 438, 443, 444, 445, 466, 474, 477], "wai": [2, 7, 11, 12, 16, 17, 19, 20, 21, 36, 74, 80, 81, 95, 97, 99, 100, 104, 113, 114, 139, 157, 162, 163, 164, 165, 167, 168, 176, 177, 179, 192, 194, 234, 236, 237, 250, 254, 348, 382, 393, 472, 474, 481], "significantli": [2, 8, 11, 192], "cach": [2, 17, 20, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 443, 472], "intermedi": [2, 6, 8, 31, 32, 119], "uniformgrid": [2, 20, 252, 253, 254, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "geometr": [2, 31, 33, 34, 164, 165, 199, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "fly": [2, 21], "present": [2, 6, 7, 8, 11, 17, 19, 20, 111, 138, 140, 150, 164, 165, 172, 173, 398, 472, 473, 477], "made": [2, 8, 12, 15, 21, 119, 126, 179, 192, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 410, 414, 418, 423, 428, 434, 437, 438, 439, 443], "consider": [2, 3, 15, 16, 191, 194], "construct": [2, 7, 16, 17, 21, 72, 73, 123, 124, 128, 130, 138, 140, 162, 163, 164, 165, 168, 176, 177, 178, 225, 348, 362, 382, 393, 414, 474], "execut": [2, 6, 9, 10, 11, 16, 17, 21, 22, 77, 80, 91, 123, 124, 130, 378, 379, 381, 397], "subclass": [2, 8, 34, 196, 269, 270, 278, 280, 305, 307, 308, 309, 334, 335, 338, 351, 361, 369, 370, 428, 435, 447, 465, 481], "sensibl": [2, 17], "answer": [2, 3, 20, 36, 78, 80, 81, 86, 107, 123, 124, 126, 150, 151, 179, 348, 362, 407, 410, 414, 415, 419, 421, 423, 434, 435, 438, 439, 442, 472], "For": [2, 7, 8, 9, 11, 16, 17, 21, 31, 33, 34, 72, 73, 81, 85, 108, 145, 157, 164, 165, 178, 179, 183, 184, 192, 194, 336, 348, 352, 359, 360, 363, 367, 374, 398, 421, 444, 454, 471, 474, 475, 476, 481], "vectorcellvari": [2, 192], "periodicgrid": 2, "howev": [2, 8, 17, 81, 91, 119, 474, 477], "rewritten": [2, 36, 183], "serv": [2, 7, 21, 225], "tutori": [2, 17, 139, 191, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 478], "sever": [2, 11, 15, 16, 17, 21, 114, 192, 193, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "elabor": [2, 8], "multicompon": [2, 110], "multidimension": 2, "superfil": [2, 14, 138, 139, 140, 145, 478], "better": [2, 3, 8, 17, 18, 21, 47, 163, 164, 165, 178, 179, 191, 193, 414, 471, 475], "fluid": [2, 20, 21, 119, 322, 329, 340, 475, 476, 478], "classic": [2, 164, 165, 178, 183, 286, 322, 328, 331], "lid": [2, 119], "distinct": [2, 20, 21, 31, 32, 192, 472], "linear": [2, 8, 16, 17, 20, 21, 31, 32, 33, 34, 36, 81, 113, 114, 119, 140, 162, 164, 165, 167, 168, 176, 177, 179, 183, 192, 255, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 471, 472, 476], "explan": [2, 8, 17, 139, 145, 378, 389], "concept": [2, 17, 478, 481], "involv": [2, 6, 16, 20, 21, 81, 167, 168, 176, 177, 179, 472, 475, 481], "frequent": [2, 6, 15, 20, 164, 165, 179, 398, 471, 472, 473], "question": [2, 3, 15, 20, 115, 339, 472, 473], "multiview": [2, 20, 139, 162, 176, 177, 445], "group": [2, 3, 4, 8], "togeth": [2, 8, 17, 137, 183, 378, 393, 461], "couldn": 2, "abbrevi": 2, "promis": 2, "actual": [2, 8, 16, 21, 81, 119, 179, 191, 255, 256, 336, 378, 439, 481], "fulli": [2, 21, 81, 179, 183, 476], "qualifi": 2, "cv": [2, 352, 359, 360, 363, 367, 374, 375, 474], "subvers": 2, "sourceforg": [2, 8, 18, 471], "materi": [2, 4, 14, 15, 20, 21, 81, 108, 119, 138, 140, 145, 162, 176, 177, 194, 472, 473, 478], "digit": [2, 398], "pathwai": 2, "pde": [2, 8, 11, 14, 15, 21, 32, 162, 176, 177, 179, 192, 194, 475, 476], "subtract": [2, 6, 20, 114, 168, 191, 382, 393, 434], "job": [2, 10, 47, 119], "suppli": [2, 8, 15, 16, 21, 164, 165, 191, 192, 225, 378, 382, 393, 423, 474, 481, 482], "fipy_view": [2, 17, 444], "export": [2, 4, 17, 20, 72, 73, 225, 397, 472], "them": [2, 3, 8, 10, 17, 21, 32, 74, 81, 96, 112, 114, 167, 191, 192, 193, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 379, 482], "choic": [2, 8, 16, 17, 18, 164, 165, 179, 183], "noisevari": [2, 20, 407, 415, 419, 421, 442], "pyx": 2, "layout": 2, "getlaplacian": 2, "effect": [2, 3, 6, 17, 31, 32, 81, 162, 176, 177, 178, 179, 183, 184, 200, 372, 478], "getfacegrad": [2, 192], "getdiverg": 2, "deepli": 2, "nest": [2, 8, 268], "find": [2, 8, 9, 11, 17, 81, 91, 164, 165, 192, 193, 398, 444, 445, 466], "situat": [2, 16], "earlier": [2, 11, 72, 73, 164, 165, 191, 398], "update0_1to1_0": [2, 7, 8, 20], "49": [2, 113], "47": [2, 340], "coeff": [2, 8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 107, 110, 111, 112, 113, 114, 115, 116, 119, 140, 164, 165, 177, 178, 179, 183, 184, 191, 192, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 474], "40": [2, 36, 110, 111, 112, 140, 163, 168], "38": 2, "37": [2, 6], "electrochem": [2, 4, 6, 8, 14, 15, 20, 21, 108, 194, 478], "35": [2, 115, 119, 464], "33": [2, 164, 165, 179, 478], "32": [2, 22, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 478], "conflict_handl": 2, "31": [2, 179, 393, 478], "notat": [2, 8, 17, 20, 119, 183, 471, 472, 481], "29": [2, 145, 478], "invok": [2, 7, 8, 15, 17, 21, 157, 256, 309, 481, 482], "26": [2, 119, 139, 145, 382, 393, 478], "extract": [2, 72, 73, 81, 163, 167, 168, 171, 172, 173, 225, 397], "distancevari": [2, 20, 123, 124, 126, 128, 130, 139, 142, 143, 150, 151, 152, 438, 439], "reconcil": 2, "crystal": [2, 14, 21, 475, 478], "surfact": [2, 20, 139, 140, 145, 439], "depositionratevar": 2, "extensionveloc": 2, "axisymmetr": 2, "2d": [2, 17, 18, 19, 59, 60, 61, 97, 112, 114, 128, 142, 143, 158, 162, 163, 167, 175, 176, 177, 184, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 414, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 474], "wizard": 2, "xp": 2, "other": [3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 31, 32, 81, 102, 113, 119, 139, 140, 164, 165, 178, 180, 183, 184, 192, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 263, 264, 265, 266, 269, 285, 286, 287, 288, 289, 290, 293, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 379, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 475], "encourag": 3, "follow": [3, 6, 7, 9, 10, 11, 15, 16, 17, 36, 68, 72, 73, 74, 108, 112, 116, 123, 124, 126, 128, 130, 138, 139, 140, 145, 150, 151, 157, 163, 167, 168, 171, 172, 173, 176, 177, 180, 183, 191, 192, 193, 348, 372, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 475], "mode": [3, 11, 15, 225, 378, 382, 400], "monitor": 3, "post": [3, 8, 225, 471], "want": [3, 9, 11, 17, 19, 20, 72, 73, 81, 164, 165, 179, 183, 184, 472], "http": [3, 8, 9, 11, 15, 16, 17, 18, 34, 47, 72, 73, 176, 177, 271, 272, 302, 303, 304, 336, 383, 393, 399, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 471, 478], "www": [3, 8, 11, 15, 16, 17, 34, 47, 471, 478], "catb": 3, "esr": 3, "smart": 3, "troubl": 3, "abl": [3, 16, 162, 225, 255], "offer": [3, 15, 16, 21], "reproduc": [3, 11, 13], "com": [3, 8, 9, 11, 16, 17, 18, 34, 176, 177, 302, 303, 304, 383, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 471, 478], "suitabl": [3, 17, 81, 191, 322, 329, 331, 382, 393, 471], "open": [3, 10, 11, 14, 17, 20, 119, 163, 167, 168, 171, 172, 173, 225, 382, 400, 471, 472], "convers": [3, 21, 192, 382, 393], "troubleshoot": 3, "off": [3, 8, 119], "highlight": [3, 10, 16, 119], "easi": [3, 16, 18, 31, 33, 34, 81, 471], "submiss": 3, "probabl": [3, 8, 10, 11, 18, 67, 192, 402, 407, 415, 419, 421, 471, 475, 481], "definit": [3, 10, 16, 32, 192, 268, 322, 331, 471, 482], "back": [3, 9, 11, 17, 19, 21, 102, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 434, 478], "forth": 3, "tend": [3, 16, 21, 31, 32, 81], "delet": [3, 81, 225, 382, 400], "mean": [3, 16, 20, 21, 31, 32, 33, 34, 81, 263, 264, 265, 266, 269, 382, 393, 398, 415, 421, 454, 472], "d": [3, 14, 16, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 72, 73, 77, 78, 81, 82, 83, 114, 126, 128, 129, 135, 139, 140, 145, 150, 162, 163, 164, 165, 176, 177, 179, 180, 183, 191, 224, 348, 362, 378, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474, 478], "expend": 3, "effort": [3, 8, 15, 16], "inferior": 3, "ve": [3, 16, 81, 164, 165], "written": [3, 6, 7, 8, 10, 11, 15, 17, 21, 74, 81, 119, 128, 162, 163, 164, 165, 167, 168, 171, 172, 173, 178, 183, 191, 192, 193, 471, 474], "serious": 3, "subscript": 3, "email": 3, "mailto": 3, "simpli": [3, 8, 11, 17, 81, 110, 111, 112, 164, 165, 183, 191, 263, 264, 265, 266, 269, 481], "To": [3, 7, 8, 10, 11, 13, 16, 17, 81, 91, 119, 138, 139, 140, 145, 157, 162, 164, 165, 176, 177, 179, 183, 192, 474, 477], "unsubscrib": 3, "learn": [3, 9, 11], "chang": [3, 10, 11, 15, 16, 17, 20, 21, 31, 32, 81, 138, 139, 140, 145, 164, 165, 175, 183, 184, 191, 192, 193, 234, 254, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448, 450, 451, 452, 454, 455, 459, 471, 472, 473], "host": 3, "sent": 3, "store": [3, 32, 139, 157, 167, 225, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 399, 471, 474], "histor": [3, 9, 11, 16, 74], "dir": [3, 382, 400], "comp": [3, 8], "site": [3, 11, 139, 140, 145], "jon": 4, "member": [4, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "research": [4, 14, 21, 478], "staff": 4, "scienc": [4, 14, 15, 17, 21, 81, 194], "engin": [4, 14, 15, 194, 471], "divis": [4, 15, 194, 398], "measur": [4, 6, 15, 21, 81, 164, 165, 194, 402], "laboratori": [4, 15, 20, 194, 472, 473], "nation": [4, 5, 12, 15, 21, 194], "institut": [4, 5, 12, 15, 21, 194], "standard": [4, 5, 11, 12, 15, 16, 21, 72, 73, 108, 178, 183, 194, 250, 348, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471], "technologi": [4, 5, 12, 15, 21, 194], "comput": [4, 8, 11, 14, 15, 16, 17, 19, 21, 96, 140, 145, 165, 191, 194, 471, 477, 478], "interest": [4, 8, 9, 11, 15, 21, 31, 32, 33, 34, 81, 110, 112, 114, 116, 158, 179, 225, 309, 474, 475], "orient": [4, 14, 15, 19, 20, 71, 162, 167, 168, 176, 177, 194, 398, 445, 446, 447, 449, 451, 452, 472, 481], "design": [4, 6, 7, 8, 9, 11, 16, 17, 20, 110, 111, 112, 472, 473], "electrochemistri": [4, 478], "daniel": [4, 478], "wheeler": [4, 14, 183, 478], "guest": 4, "finit": [4, 11, 14, 15, 20, 21, 67, 81, 164, 165, 179, 194, 340, 471, 472, 476, 478], "volum": [4, 11, 14, 15, 20, 21, 67, 119, 139, 140, 145, 157, 164, 165, 178, 183, 194, 225, 340, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 455, 472, 476, 478], "techniqu": [4, 8, 21, 163, 168, 171, 172, 173, 476], "treatment": [4, 15, 17, 164, 178, 194], "jim": 4, "leader": 4, "thermodynam": [4, 31, 32, 113, 115, 164, 165, 183], "kinet": [4, 8, 20, 135, 179, 472, 473], "director": 4, "center": [4, 8, 14, 15, 16, 17, 20, 21, 31, 33, 34, 67, 71, 72, 73, 81, 113, 119, 142, 143, 162, 163, 175, 176, 177, 183, 192, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 472, 476], "theoret": [4, 8, 15, 20, 21, 194, 472, 473], "varieti": [4, 8, 9, 11, 15, 21, 164, 165, 194], "solidif": [4, 19, 162, 163, 164, 165, 167, 176, 177, 179, 478], "polycrystallin": [4, 15, 19, 194, 478], "solid": [4, 19, 113, 115, 162, 163, 164, 165, 167, 168, 171, 176, 177, 178], "alex": 4, "mont": 4, "pyxview": [4, 471], "he": [4, 19], "student": 4, "montgomeri": 4, "blair": 4, "school": 4, "kati": 4, "travi": [4, 471], "optim": [4, 16, 17, 21, 81, 164, 165, 179], "she": [4, 19], "surf": 4, "smith": 4, "colleg": 4, "gibianski": 4, "harvei": 4, "mudd": 4, "andrew": 4, "reev": 4, "sabbat": 4, "univers": [4, 14, 19, 475, 478], "main": [4, 9, 11, 16, 17, 20, 21, 167, 168, 176, 177, 271, 272, 381, 459, 474, 479, 480, 481, 483], "olivia": 4, "buzek": 4, "maryland": 4, "stile": 4, "jame": [4, 478], "beirn": 4, "deploy": 4, "server": 4, "certain": [5, 7, 21, 225, 481, 482], "commerci": [5, 8, 11, 21], "firm": 5, "trade": 5, "identifi": [5, 16, 17, 21], "procedur": [5, 21, 178], "Such": 5, "identif": 5, "intend": [5, 15, 17, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255], "impli": [5, 12], "endors": [5, 11], "nor": [5, 8], "relat": [5, 17, 21, 164, 165, 179, 414], "necessarili": [5, 11], "best": [5, 8, 11, 16, 17, 18, 179, 192, 336], "purpos": [5, 8, 9, 11, 12, 49, 50, 59, 60, 224, 225, 474], "discuss": [6, 8, 10, 11, 15, 20, 21, 32, 477], "evalu": [6, 17, 21, 119, 164, 165, 167, 168, 176, 177, 179, 183, 348, 398, 404, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "program": [6, 20, 81, 191, 381, 471, 472, 476, 481], "greater": [6, 10, 225, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "intrins": [6, 16, 21, 164, 165, 168, 183, 184], "ineffici": [6, 16, 21], "dure": [6, 11, 16, 17, 21, 139, 478], "languag": [6, 11, 15, 20, 178, 194, 471, 472, 481], "hous": 6, "grain": [6, 19, 167, 168, 176, 177], "subsequ": [6, 17, 19, 135, 176, 177], "imping": [6, 7, 8, 19, 20, 176, 177], "mesh20x20": [6, 7, 8, 17, 20], "numberofel": [6, 139, 157, 167], "10000": [6, 47, 52, 54, 56, 57, 61, 78, 110, 112, 115, 139, 162, 163, 178, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "numberofstep": [6, 138, 139, 140, 145, 167], "directori": [6, 7, 8, 9, 11, 13, 15, 17, 22, 81, 91, 138, 139, 140, 145, 157, 179, 479, 480, 483], "ryo": [6, 163, 167, 168, 171, 172, 173, 179, 478], "kobayashi": [6, 162, 163, 167, 168, 171, 172, 173, 176, 177, 179, 478], "raw": [6, 167], "cpu": [6, 16], "10": [6, 11, 14, 16, 17, 20, 31, 32, 33, 36, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 78, 80, 81, 82, 83, 86, 91, 95, 97, 99, 100, 102, 107, 113, 114, 119, 123, 124, 129, 130, 138, 139, 140, 142, 145, 150, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 335, 336, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458, 464, 471, 472, 477, 478], "tabl": [6, 16, 119, 140, 145, 393], "second": [6, 8, 119, 137, 164, 165, 183, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 457, 458], "kilobyt": 6, "kib": 6, "0009": 6, "39316": 6, "772": 6, "0031": 6, "39664": 6, "1600": 6, "1": [6, 8, 10, 11, 14, 15, 16, 17, 18, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 94, 95, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 138, 139, 140, 142, 143, 145, 150, 151, 152, 157, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 198, 200, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 271, 272, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 381, 382, 393, 398, 400, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 472, 474, 475, 477, 478], "4": [6, 8, 11, 14, 15, 16, 17, 20, 21, 34, 36, 47, 56, 63, 67, 71, 72, 73, 74, 81, 85, 95, 107, 110, 112, 113, 114, 115, 119, 123, 126, 128, 129, 131, 135, 139, 140, 142, 143, 145, 150, 158, 162, 163, 164, 165, 171, 173, 175, 176, 177, 178, 179, 180, 183, 184, 187, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 339, 340, 341, 348, 362, 378, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448, 450, 451, 452, 457, 458, 464, 472, 474, 478], "65": 6, "017": 6, "40656": 6, "1044": 6, "6400": 6, "2": [6, 8, 10, 11, 14, 15, 16, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 59, 60, 63, 65, 66, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 95, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 139, 140, 142, 143, 145, 150, 151, 152, 158, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 268, 322, 328, 339, 341, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 378, 382, 393, 394, 398, 399, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 452, 454, 455, 457, 458, 464, 471, 472, 474, 475, 477, 478], "46124": 6, "1880": 6, "25600": 6, "60840": 6, "5188": 6, "102400": 6, "43": [6, 9, 11, 20, 472, 478], "145820": 6, "18436": 6, "plain": [6, 17, 81, 139], "oper": [6, 9, 10, 11, 17, 21, 162, 167, 168, 176, 177, 192, 242, 268, 382, 385, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 471, 474], "around": [6, 10, 21, 47, 81, 137, 434, 474], "17": [6, 12, 20, 237, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 472, 476, 478], "slower": [6, 21, 192], "penalti": 6, "hope": [6, 192, 193], "gain": [6, 17], "particular": [6, 7, 8, 9, 11, 12, 16, 17, 21, 75, 81, 86, 183, 184, 191], "analysi": [6, 8, 17, 471, 478], "shown": [6, 7, 8, 19, 108, 164, 165, 179, 191], "record": 6, "each": [6, 7, 8, 16, 17, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 78, 80, 81, 93, 96, 110, 111, 112, 140, 164, 165, 167, 178, 180, 183, 184, 191, 192, 234, 250, 254, 315, 372, 378, 382, 388, 393, 398, 410, 418, 428, 434, 435, 437, 454, 464, 474, 476, 479, 480, 483], "approxim": [6, 8, 17, 78, 119, 178, 179, 474, 476], "maximum": [6, 10, 16, 36, 139, 164, 165, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 348, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "spike": 6, "hard": [6, 21, 162, 176, 177, 192, 471], "dynam": [6, 11, 22, 164, 165, 179, 476, 478], "alloc": [6, 21], "rough": [6, 164, 165], "exact": [6, 16, 81, 119, 163, 179, 256, 477], "complex": [6, 16, 17, 21, 138, 145, 164, 165, 382, 393, 475], "largest": [6, 81, 382, 393, 444], "mainli": [6, 21, 47], "below": [6, 8, 11, 16, 17, 119, 138, 145, 162, 176, 177, 191], "per": [6, 11, 17, 81, 179, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 457, 458], "5": [6, 8, 11, 14, 15, 16, 17, 20, 21, 31, 32, 33, 34, 36, 57, 67, 71, 72, 73, 74, 75, 81, 90, 91, 95, 97, 102, 113, 114, 115, 116, 119, 124, 126, 128, 130, 139, 140, 145, 151, 158, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 187, 194, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 336, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 382, 393, 398, 403, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 452, 454, 455, 457, 458, 464, 472, 474, 477, 478], "someth": [7, 8, 15, 17, 19, 81, 139, 162, 176, 177, 192, 193, 393, 459, 464, 482], "least": [7, 8, 11, 16, 17, 179, 193, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "four": [7, 17, 19, 113, 167, 178, 180, 250], "demonstr": [7, 17, 21, 23, 47, 67, 72, 73, 82, 83, 108, 111, 123, 124, 128, 130, 138, 139, 140, 145, 157, 158, 167, 168, 474], "applic": [7, 9, 11, 16, 19, 21, 72, 73, 459, 474, 476], "finish": [7, 39, 40, 68, 78, 91, 95, 138, 139, 140, 145, 167, 179, 183, 184], "left": [7, 8, 15, 16, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 108, 114, 116, 119, 123, 126, 129, 131, 135, 138, 139, 140, 150, 157, 162, 163, 164, 165, 168, 176, 177, 178, 179, 180, 183, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 354, 362, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 448, 472, 475, 476], "shell": [7, 11, 13, 15, 17, 34, 158, 471], "At": [7, 11, 16, 17, 21, 78, 139, 194], "enter": [7, 15], "queri": [7, 435], "session": [7, 14, 15, 17, 21], "directli": [7, 8, 11, 17, 19, 21, 72, 73, 81, 82, 83, 183, 191, 192, 193, 378, 481, 482], "block": [7, 15, 74, 81, 183, 271, 272, 292], "final": [7, 8, 75, 81, 91, 113, 115, 116, 164, 165, 168, 183, 225, 254, 372], "importantli": 7, "emphasi": [7, 10], "comprehens": [7, 21], "framework": [7, 15, 21, 194, 481], "steadyst": [7, 15, 16, 20, 77, 80], "succinct": [7, 8], "prompt": [7, 15, 17, 81, 179, 194], "fipy_copy_script": [7, 81, 139], "addit": [7, 11, 16, 17, 74, 81, 140, 389, 393, 398, 471], "those": [7, 8, 9, 11, 17, 21, 81, 86, 115, 138, 139, 140, 145, 164, 165, 191, 471, 481, 482], "dozen": 7, "understand": [7, 8, 16, 17, 140, 192], "illustr": [7, 8, 16, 21, 81, 474], "electrostat": [7, 20, 108, 112, 113, 114, 115, 116], "nthorder": [7, 20], "input4thorder1d": [7, 20], "exponential1d": [7, 20, 54, 56, 57, 61, 62, 65, 66, 191], "exponential1dsourc": [7, 20], "allen": [7, 16, 17, 162, 176, 177, 179], "binarycoupl": [7, 8, 17, 20], "mesh40x1": [7, 8, 20, 167], "polyxtalcoupl": [7, 17, 20], "advect": [7, 20, 67, 139, 150, 152, 164, 165, 348, 362], "spinod": [7, 19, 31, 32, 33, 34], "decomposit": [7, 19, 31, 32, 322, 323, 325, 327, 328, 471, 474], "multi": [7, 16, 471], "evolut": [7, 8, 21, 31, 32, 33, 34, 81, 138, 162, 165, 176, 177, 178, 475, 478], "reactivewet": [7, 16, 20], "liquidvapor1d": [7, 16, 20], "canon": [8, 31, 32, 33, 34, 164, 165, 178, 256, 398], "govern": [8, 12, 74, 81, 114, 135, 138, 139, 140, 145, 150, 151, 162, 163, 164, 165, 176, 177, 183], "underbrac": [8, 108, 178, 475], "frac": [8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 74, 75, 77, 81, 85, 108, 110, 114, 116, 119, 123, 124, 130, 135, 138, 139, 140, 150, 151, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 183, 191, 339, 348, 357, 362, 372, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 474, 475, 477], "partial": [8, 14, 15, 16, 17, 20, 31, 32, 33, 34, 36, 67, 68, 71, 74, 77, 81, 85, 108, 110, 114, 123, 124, 130, 139, 150, 162, 163, 164, 165, 168, 171, 172, 173, 176, 177, 178, 179, 183, 194, 343, 348, 362, 370, 372, 471, 472, 475, 476], "rho": [8, 20, 75, 81, 116, 178, 183, 184, 372, 472, 475, 476], "_": [8, 16, 17, 32, 71, 74, 81, 108, 119, 164, 165, 178, 179, 198, 199, 200, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 398, 400, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 475], "vphantom": [8, 108, 178, 475], "nabla": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 74, 75, 77, 81, 108, 110, 114, 116, 119, 123, 124, 128, 129, 131, 139, 150, 162, 163, 164, 165, 168, 171, 172, 173, 176, 177, 178, 179, 191, 200, 348, 352, 354, 357, 359, 360, 362, 363, 367, 374, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 472, 475, 476], "cdot": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 75, 77, 81, 108, 110, 116, 119, 123, 124, 139, 150, 162, 163, 164, 165, 168, 176, 177, 178, 191, 198, 200, 352, 354, 357, 359, 360, 363, 367, 374, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472, 475, 476], "vec": [8, 16, 17, 20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 119, 123, 124, 150, 164, 165, 179, 184, 191, 198, 256, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472, 475, 476], "gamma_i": [8, 474, 475], "n": [8, 14, 16, 17, 19, 75, 81, 108, 110, 111, 114, 116, 119, 123, 139, 140, 145, 157, 162, 163, 164, 165, 167, 176, 177, 178, 180, 198, 200, 224, 352, 359, 360, 363, 367, 374, 382, 393, 398, 402, 403, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 449, 450, 474, 475, 478], "s_": [8, 179, 474, 475], "discret": [8, 17, 20, 47, 81, 119, 162, 167, 168, 176, 177, 183, 224, 225, 343, 357, 359, 360, 363, 367, 374, 472, 476], "specif": [8, 12, 15, 16, 21, 32, 72, 73, 193, 194, 435, 444, 454, 471, 481], "pose": [8, 74], "ratio": [8, 16, 71, 140, 145, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 446, 447, 449, 450, 451, 452, 454, 455, 477], "along": [8, 11, 17, 21, 31, 32, 81, 145, 162, 176, 177, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "coordin": [8, 72, 73, 91, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 454, 464], "partial_x": 8, "notic": [8, 12, 15, 192, 481], "within": [8, 11, 16, 17, 21, 71, 119, 164, 165, 183, 225, 234, 250, 254, 256, 398, 474, 479, 480, 483], "first": [8, 11, 16, 17, 21, 36, 45, 46, 72, 73, 74, 75, 81, 114, 115, 116, 119, 123, 124, 137, 139, 150, 151, 163, 164, 165, 167, 179, 180, 183, 191, 192, 193, 221, 225, 233, 234, 236, 237, 242, 250, 253, 254, 341, 348, 378, 382, 393, 394, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 444, 445, 466, 474, 482], "higher": [8, 17, 20, 119, 164, 165, 183, 200, 224, 225, 348, 354, 475, 476, 477], "confus": [8, 471], "examin": [8, 16, 21, 75, 116, 164, 165, 474], "short": [8, 139], "assum": [8, 15, 16, 119, 140, 162, 164, 165, 176, 177, 183, 382, 393, 398, 414, 474], "fourth": [8, 85], "isotrop": [8, 94], "nomin": 8, "anomal": 8, "equiv": [8, 17, 164, 165, 178, 179, 477], "conveni": [8, 381, 382, 393], "appli": [8, 14, 16, 20, 21, 67, 81, 82, 83, 119, 139, 164, 165, 179, 193, 196, 198, 199, 200, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 321, 336, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 472, 478], "rotat": [8, 34, 71, 158, 163], "realiz": [8, 191], "even": [8, 10, 16, 20, 21, 31, 33, 34, 94, 114, 165, 178, 191, 200, 348, 362, 378, 402, 472, 475], "though": [8, 94, 114, 165, 179], "superfici": 8, "resembl": [8, 74, 138, 145], "d_1": [8, 354], "d_2": [8, 354], "xi": [8, 108, 112, 113, 114, 115, 163, 178, 339], "third": [8, 11, 16, 19, 137, 382, 393, 471], "d2": [8, 354], "facegrad": [8, 17, 20, 67, 68, 74, 81, 85, 110, 111, 112, 113, 115, 162, 163, 164, 165, 167, 168, 176, 177, 178, 183, 184, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 454, 455, 474], "diverg": [8, 17, 20, 67, 74, 119, 163, 164, 165, 167, 168, 176, 256, 263, 264, 265, 266, 269, 312, 407, 415, 418, 419, 421, 435, 437, 438, 474], "grad": [8, 20, 72, 73, 113, 114, 115, 119, 167, 168, 176, 177, 183, 184, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 454, 455, 464], "arithmeticfacevalu": [8, 20, 31, 33, 34, 36, 119, 164, 165, 167, 168, 176, 177, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "rate": [8, 31, 32, 139, 140, 145, 151, 162, 176, 177, 179, 407, 419], "rho_1": 8, "rho_2": 8, "manner": [8, 17, 21, 167, 168, 178, 183, 474], "rho1": 8, "rho2": 8, "perspect": 8, "might": [8, 19, 21, 164, 165, 474], "mobil": [8, 108, 113, 114, 115, 164, 165, 178, 421], "counter": [8, 108, 178], "eq": [8, 31, 32, 33, 34, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 77, 80, 81, 82, 83, 85, 86, 90, 91, 97, 99, 100, 114, 164, 165, 177, 179, 183, 191, 192, 372], "d1": [8, 354], "With": [8, 21, 81, 162, 164, 165, 176, 177, 192, 454, 481], "advent": 8, "gamma_1": [8, 20, 472, 475, 476], "gamma_0": [8, 135], "diffterm": [8, 191, 192], "gamma0": [8, 17], "plan": 8, "restart": [8, 167], "stage": [8, 9, 11, 14, 21, 81, 421, 478], "ll": [8, 11, 16, 81, 114, 135, 140, 145, 162, 164, 165, 176, 177, 178, 179, 192, 193], "howtowriteascript": [8, 20], "On": [8, 11, 16, 21, 22, 164, 165, 179, 474], "littl": [8, 16, 21, 164, 165, 192, 481], "anyth": [8, 17, 21, 31, 32, 33, 34, 262, 444], "besid": 8, "anoth": [8, 16, 21, 72, 73, 81, 113, 137, 164, 165, 168, 179, 183, 348, 362, 368, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 481], "piec": [8, 17, 21], "softwar": [8, 11, 12, 16, 19, 21, 138, 145, 471], "qualiti": [8, 18, 341, 471], "graph": [8, 96], "multiscal": 8, "ascii": 8, "tab": [8, 11, 72, 73, 464], "separ": [8, 11, 15, 17, 21, 22, 31, 32, 72, 73, 74, 110, 111, 112, 113, 114, 115, 178, 179, 183, 382, 393, 398, 457, 458, 464, 474], "button": 8, "myimag": 8, "ext": [8, 139], "ep": [8, 167, 168, 176, 177], "jpg": 8, "joint": 8, "photograph": 8, "expert": 8, "png": [8, 16, 17], "portabl": [8, 16], "network": 8, "graphic": [8, 17, 19], "chosen": [8, 17, 21, 113, 115, 449, 450, 455, 477], "yet": [8, 16, 167, 471], "knowledg": [8, 17, 21, 481], "agg": 8, "cairo": 8, "net": [8, 18, 471], "facil": [8, 111, 164, 165, 471], "previou": [8, 16, 17, 32, 81, 162, 164, 165, 176, 177, 179, 191, 382, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "stitch": 8, "free": [8, 12, 18, 19, 21, 31, 32, 36, 108, 164, 165, 178, 179, 183, 184, 192, 193, 471, 478], "sharewar": 8, "adapt": [8, 16, 20, 21, 162, 164, 165, 176, 177, 292, 302, 303, 304, 340, 341, 382, 383, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 471, 472], "utilitarian": [8, 162, 176, 177], "let": [8, 17, 81, 119, 162, 164, 165, 176, 177, 179, 191, 372], "minimum": [8, 11, 17, 289, 290, 292, 300, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 443, 454], "tri": [8, 17, 81, 449, 450, 464], "plotter": 8, "common": [8, 17, 18, 21, 138, 179, 210, 471, 474, 481], "often": [8, 11, 17, 81, 139, 162, 176, 177, 421, 475], "supplement": 8, "underli": [8, 74, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "come": [8, 11, 17, 19, 21, 192, 393], "closest": [8, 398, 414], "overrid": [8, 16, 17, 459], "wan": 8, "heavi": [8, 17], "lift": 8, "custom": [8, 15, 17, 21, 34, 162, 194, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "differenti": [8, 14, 15, 16, 17, 194, 343, 370, 476], "benefit": [8, 21, 31, 33, 34, 49, 50, 51, 59, 60, 179, 191], "repetit": 8, "achiev": [8, 11, 17, 81, 85, 91, 97, 110, 112, 183, 256, 477], "similar": [8, 81, 91, 183, 184], "three": [8, 10, 11, 16, 17, 19, 21, 111, 112, 115, 140, 180, 183, 192, 225, 478], "layer": [8, 137, 138, 139, 140, 145, 221, 225, 231, 233, 236, 242, 250], "lowest": [8, 16], "spend": [8, 15, 16, 194], "think": [8, 10, 17, 21, 164, 165], "practic": [8, 10, 11, 17, 20, 74, 164, 165, 179, 192, 471, 472, 473, 481], "exactli": [8, 15, 17, 67, 164, 165, 179, 382, 393], "thu": [8, 16, 21, 51, 81, 138, 140, 168, 179, 474, 477], "emploi": [8, 11, 16, 164, 165, 179, 476], "until": [8, 21, 81, 339], "satisfactorili": [8, 75], "choos": [8, 11, 16, 17, 71, 81, 164, 165, 179, 449, 450], "desir": [8, 9, 11, 21, 164, 165, 178, 179, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 402, 446, 447, 449, 450, 451, 452, 454, 455], "mysolv": 8, "linearcgsolv": [8, 16, 20], "1234": 8, "5e": [8, 32, 139, 162, 163, 164, 165, 176, 177, 179, 183, 184, 407, 415, 419, 421], "favor": 8, "role": [8, 21], "middl": [8, 164, 165, 225], "concentr": [8, 52, 54, 57, 61, 62, 65, 66, 74, 75, 77, 78, 108, 110, 111, 112, 113, 115, 116, 139, 140, 145, 164, 165, 178, 191, 439, 475], "temperatur": [8, 14, 81, 139, 140, 145, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 183, 184, 421, 475], "thermal": [8, 19, 81, 162, 176, 177, 421], "perfect": 8, "good": [8, 47, 59, 60, 81, 91, 97, 119, 179, 476], "elaps": [8, 16, 20, 31, 32, 33, 34, 113, 164, 165, 175, 176, 177, 179, 402], "despit": 8, "evolv": [8, 10, 16, 171, 172, 173], "quasi": 8, "static": [8, 203, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "distinguish": [8, 17], "cycl": [8, 21], "modifi": [8, 12, 15, 21, 145, 183, 280, 481], "myvar": 8, "updateold": [8, 20, 39, 40, 71, 74, 81, 111, 113, 115, 123, 124, 126, 139, 150, 151, 152, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 183, 184, 372, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "repeatedli": [8, 15, 81, 82, 83, 194, 339], "stabl": [8, 9, 11, 21, 81, 164, 165, 179, 477], "truli": 8, "desiredresidu": 8, "outermost": 8, "goal": [8, 21], "studi": [8, 14, 21, 108, 116], "moreov": [8, 19], "equilibrium": [8, 36, 75, 77, 78, 80, 81, 110, 111, 112, 113, 114, 115, 116, 164, 165, 178, 179, 183, 191], "fundament": [8, 21, 393], "becom": [8, 11, 90, 110, 111, 112, 140, 162, 164, 165, 176, 177, 183, 414, 474, 475], "unstabl": [8, 90, 162, 176, 177], "inaccur": [8, 86, 474], "stabil": [8, 9, 11, 74, 81, 179, 287, 292, 297, 317, 471, 474], "accuraci": [8, 16, 17, 39, 40, 52, 62, 71, 81, 139, 348, 402, 414], "distinctli": 8, "said": 8, "blow": 8, "radic": 8, "perfectli": [8, 81, 191], "disagre": 8, "smaller": [8, 164, 165, 183, 184], "larger": [8, 16, 81, 90, 110, 115, 164, 178, 179, 421, 438, 474], "interv": 8, "234e": 8, "elapsedtim": 8, "totalelapsedtim": 8, "somefunctionofvariablesandtim": 8, "myvar1": 8, "myvar2": 8, "notabl": 8, "interfaci": [8, 114, 179], "gradual": 8, "down": [8, 16, 17, 31, 32, 81, 179, 256], "describ": [8, 17, 21, 31, 32, 52, 54, 57, 61, 62, 65, 66, 72, 73, 81, 115, 119, 140, 162, 176, 177, 179, 183, 382, 400, 474, 476, 479, 480, 482, 483], "substitut": [8, 17, 108, 110, 111, 112, 113, 114, 115, 116, 119, 178, 183, 402, 444], "undesir": 8, "consequ": [8, 119], "averag": [8, 81, 90, 119, 164, 165, 178, 183, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "f": [8, 17, 31, 32, 33, 34, 36, 81, 139, 140, 145, 162, 164, 165, 167, 178, 179, 183, 184, 340, 352, 359, 360, 363, 367, 374, 382, 393, 394, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "neq": [8, 108, 110, 178], "smoothli": 8, "dramat": [8, 74, 81], "sharp": [8, 31, 32, 113, 115, 164, 165, 175, 178], "experi": [8, 14, 16, 17, 139, 478], "excess": [8, 477], "like": [8, 11, 15, 16, 17, 19, 20, 21, 56, 81, 119, 164, 165, 179, 191, 194, 200, 268, 382, 393, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 459, 471, 472, 473, 474, 475, 481, 482], "vice": 8, "versa": 8, "ma": [8, 398], "maerror": 8, "locat": [8, 17, 22, 225, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474, 479, 480, 483], "pm": [8, 176, 177], "infti": [8, 16, 17, 114, 135, 138, 139, 140, 145, 339, 398, 407, 419, 477], "repair": 8, "catalog": 8, "kei": [8, 63, 68, 75, 90, 113, 116], "mailinglist": 8, "mailman": 8, "fn": [8, 339, 481], "dev": [8, 11, 13, 471], "2005": [8, 14, 20, 340, 472], "june": [8, 14], "003010": 8, "23": [8, 17, 20, 47, 108, 178, 393, 398, 472, 478], "neither": [8, 382, 393], "sloppi": 8, "thread": [8, 16, 20, 472], "scientif": [8, 11, 14, 16, 18, 21, 471, 478], "4349": 8, "experienc": 8, "ctcm": [8, 15, 194, 471], "brows": [9, 11, 17], "through": [9, 11, 17, 19, 72, 73, 81, 164, 165, 167, 179, 191, 336, 421], "download": [9, 11, 20, 472], "Be": [9, 11, 17, 192], "pre": [9, 20, 119, 472], "scm": [9, 11, 478], "subject": [9, 11, 12, 17, 74, 191, 382, 393, 398], "behav": [9, 11, 81, 184, 200], "degre": [9, 11, 16, 119, 163, 164, 165], "indic": [9, 11, 15, 17, 192, 193, 382, 393, 398, 403, 474], "decid": [9, 11], "risk": [9, 11, 393], "track": [9, 11, 21], "clone": [9, 11], "shift": [9, 11, 39, 40, 164, 165, 403], "past": [9, 11], "99": [9, 11, 16, 20, 225, 382, 393, 471, 472], "g0a8c8100f": [9, 11, 20, 472], "x_y_z": [9, 11], "retain": [9, 11, 17, 81, 164, 165], "guarante": [9, 11, 393, 477], "kept": [9, 11], "synchron": [9, 11], "altogeth": [9, 11, 81], "who": [9, 11, 21], "wide": [9, 11, 16, 18, 471, 475], "onlin": [9, 11, 17], "book": [9, 11, 478], "cours": [10, 16, 17, 137, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "strai": 10, "peril": 10, "forbidden": 10, "greatest": [10, 16, 17], "extent": [10, 12, 16, 17], "had": [10, 81, 179, 191, 192], "great": [10, 19, 164, 165, 192], "knew": [10, 21], "rectangl": 10, "blob": [10, 16, 176, 177], "def": [10, 110, 111, 112, 113, 114, 115, 116, 128, 129, 131, 162, 164, 165, 167, 176, 177, 178, 179, 183, 184, 192], "width": [10, 176, 177, 454, 474], "height": [10, 47, 126, 164, 165, 179], "black": [10, 191], "red": 10, "strong": 10, "sorri": 10, "lose": 10, "mixedcas": 10, "lowercas": 10, "lower_case_with_underscor": 10, "deviat": [10, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 477], "unsur": [10, 164, 165], "anybodi": 10, "willing": 10, "seen": [10, 81, 164, 165], "unittest": [10, 21, 381], "heavili": [10, 459], "care": [10, 15, 16, 17, 81, 164, 165, 179, 191], "taken": [10, 15, 21, 77, 78, 80, 81, 162, 176, 177, 393, 399], "defin": [10, 21, 47, 49, 50, 51, 56, 59, 60, 67, 72, 73, 81, 113, 138, 139, 162, 164, 165, 167, 168, 176, 177, 183, 191, 225, 235, 398, 407, 410, 414, 415, 418, 419, 421, 428, 434, 435, 437, 442, 454, 474, 477, 481, 482], "parallel_2": 10, "processor_0": [10, 378], "id": [10, 17, 20, 36, 142, 175, 192, 398, 403, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 446, 447, 448, 449, 450, 451, 452, 454, 455, 478], "processor_0_of_2": [10, 378], "processor_1_of_2": [10, 378], "processor_0_of_3": [10, 378], "processor_1_of_3": [10, 378], "processor_2_of_3": [10, 378], "register_skipp": [10, 20, 378], "pertain": 10, "reli": [11, 72, 73, 81, 454, 474, 481], "parti": [11, 19, 471], "begin": [11, 15, 17, 21, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 115, 116, 129, 131, 139, 140, 145, 162, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 183, 184, 191, 225, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 477, 482], "By": [11, 17, 119, 179, 378, 414], "select": [11, 20, 21, 224, 225, 340, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 398, 473, 477], "webspac": 11, "infer": 11, "drawn": 11, "referenc": 11, "concur": 11, "fact": [11, 81, 164, 191, 192, 378, 414], "rudimentari": [11, 18, 119, 342], "introduct": [11, 20, 473, 476, 478], "expedi": [11, 21], "virtual": [11, 20, 472, 473], "keep": [11, 31, 32, 33, 34, 139, 163, 164, 165], "suffici": [11, 16, 164, 165, 192, 193, 382, 394, 400], "privileg": 11, "channel": [11, 17], "dai": [11, 21], "micromamba": 11, "popul": 11, "anaconda": 11, "merit": 11, "relationship": [11, 21, 96, 179], "myfipyenv": 11, "awar": [11, 16], "restrict": [11, 17, 197, 393, 474], "unpredict": 11, "later": [11, 19, 112, 167, 410], "unfortun": [11, 21, 183, 184, 192, 399], "prove": [11, 21], "Then": 11, "mymergedenviron": 11, "lockfil": [11, 20, 472, 473], "safest": 11, "obviat": 11, "flexibl": [11, 289, 292, 471], "highest": [11, 16], "mpich": 11, "batteri": [11, 21], "bare": [11, 164, 165], "quit": [11, 475], "speed": [11, 16, 119], "pretti": 11, "visual": [11, 18, 459, 471], "fewer": [11, 179], "amongst": 11, "freeli": [11, 15, 21, 194], "mind": [11, 17], "preserv": [11, 47, 123, 124, 398], "courag": 11, "impati": 11, "quickli": [11, 18, 140, 234, 254, 471], "formal": 11, "confid": [11, 119], "requisit": 11, "alter": [11, 17, 21], "admin": 11, "termin": [11, 16, 17, 81, 91, 138, 139, 140, 145, 179], "copyright": [11, 12], "credit": 11, "geuz": [11, 471], "creation": [11, 72, 73, 191, 481], "irregular": [11, 72, 73, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445], "analyz": [11, 72, 73], "judici": [11, 17], "compon": [11, 19, 31, 32, 74, 75, 110, 111, 112, 113, 114, 115, 116, 164, 165, 178, 183, 478], "fast": [11, 16, 21, 414, 478], "march": [11, 14, 414, 478], "ktchu": 11, "serendipityresearch": 11, "surfac": [11, 17, 19, 34, 72, 73, 95, 140, 158, 162, 176, 177, 179, 225, 474], "curv": [11, 179], "addition": [11, 19, 119], "pylsmlib": 11, "tree": [11, 444, 445, 466], "violat": 11, "tamper": 11, "util": [11, 20, 225, 339, 342, 382, 403, 471], "stow": 11, "virtualenv": 11, "buildout": 11, "cd": [11, 393], "power": [11, 13, 15, 21, 178, 194, 367, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 477, 481], "unix": [11, 13, 17], "reliabl": [11, 13, 192], "bash": [11, 13, 15], "employe": 12, "agenc": 12, "feder": [12, 21], "pursuant": 12, "protect": 12, "foreign": 12, "permiss": 12, "countri": 12, "deriv": [12, 15, 17, 31, 32, 33, 34, 68, 74, 81, 164, 165, 178, 183, 200, 393, 397, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474, 475, 476, 477, 481, 482], "fee": 12, "herebi": 12, "grant": [12, 19], "exclus": [12, 17], "basi": [12, 478], "disclaim": 12, "warranti": 12, "THE": 12, "AS": 12, "OF": 12, "kind": 12, "OR": 12, "statutori": 12, "BUT": 12, "NOT": 12, "TO": 12, "THAT": 12, "WILL": 12, "conform": 12, "merchant": 12, "fit": [12, 21, 179], "FOR": 12, "AND": [12, 398], "freedom": 12, "infring": 12, "BE": 12, "IN": 12, "NO": 12, "event": [12, 164, 165, 435], "shall": 12, "liabl": 12, "damag": 12, "indirect": 12, "consequenti": 12, "aris": 12, "connect": [12, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "WITH": 12, "contract": 12, "tort": 12, "otherwis": [12, 16, 90, 142, 143, 162, 175, 176, 177, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "injuri": 12, "sustain": 12, "BY": 12, "person": [12, 383], "loss": [12, 256, 312], "aros": 12, "hereund": 12, "cite": 14, "j": [14, 21, 75, 81, 108, 110, 113, 114, 116, 138, 139, 140, 145, 150, 164, 165, 167, 168, 176, 177, 178, 179, 180, 198, 340, 382, 393, 398, 478], "11": [14, 16, 17, 20, 47, 71, 72, 73, 95, 113, 119, 128, 142, 143, 183, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 398, 472, 478], "pp": [14, 348], "15": [14, 20, 36, 54, 56, 61, 66, 67, 81, 113, 115, 164, 165, 167, 176, 177, 178, 179, 191, 237, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 464, 472, 476, 478], "2009": [14, 20, 472, 478], "1109": 14, "mcse": 14, "w": [14, 114, 140, 145, 164, 165, 168, 176, 177, 179, 225, 382, 393, 400, 478], "boetting": [14, 108, 478], "earli": [14, 21, 78, 478], "reactiv": [14, 15, 20, 194, 478], "wet": [14, 15, 20, 167, 168, 194, 478], "82": [14, 183, 184, 478], "051601": [14, 478], "2010": [14, 20, 472, 478], "1103": [14, 478], "physrev": [14, 478], "mohanti": 14, "sohn": 14, "journal": [14, 340, 478], "034912": 14, "1063": [14, 478], "3190607": 14, "pusztai": 14, "l": [14, 16, 17, 36, 39, 40, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 68, 75, 78, 81, 82, 83, 85, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 129, 130, 131, 135, 140, 145, 150, 151, 164, 165, 167, 171, 172, 173, 175, 178, 179, 180, 183, 191, 224, 339, 340, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 478], "k": [14, 17, 21, 81, 108, 110, 113, 135, 139, 140, 145, 151, 164, 165, 175, 178, 179, 372, 393, 445, 448, 450, 451, 452, 454, 455, 457, 458, 478], "\u00f6": [14, 475], "rnyei": 14, "gr": 14, "\u00e1": 14, "sy": [14, 378, 398, 407, 415, 419, 421], "approach": [14, 15, 16, 19, 20, 81, 164, 165, 179, 194, 225, 472, 474, 475], "heterogen": 14, "nucleat": [14, 16, 31, 32], "alloi": [14, 16, 31, 32, 164, 165, 478], "014204": 14, "physrevb": 14, "p": [14, 16, 17, 67, 108, 113, 114, 119, 164, 165, 168, 176, 177, 178, 179, 183, 340, 372, 382, 393, 474, 477, 478], "moffat": [14, 478], "kim": [14, 478], "josel": [14, 478], "curvatur": [14, 139, 140, 478], "enhanc": [14, 471, 478], "adsorb": [14, 140, 478], "coverag": [14, 138, 139, 140, 145, 150, 151, 478], "bottom": [14, 17, 82, 83, 119, 176, 177, 180, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "damascen": 14, "electrochimica": 14, "acta": [14, 478], "53": 14, "2007": [14, 16, 20, 472], "1016": [14, 478], "electacta": 14, "03": [14, 20, 72, 78, 175, 448, 457, 458, 472, 478], "025": [14, 94, 95, 114, 115, 162, 176, 177, 179], "campbel": 14, "mcfadden": [14, 108, 478], "kirkendal": [14, 478], "displac": [14, 179, 221, 225, 231, 233, 236, 242, 250, 393], "dimension": [14, 19, 81, 82, 99, 111, 168, 179, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 315, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 478], "proceed": [14, 388], "royal": 14, "societi": [14, 478], "mathemat": [14, 17, 443, 471, 474, 478], "2088": 14, "3347": 14, "3373": 14, "1098": 14, "rspa": 14, "1904": 14, "cickovski": 14, "ara": 14, "swat": 14, "merk": 14, "glimm": 14, "hentschel": 14, "alber": 14, "glazier": 14, "newman": 14, "izaguirr": 14, "gene": 14, "organ": 14, "multicellular": 14, "60": [14, 113, 114, 115, 140, 179, 382, 393], "saylor": [14, 478], "theori": [14, 47], "letter": [14, 478], "035703": 14, "physrevlett": [14, 478], "mazur": 14, "soil": 14, "solar": [14, 478], "radiat": 14, "de": 14, "physiqu": 14, "iv": 14, "franc": 14, "320": [14, 164, 165], "2006": [14, 20, 472, 478], "1051": 14, "jp4": 14, "2006137061": 14, "electrodeposit": [14, 15, 145, 178, 194, 478], "c127": [14, 478], "c132": [14, 478], "1149": [14, 478], "2165580": [14, 478], "gold": [14, 20, 478], "submicromet": [14, 478], "trench": [14, 20, 137, 138, 139, 140, 145, 478], "c11": [14, 478], "c18": [14, 478], "2128765": [14, 478], "were": [14, 16, 17, 21, 63, 378, 398], "honor": 14, "invit": 14, "deliv": 14, "keynot": 14, "confer": 14, "caltech": 14, "august": [14, 16], "talk": 14, "georg": 14, "mason": 14, "depart": 14, "octob": [14, 16], "devic": 14, "radiolog": 14, "health": 14, "food": 14, "drug": [14, 15, 194, 478], "ge": [14, 126, 348], "siam": 14, "tm": [14, 39, 40, 179], "annual": [14, 478], "meet": [14, 139], "februari": 14, "educ": 14, "luncheon": 14, "roundtabl": 14, "transform": [14, 15, 108, 164, 165, 178, 179, 194, 474], "microstructologi": 14, "iii": [14, 225, 478], "birmingham": 14, "al": [14, 167, 168, 176, 177, 183], "2004": [14, 20, 113, 472, 478], "mr": 14, "fall": [14, 119], "novemb": 14, "fv": [15, 194, 352, 359, 360, 363, 367, 374, 375, 476], "msed": [15, 194], "mml": [15, 194], "ubiquit": [15, 194], "proprietari": [15, 194], "expens": [15, 194], "difficult": [15, 16, 18, 81, 192, 194], "scientist": [15, 21, 194, 471], "advantag": [15, 16, 74, 164, 165, 178, 192, 194, 474, 481], "arbitrari": [15, 17, 19, 110, 111, 112, 192, 194, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 475], "ellipt": [15, 194], "hyperbol": [15, 179, 194, 382, 393], "parabol": [15, 194], "dendrit": [15, 19, 21, 162, 163, 176, 177, 194, 478], "elut": [15, 194, 478], "stent": [15, 194], "photovolta": [15, 194], "redistribut": 15, "bear": 15, "welcom": [15, 21], "collabor": [15, 19], "project": [15, 18, 72, 73, 471], "driven": [15, 164, 165], "editor": 15, "tcsh": 15, "throughout": [15, 139, 163], "keyboard": 15, "denot": [15, 108, 119, 167, 183, 474], "12": [15, 16, 17, 20, 21, 47, 81, 90, 113, 165, 183, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 443, 472, 478], "twelv": 15, "primari": [15, 21], "secondari": 15, "remain": [15, 17, 34, 81, 113, 115, 119, 158, 163, 164, 165, 178, 192, 193, 398, 477], "margin": 15, "sensit": [15, 16, 164, 165, 168], "indent": 15, "posix": 15, "equival": [15, 16, 17, 21, 81, 194, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 474, 476], "seriou": [15, 32, 123, 124], "precondit": [16, 17, 183, 184, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 297, 298, 299, 300, 309, 317, 318, 319, 320, 335, 337, 338, 471], "algebra": [16, 17, 164, 165, 179, 285, 286, 322, 327, 471, 478], "popular": [16, 476], "easiest": [16, 17], "hardwar": 16, "trivial": [16, 32, 348, 362], "defaultsolv": [16, 20, 31, 33, 34, 36, 255], "lineargmressolv": [16, 20], "linearlusolv": [16, 20, 31, 36, 85, 111, 113, 165, 191, 362], "regardless": [16, 162, 176, 177, 224], "pytrilinos2": 16, "amgx": [16, 285, 286, 287, 288, 289, 290, 293], "suffer": [16, 17], "bottleneck": 16, "newer": 16, "compabl": 16, "mc": [16, 164, 165], "anl": 16, "toolkit": 16, "structur": [16, 18, 20, 81, 164, 165, 471, 472, 474, 478], "routin": [16, 179, 194, 268, 471], "scalabl": 16, "readthedoc": [16, 471], "multigrid": [16, 86, 285, 286, 292, 471], "conjunct": [16, 17, 21, 200], "nvidia": 16, "krylov": [16, 268, 269], "here": [16, 20, 21, 39, 40, 52, 57, 81, 91, 119, 129, 131, 135, 138, 140, 163, 167, 168, 171, 172, 173, 192, 193, 225, 348, 362, 398, 414, 472, 477], "behavior": [16, 17, 20, 21, 140, 193, 398, 472, 481, 482], "v": [16, 20, 34, 74, 119, 138, 139, 140, 142, 145, 150, 164, 165, 178, 179, 183, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 448, 464, 472, 478], "hire": [16, 17], "total": [16, 86, 108, 164, 165, 178, 250, 382, 393, 398], "prepar": 16, "size": [16, 17, 19, 20, 32, 78, 80, 100, 113, 139, 140, 145, 164, 165, 183, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 400, 423, 454, 474], "ln": [16, 135, 164, 165, 178, 183], "enough": [16, 17, 135, 162, 176, 177, 225], "insensit": [16, 17], "domin": [16, 17, 164, 165], "overal": [16, 17, 164, 165], "nearli": [16, 322, 331], "fastest": [16, 162, 176, 177], "slowest": 16, "worth": [16, 192], "terribl": 16, "prealloc": 16, "opposit": [16, 382, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "prior": [16, 339], "fine": [16, 137], "dispers": [16, 19], "thick": [16, 114, 179], "principl": [16, 165], "metric": 16, "decept": 16, "unprecondit": [16, 263, 264, 265, 266, 269], "quantiti": [16, 21, 72, 73, 108, 111, 138, 179, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 475], "twice": [16, 47], "counterintuit": 16, "reduct": 16, "seek": [16, 382, 400], "opportun": 16, "slurm": [16, 17], "task": [16, 17, 21], "core": [16, 17, 21], "manufactur": [16, 17], "observ": [16, 17, 163], "edg": [16, 72, 73, 119], "roughli": [16, 138, 140, 145, 183], "exhibit": [16, 108, 421, 475], "amdahl": 16, "law": [16, 21, 164, 165, 183, 367, 477], "speedup": 16, "sigma": [16, 179, 421], "gunther": 16, "kappa": [16, 140, 164, 165, 179, 474], "fraction": [16, 164, 165, 176, 177], "coher": 16, "somewhat": [16, 17, 21, 31, 33, 34, 348, 362], "nebul": 16, "00078": 16, "00034": 16, "70": [16, 165], "00028": 16, "00032": 16, "less": [16, 81, 164, 165, 268, 348, 362, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474], "slab": 16, "overhead": [16, 17], "compact": 16, "carri": 16, "architectur": [16, 471], "371d28468": 16, "frozen": [16, 176, 177], "squar": [16, 20, 45, 46, 47, 78, 82, 119, 179, 180, 225, 264, 298, 318, 382, 393, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 471], "sampl": [16, 423], "1024": 16, "1e": [16, 17, 33, 34, 36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 74, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 103, 110, 111, 112, 113, 114, 115, 119, 126, 129, 135, 139, 150, 151, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 191, 192, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 348, 362, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "rh": [16, 17, 36, 119, 183, 184, 199, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 337, 338, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "criterion": [16, 17, 20, 81, 90, 110, 115, 164, 165, 178, 183, 184, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 306, 307, 308, 309, 312, 317, 318, 319, 320, 321, 335, 336, 337, 338], "amd": 16, "epyc": 16, "7702": 16, "simultan": [16, 74, 162, 165, 176, 177, 461], "smt": 16, "gb": 16, "2048": 16, "five": 16, "replic": 16, "endeavor": 16, "column": [16, 17, 72, 73], "detect": 16, "unscal": [16, 17, 256, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 337, 338], "mathsf": [16, 162, 176, 177, 179, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "_2": [16, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398], "az_nosc": 16, "ksp_norm_unprecondit": 16, "az_rh": 16, "az_anorm": 16, "relative_ini_cor": 16, "az_r0": 16, "_1": [16, 339, 398], "az_sol": 16, "ksp_norm_precondit": 16, "natur": [16, 17, 74, 140, 192, 262, 263, 264, 265, 266, 269, 270, 309, 317, 318, 319, 320, 335, 337, 338, 382, 393, 474], "sqrt": [16, 20, 36, 40, 67, 71, 72, 73, 77, 78, 81, 114, 123, 126, 128, 129, 131, 139, 150, 151, 157, 158, 167, 179, 225, 348, 362, 372, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "ksp_norm_natur": 16, "ksp_norm_default": 16, "top": [16, 82, 83, 139, 142, 143, 175, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 414, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "scipy_maxit": 16, "az_loss": 16, "mathcal": [16, 164, 165], "row": 16, "happen": [16, 21, 47, 81], "ksptype": 16, "discern": 16, "burn": 16, "bowl": 16, "chicken": 16, "entrail": 16, "sai": 16, "weird": [16, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "abort": [16, 309], "ksp_diverged_dtol": 16, "ever": [16, 81, 192, 482], "occur": [16, 17, 34, 167, 179, 183, 191, 256, 312, 382, 393, 414], "inputperiod": [16, 20], "phasediffus": [16, 20], "guess": [16, 119], "ultim": 16, "succe": 16, "captur": 16, "amgx_solve_success": 16, "az_norm": 16, "iterationconverg": [16, 20, 256, 268], "ksp_converged_it": 16, "absolutetoleranceconverg": [16, 20, 256, 268], "ksp_converged_atol": 16, "rhszeroconverg": [16, 20, 256], "mathbf": 16, "relativetoleranceconverg": [16, 20, 256, 268], "ksp_converged_rtol": 16, "happybreakdownconverg": [16, 20, 256, 268], "wors": [16, 256], "ksp_converged_happy_breakdown": 16, "lossofaccuracyconverg": [16, 20, 256, 312], "round": [16, 382, 393], "iteratingconverg": [16, 20, 256, 268], "progress": [16, 36, 183, 184, 256, 421], "ksp_converged_iter": 16, "breakdowndiverg": [16, 20, 256, 268, 294, 306, 312], "illeg": [16, 382, 393], "ksp_diverged_breakdown": 16, "amgx_solve_fail": 16, "az_breakdown": 16, "iterationdiverg": [16, 20, 256, 268, 294, 306, 312], "reach": [16, 21, 77, 78, 80, 140, 164, 165, 179, 268], "ksp_diverged_it": 16, "amgx_solve_diverg": 16, "az_maxit": 16, "preconditioningdiverg": [16, 20, 256, 268], "ill": [16, 256], "ksp_diverged_pc_fail": 16, "illconditionedpreconditionerdiverg": [16, 20, 256, 268], "inner": [16, 34, 81, 158, 225, 471], "posit": [16, 17, 72, 73, 81, 126, 130, 139, 151, 152, 164, 165, 175, 192, 268, 322, 331, 423, 448, 449, 450, 471, 477], "ksp_diverged_indefinite_pc": 16, "illconditioneddiverg": [16, 20, 256, 268, 312], "ksp_diverged_indefinite_mat": 16, "az_ill_cond": 16, "stagnateddiverg": [16, 20, 256], "stagnat": [16, 256], "outofrangediverg": [16, 20, 256, 268], "becam": [16, 256, 268], "ksp_diverged_nanorinf": 16, "nulldiverg": [16, 20, 256, 268], "breakdown": [16, 256, 268], "hessenberg": [16, 256], "gmre": [16, 256, 266, 290, 300, 320, 471], "ksp_diverged_nul": 16, "tolerancediverg": [16, 20, 256, 268], "factor": [16, 17, 32, 119, 164, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 268, 291, 301, 393, 454, 474], "divtol": [16, 268], "ksp": [16, 268], "sec": 16, "convergencetest": 16, "2017": [16, 20, 472], "amgx_refer": 16, "2d1d5b042a09e131ffe191726aa6829b33590970": 16, "_isolv": 16, "l30": 16, "aztecoo": [16, 335], "aztec": [16, 322, 333, 336], "az_conv": 16, "sand": 16, "sand2004": 16, "3796": 16, "aztecoouserguid": 16, "ksp_diverged_breakdown_bicg": 16, "ksp_diverged_nonsymmetr": 16, "sens": 17, "strongli": [17, 164, 165, 191], "proce": [17, 32, 72, 73, 81, 82, 83, 164, 165, 179, 183], "assumpt": [17, 140, 164, 165], "seri": 17, "familiar": 17, "yourself": [17, 481, 482], "excel": 17, "dive": [17, 478], "Into": [17, 478], "deeper": [17, 414], "insight": 17, "getlogg": 17, "consol": 17, "streamhandl": 17, "setlevel": 17, "info": [17, 397], "addhandl": 17, "verbos": [17, 378, 381], "save": [17, 20, 139, 142, 143, 167, 175, 394, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 471, 472], "logfil": 17, "filehandl": 17, "filter": [17, 192, 309], "addfilt": 17, "fipy_log_config": 17, "mpilog": 17, "mpiscatteredfilehandl": 17, "filepattern": 17, "mpirank": 17, "d_of_": 17, "mpisiz": 17, "uniqu": [17, 21], "investig": [17, 96], "tracker": 17, "dashboard": 17, "myfipyscript": 17, "someflag": 17, "lazili": [17, 443], "recalcul": [17, 130, 183, 184, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 443], "skfmm": 17, "compos": [17, 21, 164, 165, 481], "fipy_inlin": 17, "fipy_inline_com": 17, "json": [17, 397, 471], "config": 17, "dictconfig": 17, "fipy_default_criterion": 17, "admittedli": 17, "circular": [17, 71, 72, 73, 123, 150, 151, 162, 163, 167, 176, 177, 348], "fipy_include_numerix_al": [17, 193], "fipy_cach": 17, "petsc_opt": 17, "tune": 17, "tri2d": [17, 20, 78, 91, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 251, 252, 253, 254, 445, 452, 454, 455, 457, 458], "skewedgrid2d": [17, 20, 93, 96], "advis": 17, "myscript": [17, 139, 309], "confirm": [17, 81, 113, 115, 167, 178, 255], "half": [17, 167, 193], "look": [17, 20, 81, 164, 165, 472], "my": [17, 20, 192, 472], "69815": 17, "freed": 17, "69814": 17, "69813": 17, "compil": [17, 21, 471], "essenti": [17, 49, 50, 51, 59, 60, 81, 139, 164, 165, 191, 382, 393, 398, 474, 476], "sub": [17, 250, 474, 479, 480, 483], "One": [17, 81, 90, 110, 112, 157, 164, 165, 179, 183, 191, 454, 474], "xterm": 17, "ipdb": 17, "spawn": 17, "intent": 17, "node": [17, 225], "cluster": 17, "child": 17, "compet": [17, 31, 32, 164, 165], "ghost": [17, 225], "exchang": [17, 139, 140, 145], "gil": 17, "bind": [17, 461, 471, 481], "parent": 17, "launch": [17, 81], "minut": [17, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "unrestrict": [17, 21], "conceiv": 17, "unfett": 17, "pure": [17, 74, 108, 164, 165, 178], "slot": 17, "msg03393": 17, "notfun": 17, "polygon": 17, "wrapper": [17, 225, 259, 260, 302, 303, 304, 314, 315, 385, 394, 399, 471], "gmsh3d": [17, 20, 193, 225], "style": [17, 454], "geometri": [17, 21, 72, 73, 138, 139, 140, 145, 158, 191, 199, 209, 225, 235, 251, 252, 410, 414, 418, 428, 434, 435, 437], "geo": [17, 225], "msh": [17, 71, 225], "whenev": [17, 309, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "compromis": [17, 81], "highli": [17, 21, 322, 329], "orthogon": [17, 21, 93, 95, 96, 250, 268, 474], "tighter": 17, "tempor": 17, "eqn0": [17, 74], "eqn1": [17, 74], "coupledeqn": [17, 183, 184], "quadrant": [17, 180], "act": [17, 21], "term00": 17, "term01": 17, "source0": 17, "term10": 17, "term11": 17, "source1": 17, "tt": 17, "hline": [17, 140, 145], "decis": 17, "regard": 17, "upper": [17, 444, 448, 471], "revers": [17, 52, 57, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "decompos": [17, 31, 33, 34, 74], "2nd": [17, 32, 341, 354, 478], "pair": [17, 74, 108, 398], "4th": [17, 86, 354], "phi": [17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 108, 112, 113, 114, 115, 116, 123, 124, 126, 128, 129, 130, 131, 139, 150, 162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177, 178, 179, 180, 191, 192, 199, 200, 348, 352, 354, 357, 359, 360, 362, 363, 365, 367, 368, 369, 372, 374, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 472, 475, 476], "kappa_c": [17, 164, 165], "kappa_": [17, 108, 114, 164, 165, 178, 179], "mu": [17, 119, 164, 165, 167, 168, 176, 177, 178, 183, 184, 393, 415, 421], "hat": [17, 51, 81, 139, 198, 200, 418, 437, 438, 474], "qquad": [17, 36, 67, 108, 114, 131, 135, 164, 165, 171, 172, 173, 178, 348], "facestop": [17, 20, 52, 57, 82, 83, 119, 139, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "fixedvalu": [17, 20, 191, 192, 193, 200], "facenorm": [17, 235, 236, 237], "exterior": [17, 68, 72, 73, 81, 157, 225], "firstli": [17, 72, 73, 123, 124, 128, 130, 157, 183, 414], "diffcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 107, 191, 192], "convcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 191, 192], "extra": [17, 292, 378], "eqn": [17, 39, 40, 71, 74, 78], "diffusioncoeff": [17, 36, 39, 40, 67, 77, 139, 167, 168, 191], "exteriorflux": 17, "fixedflux": [17, 20, 191, 193, 200], "unless": [17, 19, 31, 32, 33, 34, 224, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 382, 400], "xy": [17, 234, 254, 348], "quad": [17, 85, 179], "elsewher": 17, "repres": [17, 20, 21, 31, 32, 49, 50, 59, 60, 68, 74, 77, 81, 110, 112, 113, 114, 115, 130, 139, 140, 151, 162, 163, 175, 176, 177, 179, 191, 199, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 352, 354, 365, 372, 393, 407, 410, 415, 419, 421, 442, 448, 452, 472, 474, 475], "portion": [17, 21], "s_r": 17, "int_v": [17, 352, 357, 359, 360, 363, 365, 367, 372, 374, 474], "dv": [17, 164, 165, 183, 352, 357, 359, 360, 363, 365, 367, 372, 374, 474], "int_": [17, 164, 165, 474], "notin": 17, "setvalu": [17, 20, 21, 31, 33, 34, 67, 72, 73, 75, 81, 85, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 142, 143, 151, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458], "powerlawconvectionterm": [17, 20, 49, 50, 51, 59, 60, 63, 65, 66, 67, 68, 110, 111, 112, 113, 115, 164, 177, 178, 191, 192, 348, 351, 352, 359, 360, 361, 362, 363, 365, 368, 369, 372, 374, 375, 474], "onto": [17, 31, 33, 34, 135, 192], "interven": [17, 81], "neighbor": [17, 348, 414, 474, 477], "phi_f": [17, 352, 359, 360, 363, 367, 374, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "approx": [17, 164, 165, 179, 418, 437, 438], "phi_p": [17, 348, 352, 357, 359, 360, 362, 363, 365, 367, 372, 374, 474, 477], "pf": [17, 113], "_f": [17, 119, 183, 352, 359, 360, 363, 367, 374, 418, 437, 438, 474], "adjoin": 17, "g_f": 17, "b_f": 17, "turn": [17, 191], "gamma": [17, 71, 135, 145, 167, 168, 176, 177, 192, 357, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474, 475], "sum_f": [17, 119, 357, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 474], "gamma_f": [17, 357, 474], "a_f": [17, 119, 183, 184, 352, 357, 359, 360, 363, 367, 374, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 474], "sum_": [17, 75, 108, 110, 114, 116, 140, 178, 352, 359, 360, 363, 367, 374, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "modif": 17, "dpf": 17, "celldistancevector": 17, "robincoeff": 17, "similarli": [17, 140], "heat": [17, 81, 162, 164, 165, 176, 177, 179, 478], "t_": 17, "largevalu": 17, "paramet": [17, 20, 21, 31, 32, 39, 40, 72, 73, 78, 80, 81, 113, 115, 119, 123, 124, 128, 130, 135, 138, 139, 140, 142, 143, 145, 163, 164, 165, 167, 168, 175, 179, 183, 191, 196, 198, 199, 200, 221, 224, 225, 231, 233, 236, 242, 250, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 389, 393, 394, 397, 398, 399, 400, 402, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470, 475, 477, 481, 482], "typic": [17, 119, 164, 165, 354], "boolean": [17, 179, 382, 393], "noth": [17, 110, 111, 112, 158, 378], "believ": [17, 191], "intuit": 17, "pathologi": 17, "attent": [17, 225], "implicitli": [17, 91, 179, 183], "discrep": 17, "nx": [17, 31, 32, 33, 36, 39, 40, 47, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 142, 143, 157, 162, 163, 164, 165, 167, 168, 175, 176, 177, 178, 179, 180, 183, 184, 191, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 394, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458, 464], "rvert_": [17, 81, 179], "25": [17, 20, 31, 32, 33, 119, 123, 162, 163, 176, 177, 178, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 464, 472, 478], "facesright": [17, 20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 78, 81, 82, 83, 85, 94, 95, 113, 119, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "unexpect": [17, 378], "everywher": [17, 112, 114, 139, 167, 168, 179], "steppyngstoun": [17, 164, 165, 339, 340, 341, 342, 471], "stepper": [17, 20, 164, 165], "variant": [17, 165, 471], "popup": 17, "menu": 17, "latexpdf": 17, "plu": [17, 81, 474], "v7": 17, "bibliograph": 17, "numpydoc": 17, "embed": [17, 19, 21, 158], "imagemagick": 17, "siunit": 17, "sty": 17, "texliv": 17, "pyspel": 17, "hunspel": 17, "libreoffic": 17, "wget": 17, "aff": 17, "cgit": 17, "freedesktop": 17, "en": [17, 471], "a4473e06b56bfe35187e302754f6baaa8d75e54f": 17, "dic": 17, "far": [18, 81, 113, 115, 139, 140, 145, 165, 178, 402, 414], "vkml": 19, "aspect": [19, 119, 140, 145, 168, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 446, 447, 449, 450, 451, 452, 454, 455], "semin": 19, "michael": 19, "water": 19, "prof": 19, "edwin": 19, "garcia": 19, "purdu": 19, "coarsen": 19, "random": [19, 31, 32, 33, 34, 93, 162, 176, 177, 183, 184, 242, 407, 415, 419, 421, 435, 442], "crystallograph": 19, "nuclei": [19, 176, 177], "radiu": [19, 34, 72, 73, 123, 151, 158, 162, 163, 176, 177, 225], "homogen": [19, 31, 32], "wall": [19, 119], "seed": [19, 162, 163, 176, 177, 183, 184, 407, 415, 419, 421, 435], "fold": 19, "undercool": [19, 162, 176, 177, 179], "liquid": [19, 113, 115, 162, 163, 164, 165, 167, 176, 177, 178, 183], "strength": [19, 474, 477], "tension": 19, "segreg": [19, 31, 32, 75, 113, 115, 116, 178], "chemic": [19, 108, 164, 165, 178, 183, 475, 478], "john": [19, 478], "browser": 19, "assess": 19, "potenti": [19, 75, 108, 112, 113, 114, 115, 116, 164, 165, 178, 183, 184, 475], "word": [19, 91, 138, 139, 140, 145, 179], "michigan": 19, "boston": 19, "japan": 19, "england": 19, "wherev": 19, "persist": [19, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "cowork": 19, "planet": 19, "him": 19, "temporari": [19, 382, 394, 400, 403], "travel": 19, "privat": [19, 378], "publicli": 19, "peopl": 19, "regist": 19, "registr": 19, "nanohub": 19, "overview": [20, 21, 378, 472, 473], "client": [20, 472], "openmp": [20, 471, 472], "dirichlet": [20, 82, 83, 199, 472], "outlet": [20, 472], "inlet": [20, 472], "absolute_toler": [20, 263, 264, 265, 266, 269, 291, 297, 298, 299, 300, 301, 307, 308, 472], "divergence_toler": [20, 263, 264, 265, 266, 269, 472], "partial_i": [20, 71, 183, 472], "gamma_": [20, 71, 472], "ij": [20, 71, 472], "partial_j": [20, 71, 183, 472], "imag": [20, 138, 140, 142, 143, 145, 175, 176, 177, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470, 472], "screen": [20, 138, 140, 145, 398], "movi": [20, 472], "oh": [20, 192, 472], "anymor": [20, 472], "fvm": [20, 21, 472, 476], "cc": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 128, 129, 131, 191, 472, 476], "vc": [20, 472, 476], "scheme": [20, 45, 46, 49, 50, 51, 59, 60, 81, 123, 124, 176, 177, 179, 183, 352, 359, 360, 363, 367, 374, 414, 472, 474, 476], "2024": [20, 472], "06": [20, 393, 472], "2023": [20, 472], "27": [20, 138, 393, 472, 478], "2022": [20, 472], "2020": [20, 472], "08": [20, 71, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 472], "01": [20, 31, 32, 33, 34, 74, 75, 78, 110, 113, 114, 115, 116, 126, 167, 168, 176, 177, 178, 183, 184, 225, 382, 393, 407, 442, 445, 450, 451, 454, 455, 457, 458, 472], "02": [20, 80, 151, 162, 163, 167, 168, 176, 177, 225, 472, 478], "14": [20, 164, 183, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 464, 472, 474, 476, 478], "2019": [20, 472], "28": [20, 39, 140, 164, 165, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 393, 472, 478], "22": [20, 108, 178, 183, 472, 478], "2016": [20, 472], "24": [20, 81, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 472, 478], "2015": [20, 472], "2013": [20, 472], "09": [20, 393, 472, 478], "2012": [20, 184, 472], "16": [20, 183, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 341, 472, 476, 478], "2011": [20, 183, 472, 478], "20": [20, 21, 31, 32, 47, 71, 82, 83, 94, 95, 104, 112, 113, 145, 162, 163, 164, 165, 176, 177, 180, 183, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 414, 443, 472, 475, 478], "05": [20, 72, 73, 113, 162, 176, 177, 183, 184, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 464, 472], "2008": [20, 472], "submit": [20, 472], "feedstock": [20, 472], "announc": [20, 472], "glossari": [20, 472, 473], "subpackag": [20, 479, 483], "method1": [20, 481, 482], "method2": [20, 481, 482], "doctest_raw_input": [20, 194], "boundarycondit": [20, 21, 36, 85, 86, 191, 192, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 418, 428, 438, 443], "nthorderboundarycondit": [20, 36, 85], "offsetsparsematrix": 20, "petscmatrix": 20, "sparsematrix": [20, 203, 348, 362], "trilinosmatrix": 20, "abstractmesh": [20, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "vtkcelldataset": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "vtkfacedataset": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "__div__": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393], "__getstate__": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 259, 260, 261, 314, 315, 316, 385, 386, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__radd__": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393], "__sub__": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393], "__truediv__": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393], "aspect2d": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "cellfaceid": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "facesback": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "facesbottom": [20, 52, 57, 82, 83, 119, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "facesdown": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "facesfront": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "facesleft": [20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 113, 116, 119, 157, 184, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "facesup": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "meshadditionerror": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "__cause__": [20, 210, 225, 229, 255, 256, 309, 343, 444], "__context__": [20, 210, 225, 229, 255, 256, 309, 343, 444], "__delattr__": [20, 210, 225, 229, 255, 256, 309, 343, 444], "__getattribute__": [20, 210, 225, 229, 255, 256, 309, 343, 444], "__reduce__": [20, 210, 225, 229, 255, 256, 309, 343, 444], "__setattr__": [20, 210, 225, 229, 255, 256, 309, 343, 444], "__str__": [20, 210, 225, 229, 255, 256, 268, 294, 306, 309, 312, 343, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444], "add_not": [20, 210, 225, 229, 255, 256, 309, 343, 444], "with_traceback": [20, 210, 225, 229, 255, 256, 309, 343, 444], "builder": [20, 232], "abstractgridbuild": 20, "grid1dbuild": [20, 232], "grid2dbuild": 20, "grid3dbuild": 20, "periodicgrid1dbuild": 20, "utilityclass": 20, "cylindricalgrid2d": [20, 59, 60, 224], "cylindricalnonuniformgrid1d": [20, 224], "__mul__": [20, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 382, 393], "__rmul__": [20, 220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 382, 393], "extrud": [20, 34, 158, 221, 225, 231, 233, 236, 242, 250], "cylindricaluniformgrid1d": [20, 224], "cylindricaluniformgrid2d": [20, 224], "sphericalgrid1d": [20, 224], "gmsh2din3dspac": [20, 34, 158, 193, 225], "gmshexcept": [20, 225], "gmshfile": [20, 225], "gmshgrid2d": [20, 225], "gmshgrid3d": [20, 104, 225], "mshfile": [20, 225], "makemapvari": [20, 225], "meshexporterror": [20, 225], "posfil": [20, 225], "gmshversion": [20, 225], "openmshfil": [20, 225], "openposfil": [20, 225], "nonuniformgrid2d": [20, 221, 224, 225, 231, 236, 242, 250], "nonuniformgrid3d": [20, 224], "periodicgrid1d": [20, 90], "periodicgrid2d": 20, "periodicgrid2dleftright": [20, 236], "periodicgrid2dtopbottom": [20, 236], "periodicgrid3dfrontback": [20, 237], "periodicgrid3dleftright": [20, 237], "periodicgrid3dleftrightfrontback": [20, 237], "periodicgrid3dleftrighttopbottom": [20, 237], "periodicgrid3dtopbottom": [20, 237], "periodicgrid3dtopbottomfrontback": [20, 237], "abstractrepresent": [20, 210, 251], "gridrepresent": [20, 232, 233, 234, 250, 252, 253, 254], "meshrepresent": [20, 229, 230, 231], "physicalshap": [20, 242, 250], "sphericalnonuniformgrid1d": [20, 224], "sphericaluniformgrid1d": [20, 224], "topologi": [20, 209, 210, 229, 230, 231, 232, 233, 234, 250, 251, 252, 253, 254, 474, 478], "abstracttopologi": [20, 210, 251], "gridtopologi": [20, 232, 233, 234, 252, 253, 254], "meshtopologi": [20, 229, 230, 231, 250], "uniformgrid1d": [20, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 253, 254, 352, 359, 360, 363, 367, 374, 375], "uniformgrid2d": [20, 223, 224, 352, 359, 360, 363, 367, 374, 375], "defaultasymmetricsolv": [20, 47, 52, 54, 56, 57, 61, 66, 110, 163, 164, 165, 178, 255], "dummysolv": [20, 179, 255, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "generalsolv": [20, 139, 167, 168, 255], "serialsolvererror": [20, 255], "convergencebas": [20, 256], "tolerance_scal": [20, 256], "status_cod": [20, 256], "status_nam": [20, 256], "actual_cod": [20, 256, 268, 294, 306, 312], "divergencewarn": [20, 256], "comm": 20, "parallelpetsccommwrapp": 20, "petsccommwrapp": [20, 259, 261], "serialpetsccommwrapp": 20, "default_iter": [20, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338], "default_precondition": [20, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338], "default_toler": [20, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338], "legacy_toler": [20, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 336, 337, 338], "linearbicgsolv": 20, "linearcgssolv": [20, 192], "linearpcgsolv": [20, 265, 288, 299, 319, 348], "petscconverg": 20, "ksp_absolutetoleranceconverg": [20, 268], "ksp_breakdownbicgdiverg": [20, 268], "ksp_breakdowndiverg": [20, 268], "ksp_happybreakdownconverg": [20, 268], "ksp_indefinitematrixdiverg": [20, 268], "ksp_indefinitepreconditionerdiverg": [20, 268], "ksp_iteratingconverg": [20, 268], "ksp_iterationconverg": [20, 268], "ksp_iterationdiverg": [20, 268], "ksp_nanorinfdiverg": [20, 268], "ksp_nonsymmetricdiverg": [20, 268], "ksp_normalabsolutetoleranceconverg": [20, 268], "ksp_normalrelativetoleranceconverg": [20, 268], "ksp_nulldiverg": [20, 268], "ksp_preconditioningdiverg": [20, 268], "ksp_relativetoleranceconverg": [20, 268], "ksp_tolerancediverg": [20, 268], "petsckrylovsolv": [20, 263, 264, 265, 266], "petscsolv": [20, 262, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279], "defaultprecondition": [20, 263, 264, 265, 266, 269, 271], "hypreprecondition": [20, 165, 271], "icprecondition": [20, 271, 322], "iluprecondition": [20, 271, 292, 302, 322], "jacobiprecondition": [20, 271, 287, 288, 289, 290, 292, 302, 317, 322, 335], "luprecondition": [20, 271], "ssorprecondition": [20, 184, 271], "petscprecondition": [20, 263, 264, 265, 266, 269, 271, 272, 273, 274, 275, 276, 277, 279], "matrixmodifyingprecondition": [20, 280, 305], "solvermodifyingprecondition": [20, 278, 280, 292, 334], "smoothedaggregationprecondition": 20, "aggregationamgsolv": 20, "default_smooth": [20, 285, 286, 287, 288, 289, 290, 293], "classicalamgsolv": 20, "linearfgmressolv": 20, "amgprecondition": [20, 292], "aggregationamgprecondition": [20, 292], "bicgstabprecondition": [20, 292], "cgprecondition": [20, 292], "diluprecondition": [20, 292], "fgmresprecondition": [20, 292], "gaussseidelprecondition": [20, 292], "polynomialprecondition": [20, 292], "pyamgxprecondition": [20, 285, 286, 287, 288, 289, 290, 292, 293], "pyamgxsolv": [20, 285, 286, 287, 288, 289, 290, 292], "pyamgxconverg": 20, "pyamgx_breakdowndiverg": [20, 294], "pyamgx_converg": [20, 294], "pyamgx_iterationdiverg": [20, 294], "smoother": [20, 285, 286, 287, 288, 289, 290, 293, 322, 333, 336], "scipyprecondition": [20, 283, 302, 303, 304], "scipyconverg": 20, "scipy_breakdowndiverg": [20, 306], "scipy_converg": [20, 306], "scipy_iterationdiverg": [20, 306], "scipykrylovsolv": [20, 297, 298, 299, 300], "scipysolv": [20, 283, 291, 301, 302, 303, 304, 305, 307], "breakdownwarn": [20, 309], "illconditionedpreconditionerwarn": [20, 309], "illegalinputorbreakdownwarn": [20, 309], "lossofprecisionwarn": [20, 309], "matrixillconditionedwarn": [20, 309], "maximumiterationwarn": [20, 309], "normalconverg": [20, 309], "parameterwarn": [20, 309], "preconditionernotpositivedefinitewarn": [20, 309], "preconditionerwarn": [20, 309], "scalarquantityoutofrangewarn": [20, 309], "solverconvergencewarn": [20, 309], "stagnatedsolverwarn": [20, 309], "aztecconverg": 20, "az_breakdowndiverg": [20, 312], "az_illconditioneddiverg": [20, 312], "az_iterationdiverg": [20, 312], "az_lossofaccuracyconverg": [20, 312], "az_normalconverg": [20, 312], "az_parameterdiverg": [20, 312], "epetracommwrapp": [20, 315, 316], "parallelepetracommwrapp": 20, "maxal": [20, 315], "minal": [20, 315], "serialepetracommwrapp": 20, "domdecompprecondition": [20, 322, 325], "multilevelddmlprecondition": [20, 322], "multilevelddprecondition": [20, 318, 319, 320, 322], "multilevelnssaprecondition": [20, 110, 163, 322], "multilevelsaprecondition": [20, 322], "multilevelsgsprecondition": [20, 322], "multilevelsolversmootherprecondition": [20, 322], "multilevelprecondition": [20, 322, 327, 328, 329, 331, 332, 333], "trilinosprecondition": [20, 322, 323, 324, 326, 330], "trilinosaztecoosolv": [20, 317, 318, 319, 320], "trilinosmltest": 20, "trilinosnonlinearsolv": 20, "trilinossolv": [20, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337], "l1error": [20, 339], "l2error": [20, 339], "linferror": [20, 339], "sweepmonoton": [20, 339], "pidstepp": [20, 164, 165], "pseudorkqsstepp": 20, "abstractbaseclasserror": [20, 343], "explicitvariableerror": [20, 343], "incorrectsolutionvari": [20, 343], "solutionvariablenumbererror": [20, 343], "solutionvariablerequirederror": [20, 343], "termmultiplyerror": [20, 343], "transienttermerror": [20, 343, 352, 359, 360, 363, 367, 374, 375], "vectorcoefferror": [20, 343, 352, 359, 360, 363, 367, 374, 375], "abstractbinaryterm": 20, "abstractconvectionterm": 20, "abstractdiffusionterm": 20, "abstractupwindconvectionterm": 20, "advectionterm": [20, 123, 124, 126, 128, 130, 139], "rhsvector": [20, 119, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "__eq__": [20, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__hash__": [20, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__neg__": [20, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 382, 393], "cachematrix": [20, 119, 183, 184, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "cacherhsvector": [20, 119, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "justresidualvector": [20, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "residualvectorandnorm": [20, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "asymmetricconvectionterm": 20, "binaryterm": 20, "centraldiffconvectionterm": 20, "centraldifferenceconvectionterm": [20, 183, 184, 352, 474], "coupledbinaryterm": 20, "diffusiontermcorrect": [20, 71], "explicitdiffusionterm": [20, 77, 78, 81, 163, 167, 168, 474], "explicitsourceterm": 20, "explicitupwindconvectionterm": [20, 352, 360, 363, 367, 374, 375, 474], "exponentialconvectionterm": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 191, 474], "faceterm": 20, "firstorderadvectionterm": [20, 123, 124, 126, 128, 130, 348], "hybridconvectionterm": [20, 474], "nondiffusionterm": 20, "residualterm": 20, "sourceterm": [20, 365, 368], "unaryterm": 20, "upwindconvectionterm": [20, 474], "testfipi": 20, "doctestplu": 20, "execbutnotest": [20, 378], "report_skip": [20, 378], "testmod": [20, 378], "lateimporttest": 20, "testprogram": 20, "serialcomm": [20, 71, 124, 126, 128, 130, 139, 224, 225, 382, 414], "parallelcomm": [20, 224, 225, 382, 400], "__abs__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__array_wrap__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__bool__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__float__": [20, 382, 393], "__ge__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__getitem__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__gt__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__le__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__lt__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__mod__": [20, 382, 393], "__ne__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__nonzero__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__pow__": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__setitem__": [20, 382, 393], "allclos": [20, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 135, 139, 150, 151, 152, 157, 163, 164, 165, 167, 168, 171, 172, 173, 178, 179, 180, 183, 191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 362, 372, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "allequ": [20, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "arcco": [20, 382, 393], "arccosh": [20, 382, 393], "arcsin": [20, 72, 73, 382, 393], "arctan": [20, 162, 163, 176, 177, 382, 393], "arctan2": [20, 162, 163, 176, 177, 382, 393], "arctanh": [20, 382, 393], "ceil": [20, 382, 393], "conjug": [20, 82, 83, 264, 265, 288, 292, 298, 299, 318, 319, 382, 393, 471, 474], "converttounit": [20, 382, 393], "co": [20, 39, 71, 72, 73, 142, 175, 382, 393, 445, 448, 457, 458], "cosh": [20, 113, 382, 393], "floor": [20, 382, 393], "inbaseunit": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "indimensionless": [20, 382, 393], "inradian": [20, 382, 393], "insiunit": [20, 382, 393], "inunitsof": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "log10": [20, 382, 393], "numericvalu": [20, 382, 393], "sin": [20, 71, 81, 142, 175, 192, 382, 393, 445, 448, 450, 451, 452, 454, 455, 457, 458, 474], "sinh": [20, 382, 393], "sum": [20, 71, 150, 151, 152, 224, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "tan": [20, 162, 163, 176, 177, 382, 393, 398], "tanh": [20, 114, 179, 382, 393], "tostr": [20, 382, 393, 398], "commwrapp": [20, 224, 225, 260, 314, 382, 386, 394, 400], "dummycomm": [20, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 236, 237, 243, 244, 252, 253, 254, 382, 394, 400], "copy_script": 20, "decor": 20, "dictwithdefault": 20, "numberdict": 20, "physicalunit": [20, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__rdiv__": [20, 393], "__rtruediv__": [20, 393], "conversionfactorto": [20, 393], "conversiontupleto": [20, 393], "isangl": [20, 393], "iscompat": [20, 393], "isdimensionless": [20, 393], "isdimensionlessorangl": [20, 393], "isinverseangl": [20, 393], "setnam": [20, 393], "conda_info": [20, 397], "nix_info": [20, 397], "package_info": [20, 397], "pip_info": [20, 397], "platform_info": [20, 397], "l1norm": [20, 339, 398], "l2norm": [20, 339, 398], "linfnorm": [20, 339, 398], "getshap": [20, 398], "getunit": [20, 398], "isclos": [20, 398], "nearest": [20, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "sqrtdot": [20, 398], "parser": [20, 139, 157, 167], "pars": [20, 139, 157, 167, 225, 399, 459], "sharedtempfil": 20, "clock_n": [20, 402], "prune": [20, 403], "putadd": [20, 403], "arithmeticcelltofacevari": 20, "betanoisevari": 20, "__and__": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__call__": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__new__": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__or__": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__setstate__": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "cellvolumeaverag": [20, 39, 40, 71, 164, 165, 183, 184, 225, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "constraintmask": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "gaussgrad": [20, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "harmonicfacevalu": [20, 110, 111, 112, 113, 115, 164, 165, 178, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "leastsquaresgrad": [20, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "minmodfacevalu": [20, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "rdot": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "scrambl": [20, 407, 415, 419, 421, 435, 442], "std": [20, 225, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "binaryoperatorvari": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "celltofacevari": 20, "constant": [20, 31, 32, 50, 56, 57, 60, 68, 81, 112, 139, 140, 145, 164, 165, 178, 192, 223, 253, 378, 393, 398, 474], "coupledcellvari": 20, "calcdistancefunct": [20, 124, 126, 128, 129, 130, 131, 139, 142, 143, 152, 414], "cellinterfacearea": [20, 150, 414], "extendvari": [20, 139, 151, 414], "exponentialnoisevari": 20, "facegradcontributionsvari": 20, "facegradvari": [20, 119], "gammanoisevari": 20, "gausscellgradvari": 20, "gaussiannoisevari": [20, 31, 32, 33, 34], "harmoniccelltofacevari": 20, "histogramvari": [20, 407, 415, 419, 421, 442], "interfaceareavari": 20, "interfaceflagvari": 20, "leastsquarescellgradvari": 20, "levelsetdiffusionvari": 20, "meshvari": [20, 192, 225, 352, 359, 360, 363, 367, 374, 375, 398, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 446, 454, 455, 464, 466, 468, 469, 470], "minmodcelltofacevari": 20, "modcellgradvari": 20, "modcelltofacevari": 20, "modfacegradvari": 20, "modphysicalfield": 20, "modularvari": [20, 167, 168, 176, 177], "facegradnomod": [20, 167, 168, 176, 177, 434], "operatorvari": 20, "scharfettergummelfacevari": 20, "surfactantconvectionvari": 20, "surfactantvari": [20, 139, 150, 151, 152], "interfacevar": [20, 135, 139, 151, 439], "unaryoperatorvari": [20, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "uniformnoisevari": 20, "dummyview": [20, 444], "plotmesh": [20, 72, 73, 142, 143, 175, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "setlimit": [20, 142, 143, 175, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "meshdimensionerror": [20, 444], "abstractmatplotlib2dview": [20, 449, 450, 451, 452, 454, 455], "cmap": [20, 142, 162, 175, 176, 177, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455], "fig": [20, 142, 175, 176, 177, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455], "abstractmatplotlibview": [20, 142, 446, 448], "matplotlib1dview": [20, 175], "matplotlib2dcontourview": 20, "matplotlib2dgridcontourview": 20, "matplotlibsparsematrixview": 20, "matplotlibstreamview": 20, "kwarg": [20, 194, 220, 221, 222, 223, 235, 236, 237, 242, 243, 244, 256, 268, 285, 286, 287, 288, 289, 290, 292, 293, 294, 306, 312, 339, 389, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 454, 459], "mayaviview": 20, "fp": [20, 175, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 448, 450, 451, 452, 454, 455, 457, 458], "mayavidaemon": [20, 34, 457, 458], "parse_command_lin": [20, 459], "setup_sourc": [20, 459], "update_pipelin": [20, 459], "view_data": [20, 459], "testinteract": 20, "abstractview": [20, 143, 444, 447, 457, 458, 461, 464, 465, 470], "vtkviewer": 20, "vtkcellview": [20, 466], "vtkfaceview": [20, 466], "tanh1d": 20, "explicitupwind": 20, "implicitupwind": 20, "vanleerupwind": 20, "cylindricalmesh1d": 20, "cylindricalmesh1dnonuniform": 20, "exponential1dback": 20, "exponential2d": 20, "cylindricalmesh2d": 20, "cylindricalmesh2dnonuniform": 20, "peclet": 20, "powerlaw1d": 20, "mesh20x20coupl": 20, "input4thorder_lin": 20, "tri2dinput": 20, "gmshinput": 20, "isotropi": 20, "modifiedmeshinput": 20, "orthoerror": 20, "mesh50x50": 20, "othermesh": 20, "cubicalproblem": 20, "grid3dinput": 20, "prism": [20, 234, 254], "mesh1ddimension": 20, "poisson": [20, 75, 108, 113], "interior": [20, 93, 163], "adsorbingsurfactantequ": [20, 139], "adsorpt": [20, 139, 140, 164], "gapfilldistancevari": 20, "gapfillmesh": 20, "matplotlibsurfactantview": [20, 139], "mayavisurfactantview": [20, 139], "metaliondiffusionequ": [20, 139], "surfactantbulkdiffusionequ": [20, 139], "trenchmesh": 20, "expandingcircl": 20, "gmshrefin": 20, "inputgrid2d": 20, "anisotropyold": 20, "missorient": 20, "modcircl": 20, "phaseview": [20, 113, 163, 164, 165, 167, 168], "riemann": 20, "acoust": 20, "customiz": 21, "poli": 21, "deposit": [21, 139, 140, 145], "unusu": 21, "philosophi": 21, "algorithm": [21, 119, 180, 341, 471, 478], "rapidli": 21, "deform": 21, "tractabl": 21, "li": [21, 478], "encapsul": [21, 145, 210, 259, 260, 314, 315, 385, 474, 481], "tight": 21, "extend": [21, 164, 165, 414, 478], "reus": [21, 167], "overridden": 21, "categori": [21, 250], "lower": [21, 164, 165, 418, 437, 438, 444, 471], "aim": [21, 474], "tier": 21, "reassur": 21, "aid": 21, "dissemin": 21, "movement": [21, 179], "matter": [21, 31, 32], "furthermor": 21, "broadli": 21, "lump": 21, "human": [21, 382, 393], "readabl": [21, 193, 382, 393, 410, 418, 428, 434, 435, 437, 443], "provok": 21, "usual": [21, 179, 183, 191, 234, 236, 237, 250, 254, 268, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 398], "real": [21, 162, 176, 177, 398], "low": [21, 474, 477], "closer": 21, "programm": 21, "awai": [21, 119, 414], "extern": 21, "acol": 21, "brow": 21, "malloc": 21, "sizeof": 21, "bcol": 21, "arow": 21, "know": [21, 114, 191, 192], "worri": [21, 192], "needn": 21, "paramount": 21, "concern": [21, 309], "scenario": 21, "draft": 21, "hundr": [21, 164, 165], "recompil": 21, "relink": 21, "eventu": [21, 138, 145, 163], "imposs": 21, "rememb": [21, 421], "begun": 21, "expertis": 21, "spent": 21, "contrast": [21, 31, 32], "tcl": 21, "java": 21, "rubi": 21, "vener": 21, "immedi": [21, 140], "someon": 21, "fledg": 21, "ground": 21, "runtim": 21, "unquestion": 21, "proport": [21, 139, 162, 176, 177], "month": 21, "diagnos": 21, "critic": [21, 31, 32], "palat": 21, "acknowledg": 21, "remark": [21, 475], "usabl": 21, "mathematician": 21, "easili": [21, 81, 115, 178, 471], "blitz": 21, "pyrex": [21, 471], "brief": [21, 378], "terminologi": 21, "assign": [21, 81, 382, 393, 482], "lazi": [21, 404], "elimin": [21, 74, 81, 183], "entiti": 21, "bound": [21, 192], "vertic": [21, 72, 73, 119, 221, 224, 229, 230, 231, 233, 234, 236, 237, 242, 250, 253, 254, 398, 445, 449, 450, 451, 452, 474], "_sparsematrix": [21, 280, 339, 453], "invert": 21, "fashion": 21, "footnot": [21, 164, 165], "neglect": [21, 164, 165], "byte": 21, "prefix": [22, 81, 382, 393, 400], "ld_library_path": 22, "colon": 22, "elf": 22, "dyld_library_path": 22, "linker": 22, "phenomenon": [31, 32, 34], "spontan": [31, 32, 179], "mixtur": [31, 32, 81], "region": [31, 32, 129, 130, 137, 139, 152, 162, 163, 167, 176, 177, 179, 180, 449, 450], "spin": [31, 32], "barrierless": [31, 32], "fluctuat": [31, 32, 33, 34, 162, 176, 177], "grow": [31, 32, 162, 176, 177], "exce": [31, 32], "surviv": [31, 32], "ginsberg": [31, 32, 162, 176, 177], "landau": [31, 32, 162, 176, 177], "hohenberg": [31, 32, 162, 176, 177], "halperin": [31, 32, 162, 176, 177], "epsilon": [31, 32, 33, 34, 36, 75, 108, 114, 116, 167, 168, 171, 172, 173, 176, 177, 183, 184], "possibli": [31, 32, 385, 444], "composit": [31, 32, 137, 164, 165], "doubl": [31, 32, 108, 178, 179], "energi": [31, 32, 36, 108, 114, 164, 165, 178, 179, 183, 184, 322, 329, 478], "penal": [31, 32], "abrupt": [31, 32], "smooth": [31, 32, 139, 142, 143, 162, 176, 177, 322, 328, 329, 331, 332], "transit": [31, 32, 137, 478], "weight": [31, 32, 164, 165, 167, 198, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 455, 474, 476], "augment": [31, 32, 398], "__name__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 157, 158, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 191, 378, 407, 415, 419, 421, 442], "__main__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 139, 157, 158, 162, 163, 164, 165, 167, 168, 176, 177, 178, 179, 180, 183, 184, 191, 378, 381, 407, 415, 419, 421, 442], "ny": [31, 32, 33, 40, 52, 57, 61, 62, 78, 80, 82, 83, 94, 100, 104, 112, 119, 123, 126, 128, 139, 142, 143, 157, 162, 163, 167, 176, 177, 180, 184, 191, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 352, 359, 360, 362, 363, 367, 374, 375, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 450, 451, 452, 454, 455, 457, 458, 464], "els": [31, 32, 33, 34, 39, 40, 67, 78, 110, 112, 113, 119, 139, 162, 163, 164, 165, 176, 177, 179, 183, 184, 378, 459], "dy": [31, 32, 33, 40, 52, 57, 78, 80, 82, 83, 104, 112, 119, 123, 126, 128, 129, 131, 139, 142, 143, 157, 162, 163, 167, 176, 177, 180, 184, 192, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 352, 359, 360, 362, 363, 367, 374, 375, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 445, 450, 451, 452, 454, 455, 457, 458, 464], "varianc": [31, 32, 33, 34, 421], "accur": [31, 33, 34, 81, 86, 90, 110, 123, 179, 348], "solver_suit": [31, 36, 110, 163, 165, 184], "precon": [31, 33, 34, 110, 163, 165, 184, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 317, 318, 319, 320, 321, 335, 337, 338], "elif": [31, 165], "microstructur": [31, 32, 33, 34, 478], "exponenti": [31, 32, 33, 34, 138, 360, 393, 415, 477], "dexp": [31, 32, 33, 34, 36], "durat": [31, 32, 33, 34], "exp": [31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 139, 140, 164, 165, 167, 168, 176, 177, 191, 192, 193, 415, 419, 421, 477], "formul": [32, 74, 477], "enorm": [32, 81], "amount": [32, 242], "psi": [32, 75, 116, 162, 163, 176, 177, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "nois": [32, 162, 176, 177, 183, 407, 415, 419, 421, 435, 442], "taylor": [32, 179, 478], "expans": [32, 151, 179], "phi_": [32, 179, 348, 372, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "dfdphi": 32, "dfdphi_": 32, "d2fdphi2": 32, "eq1": [32, 47, 74], "eq2": [32, 47], "eq3": 32, "press": [32, 63, 68, 72, 73, 75, 81, 82, 83, 90, 113, 116, 164, 165, 179, 183, 478], "elementshap": [32, 74, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "v0": [32, 74, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "impcoeff": 32, "cube": 33, "declar": [33, 34, 81, 119, 164, 165, 421, 481], "nz": [33, 59, 60, 104, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 457, 458, 471], "dz": [33, 59, 60, 104, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 457, 458], "vesicl": 34, "youtub": 34, "watch": 34, "kdsfp67_zse": 34, "cellsiz": [34, 72, 73, 95, 139, 140, 145, 158, 225], "t1": [34, 158], "pi": [34, 39, 71, 158, 162, 163, 167, 168, 173, 175, 176, 177, 382, 393, 414, 421, 434, 445, 448, 457, 458], "duplicata": [34, 158], "t2": [34, 158], "t3": [34, 158], "t4": [34, 158], "t5": [34, 158], "t6": [34, 158], "t7": [34, 158], "outer": [34, 158, 164, 165, 225, 471], "overlap": [34, 210, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 474], "extrudefunc": [34, 158, 221, 225, 231, 233, 236, 242, 250], "lambda": [34, 158, 221, 225, 231, 233, 236, 242, 250], "daemon_fil": [34, 457, 458], "xmin": [34, 119, 142, 143, 175, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "zmax": [34, 142, 143, 175, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "asq": 36, "facevar": 36, "freeenergydoublederiv": 36, "diffterm2": 36, "diffterm4": 36, "eqch": 36, "maxarg": 36, "argmax": 36, "atol": [36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 86, 94, 95, 100, 104, 110, 111, 112, 113, 114, 115, 116, 123, 126, 129, 164, 165, 167, 178, 179, 180, 191, 256, 348, 362, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "param": [39, 40], "kmvar": [39, 40], "km": [39, 40, 382, 393], "kcvar": [39, 40], "kc": [39, 40], "tmvar": [39, 40], "tcvar": [39, 40], "tc": [39, 40], "p3var": [39, 40], "p3": [39, 40], "p2var": [39, 40], "p2": [39, 40], "rvar": [39, 40], "pn": [39, 40], "kmsccoeff": [39, 40], "chik": [39, 40], "kmspcoeff": [39, 40], "lambdak": [39, 40], "kappak": [39, 40], "kmeq": [39, 40], "tmsccoeff": [39, 40], "chit": [39, 40], "tmspcoeff": [39, 40], "lambdat": [39, 40], "zetat": [39, 40], "tmeq": [39, 40], "tcsccoeff": [39, 40], "tcspcoeff": [39, 40], "lambdatstar": [39, 40], "tceq": [39, 40], "pip2pitp": [39, 40], "kappam": [39, 40], "kappac": [39, 40], "zetapitp": [39, 40], "p3spcoeff": [39, 40], "lambda3": [39, 40], "zeta3t": [39, 40], "p3sccoeff": [39, 40], "chi3": [39, 40], "kappa3": [39, 40], "zeta3pitp": [39, 40], "zeta3": [39, 40], "p3eq": [39, 40], "p2sccoeff": [39, 40], "sccoeff": [39, 40], "chi2": [39, 40], "p2spcoeff": [39, 40], "lambda2": [39, 40], "zeta2t": [39, 40], "p2eq": [39, 40], "kcsccoeff": [39, 40], "alphakstar": [39, 40], "kcspcoeff": [39, 40], "lambdakstar": [39, 40], "kappakstar": [39, 40], "kceq": [39, 40], "pnview": [39, 40], "kmview": [39, 40], "tmview": [39, 40], "naem": [39, 40], "kmviewer": [39, 40], "stimulu": 39, "pnviewer": 40, "tmviewer": 40, "puls": [45, 46], "gre": [47, 478], "ac": [47, 471, 478], "uk": [47, 478], "physica": 47, "phy2": 47, "node173": 47, "htm": 47, "wave": [47, 74], "van": [47, 183, 478], "leer": 47, "wrap": [47, 251, 434], "var2": [47, 103, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 464], "lost": 47, "annulu": [49, 50, 59, 60], "r0": [49, 50, 59, 60], "r1": [49, 50, 59, 60, 126], "nr": [49, 50, 59, 60, 224], "dr": [49, 50, 59, 60, 224], "valueleft": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 77, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 104, 191], "valueright": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 104, 191], "impos": [49, 50, 51, 56, 59, 60, 85, 123, 150, 191, 196, 198, 199, 200, 348], "r_0": [49, 50, 59, 60, 151], "r_1": [49, 50, 59, 60], "drawback": [49, 50, 51, 59, 60, 191], "ei": [49, 50, 59, 60], "expi": [49, 50, 59, 60], "aa": [49, 50, 56, 57, 59, 60, 128, 129, 131, 348], "bb": [49, 50, 56, 57, 59, 60, 128, 129, 131], "analyticalarrai": [49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 77, 91, 94, 95, 97, 99, 100, 104, 114, 116, 179, 191], "rratio": [50, 60], "arang": [50, 60, 113, 126, 175, 176, 177, 348, 362, 403, 407, 414, 415, 419, 421, 448, 454, 455, 457, 458], "imath": 51, "u_x": [51, 56, 184, 191], "dd": [51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 191], "valuebottom": [52, 57], "valuetop": [52, 57], "drive": [52, 62, 81, 90, 110, 119], "rtol": [52, 54, 56, 61, 62, 63, 65, 66, 67, 75, 80, 81, 85, 90, 97, 99, 110, 111, 112, 113, 114, 115, 116, 135, 139, 167, 178, 179, 191, 256, 268, 372, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "s_0": [56, 179, 474], "sourcecoeff": [56, 57, 167, 168], "s_c": 57, "pseudo": [59, 60], "getdefaultsolv": [62, 81, 90, 91, 97, 99, 100, 103, 115, 119, 168, 183, 184], "allcloselist": 63, "1e4": 63, "arg0": 63, "arg1": [63, 481, 482], "append": [63, 194, 225, 394, 399], "str": [63, 113, 142, 143, 175, 210, 225, 229, 255, 256, 263, 264, 265, 266, 268, 269, 294, 306, 309, 312, 343, 378, 382, 389, 393, 394, 397, 398, 399, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 464, 465, 466, 468, 469, 470], "2000": [66, 119, 167, 191], "4d": 67, "precaut": 67, "convectioncoeff": [67, 110, 111, 112, 113, 115, 178, 191], "canalyt": 67, "c_": [67, 75, 108, 114, 116, 135, 139, 145, 164, 165, 178], "restol": 67, "anstol": 67, "alpha": [68, 81, 139, 145, 162, 163, 167, 168, 171, 172, 173, 176, 177, 192, 407, 419], "outflow": 68, "artifici": 68, "unitari": 68, "5000": [68, 455], "phi0": [68, 372], "fake": 68, "pmatrix": 71, "theta": [71, 135, 138, 139, 145, 150, 151, 162, 163, 167, 168, 171, 172, 173, 176, 177, 474], "q": [71, 140, 176, 177, 180, 187, 302, 303, 304, 478], "00": 71, "mass": [71, 119, 164, 165, 183], "previous": [71, 138, 140, 145, 183, 225, 414], "splitext": [71, 163, 167, 168, 171, 172, 173], "__file__": [71, 139, 163, 167, 168, 171, 172, 173], "argmin": [71, 126], "rotationmatrix": 71, "gamma_prim": 71, "001": [71, 113, 393], "cellvolum": [71, 119, 150, 151, 157, 220, 225, 243, 421], "00025": 71, "triangl": [72, 250], "plane": [72, 73, 95, 225], "timestepdur": [72, 73, 77, 78, 80, 81, 82, 83, 123, 124, 126, 150, 151, 152, 163, 167, 168, 171, 172, 173], "mytsv": [72, 73], "tsv": [72, 73, 113, 444], "variable_grad_x": [72, 73], "variable_grad_i": [72, 73], "975559734792414": [72, 73], "0755414402612554": [72, 73], "964844363287199": [72, 73], "229687917881182": [72, 73], "00757854476106331": [72, 73], "0442864953037566": [72, 73], "79191893162384": [72, 73], "0375859836421991": [72, 73], "773936613923853": [72, 73], "205560697612547": [72, 73], "0246775505084069": [72, 73], "771959648896982": [72, 73], "020853932412869": [72, 73], "723540342405813": [72, 73], "182589694334729": [72, 73], "223345558247991": [72, 73], "807931073108895": [72, 73], "203035857140125": [72, 73], "777466238738658": [72, 73], "0401235242511506": [72, 73], "00726763301939488": [72, 73], "775978916110686": [72, 73], "00412895434496877": [72, 73], "650055516507232": [72, 73], "183112882869288": [72, 73], "0220279064527904": [72, 73], "187563765977912": [72, 73], "012771874945585": [72, 73], "35707168379437": [72, 73], "056072788439713": [72, 73], "111223320911545": [72, 73], "679586798311355": [72, 73], "0911595298310758": [72, 73], "613455176718145": [72, 73], "0256182541329463": [72, 73], "78996770899909": [72, 73], "0173672729866294": [72, 73], "693887874335319": [72, 73], "00671109050419": [72, 73], "127611490372511": [72, 73], "703545986179876": [72, 73], "435813500559859": [72, 73], "635004192597412": [72, 73], "896203033957194": [72, 73], "00855563518923689": [72, 73], "888641841567831": [72, 73], "408558914368324": [72, 73], "877939107374768": [72, 73], "32195762184087": [72, 73], "22696791637322": [72, 73], "38212257821916": [72, 73], "51732949653553": [72, 73], "292889724306196": [72, 73], "854466141879776": [72, 73], "199715815696975": [72, 73], "359068256998365": [72, 73], "757882581524374": [72, 73], "323541041763627": [72, 73], "870534227755687": [72, 73], "0792631912863636": [72, 73], "459673905457569": [72, 73], "701526587772079": [72, 73], "417577664032421": [72, 73], "725460726303266": [72, 73], "119132299176163": [72, 73], "338256179134518": [72, 73], "523565732643067": [72, 73], "254030052182524": [72, 73], "923505840608445": [72, 73], "192224240688976": [72, 73], "87498754712638": [72, 73], "174119064688993": [72, 73], "836057900916614": [72, 73], "11590500805745": [72, 73], "211010116496191": [72, 73], "484106960369249": [72, 73], "0705987421869745": [72, 73], "319827850867342": [72, 73], "867894407968447": [72, 73], "051246727010685": [72, 73], "0221203060940465": [72, 73], "216026820080053": [72, 73], "0152729438559779": [72, 73], "341246696530392": [72, 73], "0538476142281317": [72, 73], "bit": [72, 73, 119, 164, 165, 168, 179], "complic": [72, 73, 145], "horizont": [72, 73, 221, 224, 233, 236, 237, 242, 250, 253, 398], "phianalyt": [72, 73, 81], "x0": [72, 73, 164, 165], "erf": [72, 73, 77, 78, 81], "ticket": [72, 73, 348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 394], "325": [72, 73], "7e": [72, 73, 81, 123, 164, 165, 179], "equal": [72, 73, 157, 164, 165, 178, 183, 250, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474, 476], "quadrangl": 73, "recombin": 73, "035": 73, "biharmon": 74, "v_0": 74, "v_1": 74, "cross": [74, 414], "v1": [74, 128, 129, 131, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "eq0": 74, "vi": 74, "res0": 74, "res1": 74, "1e100": 74, "uncoupl": [74, 165], "dictat": 74, "speci": [74, 108, 110, 113, 114, 115, 116, 139, 164, 165, 178, 475], "obvious": 74, "permitt": [75, 113, 116], "c_j": [75, 108, 110, 114, 116, 178], "th": [75, 110, 116], "valenc": [75, 108, 110, 111, 112, 113, 115, 116], "z_j": [75, 108, 116], "z_": [75, 108, 116], "electron": [75, 108, 113, 116, 178], "charg": [75, 108, 113, 116, 139, 140, 145], "densiti": [75, 81, 116, 138, 139, 140, 145, 164, 165, 178, 183, 184, 225, 439, 454, 478], "admit": [75, 116], "2x": [75, 116], "2e": [75, 77, 81, 110, 115, 116, 164, 165, 179, 372], "next": [75, 81, 113, 116, 151, 164, 165, 398], "le": [75, 81, 115, 116, 126, 129, 131, 139, 168, 171, 172, 173, 176, 177, 178, 179, 180, 348, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "verifi": [75, 110, 111, 112, 114, 116, 164, 165, 183, 372], "attain": [75, 114, 116, 183], "initialvalu": 77, "epsi": 77, "triangular": [78, 95, 97, 104, 250], "gridmesh": 78, "trimesh": [78, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "othergridmesh": 78, "bigmesh": 78, "semi": [78, 81, 167, 168, 178, 179, 225], "late": 78, "straight": [78, 81], "varanalyt": 78, "explicitdiffusionequ": 80, "assembl": [81, 179, 191], "uniti": [81, 476], "somefac": 81, "differenc": [81, 352, 407, 410, 414, 415, 419, 421, 423, 435, 439, 442, 477], "phi_new": 81, "phi_old": 81, "eqx": 81, "delta": [81, 108, 114, 140, 145, 162, 164, 165, 176, 177, 179, 183, 372, 421, 474], "accomplish": 81, "tester": 81, "eqi": 81, "rerun": [81, 112], "crank": [81, 474], "nicholson": 81, "eqcn": 81, "3e": [81, 113, 115, 139, 162, 163, 176, 177, 178, 183, 184], "omit": [81, 140, 179, 482], "del": [81, 142, 143, 418, 428, 437, 438, 443], "faceconstraint": 81, "lie": [81, 464, 474], "n_i": 81, "satisfi": [81, 119, 256, 414, 476, 477], "satisfactori": 81, "gradright": 81, "9l": 81, "And": [81, 113, 119, 382, 393], "transfer": [81, 139, 140, 145, 478], "_p": [81, 119, 348, 362, 474], "capac": 81, "phit": 81, "phif": 81, "relev": [81, 225], "alpha_fals": 81, "eqf": 81, "eqt": 81, "forward": 81, "told": [81, 191], "d_0": 81, "d0": 81, "exit": [81, 381], "balanc": 81, "art": [81, 478], "pitfal": 81, "dissip": [81, 183], "4e": 81, "fals": [81, 138, 140, 142, 143, 145, 179, 225, 336, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 381, 382, 393, 394, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 446, 447, 448, 454, 455, 477], "uniformli": 81, "vmatrix": 81, "1em": 81, "ddot": 81, "vdot": 81, "legitim": 81, "1e6": [81, 139], "myexampl": 81, "valuetopleft": [82, 83], "valuebottomright": [82, 83], "corner": [82, 83, 112, 119, 167, 225, 250], "facestopleft": [82, 83], "facesbottomright": [82, 83], "500": [85, 113, 162, 163, 455], "alpha_1": 85, "alpha_2": 85, "alpha_3": 85, "alpha_4": 85, "alpha1": 85, "alpha2": 85, "alpha3": 85, "alpha4": 85, "initialarrai": [90, 123, 192], "gather": 91, "errorvar": 95, "nonorthovar": 95, "_nonorthogon": 95, "errorview": 95, "noview": 95, "rm": 96, "eq3d": 103, "eq2d": 103, "ravel": [103, 126], "xface": 104, "000000000000001": 104, "027": 104, "mesh2x1": 107, "paper": 108, "m_": [108, 114, 164, 165, 178, 179], "overbrac": [108, 178], "mu_j": [108, 178], "circ": [108, 114, 178], "w_j": [108, 178], "dielectr": 108, "ldot": [108, 178, 474], "d_": [108, 110, 119, 139, 145, 164, 165, 178, 348, 357, 362, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "substack": [108, 110, 178], "c_k": [108, 110, 178], "c_i": [108, 110, 140, 178], "c_n": [108, 178], "mu_": [108, 114], "jn": [108, 114], "w_": [108, 114], "electromigr": [108, 112, 113, 115], "electrod": [108, 114, 139], "electrolyt": [108, 114, 138, 139, 140], "barrier": [108, 110, 111, 112, 113, 114, 115, 116, 164, 165, 178, 179, 382, 400], "solvent": [108, 110, 111, 112, 113, 114, 115, 178], "unresolv": 108, "stiff": 108, "intract": 108, "jj": 110, "summat": [110, 474], "exclud": [110, 162], "ternari": [110, 111, 112, 115], "componentvari": [110, 111, 112, 113, 114, 115, 116], "standardpotenti": [110, 111, 112, 113, 114, 115, 116, 178], "__class__": [110, 111, 112, 113, 114, 115, 116], "cn": [110, 111, 112, 114, 115, 178], "c1": [110, 111, 112, 115, 178, 418, 428, 437, 438, 443], "c2": [110, 111, 112, 115, 178], "interstiti": [110, 111, 112, 113, 114, 115, 116, 178], "regim": [110, 111, 112, 114, 135], "cj": [110, 111, 112, 113, 115, 116, 178], "cksum": [110, 111, 112, 113, 115, 178], "ckfacesum": [110, 111, 112, 113, 115], "ck": [110, 111, 112, 113, 115, 178], "3200": 110, "h82b89f7_0": 110, "ceas": 110, "ok": [110, 341], "tsupport": 111, "incomplet": [111, 271, 274, 275, 292, 302, 303, 322, 324, 325], "tit": 111, "mm": [111, 128, 129, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "mol": [111, 113, 140, 145, 164, 165, 178, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "pprime": [112, 113, 115, 164, 165, 178], "gprime": [112, 113, 115, 164, 165, 178], "counterdiffus": [112, 113, 115, 178], "phasetransform": [112, 113, 115, 178], "tol": 112, "input1dphasebinari": 113, "januari": 113, "elphf0214": 113, "rt": 113, "nav": [113, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "kb": [113, 393], "molarvolum": [113, 139, 140, 145], "80000006366754e": 113, "faradai": [113, 139, 140, 145], "nm": 113, "1200": 113, "gradientenergi": [113, 114, 115, 178], "6e": [113, 139], "h2o": 113, "cnstandardpotenti": 113, "34139": 113, "7265625": 113, "cnbarrier": 113, "6e5": 113, "cnvalenc": 113, "so4": 113, "24276": 113, "6640625": 113, "000010414586295976": 113, "cu": 113, "7231": 113, "81396484375": 113, "5553718417909": 113, "33225": 113, "9453125": 113, "110723815414": 113, "78": 113, "eps0": [113, 393], "permittivityprim": [113, 114, 115], "rich": [113, 115, 178], "000111111503177394": 113, "249944439430068": 113, "249999982581341": 113, "input1d": 113, "setscal": 113, "enthalpi": [113, 114, 115, 164, 165, 178, 179], "mxi": [113, 114, 115, 192], "dmxidxi": [113, 114, 115], "s1": [113, 114, 115, 164, 165, 178, 179, 192], "s0": [113, 114, 115, 164, 165, 178, 179, 192], "concview": 113, "ylog": [113, 175, 448], "potentialview": 113, "residualview": 113, "maxerror": 113, "safeti": 113, "errcon": 113, "89e": 113, "desiredtimestep": 113, "thistimestep": 113, "raw_input": [113, 194], "succeed": [113, 164, 165], "floatingpointerror": 113, "underflow": [113, 164, 165, 183], "rearrang": [114, 192], "mu_n": [114, 178], "w_n": [114, 178], "inf": [114, 268], "equilibr": [114, 164, 165, 179], "2w_n": 114, "makeequ": 115, "c_1": 115, "recreat": 115, "c3": 115, "reiniti": [115, 139], "c_2": 115, "c_3": 115, "malengi": 119, "bm": 119, "cage": 119, "ugent": 119, "rework": 119, "colloc": 119, "pressur": [119, 183, 478], "viscos": [119, 183, 184], "momentum": [119, 183], "ferzig": [119, 478], "peric": 119, "rossow": [119, 478], "extrapol": 119, "dolfyn": 119, "frequenc": 119, "band": [119, 474], "ident": [119, 163, 164, 165, 393, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "dl": [119, 123, 164, 165, 167, 393], "relax": [119, 179, 183, 184, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 471], "pressurerelax": 119, "velocityrelax": 119, "pressurecorrect": 119, "xveloc": 119, "yveloc": 119, "decoupl": [119, 183], "xvelocityeq": 119, "yvelocityeq": 119, "ast": 119, "That": 119, "a_p": [119, 474], "a_a": [119, 477], "_a": [119, 474], "v_p": [119, 365, 372, 407, 410, 414, 415, 418, 419, 421, 423, 434, 435, 437, 438, 439, 442, 474], "somehow": 119, "ap": [119, 348, 357, 362, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "_facearea": [119, 183, 184], "_celldist": [119, 183, 184, 235, 236, 237], "pressurecorrectioneq": 119, "stagger": 119, "coloc": 119, "oscil": 119, "diamond": 119, "_l": 119, "_r": 119, "mathrm": [119, 164, 165], "avg": 119, "adjac": [119, 183, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442, 474], "arriv": 119, "formula": [119, 348, 362, 382, 393], "unphys": 119, "_facegradvari": 119, "contrvolum": 119, "slip": 119, "xmax": [119, 142, 143, 175, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "ymin": [119, 142, 143, 175, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "ymax": [119, 142, 143, 175, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "underrelax": [119, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "corrector": 119, "harder": 119, "demand": 119, "star": 119, "xre": 119, "xmat": 119, "yre": 119, "asarrai": [119, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "takediagon": [119, 183, 184], "presgrad": 119, "facepresgrad": 119, "790867927": 119, "265072740929": 119, "150290488304": 119, "cfl": [123, 126, 139, 151, 164, 165, 183, 184], "distancetotravel": [123, 150], "adveqn": [123, 124, 126], "distancetravel": [123, 124], "1001": 123, "02e": 123, "interfaceposit": 124, "advectionequ": [124, 139, 150, 151, 152], "l_y": 126, "l_x": [126, 168], "r2": 126, "len": [126, 142, 143, 157, 175, 220, 232, 243, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "logical_and": 126, "distancemov": 126, "m1": [128, 398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "evalcel": [128, 129, 131], "phix": [128, 129, 131], "phii": [128, 129, 131], "sqr": [128, 129, 131, 139], "v2": [128, 129, 131, 398, 414, 434], "v3": [128, 131, 398], "v4": [128, 131], "v5": 128, "trialvalu": 128, "succinctli": 130, "neg": [130, 139, 179, 268, 382, 393, 398, 438, 474], "val": 131, "arr": [131, 382, 393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "deplet": 135, "c_t": 135, "xx": 135, "c_x": 135, "intertext": 135, "gg": 135, "cinf": 135, "rateconst": [135, 139], "currenttim": 135, "totaltimestep": 135, "surfeqn": 135, "surfactantvar": [135, 139, 142, 143], "bulkeqn": 135, "bulkvar": [135, 139], "currenttimefunc": 135, "concentrationfunc": 135, "glue": 137, "area": [137, 150, 183, 198, 439, 455, 474, 476], "ceac": [138, 145], "publish": [138, 140, 145], "rungold": 138, "displayview": [138, 140, 145], "realist": [138, 145, 477], "depth": [138, 139, 140, 145, 224], "metal": [138, 139, 145], "ion": [138, 139, 140, 145, 176, 177, 445], "catalyst": [138, 139, 140, 145], "c_m": [138, 139, 140, 145, 178], "b_0": [138, 139, 145], "b_1": [138, 139, 145], "buri": 138, "k_c": 138, "consumptionrateconst": 138, "slight": 138, "taper": 138, "taperangl": 138, "Their": 139, "faradaysconst": [139, 140, 145], "6e4": 139, "gasconst": [139, 140, 145, 183, 184], "314": [139, 140, 145, 164, 165, 178, 183, 184], "transfercoeffici": [139, 145], "rateconstant0": [139, 145], "rateconstant3": [139, 145], "245e": 139, "catalystdiffus": [139, 140, 145], "sitedens": [139, 140, 145], "8e": 139, "cupric": 139, "metaldiffusioncoeffici": 139, "overpotenti": [139, 140, 145], "bulkmetalconcentr": 139, "catalystconcentr": [139, 145], "catalystcoverag": [139, 145], "flat": [139, 167, 382, 393], "copper": [139, 140], "currentdensity0": [139, 145], "currentdensity1": [139, 145], "cflnumber": 139, "numberofcellsinnarrowband": 139, "cellsbelowtrench": 139, "trenchdepth": [139, 140, 145], "aspectratio": [139, 140, 145], "trenchspac": [139, 140, 145], "boundarylayerdepth": [139, 140, 145], "hydrodynam": 139, "intention": [139, 145], "po": [139, 225], "ycell": 139, "xcell": 139, "buildmetaliondiffusionequ": 139, "narrowbandwidth": 139, "distancevar": [139, 142, 143, 438, 439], "bottomheight": 139, "trenchheight": 139, "trenchwidth": 139, "sidewidth": 139, "mark": [139, 478], "influenc": 139, "catalystvar": 139, "bulkcatalystvar": 139, "metalvar": 139, "depositionratevari": 139, "omega": [139, 140, 145], "molar": [139, 140, 145, 164, 165, 178], "i_0": [139, 140, 145], "eta": [139, 140, 145, 421], "ga": [139, 140, 145, 164, 165, 178], "empir": 139, "expoconst": 139, "tmp": [139, 382, 400, 414], "exchangecurrentdens": 139, "expo": [139, 167, 168, 176, 177], "currentdens": 139, "v_": [139, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "extensionequ": 139, "spread": [139, 179], "extensionvelocityvari": 139, "k_0": [139, 145], "k_3": [139, 145], "surfactantequ": [139, 150, 151, 152], "d_m": [139, 145], "metalequ": 139, "ionvar": 139, "depositionr": 139, "metalionmolarvolum": 139, "jump": 139, "langmuir": 139, "abil": 139, "buildsurfactantbulkdiffusionequ": 139, "bulkcatalystequ": 139, "zoomfactor": [139, 142, 143], "levelsetupdatefrequ": 139, "distanceequ": 139, "whole": [139, 382, 393], "filepath": 139, "join": [139, 474], "split": 139, "savetxt": 139, "loadtxt": [139, 163, 167, 168, 171, 172, 173], "acceler": [140, 478], "runlevel": 140, "25e": 140, "suppressor": 140, "absorb": 140, "unoccupi": 140, "cover": 140, "affin": 140, "preferenti": 140, "i_j": 140, "theta_j": 140, "alpha_j": 140, "vacant": 140, "substrat": 140, "theta_": 140, "theta_l": 140, "k_l": 140, "c_l": [140, 164, 165], "theta_a": 140, "k_a": 140, "c_a": 140, "theta_v": 140, "i_l": 140, "i_": 140, "rise": 140, "k_": 140, "a0": 140, "alpha_k": 140, "b_d": 140, "b_a": 140, "v_d": 140, "b_b": 140, "symbol": [140, 145], "mbox": [140, 145], "tabular": [140, 145], "rllr": [140, 145], "multicolumn": [140, 145], "i_a": 140, "texttt": [140, 145], "i0acceler": 140, "i0level": 140, "alpha_a": 140, "alphaacceler": 140, "alpha_": 140, "alphalevel": 140, "ionconcentr": 140, "d_i": 140, "iondiffus": 140, "acceleratorcoverag": 140, "acceleratorconcentr": 140, "d_a": 140, "gamma_a": 140, "kaccelerator0": 140, "alphaadsorpt": 140, "bd": 140, "levelsetvalu": [142, 143], "kwlimit": [142, 143, 162, 175, 176, 177, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "_promptforopinion": [142, 143, 175, 445, 448, 450, 451, 452, 454, 455, 457, 458], "bool": [142, 143, 175, 196, 198, 199, 200, 225, 336, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 378, 382, 394, 398, 400, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455], "zmin": [142, 143, 175, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 461, 464, 465, 466, 468, 469, 470], "colormap": [142, 175, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455], "logarithm": [142, 175, 382, 393, 446, 447, 448, 449, 450, 451, 452, 454, 455], "runsimpletrenchsystem": 145, "schemat": 145, "metalconcentr": 145, "metaldiffus": 145, "surfactantbefor": [150, 151], "surfactantaft": [150, 151], "initialsurfactantvalu": [150, 151], "initialradiu": [150, 151], "00813776069241": 150, "theta_0": 151, "totaltim": [151, 164, 165], "finalradiu": 151, "outward": [152, 164, 165], "initialsurfact": 152, "getcellvolum": 157, "vol": [157, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "numberofcel": [157, 163, 183, 184, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 394], "insid": [158, 225, 268], "cool": [162, 176, 177], "melt": [162, 164, 165, 176, 177, 179], "supercool": [162, 176, 177], "circumst": [162, 176, 177, 183, 482], "pattern": [162, 176, 177], "lobkovski": [162, 163, 168, 176, 177, 478], "carter": [162, 163, 168, 176, 177, 478], "crystallin": [162, 176, 177], "regular": [162, 164, 165, 176, 177], "storag": [162, 176, 177, 225, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 474], "latent": [162, 164, 165, 176, 177, 179], "d_t": [162, 163, 176, 177], "heateq": [162, 176, 177], "tau_": [162, 163, 168, 171, 172, 173, 176, 177], "kappa_1": [162, 163, 176, 177], "kappa_2": [162, 163, 176, 177], "beta": [162, 163, 167, 168, 176, 177, 179, 192, 407, 419], "015": [162, 163, 167, 168, 176, 177], "phisq": [162, 163, 176, 177], "dbetadpsi": [162, 176, 177], "ddia": [162, 176, 177], "doff": [162, 176, 177], "i0": [162, 176, 177], "i1": [162, 176, 177], "tau": [162, 163], "kappa1": [162, 163, 176, 177], "kappa2": [162, 163, 176, 177], "phaseeq": [162, 163, 164, 165, 167, 168, 171, 172, 173, 176, 177], "solidifi": [162, 163, 164, 165, 176, 177], "quench": [162, 164, 165, 176, 177, 179], "induc": [162, 164, 165, 176, 177], "granular": [162, 176, 177], "strive": [162, 176, 177, 191], "pylab": 162, "cm": [162, 164, 165, 176, 177, 179, 382, 393, 445, 446, 447, 449, 450, 451, 452], "hot": [162, 176, 177], "arm": [162, 176, 177], "steepest": [162, 176, 177], "fairli": [162, 167, 168, 176, 177], "lucid": 162, "seedcent": 163, "initialtemperatur": 163, "beta_": 163, "phi_i": [163, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "phi_x": [163, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "xi_x": 163, "xi_i": 163, "tempdiffusioncoeff": 163, "mvar": 163, "phasei": 163, "phasex": 163, "betapsi": 163, "dxi": 163, "nineti": 163, "anisotropysourc": 163, "temperatureeq": 163, "temperatureview": 163, "testdata": [163, 167, 168, 171, 172, 173], "straightforward": [164, 165], "helmholtz": [164, 165, 179], "m_c": [164, 165], "f_a": [164, 165], "w_a": [164, 165], "f_b": [164, 165], "omega_": [164, 165], "omega_l": [164, 165], "calphad": [164, 165], "w_b": [164, 165], "yield": [164, 165, 183], "ideal": [164, 165], "l_a": [164, 165, 348], "t_m": [164, 165, 179], "likewis": [164, 165, 382, 393], "la": [164, 165], "2350": [164, 165, 179], "lb": [164, 165, 382, 393], "1728": [164, 165, 179], "tma": [164, 165], "tmb": [164, 165], "1358": [164, 165], "enthalpya": [164, 165], "enthalpyb": [164, 165], "nonumb": [164, 165, 178, 474], "l_b": [164, 165], "v_m": [164, 165], "mu_b": [164, 165], "mu_a": [164, 165], "vm": [164, 165], "deltaa": [164, 165, 175], "deltab": [164, 165], "sigmaa": [164, 165], "sigmab": [164, 165], "9e": [164, 165], "betaa": [164, 165], "betab": [164, 165], "kappaa": [164, 165], "kappab": [164, 165], "wb": [164, 165, 393], "mphi": [164, 165, 178, 179], "dmphidphi": [164, 165, 178, 179], "deltachempot": [164, 165], "chempota": [164, 165], "chempotb": [164, 165], "henc": [164, 165, 179], "fick": [164, 165], "obviou": [164, 179], "phasetransformationveloc": [164, 165], "diffusioneq": [164, 165], "deduc": [164, 165], "liquidu": [164, 165, 178], "solidu": [164, 165, 178], "cl": [164, 165, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "lever": [164, 165], "cavg": [164, 165], "reveal": [164, 165], "unchang": [164, 165, 191, 382, 393], "root": [164, 165, 382, 393, 398, 407, 415, 419, 421], "luck": [164, 165, 414], "jacobian": [164, 165, 337], "equilibriumjacobian": [164, 165], "fsolv": [164, 165], "csroot": [164, 165], "clroot": [164, 165], "func": [164, 165, 389], "fprime": [164, 165], "tmin": [164, 165, 175], "tmax": [164, 165, 175], "3600": [164, 165, 393], "uncondition": [164, 165], "e5": [164, 165], "asymmetr": [164, 255], "phaser": 164, "diffr": 164, "stationari": [164, 165], "ten": [164, 165], "idea": [164, 165, 481], "neglig": [164, 165], "d_l": [164, 165], "dt0": [164, 165], "estim": [164, 165, 474], "Not": [164, 165, 262, 268, 270, 309, 317, 318, 319, 320, 335, 337, 338, 341, 382, 393, 434], "million": [164, 165], "messi": [164, 165], "overshoot": [164, 165], "intact": [164, 165], "sequencestepp": [164, 165], "itertool": [164, 165], "count": [164, 165, 224, 378, 398, 399], "pid": [164, 165, 340], "32e": [164, 165], "checkpoint": [164, 165], "err": [164, 165], "equilbr": [164, 165], "stall": [164, 165, 388], "trap": [164, 165], "4000": [164, 165], "recal": [164, 165, 167], "motion": [164, 165], "percept": [164, 165], "d_c": 165, "dc": 165, "dphi": 165, "initialr": 165, "qualit": 165, "diagram": 165, "phasetransientcoeff": [167, 168], "thetasmallvalu": [167, 168, 176, 177], "1e5": [167, 168, 176, 177], "1e3": [167, 168, 176, 177], "thetatransientcoeff": [167, 168], "008": [167, 168, 176, 177], "held": [167, 168, 183, 439], "isotherm": [167, 168, 478], "randomli": [167, 455], "0001": [167, 176, 177], "thetavalu": 167, "segment": [167, 250], "buildphaseequ": 167, "mphivar": [167, 168], "thetamag": [167, 168, 176, 177], "implicitsourc": [167, 168], "et": [167, 168, 176, 177, 183, 478], "modular": [167, 168, 176, 177, 434], "buildthetaequ": 167, "phasemod": [167, 168, 176, 177], "phasemodsq": [167, 168], "pfunc": [167, 168, 176, 177], "phasefac": [167, 168], "phasesq": [167, 168], "gradmag": [167, 168], "igamma": [167, 168, 176, 177], "thetagraddiff": [167, 168], "thetaeq": [167, 168, 176, 177], "meaning": [167, 192], "thetaprod": 167, "thetaproductview": [167, 168], "disk": [167, 410], "newphas": 167, "newtheta": 167, "newthetaeq": 167, "newphaseeq": 167, "m_1": [168, 171, 172, 173], "confin": 168, "angl": [168, 382, 393], "halv": 168, "stricter": 168, "misorient": [171, 172, 173], "foral": [171, 173, 348], "xvar": [175, 445, 448, 457, 458], "kval": [175, 445, 448, 450, 451, 452, 454, 455, 457, 458], "ocean": [175, 448, 450, 451, 452, 454, 455], "xlog": [175, 448], "synonym": [175, 448, 474], "line2d": [175, 448], "t_0": [176, 177], "tau_phas": [176, 177], "tau_theta": [176, 177], "beta_theta": [176, 177], "gradmagtheta": [176, 177], "v_theta": [176, 177], "d_theta": [176, 177], "numse": [176, 177], "12345": [176, 177, 398], "cx": [176, 177], "cy": [176, 177], "orientationview": [176, 177], "room": [176, 177], "stolen": [176, 177], "make_ax": [176, 177], "ec1cd2567521c105a451ce15e06de10715f8b54d": [176, 177], "lib": [176, 177], "l838": [176, 177], "pb": [176, 177], "get_posit": [176, 177], "pad": [176, 177], "x1": [176, 177], "pb1": [176, 177], "pbx": [176, 177], "pbcb": [176, 177], "splitx": [176, 177], "panchor": [176, 177], "set_posit": [176, 177], "set_anchor": [176, 177], "gnomon": [176, 177], "get_figur": [176, 177], "add_ax": [176, 177], "85": [176, 177], "polar": [176, 177], "set_thetagrid": [176, 177], "set_theta_zero_loc": [176, 177], "set_theta_direct": [176, 177], "set_rgrid": [176, 177], "radii": [176, 177], "_orientation_and_phase_to_rgb": [176, 177], "zip": [176, 177, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "set_facecolor": [176, 177], "set_edgecolor": [176, 177], "_reshap": [176, 177], "staticmethod": [176, 177], "hsv": [176, 177], "hsv_to_rgb": [176, 177], "_data": [176, 177], "rgb": [176, 177], "hue": [176, 177], "set_data": [176, 177], "pyplot": [176, 177, 445], "figaspect": [176, 177, 446, 447, 449, 450, 451, 452, 454, 455], "figsiz": [176, 177], "3f": [176, 177], "fontsiz": [176, 177], "add_subplot": [176, 177], "total_tim": [176, 177], "save_interv": [176, 177], "002": [176, 177, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "save_at": [176, 177], "set_text": [176, 177], "c_0": 178, "c0": [178, 437], "circ_j": 178, "tilt": 178, "_0": 178, "f_j": 178, "sl": 178, "circ_n": 178, "cook": 178, "rhol": 178, "arrang": [178, 183, 184, 254], "d_j": 178, "l_v": 179, "0025": 179, "lv": 179, "atom": 179, "simplest": 179, "surpris": 179, "inspect": 179, "uninterest": 179, "resolut": [179, 402], "reintroduc": 179, "exploit": [179, 471], "s_1": [179, 474], "advic": 179, "tangent": [179, 382, 393, 398], "appreci": [179, 192, 193], "focus": 179, "recast": 179, "redeclar": 179, "nickel": 179, "viewer2": [179, 445], "redefin": 179, "quintic": 179, "polynomi": [179, 292], "chose": 179, "agreement": 179, "tanhresidu": 179, "leastsq": 179, "v_fit": 179, "d_fit": 179, "msg": 179, "symmetr": [180, 255, 268, 322, 329, 331, 332, 471], "quadrilater": 180, "mirror": 180, "testresult": 180, "bottomright": 180, "topleft": 180, "topright": 180, "vapor": 183, "der": 183, "waal": 183, "molarweight": [183, 184], "ee": [183, 184], "455971": [183, 184], "650": [183, 184], "vbar": [183, 184], "liquiddens": [183, 184], "7354": [183, 184], "3402662299995": [183, 184], "vapordens": [183, 184], "855803327810008": [183, 184], "u_j": 183, "u_i": [183, 184], "u_iu_j": 183, "nu": 183, "nc": [183, 184], "densityprevi": [183, 184], "velocityprevi": 183, "potentialnc": [183, 184], "freeenergi": [183, 184], "u_": 183, "d_f": [183, 474, 477], "overlin": 183, "partial_": 183, "overbar": 183, "matrixdiagon": [183, 184], "correctioncoeff": [183, 184], "masseqn": [183, 184], "lh": 183, "momentumeqn": 183, "superscript": [183, 474], "potentialderiv": [183, 184], "potentialnceqn": [183, 184], "quirk": 183, "amplitud": [183, 421], "totalstep": [183, 184], "1e10": 183, "elegantli": 183, "stuck": [183, 184], "sim": 183, "initialresidu": [183, 184], "previousresidu": [183, 184], "5e9": 183, "velocityx": 184, "velocityi": 184, "velocityvector": 184, "velocityxprevi": 184, "velocityyprevi": 184, "matxx": 184, "matyi": 184, "matxi": 184, "matyx": 184, "momentumxeqn": 184, "momentumyeqn": 184, "totalsweep": 184, "ilu": 184, "stress": [191, 475], "slightli": [191, 414], "inconveni": [191, 192, 193], "walk": 191, "getfacesleft": 191, "getfacesright": 191, "steadyconvectiondiffusionscequ": 191, "stdyconvdiffscequ": 191, "traceback": [191, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 352, 359, 360, 363, 367, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "convectionschem": 191, "nameerror": 191, "getcellcent": [191, 192, 193], "grid2dgistview": 191, "thrown": 191, "biggest": 191, "assembli": 191, "took": 191, "gistview": 191, "gist1dview": 191, "hesit": [191, 192, 193], "agre": [192, 193], "assur": [192, 193], "casual": [192, 193], "superced": [192, 193], "1_2": 192, "summar": [192, 193], "tip": [192, 193], "seemingli": [192, 414], "almost": [192, 474], "blindli": 192, "reorient": 192, "deltax": 192, "deltai": 192, "vectorfacevari": 192, "vectorfield": 192, "hackish": 192, "_take": 192, "quietli": 192, "getexteriorfac": 192, "getcent": 192, "getarithmeticfacevalu": 192, "convolut": 192, "cellfilt": 192, "positivecel": 192, "getfac": 192, "deprecationwarn": [192, 193, 389], "indefinit": [192, 193, 268], "commonli": 192, "breviti": 192, "feel": [192, 193], "whichev": [192, 193], "comfort": [192, 193], "clariti": 192, "trump": 192, "orthodoxi": 192, "temptat": 192, "2_1": 193, "3_0": 193, "reconsid": 193, "gmshimporter2d": 193, "gmshimporter3d": 193, "gmshimporter2din3dspac": 193, "savvi": 194, "deprecation_error": 194, "repr": [196, 197, 198, 199, 200, 210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 307, 308, 309, 314, 315, 316, 317, 318, 319, 320, 321, 335, 336, 337, 338, 343, 370, 385, 386, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444], "mathtt": [199, 339, 398], "g_": 199, "odd": 200, "numberofvari": 203, "numberofequ": 203, "equationindex": 203, "varindex": 203, "_representationclass": [210, 229, 230, 231, 232, 233, 234, 250, 251, 252, 253, 254], "_abstractrepresent": [210, 251], "_topologyclass": [210, 229, 230, 231, 232, 233, 234, 250, 251, 252, 253, 254], "_abstracttopologi": [210, 251], "among": 210, "dataset": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 444], "basemesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "translatedmesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "addedmesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "provis": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "consolid": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "triaddedmesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "83333333": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "16666667": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "66666667": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "33333333": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "threedbasemesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "threedsecondmesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "threedaddedmesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "invalidmesh": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "match": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 398], "helper": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 309, 314, 315, 316, 343, 385, 386, 444, 459], "unsupport": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "operand": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 382, 393], "nonzero": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254], "attribut": [210, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 250, 251, 252, 253, 254, 255, 382, 394, 400], "delattr": [210, 225, 229, 255, 256, 309, 343, 444], "getattr": [210, 225, 229, 255, 256, 309, 343, 444], "setattr": [210, 225, 229, 255, 256, 309, 343, 444], "tb": [210, 225, 229, 255, 256, 309, 343, 444], "__traceback__": [210, 225, 229, 255, 256, 309, 343, 444], "indexerror": [220, 232, 243, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 444], "dilat": [220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250], "dilatedmesh": [220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250], "mismatch": [220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "broadcast": [220, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 250, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "rectangular": [221, 223, 233, 234, 236, 237, 253, 254], "radial": [223, 224], "axial": 223, "lr": 224, "coorddimens": 225, "nproc": [225, 382, 394, 400], "squaredcircl": 225, "compass": 225, "label": [225, 388], "north": 225, "west": 225, "nw": 225, "parametr": 225, "physicalcel": 225, "physicalfac": 225, "bkg": 225, "monoton": 225, "trisquar": 225, "std1": 225, "std2": 225, "ii": [225, 478], "characterist": [225, 476], "topolog": 225, "fileistemporari": 225, "gmshoutput": 225, "respons": 225, "constructor": 225, "multilin": 225, "todo": 225, "truncat": [225, 444], "cellstovertic": 225, "recov": 225, "vertexcoord": [225, 229, 230, 231], "cellstovertid": 225, "cellstofac": 225, "isol": 225, "nodespath": 225, "elemspath": 225, "namesfil": 225, "physicalnam": 225, "facestovertexid": 225, "cellstofaceid": 225, "cellglobalidmap": 225, "ghostcellglobalidmap": 225, "trust": [225, 481], "retriev": [225, 383, 481], "facevertexid": [229, 230, 231], "_meshrepresent": [229, 230, 231], "_meshtopologi": 229, "_mesh1dtopologi": 230, "_mesh2dtopologi": [231, 250], "_builderclass": 232, "_nonuniformgrid1dbuild": 232, "_grid1drepresent": [232, 252], "_grid1dtopologi": [232, 252], "_grid2drepresent": [233, 250, 253], "_grid2dtopologi": [233, 253], "_grid3drepresent": [234, 254], "_grid3dtopologi": [234, 254], "xz": [234, 254], "yz": [234, 254], "subcategori": [234, 254], "facecellid": [235, 236, 237], "fill": [235, 236, 237, 271, 272], "999": 235, "_celltocelldist": [235, 236, 237], "_cellvertexid": [235, 236, 237], "_baseperiodicgrid2d": 236, "_baseperiodicgrid3d": 237, "rand": 242, "skew": 242, "hereaft": 250, "calc": 252, "machineri": 255, "userwarn": 256, "exceed": 256, "precis": [256, 312, 382, 393, 398, 402], "invalid": 256, "petsc4py_comm": 260, "comm_world": 260, "intoler": 262, "biconjug": [263, 287, 292, 297, 317, 471], "bicg": [263, 471], "pctype": [263, 264, 265, 266, 269], "alia": [263, 264, 265, 266, 269, 287, 288, 289, 290, 299, 317, 318, 319, 320, 335, 364, 381], "abstol": 268, "eigenvalu": 268, "kspcg": 268, "kspgetconvergedreason": 268, "kspsolv": 268, "ksppreonli": 268, "kspconvergedskip": 268, "ran": 268, "kspminr": 268, "kspcr": 268, "pivot": [268, 471], "subprecondition": 268, "pcfieldsplit": 268, "decreas": [268, 339], "pcilu": [271, 272], "pcicc": [271, 272], "jacobi": [271, 272, 276, 292, 302, 304, 322, 326, 471], "pcbjacobi": [271, 272], "manualpag": [271, 272], "pc": [271, 272], "pccreat": [271, 272], "hypr": [271, 273], "choleski": [271, 274, 322, 324], "ssor": [271, 279], "smoothed_aggregation_solv": 283, "aggreg": [285, 292, 322, 328, 329, 331], "amg": [285, 286, 471], "blockjacobismooth": [285, 286], "bicgstab": [287, 297, 317, 471], "fgmre": [289, 471], "gauss": [292, 322, 332, 421], "seidel": [292, 322, 332], "smoother_typ": 295, "spilu": [302, 303], "46876951": [302, 303, 304], "2019542": [302, 303, 304], "spsolv": [302, 304], "unsatisfactori": 309, "wignor": 309, "werror": 309, "relr": 309, "linearxsolv": 309, "obj": [315, 482], "m4count": 315, "mpi4py_comm": 315, "get_rank": 315, "get_siz": 315, "assert": 315, "ameso": 321, "klu": 321, "ifpack": [322, 324], "multilevel": [322, 327, 330, 331, 332, 333], "mloption": 336, "testunsupport": 336, "ml": [336, 393], "setparameterlist": 336, "printingopt": 337, "solveropt": 337, "linearsolveropt": 337, "linesearchopt": 337, "directionopt": 337, "newtonopt": 337, "kwd": [339, 340, 341, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "residualfn": [339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "articl": 340, "pidpap": 340, "author": 340, "valli": 340, "carei": 340, "coutinho": 340, "strategi": 340, "incompress": [340, 478], "reaction": 340, "meth": [340, 481], "rkq": 341, "rung": 341, "kutta": 341, "vardata": 342, "incorpor": 348, "u_p": [348, 362], "sum_a": [348, 362], "phi_a": [348, 352, 357, 359, 360, 362, 363, 367, 374, 474], "l_p": 348, "_matrixclass": [348, 362], "_buildmatrix": [348, 362], "stand": [348, 362], "harpsichord": [348, 362], "sing": [348, 362], "vel": [348, 362], "quadrat": 348, "__advectionterm": 348, "spot": 348, "123105625618": 348, "0201715476598": 348, "hash": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "__nondiffusionterm": [348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375], "negat": [348, 351, 352, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375], "__unaryterm": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375], "getrhsvector": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "sovler": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "l2": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "cacheresidu": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "cacheerror": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "residualvector": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "errorvector": [348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375], "_nondiffusionterm": [351, 361, 362], "_abstractconvectionterm": [352, 359, 360, 363, 367, 374, 375], "simeq": [352, 357, 359, 360, 363, 365, 367, 372, 374, 474], "alpha_f": [352, 359, 360, 363, 367, 374, 474, 477], "central": [352, 477], "vcv": [352, 359, 360, 363, 367, 374, 375], "vfv": [352, 359, 360, 363, 367, 374, 375], "__convectionterm": [352, 359, 360, 363, 367, 374, 375], "_arithmeticcelltofacevari": [352, 359, 360, 363, 367, 374, 375], "m2": [352, 359, 360, 363, 367, 374, 375], "cv2": [352, 359, 360, 363, 367, 374, 375], "vcv2": [352, 359, 360, 363, 367, 374, 375], "vfv2": [352, 359, 360, 363, 367, 374, 375], "_abstractdiffusionterm": [355, 356, 357], "_abstractupwindconvectionterm": [359, 374], "_asymmetricconvectionterm": [360, 363, 367], "hybrid": [363, 477], "s_p": 365, "proportion": 365, "_explicitsourceterm": 368, "newton": 368, "rho_": [372, 474], "phi_0": 372, "relaxationfactor": 372, "skipwarn": 378, "glob": 378, "optionflag": 378, "extraglob": 378, "raise_on_error": 378, "exclude_empti": 378, "_selectivedoctestpars": 378, "reachabl": 378, "__doc__": 378, "__test__": 378, "__dict__": 378, "slate": 378, "stuff": 378, "iff": 378, "argv": [378, 381, 459], "summari": 378, "dont_accept_true_for_1": 378, "dont_accept_blanklin": 378, "normalize_whitespac": 378, "ellipsi": 378, "ignore_exception_detail": 378, "report_udiff": 378, "report_cdiff": 378, "report_ndiff": 378, "report_only_first_failur": 378, "postmortem": 378, "defaulttest": 381, "testrunn": 381, "testload": 381, "loader": 381, "failfast": 381, "catchbreak": 381, "buffer": [381, 382, 400], "tb_local": 381, "konrad": [382, 393], "hinsen": [382, 393], "physicalquant": [382, 393], "angular": [382, 393], "radian": [382, 393], "deg": [382, 393], "03490659": [382, 393], "05235988": [382, 393], "06981317": [382, 393], "08726646": [382, 393], "003": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "004": [382, 393], "005": [382, 393], "return_scalar": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "isinst": [382, 393, 398], "facilit": [382, 393], "inch": [382, 393], "034907": [382, 393], "ft": [382, 393], "remaind": [382, 393], "hz": [382, 393], "ev": [382, 393], "8288": [382, 393], "cosin": [382, 393], "57079632679": [382, 393], "rad": [382, 393, 414], "31695789692": [382, 393], "sine": [382, 393], "arctang": [382, 393], "785398": [382, 393], "380506": [382, 393], "549306144334": [382, 393], "smallest": [382, 393], "3j": [382, 393], "ohm": [382, 393], "adjust": [382, 393, 434], "hartre": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "kcal": [382, 393], "1694": [382, 393], "27557621": [382, 393], "sctype": [382, 393], "issubclass": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "si": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "7088849": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "01085": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "kg": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "degc": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "degf": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "314159": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "59": [382, 393, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "302585": [382, 393], "0254": [382, 393], "typecod": [382, 393], "0762": [382, 393], "0508": [382, 393], "expon": [382, 393, 475], "761594155956": [382, 393], "max_line_width": [382, 393, 398], "suppress_smal": [382, 393, 398], "14159": [382, 393], "newlin": [382, 400], "suffix": [382, 400], "namedtemporaryfil": [382, 400], "tmpfile": [382, 400], "procid": [382, 394, 400], "mkstemp": [382, 400], "duck": [382, 394, 400], "tempfil": [382, 394, 400], "authent": 383, "usernam": 383, "password": 383, "patrickful": 383, "e2ea8a94badc5b6967ef3ca0a9452a43": 383, "old_nam": 389, "new_nam": 389, "old_func": 389, "dirac": [393, 471], "cnr": [393, 471], "orlean": [393, 471], "fr": [393, 471], "scientificpython": [393, 471], "2002": [393, 478], "codata": 393, "british": 393, "appendix": 393, "sr": 393, "da": 393, "bq": 393, "gy": 393, "lm": 393, "pa": 393, "sv": 393, "60217653e": 393, "acr": 393, "4046": 393, "8564224": 393, "amu": 393, "6605402e": 393, "ang": 393, "atm": 393, "101325": 393, "100000": 393, "bohr": 393, "291772081145378e": 393, "btui": 393, "1055": 393, "05585262": 393, "299792458": 393, "cal": 393, "cali": 393, "1868": 393, "0000000000000003e": 393, "cup": 393, "00023658825600000004": 393, "86400": 393, "017453292519943295": 393, "5555555555555556": 393, "degr": 393, "00010000000000000003": 393, "dyn": 393, "85418781762039e": 393, "erg": 393, "07": 393, "floz": 393, "9573532000000005e": 393, "3048": 393, "galuk": 393, "004546090000000002": 393, "galu": 393, "0037854120960000006": 393, "gn": 393, "80665": 393, "grav": 393, "6742e": 393, "35974417680088e": 393, "hbar": 393, "0545716823644548e": 393, "hpel": 393, "746": 393, "hplanck": 393, "6260693e": 393, "hpuk": 393, "745": 393, "025400000000000002": 393, "invcm": 393, "9864456023253395e": 393, "3806505e": 393, "4184": 393, "kcali": 393, "4186": 393, "ken": 393, "0010000000000000002": 393, "45359237": 393, "lyr": 393, "9460730472580800": 393, "me": 393, "1093826e": 393, "mi": 393, "1609": 393, "344": 393, "0000000000000002e": 393, "mp": 393, "67262171e": 393, "mu0": 393, "2566370614359173e": 393, "0221415e": 393, "nmi": 393, "1852": 393, "oz": 393, "028349523125": 393, "6894": 393, "75729316836": 393, "pt": 393, "0004731765120000001": 393, "0009463530240000002": 393, "tbsp": 393, "4786766000000002e": 393, "ton": 393, "907": 393, "18474": 393, "torr": 393, "133": [393, 478], "32236842105263": 393, "tsp": 393, "9289220000000005e": 393, "wk": 393, "604800": 393, "yd": 393, "9144000000000001": 393, "yr": 393, "31536000": 393, "yrjul": 393, "31557600": 393, "yrsid": 393, "31558152": 393, "959999997": 393, "array_lik": [393, 398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 449, 450, 454], "nine": 393, "_findunit": 393, "555556": 393, "meterpersecond": 393, "fileobject": 394, "mesh_unmangl": 394, "cpickl": 394, "decompress": 394, "improp": 394, "taxicab": 398, "manhattan": 398, "_j": 398, "euclidean": 398, "underset": 398, "logic": [398, 407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "flatten": 398, "a1": 398, "a2": 398, "_variableclass": 398, "max_mem": 398, "100000000": 398, "m0": [398, 407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "maskvalu": 398, "999999": 398, "masked_valu": 398, "mayb": 398, "3x3": 398, "fill_valu": 398, "array_output": 398, "textual": 398, "bracket": 398, "subset": [398, 476], "rightmost": 398, "estat": 398, "2345": 398, "23345": 398, "123456": 398, "charact": 398, "output_line_width": 398, "decim": 398, "float_output_precis": 398, "suppress": 398, "float_output_suppress_smal": 398, "unus": 398, "optpars": 399, "store_tru": 399, "store_fals": 399, "store_const": 399, "callback": 399, "encount": 399, "argpars": 399, "absent": [399, 403], "fear": 400, "nanosecond": 402, "microsecond": 402, "millisecond": 402, "perf_counter_n": 402, "inexplic": 403, "additionvector": 403, "thought": [403, 476], "int_0": [407, 419], "sake": [407, 415, 419, 421], "determinist": [407, 415, 419, 421, 471], "histogram": [407, 415, 419, 421, 423, 442], "gaussian": [407, 415, 419, 421], "betadist": 407, "histoplot": [407, 415, 419, 421, 442], "stderr": [407, 415, 419], "fab": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "truth": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "ambigu": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "nearestcellid": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "ncell": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "npoint": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "whose": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443, 482], "sliceabl": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "1000000000000000000": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "phi_1": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "phi_2": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "f2": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "interiorfac": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "opshap": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "operatorclass": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "otim": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "461538461538": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "phi1": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "phi2": [407, 410, 414, 415, 419, 421, 423, 434, 435, 439, 442], "mpitutori": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "allreduc": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442], "assertionerror": [407, 410, 414, 415, 419, 421, 423, 435, 439, 442], "longhand": [407, 410, 414, 415, 418, 419, 421, 423, 428, 434, 435, 437, 438, 439, 442, 443], "unpickledvar": 410, "dim": [410, 418, 428, 434, 435, 437], "_calctrialvalu": 414, "patholog": 414, "vbl": 414, "vbr": 414, "vml": 414, "crossprod": 414, "dsq": 414, "vmr": 414, "extensionvari": 414, "extensionvar": 414, "tmp1": 414, "tmp2": 414, "9544": 414, "5456": 414, "perpendicular": 414, "30473785": 414, "49923009": 414, "35355339": 414, "45118446": 414, "97140452": 414, "76215286": 414, "33721352": 414, "trial": 414, "didn": 414, "58578644": 414, "08578644": 414, "85136395": 414, "29289322": 414, "54389939": 414, "49547948": 414, "3rd": 414, "7th": 414, "15th": 414, "chanc": 414, "circumfer": 414, "57984690073": 414, "expdist": 415, "gammadist": 419, "langl": 421, "rangl": 421, "uncorrel": 421, "k_b": 421, "sigmasqrd": 421, "kboltzmann": 421, "bin": 423, "get_se": 435, "_celltofacevari": 437, "conservativesurfactantequ": 438, "numberoffac": 438, "volumetr": 439, "mole": 439, "941": 439, "_interfacesurfactantvari": 439, "some1dvar": 444, "plt": 445, "ax1": 445, "subplot": 445, "ax2": 445, "ax3": 445, "mesh1": 445, "viewer1": 445, "mesh2": 445, "xyvar": [445, 450, 451, 452, 454, 455, 457, 458], "mesh3": 445, "viewer3": 445, "orrd": 445, "jet": [445, 446, 447, 449, 450, 451, 452], "draw": [449, 450], "1002": [450, 451, 452, 457, 458], "polycollect": 452, "sparsiti": [453, 455], "linewidth": 454, "arrows": 454, "arrowstyl": 454, "minlength": 454, "stream": 454, "griddata": 454, "convex": 454, "hull": 454, "concav": 454, "cla": 454, "overlaid": 454, "arrow": [454, 455], "goe": [454, 455], "streamlin": 454, "30x30": 454, "linearli": [454, 474], "travers": 454, "density_x": 454, "density_i": 454, "lumin": 454, "stretch": 454, "fancyarrowpatch": 454, "quiver": 455, "xyzvar": [457, 458], "poll": 459, "poll_fil": 459, "Or": 459, "reader": 459, "fname": 459, "subview": 461, "866": 464, "stdout": 464, "var_gauss_grad_x": 464, "var_gauss_grad_i": 464, "33333333333333": 464, "wikipedia": 471, "wiki": 471, "multigrid_method": 471, "algebraic_multigrid_": 471, "biconjugate_gradient_method": 471, "biconjugate_gradient_stabilized_method": 471, "conjugate_gradient_method": 471, "conjugate_gradient_squared_method": 471, "continuous_integr": 471, "eponym": 471, "1137": 471, "0914028": 471, "generalized_minimal_residual_method": 471, "cad": 471, "jor": 471, "javascript": 471, "lu_decomposit": 471, "appl": 471, "predecessor": 471, "ye": 471, "forum": 471, "archaic": 471, "pydata": 471, "pcg": 471, "cosc": 471, "canterburi": 471, "greg": [471, 478], "ew": 471, "slowli": 471, "3000": 471, "plone": 471, "pocoo": 471, "microsoft": 471, "polyhedr": 474, "surround": 474, "conjunction": 474, "omega_a": 474, "omega_1": 474, "omega_2": 474, "omega_3": 474, "omega_4": 474, "theorem": 474, "specificconvectionterm": 474, "increasingli": 474, "gamma1": 474, "nicolson": 474, "reinforc": 474, "gamma_2": [474, 475], "gamma2": 474, "a_": 474, "b_p": 474, "rho_p": 474, "f_f": [474, 477], "biolog": 475, "inde": 475, "proven": 475, "variat": 475, "ph": 475, "lambda_i": 475, "react": [475, 478], "divers": 475, "electr": 475, "heart": 475, "tissu": 475, "schr": 475, "dinger": 475, "unknown": 475, "fickian": 475, "gamma_3": 475, "spectral": 475, "chapter": [476, 479, 480, 483], "phd": [476, 478], "patankar": [476, 478], "versteeg": [476, 478], "malalasekera": [476, 478], "fem": 476, "fdm": 476, "analog": 476, "\u00e9": 477, "clet": 477, "p_f": 477, "smear": 477, "therefor": 477, "rightarrow": 477, "overcom": 477, "inaccuraci": 477, "beckermann": 478, "karma": 478, "1146": 478, "annurev": 478, "matsci": 478, "101901": 478, "155803": 478, "chen": 478, "mdoel": 478, "112001": 478, "132041": 478, "contemporari": 478, "david": 478, "jonathan": 478, "coat": 478, "biomaterialia": 478, "604": 478, "jan": 478, "actbio": 478, "019": 478, "william": 478, "nov": 478, "hangart": 478, "hamadani": 478, "xu": 478, "interdigit": 478, "thin": 478, "film": 478, "heterojunct": 478, "073514": 478, "3561487": 478, "huber": 478, "superconform": 478, "submicron": 478, "016102": 478, "2001": 478, "sethian": 478, "cambridg": 478, "1996": 478, "scott": 478, "chacon": 478, "apress": 478, "guido": 478, "rossum": 478, "tut": 478, "pilgrim": 478, "isbn": 478, "1590593561": 478, "diveintopython": 478, "ref": 478, "alexand": 478, "craig": 478, "materialia": 478, "6035": 478, "6058": 478, "2003": 478, "s1359": 478, "6454": 478, "00388": 478, "swirl": 478, "turbul": 478, "greenwich": 478, "1998": 478, "gala": 478, "eprint": 478, "6371": 478, "franci": 478, "1980": 478, "longman": 478, "technic": 478, "1995": 478, "mattiussi": 478, "309": 478, "1997": 478, "epfl": 478, "ch": 478, "jcp1997": 478, "nterfaci": 478, "1958": 478, "hermodynam": 478, "1121": 478, "1124": 478, "1959": 478, "ucleat": 478, "elder": 478, "thornton": 478, "hoyt": 478, "philosoph": 478, "magagazin": 478, "164": 478, "1080": 478, "14786435": 478, "506427": 478, "quilibrium": 478, "69": 478, "021603": 478, "arxiv": 478, "cond": 478, "mat": 478, "0308173": 478, "inet": 478, "021604": 478, "0308179": 478, "saul": 478, "teukolski": 478, "vetterl": 478, "brian": 478, "flanneri": 478, "1999": 478, "peri": 478, "\u0107": 478, "springer": 478, "blend": 478, "185": 478, "s0021": 478, "9991": 478, "00059": 478, "c302": 478, "c310": 478, "1562598": 478, "mcf": 478, "adden": 478, "7424": 478, "7439": 478, "1992": 478, "microsegreg": 478, "metallurgica": 478, "689": 478, "ward": 478, "inst": 478, "winter2004": 478, "if12": 478, "pg46": 478, "capit": 481, "resid": 481, "oop": 481, "arg2": [481, 482], "unfamiliar": 481, "reorder": 481, "latter": 481, "famili": 481, "descend": 481, "myobjectderivedfrombas": [481, 482], "arg3": 482, "__": 482, "somethingels": 482, "val1": 482, "val2": 482}, "objects": {"": [[23, 0, 0, "-", "examples"], [194, 0, 0, "-", "fipy"], [479, 0, 0, "-", "package"], [17, 7, 1, "cmdoption-cache", "--cache"], [22, 7, 1, "cmdoption-home", "--home"], [17, 7, 1, "cmdoption-inline", "--inline"], [17, 7, 1, "cmdoption-lsmlib", "--lsmlib"], [17, 7, 1, "cmdoption-no-cache", "--no-cache"], [17, 7, 1, "cmdoption-petsc", "--petsc"], [22, 7, 1, "cmdoption-prefix", "--prefix"], [17, 7, 1, "cmdoption-pyamgx", "--pyamgx"], [17, 7, 1, "cmdoption-scipy", "--scipy"], [17, 7, 1, "cmdoption-skfmm", "--skfmm"], [17, 7, 1, "cmdoption-trilinos", "--trilinos"], [22, 8, 1, "-", "DYLD_LIBRARY_PATH"], [17, 8, 1, "-", "FIPY_CACHE"], [17, 8, 1, "-", "FIPY_DEFAULT_CRITERION"], [17, 8, 1, "-", "FIPY_DISPLAY_MATRIX"], [17, 8, 1, "-", "FIPY_INCLUDE_NUMERIX_ALL"], [17, 8, 1, "-", "FIPY_INLINE"], [17, 8, 1, "-", "FIPY_INLINE_COMMENT"], [17, 8, 1, "-", "FIPY_LOG_CONFIG"], [17, 8, 1, "-", "FIPY_SOLVERS"], [17, 8, 1, "-", "FIPY_VIEWER"], [22, 8, 1, "-", "LD_LIBRARY_PATH"], [17, 8, 1, "-", "PETSC_OPTIONS"]], "examples": [[24, 0, 0, "-", "benchmarking"], [30, 0, 0, "-", "cahnHilliard"], [38, 0, 0, "-", "chemotaxis"], [43, 0, 0, "-", "convection"], [70, 0, 0, "-", "diffusion"], [108, 0, 0, "-", "elphf"], [118, 0, 0, "-", "flow"], [121, 0, 0, "-", "levelSet"], [155, 0, 0, "-", "meshing"], [160, 0, 0, "-", "parallel"], [161, 0, 0, "-", "phase"], [182, 0, 0, "-", "reactiveWetting"], [186, 0, 0, "-", "riemann"], [189, 0, 0, "-", "test"], [190, 0, 0, "-", "updating"]], "examples.benchmarking": [[25, 0, 0, "-", "benchmarker"], [26, 0, 0, "-", "size"], [27, 0, 0, "-", "steps"], [28, 0, 0, "-", "utils"], [29, 0, 0, "-", "versions"]], "examples.cahnHilliard": [[31, 0, 0, "-", "mesh2D"], [32, 0, 0, "-", "mesh2DCoupled"], [33, 0, 0, "-", "mesh3D"], [34, 0, 0, "-", "sphere"], [35, 0, 0, "-", "sphereDaemon"], [36, 0, 0, "-", "tanh1D"], [37, 0, 0, "-", "test"]], "examples.chemotaxis": [[39, 0, 0, "-", "input"], [40, 0, 0, "-", "input2D"], [41, 0, 0, "-", "parameters"], [42, 0, 0, "-", "test"]], "examples.convection": [[44, 0, 0, "-", "advection"], [48, 0, 0, "-", "exponential1D"], [53, 0, 0, "-", "exponential1DBack"], [55, 0, 0, "-", "exponential1DSource"], [58, 0, 0, "-", "exponential2D"], [63, 0, 0, "-", "peclet"], [64, 0, 0, "-", "powerLaw1D"], [67, 0, 0, "-", "robin"], [68, 0, 0, "-", "source"], [69, 0, 0, "-", "test"]], "examples.convection.advection": [[45, 0, 0, "-", "explicitUpwind"], [46, 0, 0, "-", "implicitUpwind"], [47, 0, 0, "-", "vanLeerUpwind"]], "examples.convection.exponential1D": [[49, 0, 0, "-", "cylindricalMesh1D"], [50, 0, 0, "-", "cylindricalMesh1DNonUniform"], [51, 0, 0, "-", "mesh1D"], [52, 0, 0, "-", "tri2D"]], "examples.convection.exponential1DBack": [[54, 0, 0, "-", "mesh1D"]], "examples.convection.exponential1DSource": [[56, 0, 0, "-", "mesh1D"], [57, 0, 0, "-", "tri2D"]], "examples.convection.exponential2D": [[59, 0, 0, "-", "cylindricalMesh2D"], [60, 0, 0, "-", "cylindricalMesh2DNonUniform"], [61, 0, 0, "-", "mesh2D"], [62, 0, 0, "-", "tri2D"]], "examples.convection.powerLaw1D": [[65, 0, 0, "-", "mesh1D"], [66, 0, 0, "-", "tri2D"]], "examples.diffusion": [[71, 0, 0, "-", "anisotropy"], [72, 0, 0, "-", "circle"], [73, 0, 0, "-", "circleQuad"], [74, 0, 0, "-", "coupled"], [75, 0, 0, "-", "electrostatics"], [76, 0, 0, "-", "explicit"], [81, 0, 0, "-", "mesh1D"], [82, 0, 0, "-", "mesh20x20"], [83, 0, 0, "-", "mesh20x20Coupled"], [84, 0, 0, "-", "nthOrder"], [88, 0, 0, "-", "steadyState"], [106, 0, 0, "-", "test"], [107, 0, 0, "-", "variable"]], "examples.diffusion.explicit": [[77, 0, 0, "-", "mesh1D"], [78, 0, 0, "-", "mixedelement"], [79, 0, 0, "-", "test"], [80, 0, 0, "-", "tri2D"]], "examples.diffusion.nthOrder": [[85, 0, 0, "-", "input4thOrder1D"], [86, 0, 0, "-", "input4thOrder_line"], [87, 0, 0, "-", "test"]], "examples.diffusion.steadyState": [[89, 0, 0, "-", "mesh1D"], [92, 0, 0, "-", "mesh20x20"], [98, 0, 0, "-", "mesh50x50"], [101, 0, 0, "-", "otherMeshes"], [105, 0, 0, "-", "test"]], "examples.diffusion.steadyState.mesh1D": [[90, 0, 0, "-", "inputPeriodic"], [91, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[93, 0, 0, "-", "gmshinput"], [94, 0, 0, "-", "isotropy"], [95, 0, 0, "-", "modifiedMeshInput"], [96, 0, 0, "-", "orthoerror"], [97, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[99, 0, 0, "-", "input"], [100, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[102, 0, 0, "-", "cubicalProblem"], [103, 0, 0, "-", "grid3Dinput"], [104, 0, 0, "-", "prism"]], "examples.elphf": [[109, 0, 0, "-", "diffusion"], [113, 0, 0, "-", "input"], [114, 0, 0, "-", "phase"], [115, 0, 0, "-", "phaseDiffusion"], [116, 0, 0, "-", "poisson"], [117, 0, 0, "-", "test"]], "examples.elphf.diffusion": [[110, 0, 0, "-", "mesh1D"], [111, 0, 0, "-", "mesh1Ddimensional"], [112, 0, 0, "-", "mesh2D"]], "examples.flow": [[119, 0, 0, "-", "stokesCavity"], [120, 0, 0, "-", "test"]], "examples.levelSet": [[122, 0, 0, "-", "advection"], [127, 0, 0, "-", "distanceFunction"], [133, 0, 0, "-", "electroChem"], [149, 0, 0, "-", "surfactant"], [154, 0, 0, "-", "test"]], "examples.levelSet.advection": [[123, 0, 0, "-", "circle"], [124, 0, 0, "-", "mesh1D"], [125, 0, 0, "-", "test"], [126, 0, 0, "-", "trench"]], "examples.levelSet.distanceFunction": [[128, 0, 0, "-", "circle"], [129, 0, 0, "-", "interior"], [130, 0, 0, "-", "mesh1D"], [131, 0, 0, "-", "square"], [132, 0, 0, "-", "test"]], "examples.levelSet.electroChem": [[134, 0, 0, "-", "adsorbingSurfactantEquation"], [135, 0, 0, "-", "adsorption"], [136, 0, 0, "-", "gapFillDistanceVariable"], [137, 0, 0, "-", "gapFillMesh"], [138, 0, 0, "-", "gold"], [139, 0, 0, "-", "howToWriteAScript"], [140, 0, 0, "-", "leveler"], [141, 0, 0, "-", "lines"], [142, 0, 0, "-", "matplotlibSurfactantViewer"], [143, 0, 0, "-", "mayaviSurfactantViewer"], [144, 0, 0, "-", "metalIonDiffusionEquation"], [145, 0, 0, "-", "simpleTrenchSystem"], [146, 0, 0, "-", "surfactantBulkDiffusionEquation"], [147, 0, 0, "-", "test"], [148, 0, 0, "-", "trenchMesh"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[142, 1, 1, "", "MatplotlibSurfactantViewer"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer": [[142, 2, 1, "", "axes"], [142, 2, 1, "", "cmap"], [142, 2, 1, "", "colorbar"], [142, 2, 1, "", "fig"], [142, 2, 1, "", "id"], [142, 2, 1, "", "log"], [142, 3, 1, "", "plot"], [142, 3, 1, "", "plotMesh"], [142, 3, 1, "", "setLimits"], [142, 2, 1, "", "title"], [142, 2, 1, "", "vars"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[143, 1, 1, "", "MayaviSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer": [[143, 3, 1, "", "plotMesh"], [143, 3, 1, "", "setLimits"], [143, 2, 1, "", "title"], [143, 2, 1, "", "vars"]], "examples.levelSet.surfactant": [[150, 0, 0, "-", "circle"], [151, 0, 0, "-", "expandingCircle"], [152, 0, 0, "-", "square"], [153, 0, 0, "-", "test"]], "examples.meshing": [[156, 0, 0, "-", "gmshRefinement"], [157, 0, 0, "-", "inputGrid2D"], [158, 0, 0, "-", "sphere"], [159, 0, 0, "-", "test"]], "examples.phase": [[162, 0, 0, "-", "anisotropy"], [163, 0, 0, "-", "anisotropyOLD"], [164, 0, 0, "-", "binary"], [165, 0, 0, "-", "binaryCoupled"], [166, 0, 0, "-", "impingement"], [170, 0, 0, "-", "missOrientation"], [175, 0, 0, "-", "phaseViewer"], [176, 0, 0, "-", "polyxtal"], [177, 0, 0, "-", "polyxtalCoupled"], [178, 0, 0, "-", "quaternary"], [179, 0, 0, "-", "simple"], [180, 0, 0, "-", "symmetry"], [181, 0, 0, "-", "test"]], "examples.phase.impingement": [[167, 0, 0, "-", "mesh20x20"], [168, 0, 0, "-", "mesh40x1"], [169, 0, 0, "-", "test"]], "examples.phase.missOrientation": [[171, 0, 0, "-", "circle"], [172, 0, 0, "-", "mesh1D"], [173, 0, 0, "-", "modCircle"], [174, 0, 0, "-", "test"]], "examples.phase.phaseViewer": [[175, 1, 1, "", "PhaseViewer"]], "examples.phase.phaseViewer.PhaseViewer": [[175, 2, 1, "", "axes"], [175, 2, 1, "", "cmap"], [175, 2, 1, "", "colorbar"], [175, 2, 1, "", "fig"], [175, 2, 1, "", "id"], [175, 2, 1, "", "lines"], [175, 2, 1, "", "log"], [175, 3, 1, "", "plot"], [175, 3, 1, "", "plotMesh"], [175, 3, 1, "", "setLimits"], [175, 2, 1, "", "title"], [175, 2, 1, "", "vars"]], "examples.reactiveWetting": [[183, 0, 0, "-", "liquidVapor1D"], [184, 0, 0, "-", "liquidVapor2D"], [185, 0, 0, "-", "test"]], "examples.riemann": [[187, 0, 0, "-", "acoustics"], [188, 0, 0, "-", "test"]], "examples.updating": [[191, 0, 0, "-", "update0_1to1_0"], [192, 0, 0, "-", "update1_0to2_0"], [193, 0, 0, "-", "update2_0to3_0"]], "fipy": [[195, 0, 0, "-", "boundaryConditions"], [194, 4, 1, "", "doctest_raw_input"], [202, 0, 0, "-", "matrices"], [209, 0, 0, "-", "meshes"], [255, 0, 0, "-", "solvers"], [339, 0, 0, "-", "steppers"], [343, 0, 0, "-", "terms"], [194, 4, 1, "", "test"], [376, 0, 0, "-", "testFiPy"], [377, 0, 0, "-", "tests"], [382, 0, 0, "-", "tools"], [404, 0, 0, "-", "variables"], [444, 0, 0, "-", "viewers"]], "fipy.boundaryConditions": [[196, 0, 0, "-", "boundaryCondition"], [197, 0, 0, "-", "constraint"], [198, 0, 0, "-", "fixedFlux"], [199, 0, 0, "-", "fixedValue"], [200, 0, 0, "-", "nthOrderBoundaryCondition"], [201, 0, 0, "-", "test"]], "fipy.boundaryConditions.boundaryCondition": [[196, 1, 1, "", "BoundaryCondition"]], "fipy.boundaryConditions.boundaryCondition.BoundaryCondition": [[196, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.constraint": [[197, 1, 1, "", "Constraint"]], "fipy.boundaryConditions.constraint.Constraint": [[197, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedFlux": [[198, 1, 1, "", "FixedFlux"]], "fipy.boundaryConditions.fixedFlux.FixedFlux": [[198, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedValue": [[199, 1, 1, "", "FixedValue"]], "fipy.boundaryConditions.fixedValue.FixedValue": [[199, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[200, 1, 1, "", "NthOrderBoundaryCondition"]], "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition": [[200, 3, 1, "", "__repr__"]], "fipy.matrices": [[203, 0, 0, "-", "offsetSparseMatrix"], [204, 0, 0, "-", "petscMatrix"], [205, 0, 0, "-", "scipyMatrix"], [206, 0, 0, "-", "sparseMatrix"], [207, 0, 0, "-", "test"], [208, 0, 0, "-", "trilinosMatrix"]], "fipy.matrices.offsetSparseMatrix": [[203, 4, 1, "", "OffsetSparseMatrix"]], "fipy.meshes": [[210, 0, 0, "-", "abstractMesh"], [211, 0, 0, "-", "builders"], [218, 0, 0, "-", "cylindricalGrid1D"], [219, 0, 0, "-", "cylindricalGrid2D"], [220, 0, 0, "-", "cylindricalNonUniformGrid1D"], [221, 0, 0, "-", "cylindricalNonUniformGrid2D"], [222, 0, 0, "-", "cylindricalUniformGrid1D"], [223, 0, 0, "-", "cylindricalUniformGrid2D"], [224, 0, 0, "-", "factoryMeshes"], [225, 0, 0, "-", "gmshMesh"], [226, 0, 0, "-", "grid1D"], [227, 0, 0, "-", "grid2D"], [228, 0, 0, "-", "grid3D"], [229, 0, 0, "-", "mesh"], [230, 0, 0, "-", "mesh1D"], [231, 0, 0, "-", "mesh2D"], [232, 0, 0, "-", "nonUniformGrid1D"], [233, 0, 0, "-", "nonUniformGrid2D"], [234, 0, 0, "-", "nonUniformGrid3D"], [235, 0, 0, "-", "periodicGrid1D"], [236, 0, 0, "-", "periodicGrid2D"], [237, 0, 0, "-", "periodicGrid3D"], [238, 0, 0, "-", "representations"], [242, 0, 0, "-", "skewedGrid2D"], [243, 0, 0, "-", "sphericalNonUniformGrid1D"], [244, 0, 0, "-", "sphericalUniformGrid1D"], [245, 0, 0, "-", "test"], [246, 0, 0, "-", "topologies"], [250, 0, 0, "-", "tri2D"], [251, 0, 0, "-", "uniformGrid"], [252, 0, 0, "-", "uniformGrid1D"], [253, 0, 0, "-", "uniformGrid2D"], [254, 0, 0, "-", "uniformGrid3D"]], "fipy.meshes.abstractMesh": [[210, 1, 1, "", "AbstractMesh"], [210, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.abstractMesh.AbstractMesh": [[210, 2, 1, "", "VTKCellDataSet"], [210, 2, 1, "", "VTKFaceDataSet"], [210, 3, 1, "", "__add__"], [210, 3, 1, "", "__div__"], [210, 3, 1, "", "__getstate__"], [210, 3, 1, "", "__radd__"], [210, 3, 1, "", "__repr__"], [210, 3, 1, "", "__sub__"], [210, 3, 1, "", "__truediv__"], [210, 2, 1, "", "aspect2D"], [210, 2, 1, "", "cellCenters"], [210, 2, 1, "", "cellFaceIDs"], [210, 2, 1, "", "facesBack"], [210, 2, 1, "", "facesBottom"], [210, 2, 1, "", "facesDown"], [210, 2, 1, "", "facesFront"], [210, 2, 1, "", "facesLeft"], [210, 2, 1, "", "facesRight"], [210, 2, 1, "", "facesTop"], [210, 2, 1, "", "facesUp"], [210, 2, 1, "", "x"], [210, 2, 1, "", "y"], [210, 2, 1, "", "z"]], "fipy.meshes.abstractMesh.MeshAdditionError": [[210, 6, 1, "", "__cause__"], [210, 6, 1, "", "__context__"], [210, 3, 1, "", "__delattr__"], [210, 3, 1, "", "__getattribute__"], [210, 3, 1, "", "__reduce__"], [210, 3, 1, "", "__repr__"], [210, 3, 1, "", "__setattr__"], [210, 3, 1, "", "__str__"], [210, 3, 1, "", "add_note"], [210, 3, 1, "", "with_traceback"]], "fipy.meshes.builders": [[212, 0, 0, "-", "abstractGridBuilder"], [213, 0, 0, "-", "grid1DBuilder"], [214, 0, 0, "-", "grid2DBuilder"], [215, 0, 0, "-", "grid3DBuilder"], [216, 0, 0, "-", "periodicGrid1DBuilder"], [217, 0, 0, "-", "utilityClasses"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[220, 1, 1, "", "CylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D": [[220, 2, 1, "", "VTKCellDataSet"], [220, 2, 1, "", "VTKFaceDataSet"], [220, 3, 1, "", "__add__"], [220, 3, 1, "", "__div__"], [220, 3, 1, "", "__getstate__"], [220, 3, 1, "", "__mul__"], [220, 3, 1, "", "__radd__"], [220, 3, 1, "", "__repr__"], [220, 3, 1, "", "__rmul__"], [220, 3, 1, "", "__sub__"], [220, 3, 1, "", "__truediv__"], [220, 2, 1, "", "aspect2D"], [220, 2, 1, "", "cellCenters"], [220, 2, 1, "", "cellFaceIDs"], [220, 2, 1, "", "facesBack"], [220, 2, 1, "", "facesBottom"], [220, 2, 1, "", "facesDown"], [220, 2, 1, "", "facesFront"], [220, 2, 1, "", "facesLeft"], [220, 2, 1, "", "facesRight"], [220, 2, 1, "", "facesTop"], [220, 2, 1, "", "facesUp"], [220, 2, 1, "", "x"], [220, 2, 1, "", "y"], [220, 2, 1, "", "z"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[221, 1, 1, "", "CylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 3, 1, "", "extrude"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid1D": [[222, 1, 1, "", "CylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 2, 1, "", "exteriorFaces"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid2D": [[223, 1, 1, "", "CylindricalUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__getstate__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellCenters"], [223, 2, 1, "", "cellFaceIDs"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.factoryMeshes": [[224, 4, 1, "", "CylindricalGrid1D"], [224, 4, 1, "", "CylindricalGrid2D"], [224, 4, 1, "", "Grid1D"], [224, 4, 1, "", "Grid2D"], [224, 4, 1, "", "Grid3D"], [224, 4, 1, "", "SphericalGrid1D"]], "fipy.meshes.gmshMesh": [[225, 1, 1, "", "Gmsh2D"], [225, 1, 1, "", "Gmsh2DIn3DSpace"], [225, 1, 1, "", "Gmsh3D"], [225, 5, 1, "", "GmshException"], [225, 1, 1, "", "GmshFile"], [225, 1, 1, "", "GmshGrid2D"], [225, 1, 1, "", "GmshGrid3D"], [225, 1, 1, "", "MSHFile"], [225, 5, 1, "", "MeshExportError"], [225, 1, 1, "", "POSFile"], [225, 4, 1, "", "gmshVersion"], [225, 4, 1, "", "openMSHFile"], [225, 4, 1, "", "openPOSFile"]], "fipy.meshes.gmshMesh.Gmsh2D": [[225, 2, 1, "", "VTKCellDataSet"], [225, 2, 1, "", "VTKFaceDataSet"], [225, 3, 1, "", "__add__"], [225, 3, 1, "", "__div__"], [225, 3, 1, "", "__getstate__"], [225, 3, 1, "", "__mul__"], [225, 3, 1, "", "__radd__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__rmul__"], [225, 3, 1, "", "__sub__"], [225, 3, 1, "", "__truediv__"], [225, 2, 1, "", "aspect2D"], [225, 2, 1, "", "cellCenters"], [225, 2, 1, "", "cellFaceIDs"], [225, 3, 1, "", "extrude"], [225, 2, 1, "", "facesBack"], [225, 2, 1, "", "facesBottom"], [225, 2, 1, "", "facesDown"], [225, 2, 1, "", "facesFront"], [225, 2, 1, "", "facesLeft"], [225, 2, 1, "", "facesRight"], [225, 2, 1, "", "facesTop"], [225, 2, 1, "", "facesUp"], [225, 2, 1, "", "x"], [225, 2, 1, "", "y"], [225, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace": [[225, 2, 1, "", "VTKCellDataSet"], [225, 2, 1, "", "VTKFaceDataSet"], [225, 3, 1, "", "__add__"], [225, 3, 1, "", "__div__"], [225, 3, 1, "", "__getstate__"], [225, 3, 1, "", "__mul__"], [225, 3, 1, "", "__radd__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__rmul__"], [225, 3, 1, "", "__sub__"], [225, 3, 1, "", "__truediv__"], [225, 2, 1, "", "aspect2D"], [225, 2, 1, "", "cellCenters"], [225, 2, 1, "", "cellFaceIDs"], [225, 3, 1, "", "extrude"], [225, 2, 1, "", "facesBack"], [225, 2, 1, "", "facesBottom"], [225, 2, 1, "", "facesDown"], [225, 2, 1, "", "facesFront"], [225, 2, 1, "", "facesLeft"], [225, 2, 1, "", "facesRight"], [225, 2, 1, "", "facesTop"], [225, 2, 1, "", "facesUp"], [225, 2, 1, "", "x"], [225, 2, 1, "", "y"], [225, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh3D": [[225, 2, 1, "", "VTKCellDataSet"], [225, 2, 1, "", "VTKFaceDataSet"], [225, 3, 1, "", "__add__"], [225, 3, 1, "", "__div__"], [225, 3, 1, "", "__getstate__"], [225, 3, 1, "", "__mul__"], [225, 3, 1, "", "__radd__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__rmul__"], [225, 3, 1, "", "__sub__"], [225, 3, 1, "", "__truediv__"], [225, 2, 1, "", "aspect2D"], [225, 2, 1, "", "cellCenters"], [225, 2, 1, "", "cellFaceIDs"], [225, 2, 1, "", "facesBack"], [225, 2, 1, "", "facesBottom"], [225, 2, 1, "", "facesDown"], [225, 2, 1, "", "facesFront"], [225, 2, 1, "", "facesLeft"], [225, 2, 1, "", "facesRight"], [225, 2, 1, "", "facesTop"], [225, 2, 1, "", "facesUp"], [225, 2, 1, "", "x"], [225, 2, 1, "", "y"], [225, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshException": [[225, 6, 1, "", "__cause__"], [225, 6, 1, "", "__context__"], [225, 3, 1, "", "__delattr__"], [225, 3, 1, "", "__getattribute__"], [225, 3, 1, "", "__reduce__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__setattr__"], [225, 3, 1, "", "__str__"], [225, 3, 1, "", "add_note"], [225, 3, 1, "", "with_traceback"]], "fipy.meshes.gmshMesh.GmshGrid2D": [[225, 2, 1, "", "VTKCellDataSet"], [225, 2, 1, "", "VTKFaceDataSet"], [225, 3, 1, "", "__add__"], [225, 3, 1, "", "__div__"], [225, 3, 1, "", "__getstate__"], [225, 3, 1, "", "__mul__"], [225, 3, 1, "", "__radd__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__rmul__"], [225, 3, 1, "", "__sub__"], [225, 3, 1, "", "__truediv__"], [225, 2, 1, "", "aspect2D"], [225, 2, 1, "", "cellCenters"], [225, 2, 1, "", "cellFaceIDs"], [225, 3, 1, "", "extrude"], [225, 2, 1, "", "facesBack"], [225, 2, 1, "", "facesBottom"], [225, 2, 1, "", "facesDown"], [225, 2, 1, "", "facesFront"], [225, 2, 1, "", "facesLeft"], [225, 2, 1, "", "facesRight"], [225, 2, 1, "", "facesTop"], [225, 2, 1, "", "facesUp"], [225, 2, 1, "", "x"], [225, 2, 1, "", "y"], [225, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid3D": [[225, 2, 1, "", "VTKCellDataSet"], [225, 2, 1, "", "VTKFaceDataSet"], [225, 3, 1, "", "__add__"], [225, 3, 1, "", "__div__"], [225, 3, 1, "", "__getstate__"], [225, 3, 1, "", "__mul__"], [225, 3, 1, "", "__radd__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__rmul__"], [225, 3, 1, "", "__sub__"], [225, 3, 1, "", "__truediv__"], [225, 2, 1, "", "aspect2D"], [225, 2, 1, "", "cellCenters"], [225, 2, 1, "", "cellFaceIDs"], [225, 2, 1, "", "facesBack"], [225, 2, 1, "", "facesBottom"], [225, 2, 1, "", "facesDown"], [225, 2, 1, "", "facesFront"], [225, 2, 1, "", "facesLeft"], [225, 2, 1, "", "facesRight"], [225, 2, 1, "", "facesTop"], [225, 2, 1, "", "facesUp"], [225, 2, 1, "", "x"], [225, 2, 1, "", "y"], [225, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.MSHFile": [[225, 3, 1, "", "makeMapVariables"], [225, 3, 1, "", "read"]], "fipy.meshes.gmshMesh.MeshExportError": [[225, 6, 1, "", "__cause__"], [225, 6, 1, "", "__context__"], [225, 3, 1, "", "__delattr__"], [225, 3, 1, "", "__getattribute__"], [225, 3, 1, "", "__reduce__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__setattr__"], [225, 3, 1, "", "__str__"], [225, 3, 1, "", "add_note"], [225, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh": [[229, 1, 1, "", "Mesh"], [229, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.mesh.Mesh": [[229, 2, 1, "", "VTKCellDataSet"], [229, 2, 1, "", "VTKFaceDataSet"], [229, 3, 1, "", "__add__"], [229, 3, 1, "", "__div__"], [229, 3, 1, "", "__getstate__"], [229, 3, 1, "", "__mul__"], [229, 3, 1, "", "__radd__"], [229, 3, 1, "", "__repr__"], [229, 3, 1, "", "__rmul__"], [229, 3, 1, "", "__sub__"], [229, 3, 1, "", "__truediv__"], [229, 2, 1, "", "aspect2D"], [229, 2, 1, "", "cellCenters"], [229, 2, 1, "", "cellFaceIDs"], [229, 2, 1, "", "facesBack"], [229, 2, 1, "", "facesBottom"], [229, 2, 1, "", "facesDown"], [229, 2, 1, "", "facesFront"], [229, 2, 1, "", "facesLeft"], [229, 2, 1, "", "facesRight"], [229, 2, 1, "", "facesTop"], [229, 2, 1, "", "facesUp"], [229, 2, 1, "", "x"], [229, 2, 1, "", "y"], [229, 2, 1, "", "z"]], "fipy.meshes.mesh.MeshAdditionError": [[229, 6, 1, "", "__cause__"], [229, 6, 1, "", "__context__"], [229, 3, 1, "", "__delattr__"], [229, 3, 1, "", "__getattribute__"], [229, 3, 1, "", "__reduce__"], [229, 3, 1, "", "__repr__"], [229, 3, 1, "", "__setattr__"], [229, 3, 1, "", "__str__"], [229, 3, 1, "", "add_note"], [229, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh1D": [[230, 1, 1, "", "Mesh1D"]], "fipy.meshes.mesh1D.Mesh1D": [[230, 2, 1, "", "VTKCellDataSet"], [230, 2, 1, "", "VTKFaceDataSet"], [230, 3, 1, "", "__add__"], [230, 3, 1, "", "__div__"], [230, 3, 1, "", "__getstate__"], [230, 3, 1, "", "__mul__"], [230, 3, 1, "", "__radd__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__rmul__"], [230, 3, 1, "", "__sub__"], [230, 3, 1, "", "__truediv__"], [230, 2, 1, "", "aspect2D"], [230, 2, 1, "", "cellCenters"], [230, 2, 1, "", "cellFaceIDs"], [230, 2, 1, "", "facesBack"], [230, 2, 1, "", "facesBottom"], [230, 2, 1, "", "facesDown"], [230, 2, 1, "", "facesFront"], [230, 2, 1, "", "facesLeft"], [230, 2, 1, "", "facesRight"], [230, 2, 1, "", "facesTop"], [230, 2, 1, "", "facesUp"], [230, 2, 1, "", "x"], [230, 2, 1, "", "y"], [230, 2, 1, "", "z"]], "fipy.meshes.mesh2D": [[231, 1, 1, "", "Mesh2D"]], "fipy.meshes.mesh2D.Mesh2D": [[231, 2, 1, "", "VTKCellDataSet"], [231, 2, 1, "", "VTKFaceDataSet"], [231, 3, 1, "", "__add__"], [231, 3, 1, "", "__div__"], [231, 3, 1, "", "__getstate__"], [231, 3, 1, "", "__mul__"], [231, 3, 1, "", "__radd__"], [231, 3, 1, "", "__repr__"], [231, 3, 1, "", "__rmul__"], [231, 3, 1, "", "__sub__"], [231, 3, 1, "", "__truediv__"], [231, 2, 1, "", "aspect2D"], [231, 2, 1, "", "cellCenters"], [231, 2, 1, "", "cellFaceIDs"], [231, 3, 1, "", "extrude"], [231, 2, 1, "", "facesBack"], [231, 2, 1, "", "facesBottom"], [231, 2, 1, "", "facesDown"], [231, 2, 1, "", "facesFront"], [231, 2, 1, "", "facesLeft"], [231, 2, 1, "", "facesRight"], [231, 2, 1, "", "facesTop"], [231, 2, 1, "", "facesUp"], [231, 2, 1, "", "x"], [231, 2, 1, "", "y"], [231, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid1D": [[232, 1, 1, "", "NonUniformGrid1D"]], "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__getstate__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellCenters"], [232, 2, 1, "", "cellFaceIDs"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid2D": [[233, 1, 1, "", "NonUniformGrid2D"]], "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 3, 1, "", "extrude"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid3D": [[234, 1, 1, "", "NonUniformGrid3D"]], "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid1D": [[235, 1, 1, "", "PeriodicGrid1D"]], "fipy.meshes.periodicGrid1D.PeriodicGrid1D": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D": [[236, 1, 1, "", "PeriodicGrid2D"], [236, 1, 1, "", "PeriodicGrid2DLeftRight"], [236, 1, 1, "", "PeriodicGrid2DTopBottom"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2D": [[236, 2, 1, "", "VTKCellDataSet"], [236, 2, 1, "", "VTKFaceDataSet"], [236, 3, 1, "", "__add__"], [236, 3, 1, "", "__div__"], [236, 3, 1, "", "__getstate__"], [236, 3, 1, "", "__mul__"], [236, 3, 1, "", "__radd__"], [236, 3, 1, "", "__repr__"], [236, 3, 1, "", "__rmul__"], [236, 3, 1, "", "__sub__"], [236, 3, 1, "", "__truediv__"], [236, 2, 1, "", "aspect2D"], [236, 2, 1, "", "cellCenters"], [236, 2, 1, "", "cellFaceIDs"], [236, 3, 1, "", "extrude"], [236, 2, 1, "", "facesBack"], [236, 2, 1, "", "facesBottom"], [236, 2, 1, "", "facesDown"], [236, 2, 1, "", "facesFront"], [236, 2, 1, "", "facesLeft"], [236, 2, 1, "", "facesRight"], [236, 2, 1, "", "facesTop"], [236, 2, 1, "", "facesUp"], [236, 2, 1, "", "x"], [236, 2, 1, "", "y"], [236, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight": [[236, 2, 1, "", "VTKCellDataSet"], [236, 2, 1, "", "VTKFaceDataSet"], [236, 3, 1, "", "__add__"], [236, 3, 1, "", "__div__"], [236, 3, 1, "", "__getstate__"], [236, 3, 1, "", "__mul__"], [236, 3, 1, "", "__radd__"], [236, 3, 1, "", "__repr__"], [236, 3, 1, "", "__rmul__"], [236, 3, 1, "", "__sub__"], [236, 3, 1, "", "__truediv__"], [236, 2, 1, "", "aspect2D"], [236, 2, 1, "", "cellCenters"], [236, 2, 1, "", "cellFaceIDs"], [236, 3, 1, "", "extrude"], [236, 2, 1, "", "facesBack"], [236, 2, 1, "", "facesBottom"], [236, 2, 1, "", "facesDown"], [236, 2, 1, "", "facesFront"], [236, 2, 1, "", "facesLeft"], [236, 2, 1, "", "facesRight"], [236, 2, 1, "", "facesTop"], [236, 2, 1, "", "facesUp"], [236, 2, 1, "", "x"], [236, 2, 1, "", "y"], [236, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom": [[236, 2, 1, "", "VTKCellDataSet"], [236, 2, 1, "", "VTKFaceDataSet"], [236, 3, 1, "", "__add__"], [236, 3, 1, "", "__div__"], [236, 3, 1, "", "__getstate__"], [236, 3, 1, "", "__mul__"], [236, 3, 1, "", "__radd__"], [236, 3, 1, "", "__repr__"], [236, 3, 1, "", "__rmul__"], [236, 3, 1, "", "__sub__"], [236, 3, 1, "", "__truediv__"], [236, 2, 1, "", "aspect2D"], [236, 2, 1, "", "cellCenters"], [236, 2, 1, "", "cellFaceIDs"], [236, 3, 1, "", "extrude"], [236, 2, 1, "", "facesBack"], [236, 2, 1, "", "facesBottom"], [236, 2, 1, "", "facesDown"], [236, 2, 1, "", "facesFront"], [236, 2, 1, "", "facesLeft"], [236, 2, 1, "", "facesRight"], [236, 2, 1, "", "facesTop"], [236, 2, 1, "", "facesUp"], [236, 2, 1, "", "x"], [236, 2, 1, "", "y"], [236, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D": [[237, 1, 1, "", "PeriodicGrid3D"], [237, 1, 1, "", "PeriodicGrid3DFrontBack"], [237, 1, 1, "", "PeriodicGrid3DLeftRight"], [237, 1, 1, "", "PeriodicGrid3DLeftRightFrontBack"], [237, 1, 1, "", "PeriodicGrid3DLeftRightTopBottom"], [237, 1, 1, "", "PeriodicGrid3DTopBottom"], [237, 1, 1, "", "PeriodicGrid3DTopBottomFrontBack"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3D": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.representations": [[239, 0, 0, "-", "abstractRepresentation"], [240, 0, 0, "-", "gridRepresentation"], [241, 0, 0, "-", "meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[242, 1, 1, "", "SkewedGrid2D"]], "fipy.meshes.skewedGrid2D.SkewedGrid2D": [[242, 2, 1, "", "VTKCellDataSet"], [242, 2, 1, "", "VTKFaceDataSet"], [242, 3, 1, "", "__add__"], [242, 3, 1, "", "__div__"], [242, 3, 1, "", "__getstate__"], [242, 3, 1, "", "__mul__"], [242, 3, 1, "", "__radd__"], [242, 3, 1, "", "__repr__"], [242, 3, 1, "", "__rmul__"], [242, 3, 1, "", "__sub__"], [242, 3, 1, "", "__truediv__"], [242, 2, 1, "", "aspect2D"], [242, 2, 1, "", "cellCenters"], [242, 2, 1, "", "cellFaceIDs"], [242, 3, 1, "", "extrude"], [242, 2, 1, "", "facesBack"], [242, 2, 1, "", "facesBottom"], [242, 2, 1, "", "facesDown"], [242, 2, 1, "", "facesFront"], [242, 2, 1, "", "facesLeft"], [242, 2, 1, "", "facesRight"], [242, 2, 1, "", "facesTop"], [242, 2, 1, "", "facesUp"], [242, 2, 1, "", "physicalShape"], [242, 2, 1, "", "x"], [242, 2, 1, "", "y"], [242, 2, 1, "", "z"]], "fipy.meshes.sphericalNonUniformGrid1D": [[243, 1, 1, "", "SphericalNonUniformGrid1D"]], "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D": [[243, 2, 1, "", "VTKCellDataSet"], [243, 2, 1, "", "VTKFaceDataSet"], [243, 3, 1, "", "__add__"], [243, 3, 1, "", "__div__"], [243, 3, 1, "", "__getstate__"], [243, 3, 1, "", "__mul__"], [243, 3, 1, "", "__radd__"], [243, 3, 1, "", "__repr__"], [243, 3, 1, "", "__rmul__"], [243, 3, 1, "", "__sub__"], [243, 3, 1, "", "__truediv__"], [243, 2, 1, "", "aspect2D"], [243, 2, 1, "", "cellCenters"], [243, 2, 1, "", "cellFaceIDs"], [243, 2, 1, "", "facesBack"], [243, 2, 1, "", "facesBottom"], [243, 2, 1, "", "facesDown"], [243, 2, 1, "", "facesFront"], [243, 2, 1, "", "facesLeft"], [243, 2, 1, "", "facesRight"], [243, 2, 1, "", "facesTop"], [243, 2, 1, "", "facesUp"], [243, 2, 1, "", "x"], [243, 2, 1, "", "y"], [243, 2, 1, "", "z"]], "fipy.meshes.sphericalUniformGrid1D": [[244, 1, 1, "", "SphericalUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D": [[244, 2, 1, "", "VTKCellDataSet"], [244, 2, 1, "", "VTKFaceDataSet"], [244, 3, 1, "", "__add__"], [244, 3, 1, "", "__div__"], [244, 3, 1, "", "__getstate__"], [244, 3, 1, "", "__radd__"], [244, 3, 1, "", "__repr__"], [244, 3, 1, "", "__sub__"], [244, 3, 1, "", "__truediv__"], [244, 2, 1, "", "aspect2D"], [244, 2, 1, "", "cellCenters"], [244, 2, 1, "", "cellFaceIDs"], [244, 2, 1, "", "exteriorFaces"], [244, 2, 1, "", "facesBack"], [244, 2, 1, "", "facesBottom"], [244, 2, 1, "", "facesDown"], [244, 2, 1, "", "facesFront"], [244, 2, 1, "", "facesLeft"], [244, 2, 1, "", "facesRight"], [244, 2, 1, "", "facesTop"], [244, 2, 1, "", "facesUp"], [244, 2, 1, "", "x"], [244, 2, 1, "", "y"], [244, 2, 1, "", "z"]], "fipy.meshes.topologies": [[247, 0, 0, "-", "abstractTopology"], [248, 0, 0, "-", "gridTopology"], [249, 0, 0, "-", "meshTopology"]], "fipy.meshes.tri2D": [[250, 1, 1, "", "Tri2D"]], "fipy.meshes.tri2D.Tri2D": [[250, 2, 1, "", "VTKCellDataSet"], [250, 2, 1, "", "VTKFaceDataSet"], [250, 3, 1, "", "__add__"], [250, 3, 1, "", "__div__"], [250, 3, 1, "", "__getstate__"], [250, 3, 1, "", "__mul__"], [250, 3, 1, "", "__radd__"], [250, 3, 1, "", "__repr__"], [250, 3, 1, "", "__rmul__"], [250, 3, 1, "", "__sub__"], [250, 3, 1, "", "__truediv__"], [250, 2, 1, "", "aspect2D"], [250, 2, 1, "", "cellCenters"], [250, 2, 1, "", "cellFaceIDs"], [250, 3, 1, "", "extrude"], [250, 2, 1, "", "facesBack"], [250, 2, 1, "", "facesBottom"], [250, 2, 1, "", "facesDown"], [250, 2, 1, "", "facesFront"], [250, 2, 1, "", "facesLeft"], [250, 2, 1, "", "facesRight"], [250, 2, 1, "", "facesTop"], [250, 2, 1, "", "facesUp"], [250, 2, 1, "", "physicalShape"], [250, 2, 1, "", "x"], [250, 2, 1, "", "y"], [250, 2, 1, "", "z"]], "fipy.meshes.uniformGrid": [[251, 1, 1, "", "UniformGrid"]], "fipy.meshes.uniformGrid.UniformGrid": [[251, 2, 1, "", "VTKCellDataSet"], [251, 2, 1, "", "VTKFaceDataSet"], [251, 3, 1, "", "__add__"], [251, 3, 1, "", "__div__"], [251, 3, 1, "", "__getstate__"], [251, 3, 1, "", "__radd__"], [251, 3, 1, "", "__repr__"], [251, 3, 1, "", "__sub__"], [251, 3, 1, "", "__truediv__"], [251, 2, 1, "", "aspect2D"], [251, 2, 1, "", "cellCenters"], [251, 2, 1, "", "cellFaceIDs"], [251, 2, 1, "", "facesBack"], [251, 2, 1, "", "facesBottom"], [251, 2, 1, "", "facesDown"], [251, 2, 1, "", "facesFront"], [251, 2, 1, "", "facesLeft"], [251, 2, 1, "", "facesRight"], [251, 2, 1, "", "facesTop"], [251, 2, 1, "", "facesUp"], [251, 2, 1, "", "x"], [251, 2, 1, "", "y"], [251, 2, 1, "", "z"]], "fipy.meshes.uniformGrid1D": [[252, 1, 1, "", "UniformGrid1D"]], "fipy.meshes.uniformGrid1D.UniformGrid1D": [[252, 2, 1, "", "VTKCellDataSet"], [252, 2, 1, "", "VTKFaceDataSet"], [252, 3, 1, "", "__add__"], [252, 3, 1, "", "__div__"], [252, 3, 1, "", "__getstate__"], [252, 3, 1, "", "__radd__"], [252, 3, 1, "", "__repr__"], [252, 3, 1, "", "__sub__"], [252, 3, 1, "", "__truediv__"], [252, 2, 1, "", "aspect2D"], [252, 2, 1, "", "cellCenters"], [252, 2, 1, "", "cellFaceIDs"], [252, 2, 1, "", "exteriorFaces"], [252, 2, 1, "", "facesBack"], [252, 2, 1, "", "facesBottom"], [252, 2, 1, "", "facesDown"], [252, 2, 1, "", "facesFront"], [252, 2, 1, "", "facesLeft"], [252, 2, 1, "", "facesRight"], [252, 2, 1, "", "facesTop"], [252, 2, 1, "", "facesUp"], [252, 2, 1, "", "x"], [252, 2, 1, "", "y"], [252, 2, 1, "", "z"]], "fipy.meshes.uniformGrid2D": [[253, 1, 1, "", "UniformGrid2D"]], "fipy.meshes.uniformGrid2D.UniformGrid2D": [[253, 2, 1, "", "VTKCellDataSet"], [253, 2, 1, "", "VTKFaceDataSet"], [253, 3, 1, "", "__add__"], [253, 3, 1, "", "__div__"], [253, 3, 1, "", "__getstate__"], [253, 3, 1, "", "__radd__"], [253, 3, 1, "", "__repr__"], [253, 3, 1, "", "__sub__"], [253, 3, 1, "", "__truediv__"], [253, 2, 1, "", "aspect2D"], [253, 2, 1, "", "cellCenters"], [253, 2, 1, "", "cellFaceIDs"], [253, 2, 1, "", "facesBack"], [253, 2, 1, "", "facesBottom"], [253, 2, 1, "", "facesDown"], [253, 2, 1, "", "facesFront"], [253, 2, 1, "", "facesLeft"], [253, 2, 1, "", "facesRight"], [253, 2, 1, "", "facesTop"], [253, 2, 1, "", "facesUp"], [253, 2, 1, "", "x"], [253, 2, 1, "", "y"], [253, 2, 1, "", "z"]], "fipy.meshes.uniformGrid3D": [[254, 1, 1, "", "UniformGrid3D"]], "fipy.meshes.uniformGrid3D.UniformGrid3D": [[254, 2, 1, "", "VTKCellDataSet"], [254, 2, 1, "", "VTKFaceDataSet"], [254, 3, 1, "", "__add__"], [254, 3, 1, "", "__div__"], [254, 3, 1, "", "__getstate__"], [254, 3, 1, "", "__radd__"], [254, 3, 1, "", "__repr__"], [254, 3, 1, "", "__sub__"], [254, 3, 1, "", "__truediv__"], [254, 2, 1, "", "aspect2D"], [254, 2, 1, "", "cellCenters"], [254, 2, 1, "", "cellFaceIDs"], [254, 2, 1, "", "facesBack"], [254, 2, 1, "", "facesBottom"], [254, 2, 1, "", "facesDown"], [254, 2, 1, "", "facesFront"], [254, 2, 1, "", "facesLeft"], [254, 2, 1, "", "facesRight"], [254, 2, 1, "", "facesTop"], [254, 2, 1, "", "facesUp"], [254, 2, 1, "", "x"], [254, 2, 1, "", "y"], [254, 2, 1, "", "z"]], "fipy.solvers": [[255, 6, 1, "", "DefaultAsymmetricSolver"], [255, 6, 1, "", "DefaultSolver"], [255, 6, 1, "", "DummySolver"], [255, 6, 1, "", "GeneralSolver"], [255, 5, 1, "", "SerialSolverError"], [256, 0, 0, "-", "convergence"], [257, 0, 0, "-", "petsc"], [280, 0, 0, "-", "preconditioner"], [281, 0, 0, "-", "pyAMG"], [284, 0, 0, "-", "pyamgx"], [296, 0, 0, "-", "scipy"], [309, 0, 0, "-", "solver"], [310, 0, 0, "-", "test"], [311, 0, 0, "-", "trilinos"]], "fipy.solvers.SerialSolverError": [[255, 6, 1, "", "__cause__"], [255, 6, 1, "", "__context__"], [255, 3, 1, "", "__delattr__"], [255, 3, 1, "", "__getattribute__"], [255, 3, 1, "", "__reduce__"], [255, 3, 1, "", "__repr__"], [255, 3, 1, "", "__setattr__"], [255, 3, 1, "", "__str__"], [255, 3, 1, "", "add_note"], [255, 3, 1, "", "with_traceback"]], "fipy.solvers.convergence": [[256, 1, 1, "", "AbsoluteToleranceConvergence"], [256, 1, 1, "", "BreakdownDivergence"], [256, 1, 1, "", "Convergence"], [256, 1, 1, "", "ConvergenceBase"], [256, 1, 1, "", "Divergence"], [256, 5, 1, "", "DivergenceWarning"], [256, 1, 1, "", "HappyBreakdownConvergence"], [256, 1, 1, "", "IllConditionedDivergence"], [256, 1, 1, "", "IllConditionedPreconditionerDivergence"], [256, 1, 1, "", "IteratingConvergence"], [256, 1, 1, "", "IterationConvergence"], [256, 1, 1, "", "IterationDivergence"], [256, 1, 1, "", "LossOfAccuracyConvergence"], [256, 1, 1, "", "NullDivergence"], [256, 1, 1, "", "OutOfRangeDivergence"], [256, 1, 1, "", "PreconditioningDivergence"], [256, 1, 1, "", "RHSZeroConvergence"], [256, 1, 1, "", "RelativeToleranceConvergence"], [256, 1, 1, "", "StagnatedDivergence"], [256, 1, 1, "", "ToleranceDivergence"]], "fipy.solvers.convergence.AbsoluteToleranceConvergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.BreakdownDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.Convergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ConvergenceBase": [[256, 3, 1, "", "__str__"], [256, 6, 1, "", "actual_code"], [256, 6, 1, "", "criterion"], [256, 6, 1, "", "iterations"], [256, 6, 1, "", "residual"], [256, 6, 1, "", "solver"], [256, 6, 1, "", "status_code"], [256, 6, 1, "", "status_name"], [256, 6, 1, "", "tolerance_scale"]], "fipy.solvers.convergence.Divergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.DivergenceWarning": [[256, 6, 1, "", "__cause__"], [256, 6, 1, "", "__context__"], [256, 3, 1, "", "__delattr__"], [256, 3, 1, "", "__getattribute__"], [256, 3, 1, "", "__reduce__"], [256, 3, 1, "", "__repr__"], [256, 3, 1, "", "__setattr__"], [256, 3, 1, "", "__str__"], [256, 3, 1, "", "add_note"], [256, 3, 1, "", "with_traceback"]], "fipy.solvers.convergence.HappyBreakdownConvergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedPreconditionerDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IteratingConvergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationConvergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.LossOfAccuracyConvergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.NullDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.OutOfRangeDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.PreconditioningDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RHSZeroConvergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RelativeToleranceConvergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.StagnatedDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ToleranceDivergence": [[256, 3, 1, "", "__str__"]], "fipy.solvers.petsc": [[258, 0, 0, "-", "comms"], [262, 0, 0, "-", "dummySolver"], [263, 0, 0, "-", "linearBicgSolver"], [264, 0, 0, "-", "linearCGSSolver"], [265, 0, 0, "-", "linearCGSolver"], [266, 0, 0, "-", "linearGMRESSolver"], [267, 0, 0, "-", "linearLUSolver"], [268, 0, 0, "-", "petscConvergence"], [269, 0, 0, "-", "petscKrylovSolver"], [270, 0, 0, "-", "petscSolver"], [271, 0, 0, "-", "preconditioners"]], "fipy.solvers.petsc.comms": [[259, 0, 0, "-", "parallelPETScCommWrapper"], [260, 0, 0, "-", "petscCommWrapper"], [261, 0, 0, "-", "serialPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[259, 1, 1, "", "ParallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper": [[259, 3, 1, "", "__getstate__"], [259, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[260, 1, 1, "", "PETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper": [[260, 3, 1, "", "__getstate__"], [260, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[261, 1, 1, "", "SerialPETScCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper": [[261, 3, 1, "", "__getstate__"], [261, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.dummySolver": [[262, 1, 1, "", "DummySolver"]], "fipy.solvers.petsc.dummySolver.DummySolver": [[262, 6, 1, "", "DEFAULT_ITERATIONS"], [262, 6, 1, "", "DEFAULT_PRECONDITIONER"], [262, 6, 1, "", "DEFAULT_TOLERANCE"], [262, 6, 1, "", "LEGACY_TOLERANCE"], [262, 3, 1, "", "__repr__"], [262, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearBicgSolver": [[263, 1, 1, "", "LinearBicgSolver"]], "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver": [[263, 6, 1, "", "DEFAULT_ITERATIONS"], [263, 6, 1, "", "DEFAULT_PRECONDITIONER"], [263, 6, 1, "", "DEFAULT_TOLERANCE"], [263, 6, 1, "", "LEGACY_TOLERANCE"], [263, 3, 1, "", "__repr__"], [263, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearCGSSolver": [[264, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver": [[264, 6, 1, "", "DEFAULT_ITERATIONS"], [264, 6, 1, "", "DEFAULT_PRECONDITIONER"], [264, 6, 1, "", "DEFAULT_TOLERANCE"], [264, 6, 1, "", "LEGACY_TOLERANCE"], [264, 3, 1, "", "__repr__"], [264, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearCGSolver": [[265, 1, 1, "", "LinearCGSolver"], [265, 6, 1, "", "LinearPCGSolver"]], "fipy.solvers.petsc.linearCGSolver.LinearCGSolver": [[265, 6, 1, "", "DEFAULT_ITERATIONS"], [265, 6, 1, "", "DEFAULT_PRECONDITIONER"], [265, 6, 1, "", "DEFAULT_TOLERANCE"], [265, 6, 1, "", "LEGACY_TOLERANCE"], [265, 3, 1, "", "__repr__"], [265, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearGMRESSolver": [[266, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver": [[266, 6, 1, "", "DEFAULT_ITERATIONS"], [266, 6, 1, "", "DEFAULT_PRECONDITIONER"], [266, 6, 1, "", "DEFAULT_TOLERANCE"], [266, 6, 1, "", "LEGACY_TOLERANCE"], [266, 3, 1, "", "__repr__"], [266, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearLUSolver": [[267, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.petsc.linearLUSolver.LinearLUSolver": [[267, 6, 1, "", "DEFAULT_ITERATIONS"], [267, 6, 1, "", "DEFAULT_PRECONDITIONER"], [267, 6, 1, "", "DEFAULT_TOLERANCE"], [267, 6, 1, "", "LEGACY_TOLERANCE"], [267, 3, 1, "", "__repr__"], [267, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscConvergence": [[268, 1, 1, "", "KSP_AbsoluteToleranceConvergence"], [268, 1, 1, "", "KSP_BreakdownBICGDivergence"], [268, 1, 1, "", "KSP_BreakdownDivergence"], [268, 1, 1, "", "KSP_HappyBreakdownConvergence"], [268, 1, 1, "", "KSP_IndefiniteMatrixDivergence"], [268, 1, 1, "", "KSP_IndefinitePreconditionerDivergence"], [268, 1, 1, "", "KSP_IteratingConvergence"], [268, 1, 1, "", "KSP_IterationConvergence"], [268, 1, 1, "", "KSP_IterationDivergence"], [268, 1, 1, "", "KSP_NanOrInfDivergence"], [268, 1, 1, "", "KSP_NonSymmetricDivergence"], [268, 1, 1, "", "KSP_NormalAbsoluteToleranceConvergence"], [268, 1, 1, "", "KSP_NormalRelativeToleranceConvergence"], [268, 1, 1, "", "KSP_NullDivergence"], [268, 1, 1, "", "KSP_PreconditioningDivergence"], [268, 1, 1, "", "KSP_RelativeToleranceConvergence"], [268, 1, 1, "", "KSP_ToleranceDivergence"]], "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence": [[268, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscKrylovSolver": [[269, 1, 1, "", "PETScKrylovSolver"]], "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver": [[269, 6, 1, "", "DEFAULT_ITERATIONS"], [269, 6, 1, "", "DEFAULT_PRECONDITIONER"], [269, 6, 1, "", "DEFAULT_TOLERANCE"], [269, 6, 1, "", "LEGACY_TOLERANCE"], [269, 3, 1, "", "__repr__"], [269, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscSolver": [[270, 1, 1, "", "PETScSolver"]], "fipy.solvers.petsc.petscSolver.PETScSolver": [[270, 6, 1, "", "DEFAULT_ITERATIONS"], [270, 6, 1, "", "DEFAULT_PRECONDITIONER"], [270, 6, 1, "", "DEFAULT_TOLERANCE"], [270, 6, 1, "", "LEGACY_TOLERANCE"], [270, 3, 1, "", "__repr__"], [270, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.preconditioners": [[271, 1, 1, "", "DefaultPreconditioner"], [271, 1, 1, "", "HYPREPreconditioner"], [271, 1, 1, "", "ICPreconditioner"], [271, 1, 1, "", "ILUPreconditioner"], [271, 1, 1, "", "JacobiPreconditioner"], [271, 1, 1, "", "LUPreconditioner"], [271, 1, 1, "", "SSORPreconditioner"], [272, 0, 0, "-", "defaultPreconditioner"], [273, 0, 0, "-", "hyprePreconditioner"], [274, 0, 0, "-", "icPreconditioner"], [275, 0, 0, "-", "iluPreconditioner"], [276, 0, 0, "-", "jacobiPreconditioner"], [277, 0, 0, "-", "luPreconditioner"], [278, 0, 0, "-", "petscPreconditioner"], [279, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[272, 1, 1, "", "DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.hyprePreconditioner": [[273, 1, 1, "", "HYPREPreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[274, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[275, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[276, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[277, 1, 1, "", "LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[278, 1, 1, "", "PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[279, 1, 1, "", "SSORPreconditioner"]], "fipy.solvers.preconditioner": [[280, 1, 1, "", "MatrixModifyingPreconditioner"], [280, 1, 1, "", "Preconditioner"], [280, 1, 1, "", "SolverModifyingPreconditioner"]], "fipy.solvers.pyAMG": [[282, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyAMG.preconditioners": [[283, 0, 0, "-", "smoothedAggregationPreconditioner"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[283, 1, 1, "", "SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[285, 0, 0, "-", "aggregationAMGSolver"], [286, 0, 0, "-", "classicalAMGSolver"], [287, 0, 0, "-", "linearBiCGStabSolver"], [288, 0, 0, "-", "linearCGSolver"], [289, 0, 0, "-", "linearFGMRESSolver"], [290, 0, 0, "-", "linearGMRESSolver"], [291, 0, 0, "-", "linearLUSolver"], [292, 0, 0, "-", "preconditioners"], [293, 0, 0, "-", "pyAMGXSolver"], [294, 0, 0, "-", "pyamgxConvergence"], [295, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[285, 1, 1, "", "AggregationAMGSolver"]], "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver": [[285, 6, 1, "", "DEFAULT_ITERATIONS"], [285, 6, 1, "", "DEFAULT_PRECONDITIONER"], [285, 6, 1, "", "DEFAULT_SMOOTHER"], [285, 6, 1, "", "DEFAULT_TOLERANCE"], [285, 6, 1, "", "LEGACY_TOLERANCE"], [285, 3, 1, "", "__repr__"], [285, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[286, 1, 1, "", "ClassicalAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver": [[286, 6, 1, "", "DEFAULT_ITERATIONS"], [286, 6, 1, "", "DEFAULT_PRECONDITIONER"], [286, 6, 1, "", "DEFAULT_SMOOTHER"], [286, 6, 1, "", "DEFAULT_TOLERANCE"], [286, 6, 1, "", "LEGACY_TOLERANCE"], [286, 3, 1, "", "__repr__"], [286, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[287, 1, 1, "", "LinearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver": [[287, 6, 1, "", "DEFAULT_ITERATIONS"], [287, 6, 1, "", "DEFAULT_PRECONDITIONER"], [287, 6, 1, "", "DEFAULT_SMOOTHER"], [287, 6, 1, "", "DEFAULT_TOLERANCE"], [287, 6, 1, "", "LEGACY_TOLERANCE"], [287, 3, 1, "", "__repr__"], [287, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearCGSolver": [[288, 1, 1, "", "LinearCGSolver"], [288, 6, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver": [[288, 6, 1, "", "DEFAULT_ITERATIONS"], [288, 6, 1, "", "DEFAULT_PRECONDITIONER"], [288, 6, 1, "", "DEFAULT_SMOOTHER"], [288, 6, 1, "", "DEFAULT_TOLERANCE"], [288, 6, 1, "", "LEGACY_TOLERANCE"], [288, 3, 1, "", "__repr__"], [288, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[289, 1, 1, "", "LinearFGMRESSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver": [[289, 6, 1, "", "DEFAULT_ITERATIONS"], [289, 6, 1, "", "DEFAULT_PRECONDITIONER"], [289, 6, 1, "", "DEFAULT_SMOOTHER"], [289, 6, 1, "", "DEFAULT_TOLERANCE"], [289, 6, 1, "", "LEGACY_TOLERANCE"], [289, 3, 1, "", "__repr__"], [289, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[290, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver": [[290, 6, 1, "", "DEFAULT_ITERATIONS"], [290, 6, 1, "", "DEFAULT_PRECONDITIONER"], [290, 6, 1, "", "DEFAULT_SMOOTHER"], [290, 6, 1, "", "DEFAULT_TOLERANCE"], [290, 6, 1, "", "LEGACY_TOLERANCE"], [290, 3, 1, "", "__repr__"], [290, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearLUSolver": [[291, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver": [[291, 6, 1, "", "DEFAULT_ITERATIONS"], [291, 6, 1, "", "DEFAULT_PRECONDITIONER"], [291, 6, 1, "", "DEFAULT_TOLERANCE"], [291, 6, 1, "", "LEGACY_TOLERANCE"], [291, 3, 1, "", "__repr__"], [291, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.preconditioners": [[292, 1, 1, "", "AMGPreconditioner"], [292, 1, 1, "", "AggregationAMGPreconditioner"], [292, 1, 1, "", "BiCGStabPreconditioner"], [292, 1, 1, "", "CGPreconditioner"], [292, 1, 1, "", "DILUPreconditioner"], [292, 1, 1, "", "FGMRESPreconditioner"], [292, 1, 1, "", "GaussSeidelPreconditioner"], [292, 1, 1, "", "ILUPreconditioner"], [292, 1, 1, "", "JacobiPreconditioner"], [292, 1, 1, "", "PolynomialPreconditioner"], [292, 1, 1, "", "PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[293, 1, 1, "", "PyAMGXSolver"]], "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver": [[293, 6, 1, "", "DEFAULT_ITERATIONS"], [293, 6, 1, "", "DEFAULT_PRECONDITIONER"], [293, 6, 1, "", "DEFAULT_SMOOTHER"], [293, 6, 1, "", "DEFAULT_TOLERANCE"], [293, 6, 1, "", "LEGACY_TOLERANCE"], [293, 3, 1, "", "__repr__"], [293, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[294, 1, 1, "", "pyamgx_BreakdownDivergence"], [294, 1, 1, "", "pyamgx_Convergence"], [294, 1, 1, "", "pyamgx_IterationDivergence"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence": [[294, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence": [[294, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence": [[294, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.smoothers": [[295, 1, 1, "", "Smoother"]], "fipy.solvers.scipy": [[297, 0, 0, "-", "linearBicgstabSolver"], [298, 0, 0, "-", "linearCGSSolver"], [299, 0, 0, "-", "linearCGSolver"], [300, 0, 0, "-", "linearGMRESSolver"], [301, 0, 0, "-", "linearLUSolver"], [302, 0, 0, "-", "preconditioners"], [306, 0, 0, "-", "scipyConvergence"], [307, 0, 0, "-", "scipyKrylovSolver"], [308, 0, 0, "-", "scipySolver"]], "fipy.solvers.scipy.linearBicgstabSolver": [[297, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver": [[297, 6, 1, "", "DEFAULT_ITERATIONS"], [297, 6, 1, "", "DEFAULT_PRECONDITIONER"], [297, 6, 1, "", "DEFAULT_TOLERANCE"], [297, 6, 1, "", "LEGACY_TOLERANCE"], [297, 3, 1, "", "__repr__"], [297, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearCGSSolver": [[298, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver": [[298, 6, 1, "", "DEFAULT_ITERATIONS"], [298, 6, 1, "", "DEFAULT_PRECONDITIONER"], [298, 6, 1, "", "DEFAULT_TOLERANCE"], [298, 6, 1, "", "LEGACY_TOLERANCE"], [298, 3, 1, "", "__repr__"], [298, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearCGSolver": [[299, 1, 1, "", "LinearCGSolver"], [299, 6, 1, "", "LinearPCGSolver"]], "fipy.solvers.scipy.linearCGSolver.LinearCGSolver": [[299, 6, 1, "", "DEFAULT_ITERATIONS"], [299, 6, 1, "", "DEFAULT_PRECONDITIONER"], [299, 6, 1, "", "DEFAULT_TOLERANCE"], [299, 6, 1, "", "LEGACY_TOLERANCE"], [299, 3, 1, "", "__repr__"], [299, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearGMRESSolver": [[300, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver": [[300, 6, 1, "", "DEFAULT_ITERATIONS"], [300, 6, 1, "", "DEFAULT_PRECONDITIONER"], [300, 6, 1, "", "DEFAULT_TOLERANCE"], [300, 6, 1, "", "LEGACY_TOLERANCE"], [300, 3, 1, "", "__repr__"], [300, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearLUSolver": [[301, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.scipy.linearLUSolver.LinearLUSolver": [[301, 6, 1, "", "DEFAULT_ITERATIONS"], [301, 6, 1, "", "DEFAULT_PRECONDITIONER"], [301, 6, 1, "", "DEFAULT_TOLERANCE"], [301, 6, 1, "", "LEGACY_TOLERANCE"], [301, 3, 1, "", "__repr__"], [301, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.preconditioners": [[302, 1, 1, "", "ILUPreconditioner"], [302, 1, 1, "", "JacobiPreconditioner"], [303, 0, 0, "-", "iluPreconditioner"], [304, 0, 0, "-", "jacobiPreconditioner"], [305, 0, 0, "-", "scipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[303, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[304, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[305, 1, 1, "", "ScipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[306, 1, 1, "", "SciPy_BreakdownDivergence"], [306, 1, 1, "", "SciPy_Convergence"], [306, 1, 1, "", "SciPy_IterationDivergence"]], "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence": [[306, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence": [[306, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence": [[306, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyKrylovSolver": [[307, 1, 1, "", "ScipyKrylovSolver"]], "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver": [[307, 6, 1, "", "DEFAULT_ITERATIONS"], [307, 6, 1, "", "DEFAULT_PRECONDITIONER"], [307, 6, 1, "", "DEFAULT_TOLERANCE"], [307, 6, 1, "", "LEGACY_TOLERANCE"], [307, 3, 1, "", "__repr__"], [307, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.scipySolver": [[308, 1, 1, "", "ScipySolver"]], "fipy.solvers.scipy.scipySolver.ScipySolver": [[308, 6, 1, "", "DEFAULT_ITERATIONS"], [308, 6, 1, "", "DEFAULT_PRECONDITIONER"], [308, 6, 1, "", "DEFAULT_TOLERANCE"], [308, 6, 1, "", "LEGACY_TOLERANCE"], [308, 3, 1, "", "__repr__"], [308, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver": [[309, 5, 1, "", "BreakdownWarning"], [309, 5, 1, "", "IllConditionedPreconditionerWarning"], [309, 5, 1, "", "IllegalInputOrBreakdownWarning"], [309, 5, 1, "", "LossOfPrecisionWarning"], [309, 5, 1, "", "MatrixIllConditionedWarning"], [309, 5, 1, "", "MaximumIterationWarning"], [309, 5, 1, "", "NormalConvergence"], [309, 5, 1, "", "ParameterWarning"], [309, 5, 1, "", "PreconditionerNotPositiveDefiniteWarning"], [309, 5, 1, "", "PreconditionerWarning"], [309, 5, 1, "", "ScalarQuantityOutOfRangeWarning"], [309, 1, 1, "", "Solver"], [309, 5, 1, "", "SolverConvergenceWarning"], [309, 5, 1, "", "StagnatedSolverWarning"]], "fipy.solvers.solver.BreakdownWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllConditionedPreconditionerWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllegalInputOrBreakdownWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.LossOfPrecisionWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MatrixIllConditionedWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MaximumIterationWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.NormalConvergence": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ParameterWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.Solver": [[309, 6, 1, "", "DEFAULT_ITERATIONS"], [309, 6, 1, "", "DEFAULT_PRECONDITIONER"], [309, 6, 1, "", "DEFAULT_TOLERANCE"], [309, 6, 1, "", "LEGACY_TOLERANCE"], [309, 3, 1, "", "__repr__"], [309, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver.SolverConvergenceWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.StagnatedSolverWarning": [[309, 6, 1, "", "__cause__"], [309, 6, 1, "", "__context__"], [309, 3, 1, "", "__delattr__"], [309, 3, 1, "", "__getattribute__"], [309, 3, 1, "", "__reduce__"], [309, 3, 1, "", "__repr__"], [309, 3, 1, "", "__setattr__"], [309, 3, 1, "", "__str__"], [309, 3, 1, "", "add_note"], [309, 3, 1, "", "with_traceback"]], "fipy.solvers.trilinos": [[312, 0, 0, "-", "aztecConvergence"], [313, 0, 0, "-", "comms"], [317, 0, 0, "-", "linearBicgstabSolver"], [318, 0, 0, "-", "linearCGSSolver"], [319, 0, 0, "-", "linearCGSolver"], [320, 0, 0, "-", "linearGMRESSolver"], [321, 0, 0, "-", "linearLUSolver"], [322, 0, 0, "-", "preconditioners"], [335, 0, 0, "-", "trilinosAztecOOSolver"], [336, 0, 0, "-", "trilinosMLTest"], [337, 0, 0, "-", "trilinosNonlinearSolver"], [338, 0, 0, "-", "trilinosSolver"]], "fipy.solvers.trilinos.aztecConvergence": [[312, 1, 1, "", "AZ_BreakdownDivergence"], [312, 1, 1, "", "AZ_IllConditionedDivergence"], [312, 1, 1, "", "AZ_IterationDivergence"], [312, 1, 1, "", "AZ_LossOfAccuracyConvergence"], [312, 1, 1, "", "AZ_NormalConvergence"], [312, 1, 1, "", "AZ_ParameterDivergence"]], "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence": [[312, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence": [[312, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence": [[312, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence": [[312, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence": [[312, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence": [[312, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.comms": [[314, 0, 0, "-", "epetraCommWrapper"], [315, 0, 0, "-", "parallelEpetraCommWrapper"], [316, 0, 0, "-", "serialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[314, 1, 1, "", "EpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper": [[314, 3, 1, "", "__getstate__"], [314, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[315, 1, 1, "", "ParallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper": [[315, 3, 1, "", "MaxAll"], [315, 3, 1, "", "MinAll"], [315, 3, 1, "", "__getstate__"], [315, 3, 1, "", "__repr__"], [315, 3, 1, "", "allgather"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[316, 1, 1, "", "SerialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper": [[316, 3, 1, "", "__getstate__"], [316, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[317, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver": [[317, 6, 1, "", "DEFAULT_ITERATIONS"], [317, 6, 1, "", "DEFAULT_PRECONDITIONER"], [317, 6, 1, "", "DEFAULT_TOLERANCE"], [317, 6, 1, "", "LEGACY_TOLERANCE"], [317, 3, 1, "", "__repr__"], [317, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearCGSSolver": [[318, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver": [[318, 6, 1, "", "DEFAULT_ITERATIONS"], [318, 6, 1, "", "DEFAULT_PRECONDITIONER"], [318, 6, 1, "", "DEFAULT_TOLERANCE"], [318, 6, 1, "", "LEGACY_TOLERANCE"], [318, 3, 1, "", "__repr__"], [318, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearCGSolver": [[319, 1, 1, "", "LinearCGSolver"], [319, 6, 1, "", "LinearPCGSolver"]], "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver": [[319, 6, 1, "", "DEFAULT_ITERATIONS"], [319, 6, 1, "", "DEFAULT_PRECONDITIONER"], [319, 6, 1, "", "DEFAULT_TOLERANCE"], [319, 6, 1, "", "LEGACY_TOLERANCE"], [319, 3, 1, "", "__repr__"], [319, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearGMRESSolver": [[320, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver": [[320, 6, 1, "", "DEFAULT_ITERATIONS"], [320, 6, 1, "", "DEFAULT_PRECONDITIONER"], [320, 6, 1, "", "DEFAULT_TOLERANCE"], [320, 6, 1, "", "LEGACY_TOLERANCE"], [320, 3, 1, "", "__repr__"], [320, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearLUSolver": [[321, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver": [[321, 6, 1, "", "DEFAULT_ITERATIONS"], [321, 6, 1, "", "DEFAULT_PRECONDITIONER"], [321, 6, 1, "", "DEFAULT_TOLERANCE"], [321, 6, 1, "", "LEGACY_TOLERANCE"], [321, 3, 1, "", "__repr__"], [321, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.preconditioners": [[322, 1, 1, "", "DomDecompPreconditioner"], [322, 1, 1, "", "ICPreconditioner"], [322, 1, 1, "", "ILUPreconditioner"], [322, 1, 1, "", "JacobiPreconditioner"], [322, 1, 1, "", "MultilevelDDMLPreconditioner"], [322, 1, 1, "", "MultilevelDDPreconditioner"], [322, 1, 1, "", "MultilevelNSSAPreconditioner"], [322, 1, 1, "", "MultilevelSAPreconditioner"], [322, 1, 1, "", "MultilevelSGSPreconditioner"], [322, 1, 1, "", "MultilevelSolverSmootherPreconditioner"], [323, 0, 0, "-", "domDecompPreconditioner"], [324, 0, 0, "-", "icPreconditioner"], [325, 0, 0, "-", "iluPreconditioner"], [326, 0, 0, "-", "jacobiPreconditioner"], [327, 0, 0, "-", "multilevelDDMLPreconditioner"], [328, 0, 0, "-", "multilevelDDPreconditioner"], [329, 0, 0, "-", "multilevelNSSAPreconditioner"], [330, 0, 0, "-", "multilevelPreconditioner"], [331, 0, 0, "-", "multilevelSAPreconditioner"], [332, 0, 0, "-", "multilevelSGSPreconditioner"], [333, 0, 0, "-", "multilevelSolverSmootherPreconditioner"], [334, 0, 0, "-", "trilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[323, 1, 1, "", "DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[324, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[325, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[326, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[327, 1, 1, "", "MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[328, 1, 1, "", "MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[329, 1, 1, "", "MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[330, 1, 1, "", "MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[331, 1, 1, "", "MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[332, 1, 1, "", "MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[333, 1, 1, "", "MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[334, 1, 1, "", "TrilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[335, 1, 1, "", "TrilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver": [[335, 6, 1, "", "DEFAULT_ITERATIONS"], [335, 6, 1, "", "DEFAULT_PRECONDITIONER"], [335, 6, 1, "", "DEFAULT_TOLERANCE"], [335, 6, 1, "", "LEGACY_TOLERANCE"], [335, 3, 1, "", "__repr__"], [335, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosMLTest": [[336, 1, 1, "", "TrilinosMLTest"]], "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest": [[336, 6, 1, "", "DEFAULT_ITERATIONS"], [336, 6, 1, "", "DEFAULT_PRECONDITIONER"], [336, 6, 1, "", "DEFAULT_TOLERANCE"], [336, 6, 1, "", "LEGACY_TOLERANCE"], [336, 3, 1, "", "__repr__"], [336, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[337, 1, 1, "", "TrilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver": [[337, 6, 1, "", "DEFAULT_ITERATIONS"], [337, 6, 1, "", "DEFAULT_PRECONDITIONER"], [337, 6, 1, "", "DEFAULT_TOLERANCE"], [337, 6, 1, "", "LEGACY_TOLERANCE"], [337, 3, 1, "", "__repr__"], [337, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosSolver": [[338, 1, 1, "", "TrilinosSolver"]], "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver": [[338, 6, 1, "", "DEFAULT_ITERATIONS"], [338, 6, 1, "", "DEFAULT_PRECONDITIONER"], [338, 6, 1, "", "DEFAULT_TOLERANCE"], [338, 6, 1, "", "LEGACY_TOLERANCE"], [338, 3, 1, "", "__repr__"], [338, 2, 1, "", "default_tolerance"]], "fipy.steppers": [[339, 4, 1, "", "L1error"], [339, 4, 1, "", "L2error"], [339, 4, 1, "", "LINFerror"], [339, 4, 1, "", "error"], [340, 0, 0, "-", "pidStepper"], [341, 0, 0, "-", "pseudoRKQSStepper"], [339, 4, 1, "", "residual"], [342, 0, 0, "-", "stepper"], [339, 4, 1, "", "sweepMonotonic"]], "fipy.steppers.pidStepper": [[340, 4, 1, "", "PIDStepper"]], "fipy.steppers.pseudoRKQSStepper": [[341, 4, 1, "", "PseudoRKQSStepper"]], "fipy.steppers.stepper": [[342, 1, 1, "", "Stepper"]], "fipy.terms": [[343, 5, 1, "", "AbstractBaseClassError"], [343, 5, 1, "", "ExplicitVariableError"], [343, 5, 1, "", "IncorrectSolutionVariable"], [343, 5, 1, "", "SolutionVariableNumberError"], [343, 5, 1, "", "SolutionVariableRequiredError"], [343, 5, 1, "", "TermMultiplyError"], [343, 5, 1, "", "TransientTermError"], [343, 5, 1, "", "VectorCoeffError"], [344, 0, 0, "-", "abstractBinaryTerm"], [345, 0, 0, "-", "abstractConvectionTerm"], [346, 0, 0, "-", "abstractDiffusionTerm"], [347, 0, 0, "-", "abstractUpwindConvectionTerm"], [348, 0, 0, "-", "advectionTerm"], [349, 0, 0, "-", "asymmetricConvectionTerm"], [350, 0, 0, "-", "binaryTerm"], [351, 0, 0, "-", "cellTerm"], [352, 0, 0, "-", "centralDiffConvectionTerm"], [353, 0, 0, "-", "coupledBinaryTerm"], [354, 0, 0, "-", "diffusionTerm"], [355, 0, 0, "-", "diffusionTermCorrection"], [356, 0, 0, "-", "diffusionTermNoCorrection"], [357, 0, 0, "-", "explicitDiffusionTerm"], [358, 0, 0, "-", "explicitSourceTerm"], [359, 0, 0, "-", "explicitUpwindConvectionTerm"], [360, 0, 0, "-", "exponentialConvectionTerm"], [361, 0, 0, "-", "faceTerm"], [362, 0, 0, "-", "firstOrderAdvectionTerm"], [363, 0, 0, "-", "hybridConvectionTerm"], [364, 0, 0, "-", "implicitDiffusionTerm"], [365, 0, 0, "-", "implicitSourceTerm"], [366, 0, 0, "-", "nonDiffusionTerm"], [367, 0, 0, "-", "powerLawConvectionTerm"], [368, 0, 0, "-", "residualTerm"], [369, 0, 0, "-", "sourceTerm"], [370, 0, 0, "-", "term"], [371, 0, 0, "-", "test"], [372, 0, 0, "-", "transientTerm"], [373, 0, 0, "-", "unaryTerm"], [374, 0, 0, "-", "upwindConvectionTerm"], [375, 0, 0, "-", "vanLeerConvectionTerm"]], "fipy.terms.AbstractBaseClassError": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.ExplicitVariableError": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.IncorrectSolutionVariable": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableNumberError": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableRequiredError": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.TermMultiplyError": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.TransientTermError": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.VectorCoeffError": [[343, 6, 1, "", "__cause__"], [343, 6, 1, "", "__context__"], [343, 3, 1, "", "__delattr__"], [343, 3, 1, "", "__getattribute__"], [343, 3, 1, "", "__reduce__"], [343, 3, 1, "", "__repr__"], [343, 3, 1, "", "__setattr__"], [343, 3, 1, "", "__str__"], [343, 3, 1, "", "add_note"], [343, 3, 1, "", "with_traceback"]], "fipy.terms.advectionTerm": [[348, 1, 1, "", "AdvectionTerm"]], "fipy.terms.advectionTerm.AdvectionTerm": [[348, 2, 1, "", "RHSvector"], [348, 3, 1, "", "__eq__"], [348, 3, 1, "", "__hash__"], [348, 3, 1, "", "__mul__"], [348, 3, 1, "", "__neg__"], [348, 3, 1, "", "__repr__"], [348, 3, 1, "", "__rmul__"], [348, 3, 1, "", "cacheMatrix"], [348, 3, 1, "", "cacheRHSvector"], [348, 3, 1, "", "justErrorVector"], [348, 3, 1, "", "justResidualVector"], [348, 2, 1, "", "matrix"], [348, 3, 1, "", "residualVectorAndNorm"], [348, 3, 1, "", "solve"], [348, 3, 1, "", "sweep"]], "fipy.terms.cellTerm": [[351, 1, 1, "", "CellTerm"]], "fipy.terms.cellTerm.CellTerm": [[351, 2, 1, "", "RHSvector"], [351, 3, 1, "", "__eq__"], [351, 3, 1, "", "__hash__"], [351, 3, 1, "", "__mul__"], [351, 3, 1, "", "__neg__"], [351, 3, 1, "", "__repr__"], [351, 3, 1, "", "__rmul__"], [351, 3, 1, "", "cacheMatrix"], [351, 3, 1, "", "cacheRHSvector"], [351, 3, 1, "", "justErrorVector"], [351, 3, 1, "", "justResidualVector"], [351, 2, 1, "", "matrix"], [351, 3, 1, "", "residualVectorAndNorm"], [351, 3, 1, "", "solve"], [351, 3, 1, "", "sweep"]], "fipy.terms.centralDiffConvectionTerm": [[352, 1, 1, "", "CentralDifferenceConvectionTerm"]], "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm": [[352, 2, 1, "", "RHSvector"], [352, 3, 1, "", "__eq__"], [352, 3, 1, "", "__hash__"], [352, 3, 1, "", "__mul__"], [352, 3, 1, "", "__neg__"], [352, 3, 1, "", "__repr__"], [352, 3, 1, "", "__rmul__"], [352, 3, 1, "", "cacheMatrix"], [352, 3, 1, "", "cacheRHSvector"], [352, 3, 1, "", "justErrorVector"], [352, 3, 1, "", "justResidualVector"], [352, 2, 1, "", "matrix"], [352, 3, 1, "", "residualVectorAndNorm"], [352, 3, 1, "", "solve"], [352, 3, 1, "", "sweep"]], "fipy.terms.diffusionTerm": [[354, 1, 1, "", "DiffusionTerm"]], "fipy.terms.diffusionTerm.DiffusionTerm": [[354, 2, 1, "", "RHSvector"], [354, 3, 1, "", "__eq__"], [354, 3, 1, "", "__hash__"], [354, 3, 1, "", "__repr__"], [354, 3, 1, "", "cacheMatrix"], [354, 3, 1, "", "cacheRHSvector"], [354, 3, 1, "", "justErrorVector"], [354, 3, 1, "", "justResidualVector"], [354, 2, 1, "", "matrix"], [354, 3, 1, "", "residualVectorAndNorm"], [354, 3, 1, "", "solve"], [354, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermCorrection": [[355, 1, 1, "", "DiffusionTermCorrection"]], "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection": [[355, 2, 1, "", "RHSvector"], [355, 3, 1, "", "__eq__"], [355, 3, 1, "", "__hash__"], [355, 3, 1, "", "__repr__"], [355, 3, 1, "", "cacheMatrix"], [355, 3, 1, "", "cacheRHSvector"], [355, 3, 1, "", "justErrorVector"], [355, 3, 1, "", "justResidualVector"], [355, 2, 1, "", "matrix"], [355, 3, 1, "", "residualVectorAndNorm"], [355, 3, 1, "", "solve"], [355, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermNoCorrection": [[356, 1, 1, "", "DiffusionTermNoCorrection"]], "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection": [[356, 2, 1, "", "RHSvector"], [356, 3, 1, "", "__eq__"], [356, 3, 1, "", "__hash__"], [356, 3, 1, "", "__repr__"], [356, 3, 1, "", "cacheMatrix"], [356, 3, 1, "", "cacheRHSvector"], [356, 3, 1, "", "justErrorVector"], [356, 3, 1, "", "justResidualVector"], [356, 2, 1, "", "matrix"], [356, 3, 1, "", "residualVectorAndNorm"], [356, 3, 1, "", "solve"], [356, 3, 1, "", "sweep"]], "fipy.terms.explicitDiffusionTerm": [[357, 1, 1, "", "ExplicitDiffusionTerm"]], "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm": [[357, 2, 1, "", "RHSvector"], [357, 3, 1, "", "__eq__"], [357, 3, 1, "", "__hash__"], [357, 3, 1, "", "__repr__"], [357, 3, 1, "", "cacheMatrix"], [357, 3, 1, "", "cacheRHSvector"], [357, 3, 1, "", "justErrorVector"], [357, 3, 1, "", "justResidualVector"], [357, 2, 1, "", "matrix"], [357, 3, 1, "", "residualVectorAndNorm"], [357, 3, 1, "", "solve"], [357, 3, 1, "", "sweep"]], "fipy.terms.explicitUpwindConvectionTerm": [[359, 1, 1, "", "ExplicitUpwindConvectionTerm"]], "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm": [[359, 2, 1, "", "RHSvector"], [359, 3, 1, "", "__eq__"], [359, 3, 1, "", "__hash__"], [359, 3, 1, "", "__mul__"], [359, 3, 1, "", "__neg__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__rmul__"], [359, 3, 1, "", "cacheMatrix"], [359, 3, 1, "", "cacheRHSvector"], [359, 3, 1, "", "justErrorVector"], [359, 3, 1, "", "justResidualVector"], [359, 2, 1, "", "matrix"], [359, 3, 1, "", "residualVectorAndNorm"], [359, 3, 1, "", "solve"], [359, 3, 1, "", "sweep"]], "fipy.terms.exponentialConvectionTerm": [[360, 1, 1, "", "ExponentialConvectionTerm"]], "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm": [[360, 2, 1, "", "RHSvector"], [360, 3, 1, "", "__eq__"], [360, 3, 1, "", "__hash__"], [360, 3, 1, "", "__mul__"], [360, 3, 1, "", "__neg__"], [360, 3, 1, "", "__repr__"], [360, 3, 1, "", "__rmul__"], [360, 3, 1, "", "cacheMatrix"], [360, 3, 1, "", "cacheRHSvector"], [360, 3, 1, "", "justErrorVector"], [360, 3, 1, "", "justResidualVector"], [360, 2, 1, "", "matrix"], [360, 3, 1, "", "residualVectorAndNorm"], [360, 3, 1, "", "solve"], [360, 3, 1, "", "sweep"]], "fipy.terms.faceTerm": [[361, 1, 1, "", "FaceTerm"]], "fipy.terms.faceTerm.FaceTerm": [[361, 2, 1, "", "RHSvector"], [361, 3, 1, "", "__eq__"], [361, 3, 1, "", "__hash__"], [361, 3, 1, "", "__mul__"], [361, 3, 1, "", "__neg__"], [361, 3, 1, "", "__repr__"], [361, 3, 1, "", "__rmul__"], [361, 3, 1, "", "cacheMatrix"], [361, 3, 1, "", "cacheRHSvector"], [361, 3, 1, "", "justErrorVector"], [361, 3, 1, "", "justResidualVector"], [361, 2, 1, "", "matrix"], [361, 3, 1, "", "residualVectorAndNorm"], [361, 3, 1, "", "solve"], [361, 3, 1, "", "sweep"]], "fipy.terms.firstOrderAdvectionTerm": [[362, 1, 1, "", "FirstOrderAdvectionTerm"]], "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm": [[362, 2, 1, "", "RHSvector"], [362, 3, 1, "", "__eq__"], [362, 3, 1, "", "__hash__"], [362, 3, 1, "", "__mul__"], [362, 3, 1, "", "__neg__"], [362, 3, 1, "", "__repr__"], [362, 3, 1, "", "__rmul__"], [362, 3, 1, "", "cacheMatrix"], [362, 3, 1, "", "cacheRHSvector"], [362, 3, 1, "", "justErrorVector"], [362, 3, 1, "", "justResidualVector"], [362, 2, 1, "", "matrix"], [362, 3, 1, "", "residualVectorAndNorm"], [362, 3, 1, "", "solve"], [362, 3, 1, "", "sweep"]], "fipy.terms.hybridConvectionTerm": [[363, 1, 1, "", "HybridConvectionTerm"]], "fipy.terms.hybridConvectionTerm.HybridConvectionTerm": [[363, 2, 1, "", "RHSvector"], [363, 3, 1, "", "__eq__"], [363, 3, 1, "", "__hash__"], [363, 3, 1, "", "__mul__"], [363, 3, 1, "", "__neg__"], [363, 3, 1, "", "__repr__"], [363, 3, 1, "", "__rmul__"], [363, 3, 1, "", "cacheMatrix"], [363, 3, 1, "", "cacheRHSvector"], [363, 3, 1, "", "justErrorVector"], [363, 3, 1, "", "justResidualVector"], [363, 2, 1, "", "matrix"], [363, 3, 1, "", "residualVectorAndNorm"], [363, 3, 1, "", "solve"], [363, 3, 1, "", "sweep"]], "fipy.terms.implicitDiffusionTerm": [[364, 6, 1, "", "ImplicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[365, 1, 1, "", "ImplicitSourceTerm"]], "fipy.terms.implicitSourceTerm.ImplicitSourceTerm": [[365, 2, 1, "", "RHSvector"], [365, 3, 1, "", "__eq__"], [365, 3, 1, "", "__hash__"], [365, 3, 1, "", "__mul__"], [365, 3, 1, "", "__neg__"], [365, 3, 1, "", "__repr__"], [365, 3, 1, "", "__rmul__"], [365, 3, 1, "", "cacheMatrix"], [365, 3, 1, "", "cacheRHSvector"], [365, 3, 1, "", "justErrorVector"], [365, 3, 1, "", "justResidualVector"], [365, 2, 1, "", "matrix"], [365, 3, 1, "", "residualVectorAndNorm"], [365, 3, 1, "", "solve"], [365, 3, 1, "", "sweep"]], "fipy.terms.powerLawConvectionTerm": [[367, 1, 1, "", "PowerLawConvectionTerm"]], "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm": [[367, 2, 1, "", "RHSvector"], [367, 3, 1, "", "__eq__"], [367, 3, 1, "", "__hash__"], [367, 3, 1, "", "__mul__"], [367, 3, 1, "", "__neg__"], [367, 3, 1, "", "__repr__"], [367, 3, 1, "", "__rmul__"], [367, 3, 1, "", "cacheMatrix"], [367, 3, 1, "", "cacheRHSvector"], [367, 3, 1, "", "justErrorVector"], [367, 3, 1, "", "justResidualVector"], [367, 2, 1, "", "matrix"], [367, 3, 1, "", "residualVectorAndNorm"], [367, 3, 1, "", "solve"], [367, 3, 1, "", "sweep"]], "fipy.terms.residualTerm": [[368, 1, 1, "", "ResidualTerm"]], "fipy.terms.residualTerm.ResidualTerm": [[368, 2, 1, "", "RHSvector"], [368, 3, 1, "", "__eq__"], [368, 3, 1, "", "__hash__"], [368, 3, 1, "", "__mul__"], [368, 3, 1, "", "__neg__"], [368, 3, 1, "", "__repr__"], [368, 3, 1, "", "__rmul__"], [368, 3, 1, "", "cacheMatrix"], [368, 3, 1, "", "cacheRHSvector"], [368, 3, 1, "", "justErrorVector"], [368, 3, 1, "", "justResidualVector"], [368, 2, 1, "", "matrix"], [368, 3, 1, "", "residualVectorAndNorm"], [368, 3, 1, "", "solve"], [368, 3, 1, "", "sweep"]], "fipy.terms.sourceTerm": [[369, 1, 1, "", "SourceTerm"]], "fipy.terms.sourceTerm.SourceTerm": [[369, 2, 1, "", "RHSvector"], [369, 3, 1, "", "__eq__"], [369, 3, 1, "", "__hash__"], [369, 3, 1, "", "__mul__"], [369, 3, 1, "", "__neg__"], [369, 3, 1, "", "__repr__"], [369, 3, 1, "", "__rmul__"], [369, 3, 1, "", "cacheMatrix"], [369, 3, 1, "", "cacheRHSvector"], [369, 3, 1, "", "justErrorVector"], [369, 3, 1, "", "justResidualVector"], [369, 2, 1, "", "matrix"], [369, 3, 1, "", "residualVectorAndNorm"], [369, 3, 1, "", "solve"], [369, 3, 1, "", "sweep"]], "fipy.terms.term": [[370, 1, 1, "", "Term"]], "fipy.terms.term.Term": [[370, 2, 1, "", "RHSvector"], [370, 3, 1, "", "__eq__"], [370, 3, 1, "", "__hash__"], [370, 3, 1, "", "__repr__"], [370, 3, 1, "", "cacheMatrix"], [370, 3, 1, "", "cacheRHSvector"], [370, 3, 1, "", "justErrorVector"], [370, 3, 1, "", "justResidualVector"], [370, 2, 1, "", "matrix"], [370, 3, 1, "", "residualVectorAndNorm"], [370, 3, 1, "", "solve"], [370, 3, 1, "", "sweep"]], "fipy.terms.transientTerm": [[372, 1, 1, "", "TransientTerm"]], "fipy.terms.transientTerm.TransientTerm": [[372, 2, 1, "", "RHSvector"], [372, 3, 1, "", "__eq__"], [372, 3, 1, "", "__hash__"], [372, 3, 1, "", "__mul__"], [372, 3, 1, "", "__neg__"], [372, 3, 1, "", "__repr__"], [372, 3, 1, "", "__rmul__"], [372, 3, 1, "", "cacheMatrix"], [372, 3, 1, "", "cacheRHSvector"], [372, 3, 1, "", "justErrorVector"], [372, 3, 1, "", "justResidualVector"], [372, 2, 1, "", "matrix"], [372, 3, 1, "", "residualVectorAndNorm"], [372, 3, 1, "", "solve"], [372, 3, 1, "", "sweep"]], "fipy.terms.upwindConvectionTerm": [[374, 1, 1, "", "UpwindConvectionTerm"]], "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm": [[374, 2, 1, "", "RHSvector"], [374, 3, 1, "", "__eq__"], [374, 3, 1, "", "__hash__"], [374, 3, 1, "", "__mul__"], [374, 3, 1, "", "__neg__"], [374, 3, 1, "", "__repr__"], [374, 3, 1, "", "__rmul__"], [374, 3, 1, "", "cacheMatrix"], [374, 3, 1, "", "cacheRHSvector"], [374, 3, 1, "", "justErrorVector"], [374, 3, 1, "", "justResidualVector"], [374, 2, 1, "", "matrix"], [374, 3, 1, "", "residualVectorAndNorm"], [374, 3, 1, "", "solve"], [374, 3, 1, "", "sweep"]], "fipy.terms.vanLeerConvectionTerm": [[375, 1, 1, "", "VanLeerConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm": [[375, 2, 1, "", "RHSvector"], [375, 3, 1, "", "__eq__"], [375, 3, 1, "", "__hash__"], [375, 3, 1, "", "__mul__"], [375, 3, 1, "", "__neg__"], [375, 3, 1, "", "__repr__"], [375, 3, 1, "", "__rmul__"], [375, 3, 1, "", "cacheMatrix"], [375, 3, 1, "", "cacheRHSvector"], [375, 3, 1, "", "justErrorVector"], [375, 3, 1, "", "justResidualVector"], [375, 2, 1, "", "matrix"], [375, 3, 1, "", "residualVectorAndNorm"], [375, 3, 1, "", "solve"], [375, 3, 1, "", "sweep"]], "fipy.tests": [[378, 0, 0, "-", "doctestPlus"], [379, 0, 0, "-", "lateImportTest"], [380, 0, 0, "-", "test"], [381, 0, 0, "-", "testProgram"]], "fipy.tests.doctestPlus": [[378, 4, 1, "", "execButNoTest"], [378, 4, 1, "", "register_skipper"], [378, 4, 1, "", "report_skips"], [378, 4, 1, "", "testmod"]], "fipy.tests.testProgram": [[381, 1, 1, "", "TestProgram"], [381, 6, 1, "", "main"]], "fipy.tools": [[382, 1, 1, "", "PhysicalField"], [382, 4, 1, "", "SharedTemporaryFile"], [383, 0, 0, "-", "changelog"], [384, 0, 0, "-", "comms"], [387, 0, 0, "-", "copy_script"], [388, 0, 0, "-", "debug"], [389, 0, 0, "-", "decorators"], [390, 0, 0, "-", "dimensions"], [394, 0, 0, "-", "dump"], [395, 0, 0, "-", "inline"], [396, 0, 0, "-", "logging"], [398, 0, 0, "-", "numerix"], [382, 6, 1, "", "parallelComm"], [399, 0, 0, "-", "parser"], [382, 6, 1, "", "serialComm"], [400, 0, 0, "-", "sharedtempfile"], [401, 0, 0, "-", "test"], [402, 0, 0, "-", "timer"], [403, 0, 0, "-", "vector"]], "fipy.tools.PhysicalField": [[382, 3, 1, "", "__abs__"], [382, 3, 1, "", "__add__"], [382, 3, 1, "", "__array__"], [382, 3, 1, "", "__array_wrap__"], [382, 3, 1, "", "__bool__"], [382, 3, 1, "", "__div__"], [382, 3, 1, "", "__eq__"], [382, 3, 1, "", "__float__"], [382, 3, 1, "", "__ge__"], [382, 3, 1, "", "__getitem__"], [382, 3, 1, "", "__gt__"], [382, 3, 1, "", "__hash__"], [382, 3, 1, "", "__le__"], [382, 3, 1, "", "__lt__"], [382, 3, 1, "", "__mod__"], [382, 3, 1, "", "__mul__"], [382, 3, 1, "", "__ne__"], [382, 3, 1, "", "__neg__"], [382, 3, 1, "", "__nonzero__"], [382, 3, 1, "", "__pow__"], [382, 3, 1, "", "__radd__"], [382, 3, 1, "", "__repr__"], [382, 3, 1, "", "__rmul__"], [382, 3, 1, "", "__setitem__"], [382, 3, 1, "", "__str__"], [382, 3, 1, "", "__sub__"], [382, 3, 1, "", "__truediv__"], [382, 3, 1, "", "add"], [382, 3, 1, "", "allclose"], [382, 3, 1, "", "allequal"], [382, 3, 1, "", "arccos"], [382, 3, 1, "", "arccosh"], [382, 3, 1, "", "arcsin"], [382, 3, 1, "", "arctan"], [382, 3, 1, "", "arctan2"], [382, 3, 1, "", "arctanh"], [382, 3, 1, "", "ceil"], [382, 3, 1, "", "conjugate"], [382, 3, 1, "", "convertToUnit"], [382, 3, 1, "", "copy"], [382, 3, 1, "", "cos"], [382, 3, 1, "", "cosh"], [382, 3, 1, "", "divide"], [382, 3, 1, "", "dot"], [382, 2, 1, "", "dtype"], [382, 3, 1, "", "floor"], [382, 3, 1, "", "inBaseUnits"], [382, 3, 1, "", "inDimensionless"], [382, 3, 1, "", "inRadians"], [382, 3, 1, "", "inSIUnits"], [382, 3, 1, "", "inUnitsOf"], [382, 3, 1, "", "log"], [382, 3, 1, "", "log10"], [382, 3, 1, "", "multiply"], [382, 2, 1, "", "numericValue"], [382, 3, 1, "", "put"], [382, 3, 1, "", "reshape"], [382, 2, 1, "", "shape"], [382, 3, 1, "", "sign"], [382, 3, 1, "", "sin"], [382, 3, 1, "", "sinh"], [382, 3, 1, "", "sqrt"], [382, 3, 1, "", "subtract"], [382, 3, 1, "", "sum"], [382, 3, 1, "", "take"], [382, 3, 1, "", "tan"], [382, 3, 1, "", "tanh"], [382, 3, 1, "", "tostring"], [382, 2, 1, "", "unit"]], "fipy.tools.comms": [[385, 0, 0, "-", "commWrapper"], [386, 0, 0, "-", "dummyComm"]], "fipy.tools.comms.commWrapper": [[385, 1, 1, "", "CommWrapper"]], "fipy.tools.comms.commWrapper.CommWrapper": [[385, 3, 1, "", "__getstate__"], [385, 3, 1, "", "__repr__"]], "fipy.tools.comms.dummyComm": [[386, 1, 1, "", "DummyComm"]], "fipy.tools.comms.dummyComm.DummyComm": [[386, 3, 1, "", "__getstate__"], [386, 3, 1, "", "__repr__"]], "fipy.tools.debug": [[388, 4, 1, "", "PRINT"]], "fipy.tools.decorators": [[389, 4, 1, "", "deprecate"]], "fipy.tools.dimensions": [[391, 0, 0, "-", "DictWithDefault"], [392, 0, 0, "-", "NumberDict"], [393, 0, 0, "-", "physicalField"]], "fipy.tools.dimensions.physicalField": [[393, 1, 1, "", "PhysicalField"], [393, 1, 1, "", "PhysicalUnit"]], "fipy.tools.dimensions.physicalField.PhysicalField": [[393, 3, 1, "", "__abs__"], [393, 3, 1, "", "__add__"], [393, 3, 1, "", "__array__"], [393, 3, 1, "", "__array_wrap__"], [393, 3, 1, "", "__bool__"], [393, 3, 1, "", "__div__"], [393, 3, 1, "", "__eq__"], [393, 3, 1, "", "__float__"], [393, 3, 1, "", "__ge__"], [393, 3, 1, "", "__getitem__"], [393, 3, 1, "", "__gt__"], [393, 3, 1, "", "__hash__"], [393, 3, 1, "", "__le__"], [393, 3, 1, "", "__lt__"], [393, 3, 1, "", "__mod__"], [393, 3, 1, "", "__mul__"], [393, 3, 1, "", "__ne__"], [393, 3, 1, "", "__neg__"], [393, 3, 1, "", "__nonzero__"], [393, 3, 1, "", "__pow__"], [393, 3, 1, "", "__radd__"], [393, 3, 1, "", "__repr__"], [393, 3, 1, "", "__rmul__"], [393, 3, 1, "", "__setitem__"], [393, 3, 1, "", "__str__"], [393, 3, 1, "", "__sub__"], [393, 3, 1, "", "__truediv__"], [393, 3, 1, "", "add"], [393, 3, 1, "", "allclose"], [393, 3, 1, "", "allequal"], [393, 3, 1, "", "arccos"], [393, 3, 1, "", "arccosh"], [393, 3, 1, "", "arcsin"], [393, 3, 1, "", "arctan"], [393, 3, 1, "", "arctan2"], [393, 3, 1, "", "arctanh"], [393, 3, 1, "", "ceil"], [393, 3, 1, "", "conjugate"], [393, 3, 1, "", "convertToUnit"], [393, 3, 1, "", "copy"], [393, 3, 1, "", "cos"], [393, 3, 1, "", "cosh"], [393, 3, 1, "", "divide"], [393, 3, 1, "", "dot"], [393, 2, 1, "", "dtype"], [393, 3, 1, "", "floor"], [393, 3, 1, "", "inBaseUnits"], [393, 3, 1, "", "inDimensionless"], [393, 3, 1, "", "inRadians"], [393, 3, 1, "", "inSIUnits"], [393, 3, 1, "", "inUnitsOf"], [393, 3, 1, "", "log"], [393, 3, 1, "", "log10"], [393, 3, 1, "", "multiply"], [393, 2, 1, "", "numericValue"], [393, 3, 1, "", "put"], [393, 3, 1, "", "reshape"], [393, 2, 1, "", "shape"], [393, 3, 1, "", "sign"], [393, 3, 1, "", "sin"], [393, 3, 1, "", "sinh"], [393, 3, 1, "", "sqrt"], [393, 3, 1, "", "subtract"], [393, 3, 1, "", "sum"], [393, 3, 1, "", "take"], [393, 3, 1, "", "tan"], [393, 3, 1, "", "tanh"], [393, 3, 1, "", "tostring"], [393, 2, 1, "", "unit"]], "fipy.tools.dimensions.physicalField.PhysicalUnit": [[393, 3, 1, "", "__div__"], [393, 3, 1, "", "__eq__"], [393, 3, 1, "", "__ge__"], [393, 3, 1, "", "__gt__"], [393, 6, 1, "", "__hash__"], [393, 3, 1, "", "__le__"], [393, 3, 1, "", "__lt__"], [393, 3, 1, "", "__mul__"], [393, 3, 1, "", "__ne__"], [393, 3, 1, "", "__pow__"], [393, 3, 1, "", "__rdiv__"], [393, 3, 1, "", "__repr__"], [393, 3, 1, "", "__rmul__"], [393, 3, 1, "", "__rtruediv__"], [393, 3, 1, "", "__str__"], [393, 3, 1, "", "__truediv__"], [393, 3, 1, "", "conversionFactorTo"], [393, 3, 1, "", "conversionTupleTo"], [393, 3, 1, "", "isAngle"], [393, 3, 1, "", "isCompatible"], [393, 3, 1, "", "isDimensionless"], [393, 3, 1, "", "isDimensionlessOrAngle"], [393, 3, 1, "", "isInverseAngle"], [393, 3, 1, "", "name"], [393, 3, 1, "", "setName"]], "fipy.tools.dump": [[394, 4, 1, "", "read"], [394, 4, 1, "", "write"]], "fipy.tools.logging": [[397, 0, 0, "-", "environment"]], "fipy.tools.logging.environment": [[397, 4, 1, "", "conda_info"], [397, 4, 1, "", "nix_info"], [397, 4, 1, "", "package_info"], [397, 4, 1, "", "pip_info"], [397, 4, 1, "", "platform_info"]], "fipy.tools.numerix": [[398, 4, 1, "", "L1norm"], [398, 4, 1, "", "L2norm"], [398, 4, 1, "", "LINFnorm"], [398, 4, 1, "", "all"], [398, 4, 1, "", "allclose"], [398, 4, 1, "", "allequal"], [398, 4, 1, "", "dot"], [398, 4, 1, "", "getShape"], [398, 4, 1, "", "getUnit"], [398, 4, 1, "", "isclose"], [398, 4, 1, "", "nearest"], [398, 4, 1, "", "put"], [398, 4, 1, "", "rank"], [398, 4, 1, "", "reshape"], [398, 4, 1, "", "sqrtDot"], [398, 4, 1, "", "sum"], [398, 4, 1, "", "take"], [398, 4, 1, "", "tostring"]], "fipy.tools.parser": [[399, 4, 1, "", "parse"]], "fipy.tools.sharedtempfile": [[400, 4, 1, "", "SharedTemporaryFile"]], "fipy.tools.timer": [[402, 1, 1, "", "Timer"]], "fipy.tools.timer.Timer": [[402, 3, 1, "", "clock_ns"], [402, 2, 1, "", "elapsed"]], "fipy.tools.vector": [[403, 4, 1, "", "prune"], [403, 4, 1, "", "putAdd"]], "fipy.variables": [[405, 0, 0, "-", "addOverFacesVariable"], [406, 0, 0, "-", "arithmeticCellToFaceVariable"], [407, 0, 0, "-", "betaNoiseVariable"], [408, 0, 0, "-", "binaryOperatorVariable"], [409, 0, 0, "-", "cellToFaceVariable"], [410, 0, 0, "-", "cellVariable"], [411, 0, 0, "-", "constant"], [412, 0, 0, "-", "constraintMask"], [413, 0, 0, "-", "coupledCellVariable"], [414, 0, 0, "-", "distanceVariable"], [415, 0, 0, "-", "exponentialNoiseVariable"], [416, 0, 0, "-", "faceGradContributionsVariable"], [417, 0, 0, "-", "faceGradVariable"], [418, 0, 0, "-", "faceVariable"], [419, 0, 0, "-", "gammaNoiseVariable"], [420, 0, 0, "-", "gaussCellGradVariable"], [421, 0, 0, "-", "gaussianNoiseVariable"], [422, 0, 0, "-", "harmonicCellToFaceVariable"], [423, 0, 0, "-", "histogramVariable"], [424, 0, 0, "-", "interfaceAreaVariable"], [425, 0, 0, "-", "interfaceFlagVariable"], [426, 0, 0, "-", "leastSquaresCellGradVariable"], [427, 0, 0, "-", "levelSetDiffusionVariable"], [428, 0, 0, "-", "meshVariable"], [429, 0, 0, "-", "minmodCellToFaceVariable"], [430, 0, 0, "-", "modCellGradVariable"], [431, 0, 0, "-", "modCellToFaceVariable"], [432, 0, 0, "-", "modFaceGradVariable"], [433, 0, 0, "-", "modPhysicalField"], [434, 0, 0, "-", "modularVariable"], [435, 0, 0, "-", "noiseVariable"], [436, 0, 0, "-", "operatorVariable"], [437, 0, 0, "-", "scharfetterGummelFaceVariable"], [438, 0, 0, "-", "surfactantConvectionVariable"], [439, 0, 0, "-", "surfactantVariable"], [440, 0, 0, "-", "test"], [441, 0, 0, "-", "unaryOperatorVariable"], [442, 0, 0, "-", "uniformNoiseVariable"], [443, 0, 0, "-", "variable"]], "fipy.variables.betaNoiseVariable": [[407, 1, 1, "", "BetaNoiseVariable"]], "fipy.variables.betaNoiseVariable.BetaNoiseVariable": [[407, 3, 1, "", "__abs__"], [407, 3, 1, "", "__and__"], [407, 3, 1, "", "__array__"], [407, 3, 1, "", "__array_wrap__"], [407, 3, 1, "", "__bool__"], [407, 3, 1, "", "__call__"], [407, 3, 1, "", "__eq__"], [407, 3, 1, "", "__ge__"], [407, 3, 1, "", "__getitem__"], [407, 3, 1, "", "__getstate__"], [407, 3, 1, "", "__gt__"], [407, 3, 1, "", "__hash__"], [407, 3, 1, "", "__invert__"], [407, 3, 1, "", "__le__"], [407, 3, 1, "", "__lt__"], [407, 3, 1, "", "__ne__"], [407, 3, 1, "", "__new__"], [407, 3, 1, "", "__nonzero__"], [407, 3, 1, "", "__or__"], [407, 3, 1, "", "__pow__"], [407, 3, 1, "", "__repr__"], [407, 3, 1, "", "__setstate__"], [407, 3, 1, "", "__str__"], [407, 3, 1, "", "all"], [407, 3, 1, "", "allclose"], [407, 3, 1, "", "any"], [407, 2, 1, "", "arithmeticFaceValue"], [407, 2, 1, "", "cellVolumeAverage"], [407, 3, 1, "", "constrain"], [407, 2, 1, "", "constraintMask"], [407, 3, 1, "", "copy"], [407, 3, 1, "", "dot"], [407, 2, 1, "", "dtype"], [407, 2, 1, "", "faceGrad"], [407, 2, 1, "", "faceValue"], [407, 2, 1, "", "gaussGrad"], [407, 2, 1, "", "globalValue"], [407, 2, 1, "", "grad"], [407, 2, 1, "", "harmonicFaceValue"], [407, 3, 1, "", "inBaseUnits"], [407, 3, 1, "", "inUnitsOf"], [407, 2, 1, "", "leastSquaresGrad"], [407, 2, 1, "", "mag"], [407, 3, 1, "", "max"], [407, 3, 1, "", "min"], [407, 2, 1, "", "minmodFaceValue"], [407, 2, 1, "", "old"], [407, 3, 1, "", "rdot"], [407, 3, 1, "", "release"], [407, 3, 1, "", "scramble"], [407, 3, 1, "", "setValue"], [407, 2, 1, "", "shape"], [407, 3, 1, "", "std"], [407, 2, 1, "", "unit"], [407, 3, 1, "", "updateOld"], [407, 2, 1, "", "value"]], "fipy.variables.cellVariable": [[410, 1, 1, "", "CellVariable"]], "fipy.variables.cellVariable.CellVariable": [[410, 3, 1, "", "__abs__"], [410, 3, 1, "", "__and__"], [410, 3, 1, "", "__array__"], [410, 3, 1, "", "__array_wrap__"], [410, 3, 1, "", "__bool__"], [410, 3, 1, "", "__call__"], [410, 3, 1, "", "__eq__"], [410, 3, 1, "", "__ge__"], [410, 3, 1, "", "__getitem__"], [410, 3, 1, "", "__getstate__"], [410, 3, 1, "", "__gt__"], [410, 3, 1, "", "__hash__"], [410, 3, 1, "", "__invert__"], [410, 3, 1, "", "__le__"], [410, 3, 1, "", "__lt__"], [410, 3, 1, "", "__ne__"], [410, 3, 1, "", "__new__"], [410, 3, 1, "", "__nonzero__"], [410, 3, 1, "", "__or__"], [410, 3, 1, "", "__pow__"], [410, 3, 1, "", "__repr__"], [410, 3, 1, "", "__setstate__"], [410, 3, 1, "", "__str__"], [410, 3, 1, "", "all"], [410, 3, 1, "", "allclose"], [410, 3, 1, "", "any"], [410, 2, 1, "", "arithmeticFaceValue"], [410, 2, 1, "", "cellVolumeAverage"], [410, 3, 1, "", "constrain"], [410, 2, 1, "", "constraintMask"], [410, 3, 1, "", "copy"], [410, 3, 1, "", "dot"], [410, 2, 1, "", "dtype"], [410, 2, 1, "", "faceGrad"], [410, 2, 1, "", "faceValue"], [410, 2, 1, "", "gaussGrad"], [410, 2, 1, "", "globalValue"], [410, 2, 1, "", "grad"], [410, 2, 1, "", "harmonicFaceValue"], [410, 3, 1, "", "inBaseUnits"], [410, 3, 1, "", "inUnitsOf"], [410, 2, 1, "", "leastSquaresGrad"], [410, 2, 1, "", "mag"], [410, 3, 1, "", "max"], [410, 3, 1, "", "min"], [410, 2, 1, "", "minmodFaceValue"], [410, 2, 1, "", "old"], [410, 3, 1, "", "rdot"], [410, 3, 1, "", "release"], [410, 3, 1, "", "setValue"], [410, 2, 1, "", "shape"], [410, 3, 1, "", "std"], [410, 2, 1, "", "unit"], [410, 3, 1, "", "updateOld"], [410, 2, 1, "", "value"]], "fipy.variables.distanceVariable": [[414, 1, 1, "", "DistanceVariable"]], "fipy.variables.distanceVariable.DistanceVariable": [[414, 3, 1, "", "__abs__"], [414, 3, 1, "", "__and__"], [414, 3, 1, "", "__array__"], [414, 3, 1, "", "__array_wrap__"], [414, 3, 1, "", "__bool__"], [414, 3, 1, "", "__call__"], [414, 3, 1, "", "__eq__"], [414, 3, 1, "", "__ge__"], [414, 3, 1, "", "__getitem__"], [414, 3, 1, "", "__getstate__"], [414, 3, 1, "", "__gt__"], [414, 3, 1, "", "__hash__"], [414, 3, 1, "", "__invert__"], [414, 3, 1, "", "__le__"], [414, 3, 1, "", "__lt__"], [414, 3, 1, "", "__ne__"], [414, 3, 1, "", "__new__"], [414, 3, 1, "", "__nonzero__"], [414, 3, 1, "", "__or__"], [414, 3, 1, "", "__pow__"], [414, 3, 1, "", "__repr__"], [414, 3, 1, "", "__setstate__"], [414, 3, 1, "", "__str__"], [414, 3, 1, "", "all"], [414, 3, 1, "", "allclose"], [414, 3, 1, "", "any"], [414, 2, 1, "", "arithmeticFaceValue"], [414, 3, 1, "", "calcDistanceFunction"], [414, 2, 1, "", "cellInterfaceAreas"], [414, 2, 1, "", "cellVolumeAverage"], [414, 3, 1, "", "constrain"], [414, 2, 1, "", "constraintMask"], [414, 3, 1, "", "copy"], [414, 3, 1, "", "dot"], [414, 2, 1, "", "dtype"], [414, 3, 1, "", "extendVariable"], [414, 2, 1, "", "faceGrad"], [414, 2, 1, "", "faceValue"], [414, 2, 1, "", "gaussGrad"], [414, 2, 1, "", "globalValue"], [414, 2, 1, "", "grad"], [414, 2, 1, "", "harmonicFaceValue"], [414, 3, 1, "", "inBaseUnits"], [414, 3, 1, "", "inUnitsOf"], [414, 2, 1, "", "leastSquaresGrad"], [414, 2, 1, "", "mag"], [414, 3, 1, "", "max"], [414, 3, 1, "", "min"], [414, 2, 1, "", "minmodFaceValue"], [414, 2, 1, "", "old"], [414, 3, 1, "", "rdot"], [414, 3, 1, "", "release"], [414, 3, 1, "", "setValue"], [414, 2, 1, "", "shape"], [414, 3, 1, "", "std"], [414, 2, 1, "", "unit"], [414, 3, 1, "", "updateOld"], [414, 2, 1, "", "value"]], "fipy.variables.exponentialNoiseVariable": [[415, 1, 1, "", "ExponentialNoiseVariable"]], "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable": [[415, 3, 1, "", "__abs__"], [415, 3, 1, "", "__and__"], [415, 3, 1, "", "__array__"], [415, 3, 1, "", "__array_wrap__"], [415, 3, 1, "", "__bool__"], [415, 3, 1, "", "__call__"], [415, 3, 1, "", "__eq__"], [415, 3, 1, "", "__ge__"], [415, 3, 1, "", "__getitem__"], [415, 3, 1, "", "__getstate__"], [415, 3, 1, "", "__gt__"], [415, 3, 1, "", "__hash__"], [415, 3, 1, "", "__invert__"], [415, 3, 1, "", "__le__"], [415, 3, 1, "", "__lt__"], [415, 3, 1, "", "__ne__"], [415, 3, 1, "", "__new__"], [415, 3, 1, "", "__nonzero__"], [415, 3, 1, "", "__or__"], [415, 3, 1, "", "__pow__"], [415, 3, 1, "", "__repr__"], [415, 3, 1, "", "__setstate__"], [415, 3, 1, "", "__str__"], [415, 3, 1, "", "all"], [415, 3, 1, "", "allclose"], [415, 3, 1, "", "any"], [415, 2, 1, "", "arithmeticFaceValue"], [415, 2, 1, "", "cellVolumeAverage"], [415, 3, 1, "", "constrain"], [415, 2, 1, "", "constraintMask"], [415, 3, 1, "", "copy"], [415, 3, 1, "", "dot"], [415, 2, 1, "", "dtype"], [415, 2, 1, "", "faceGrad"], [415, 2, 1, "", "faceValue"], [415, 2, 1, "", "gaussGrad"], [415, 2, 1, "", "globalValue"], [415, 2, 1, "", "grad"], [415, 2, 1, "", "harmonicFaceValue"], [415, 3, 1, "", "inBaseUnits"], [415, 3, 1, "", "inUnitsOf"], [415, 2, 1, "", "leastSquaresGrad"], [415, 2, 1, "", "mag"], [415, 3, 1, "", "max"], [415, 3, 1, "", "min"], [415, 2, 1, "", "minmodFaceValue"], [415, 2, 1, "", "old"], [415, 3, 1, "", "rdot"], [415, 3, 1, "", "release"], [415, 3, 1, "", "scramble"], [415, 3, 1, "", "setValue"], [415, 2, 1, "", "shape"], [415, 3, 1, "", "std"], [415, 2, 1, "", "unit"], [415, 3, 1, "", "updateOld"], [415, 2, 1, "", "value"]], "fipy.variables.faceVariable": [[418, 1, 1, "", "FaceVariable"]], "fipy.variables.faceVariable.FaceVariable": [[418, 3, 1, "", "__abs__"], [418, 3, 1, "", "__and__"], [418, 3, 1, "", "__array__"], [418, 3, 1, "", "__array_wrap__"], [418, 3, 1, "", "__bool__"], [418, 3, 1, "", "__call__"], [418, 3, 1, "", "__eq__"], [418, 3, 1, "", "__ge__"], [418, 3, 1, "", "__getitem__"], [418, 3, 1, "", "__getstate__"], [418, 3, 1, "", "__gt__"], [418, 3, 1, "", "__hash__"], [418, 3, 1, "", "__invert__"], [418, 3, 1, "", "__le__"], [418, 3, 1, "", "__lt__"], [418, 3, 1, "", "__ne__"], [418, 3, 1, "", "__new__"], [418, 3, 1, "", "__nonzero__"], [418, 3, 1, "", "__or__"], [418, 3, 1, "", "__pow__"], [418, 3, 1, "", "__repr__"], [418, 3, 1, "", "__setstate__"], [418, 3, 1, "", "__str__"], [418, 3, 1, "", "all"], [418, 3, 1, "", "allclose"], [418, 3, 1, "", "any"], [418, 3, 1, "", "constrain"], [418, 2, 1, "", "constraintMask"], [418, 3, 1, "", "copy"], [418, 2, 1, "", "divergence"], [418, 3, 1, "", "dot"], [418, 2, 1, "", "dtype"], [418, 3, 1, "", "inBaseUnits"], [418, 3, 1, "", "inUnitsOf"], [418, 2, 1, "", "mag"], [418, 3, 1, "", "max"], [418, 3, 1, "", "min"], [418, 3, 1, "", "rdot"], [418, 3, 1, "", "release"], [418, 3, 1, "", "setValue"], [418, 2, 1, "", "shape"], [418, 3, 1, "", "std"], [418, 2, 1, "", "unit"], [418, 2, 1, "", "value"]], "fipy.variables.gammaNoiseVariable": [[419, 1, 1, "", "GammaNoiseVariable"]], "fipy.variables.gammaNoiseVariable.GammaNoiseVariable": [[419, 3, 1, "", "__abs__"], [419, 3, 1, "", "__and__"], [419, 3, 1, "", "__array__"], [419, 3, 1, "", "__array_wrap__"], [419, 3, 1, "", "__bool__"], [419, 3, 1, "", "__call__"], [419, 3, 1, "", "__eq__"], [419, 3, 1, "", "__ge__"], [419, 3, 1, "", "__getitem__"], [419, 3, 1, "", "__getstate__"], [419, 3, 1, "", "__gt__"], [419, 3, 1, "", "__hash__"], [419, 3, 1, "", "__invert__"], [419, 3, 1, "", "__le__"], [419, 3, 1, "", "__lt__"], [419, 3, 1, "", "__ne__"], [419, 3, 1, "", "__new__"], [419, 3, 1, "", "__nonzero__"], [419, 3, 1, "", "__or__"], [419, 3, 1, "", "__pow__"], [419, 3, 1, "", "__repr__"], [419, 3, 1, "", "__setstate__"], [419, 3, 1, "", "__str__"], [419, 3, 1, "", "all"], [419, 3, 1, "", "allclose"], [419, 3, 1, "", "any"], [419, 2, 1, "", "arithmeticFaceValue"], [419, 2, 1, "", "cellVolumeAverage"], [419, 3, 1, "", "constrain"], [419, 2, 1, "", "constraintMask"], [419, 3, 1, "", "copy"], [419, 3, 1, "", "dot"], [419, 2, 1, "", "dtype"], [419, 2, 1, "", "faceGrad"], [419, 2, 1, "", "faceValue"], [419, 2, 1, "", "gaussGrad"], [419, 2, 1, "", "globalValue"], [419, 2, 1, "", "grad"], [419, 2, 1, "", "harmonicFaceValue"], [419, 3, 1, "", "inBaseUnits"], [419, 3, 1, "", "inUnitsOf"], [419, 2, 1, "", "leastSquaresGrad"], [419, 2, 1, "", "mag"], [419, 3, 1, "", "max"], [419, 3, 1, "", "min"], [419, 2, 1, "", "minmodFaceValue"], [419, 2, 1, "", "old"], [419, 3, 1, "", "rdot"], [419, 3, 1, "", "release"], [419, 3, 1, "", "scramble"], [419, 3, 1, "", "setValue"], [419, 2, 1, "", "shape"], [419, 3, 1, "", "std"], [419, 2, 1, "", "unit"], [419, 3, 1, "", "updateOld"], [419, 2, 1, "", "value"]], "fipy.variables.gaussianNoiseVariable": [[421, 1, 1, "", "GaussianNoiseVariable"]], "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable": [[421, 3, 1, "", "__abs__"], [421, 3, 1, "", "__and__"], [421, 3, 1, "", "__array__"], [421, 3, 1, "", "__array_wrap__"], [421, 3, 1, "", "__bool__"], [421, 3, 1, "", "__call__"], [421, 3, 1, "", "__eq__"], [421, 3, 1, "", "__ge__"], [421, 3, 1, "", "__getitem__"], [421, 3, 1, "", "__getstate__"], [421, 3, 1, "", "__gt__"], [421, 3, 1, "", "__hash__"], [421, 3, 1, "", "__invert__"], [421, 3, 1, "", "__le__"], [421, 3, 1, "", "__lt__"], [421, 3, 1, "", "__ne__"], [421, 3, 1, "", "__new__"], [421, 3, 1, "", "__nonzero__"], [421, 3, 1, "", "__or__"], [421, 3, 1, "", "__pow__"], [421, 3, 1, "", "__repr__"], [421, 3, 1, "", "__setstate__"], [421, 3, 1, "", "__str__"], [421, 3, 1, "", "all"], [421, 3, 1, "", "allclose"], [421, 3, 1, "", "any"], [421, 2, 1, "", "arithmeticFaceValue"], [421, 2, 1, "", "cellVolumeAverage"], [421, 3, 1, "", "constrain"], [421, 2, 1, "", "constraintMask"], [421, 3, 1, "", "copy"], [421, 3, 1, "", "dot"], [421, 2, 1, "", "dtype"], [421, 2, 1, "", "faceGrad"], [421, 2, 1, "", "faceValue"], [421, 2, 1, "", "gaussGrad"], [421, 2, 1, "", "globalValue"], [421, 2, 1, "", "grad"], [421, 2, 1, "", "harmonicFaceValue"], [421, 3, 1, "", "inBaseUnits"], [421, 3, 1, "", "inUnitsOf"], [421, 2, 1, "", "leastSquaresGrad"], [421, 2, 1, "", "mag"], [421, 3, 1, "", "max"], [421, 3, 1, "", "min"], [421, 2, 1, "", "minmodFaceValue"], [421, 2, 1, "", "old"], [421, 3, 1, "", "rdot"], [421, 3, 1, "", "release"], [421, 3, 1, "", "scramble"], [421, 3, 1, "", "setValue"], [421, 2, 1, "", "shape"], [421, 3, 1, "", "std"], [421, 2, 1, "", "unit"], [421, 3, 1, "", "updateOld"], [421, 2, 1, "", "value"]], "fipy.variables.histogramVariable": [[423, 1, 1, "", "HistogramVariable"]], "fipy.variables.histogramVariable.HistogramVariable": [[423, 3, 1, "", "__abs__"], [423, 3, 1, "", "__and__"], [423, 3, 1, "", "__array__"], [423, 3, 1, "", "__array_wrap__"], [423, 3, 1, "", "__bool__"], [423, 3, 1, "", "__call__"], [423, 3, 1, "", "__eq__"], [423, 3, 1, "", "__ge__"], [423, 3, 1, "", "__getitem__"], [423, 3, 1, "", "__getstate__"], [423, 3, 1, "", "__gt__"], [423, 3, 1, "", "__hash__"], [423, 3, 1, "", "__invert__"], [423, 3, 1, "", "__le__"], [423, 3, 1, "", "__lt__"], [423, 3, 1, "", "__ne__"], [423, 3, 1, "", "__new__"], [423, 3, 1, "", "__nonzero__"], [423, 3, 1, "", "__or__"], [423, 3, 1, "", "__pow__"], [423, 3, 1, "", "__repr__"], [423, 3, 1, "", "__setstate__"], [423, 3, 1, "", "__str__"], [423, 3, 1, "", "all"], [423, 3, 1, "", "allclose"], [423, 3, 1, "", "any"], [423, 2, 1, "", "arithmeticFaceValue"], [423, 2, 1, "", "cellVolumeAverage"], [423, 3, 1, "", "constrain"], [423, 2, 1, "", "constraintMask"], [423, 3, 1, "", "copy"], [423, 3, 1, "", "dot"], [423, 2, 1, "", "dtype"], [423, 2, 1, "", "faceGrad"], [423, 2, 1, "", "faceValue"], [423, 2, 1, "", "gaussGrad"], [423, 2, 1, "", "globalValue"], [423, 2, 1, "", "grad"], [423, 2, 1, "", "harmonicFaceValue"], [423, 3, 1, "", "inBaseUnits"], [423, 3, 1, "", "inUnitsOf"], [423, 2, 1, "", "leastSquaresGrad"], [423, 2, 1, "", "mag"], [423, 3, 1, "", "max"], [423, 3, 1, "", "min"], [423, 2, 1, "", "minmodFaceValue"], [423, 2, 1, "", "old"], [423, 3, 1, "", "rdot"], [423, 3, 1, "", "release"], [423, 3, 1, "", "setValue"], [423, 2, 1, "", "shape"], [423, 3, 1, "", "std"], [423, 2, 1, "", "unit"], [423, 3, 1, "", "updateOld"], [423, 2, 1, "", "value"]], "fipy.variables.meshVariable": [[428, 1, 1, "", "MeshVariable"]], "fipy.variables.meshVariable.MeshVariable": [[428, 3, 1, "", "__abs__"], [428, 3, 1, "", "__and__"], [428, 3, 1, "", "__array__"], [428, 3, 1, "", "__array_wrap__"], [428, 3, 1, "", "__bool__"], [428, 3, 1, "", "__call__"], [428, 3, 1, "", "__eq__"], [428, 3, 1, "", "__ge__"], [428, 3, 1, "", "__getitem__"], [428, 3, 1, "", "__getstate__"], [428, 3, 1, "", "__gt__"], [428, 3, 1, "", "__hash__"], [428, 3, 1, "", "__invert__"], [428, 3, 1, "", "__le__"], [428, 3, 1, "", "__lt__"], [428, 3, 1, "", "__ne__"], [428, 3, 1, "", "__new__"], [428, 3, 1, "", "__nonzero__"], [428, 3, 1, "", "__or__"], [428, 3, 1, "", "__pow__"], [428, 3, 1, "", "__repr__"], [428, 3, 1, "", "__setstate__"], [428, 3, 1, "", "__str__"], [428, 3, 1, "", "all"], [428, 3, 1, "", "allclose"], [428, 3, 1, "", "any"], [428, 3, 1, "", "constrain"], [428, 2, 1, "", "constraintMask"], [428, 3, 1, "", "copy"], [428, 3, 1, "", "dot"], [428, 2, 1, "", "dtype"], [428, 3, 1, "", "inBaseUnits"], [428, 3, 1, "", "inUnitsOf"], [428, 2, 1, "", "mag"], [428, 3, 1, "", "max"], [428, 3, 1, "", "min"], [428, 3, 1, "", "rdot"], [428, 3, 1, "", "release"], [428, 3, 1, "", "setValue"], [428, 2, 1, "", "shape"], [428, 3, 1, "", "std"], [428, 2, 1, "", "unit"], [428, 2, 1, "", "value"]], "fipy.variables.modularVariable": [[434, 1, 1, "", "ModularVariable"]], "fipy.variables.modularVariable.ModularVariable": [[434, 3, 1, "", "__abs__"], [434, 3, 1, "", "__and__"], [434, 3, 1, "", "__array__"], [434, 3, 1, "", "__array_wrap__"], [434, 3, 1, "", "__bool__"], [434, 3, 1, "", "__call__"], [434, 3, 1, "", "__eq__"], [434, 3, 1, "", "__ge__"], [434, 3, 1, "", "__getitem__"], [434, 3, 1, "", "__getstate__"], [434, 3, 1, "", "__gt__"], [434, 3, 1, "", "__hash__"], [434, 3, 1, "", "__invert__"], [434, 3, 1, "", "__le__"], [434, 3, 1, "", "__lt__"], [434, 3, 1, "", "__ne__"], [434, 3, 1, "", "__new__"], [434, 3, 1, "", "__nonzero__"], [434, 3, 1, "", "__or__"], [434, 3, 1, "", "__pow__"], [434, 3, 1, "", "__repr__"], [434, 3, 1, "", "__setstate__"], [434, 3, 1, "", "__str__"], [434, 3, 1, "", "all"], [434, 3, 1, "", "allclose"], [434, 3, 1, "", "any"], [434, 2, 1, "", "arithmeticFaceValue"], [434, 2, 1, "", "cellVolumeAverage"], [434, 3, 1, "", "constrain"], [434, 2, 1, "", "constraintMask"], [434, 3, 1, "", "copy"], [434, 3, 1, "", "dot"], [434, 2, 1, "", "dtype"], [434, 2, 1, "", "faceGrad"], [434, 2, 1, "", "faceGradNoMod"], [434, 2, 1, "", "faceValue"], [434, 2, 1, "", "gaussGrad"], [434, 2, 1, "", "globalValue"], [434, 2, 1, "", "grad"], [434, 2, 1, "", "harmonicFaceValue"], [434, 3, 1, "", "inBaseUnits"], [434, 3, 1, "", "inUnitsOf"], [434, 2, 1, "", "leastSquaresGrad"], [434, 2, 1, "", "mag"], [434, 3, 1, "", "max"], [434, 3, 1, "", "min"], [434, 2, 1, "", "minmodFaceValue"], [434, 2, 1, "", "old"], [434, 3, 1, "", "rdot"], [434, 3, 1, "", "release"], [434, 3, 1, "", "setValue"], [434, 2, 1, "", "shape"], [434, 3, 1, "", "std"], [434, 2, 1, "", "unit"], [434, 3, 1, "", "updateOld"], [434, 2, 1, "", "value"]], "fipy.variables.noiseVariable": [[435, 1, 1, "", "NoiseVariable"]], "fipy.variables.noiseVariable.NoiseVariable": [[435, 3, 1, "", "__abs__"], [435, 3, 1, "", "__and__"], [435, 3, 1, "", "__array__"], [435, 3, 1, "", "__array_wrap__"], [435, 3, 1, "", "__bool__"], [435, 3, 1, "", "__call__"], [435, 3, 1, "", "__eq__"], [435, 3, 1, "", "__ge__"], [435, 3, 1, "", "__getitem__"], [435, 3, 1, "", "__getstate__"], [435, 3, 1, "", "__gt__"], [435, 3, 1, "", "__hash__"], [435, 3, 1, "", "__invert__"], [435, 3, 1, "", "__le__"], [435, 3, 1, "", "__lt__"], [435, 3, 1, "", "__ne__"], [435, 3, 1, "", "__new__"], [435, 3, 1, "", "__nonzero__"], [435, 3, 1, "", "__or__"], [435, 3, 1, "", "__pow__"], [435, 3, 1, "", "__repr__"], [435, 3, 1, "", "__setstate__"], [435, 3, 1, "", "__str__"], [435, 3, 1, "", "all"], [435, 3, 1, "", "allclose"], [435, 3, 1, "", "any"], [435, 2, 1, "", "arithmeticFaceValue"], [435, 2, 1, "", "cellVolumeAverage"], [435, 3, 1, "", "constrain"], [435, 2, 1, "", "constraintMask"], [435, 3, 1, "", "copy"], [435, 3, 1, "", "dot"], [435, 2, 1, "", "dtype"], [435, 2, 1, "", "faceGrad"], [435, 2, 1, "", "faceValue"], [435, 2, 1, "", "gaussGrad"], [435, 2, 1, "", "globalValue"], [435, 2, 1, "", "grad"], [435, 2, 1, "", "harmonicFaceValue"], [435, 3, 1, "", "inBaseUnits"], [435, 3, 1, "", "inUnitsOf"], [435, 2, 1, "", "leastSquaresGrad"], [435, 2, 1, "", "mag"], [435, 3, 1, "", "max"], [435, 3, 1, "", "min"], [435, 2, 1, "", "minmodFaceValue"], [435, 2, 1, "", "old"], [435, 3, 1, "", "rdot"], [435, 3, 1, "", "release"], [435, 3, 1, "", "scramble"], [435, 3, 1, "", "setValue"], [435, 2, 1, "", "shape"], [435, 3, 1, "", "std"], [435, 2, 1, "", "unit"], [435, 3, 1, "", "updateOld"], [435, 2, 1, "", "value"]], "fipy.variables.scharfetterGummelFaceVariable": [[437, 1, 1, "", "ScharfetterGummelFaceVariable"]], "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable": [[437, 3, 1, "", "__abs__"], [437, 3, 1, "", "__and__"], [437, 3, 1, "", "__array__"], [437, 3, 1, "", "__array_wrap__"], [437, 3, 1, "", "__bool__"], [437, 3, 1, "", "__call__"], [437, 3, 1, "", "__eq__"], [437, 3, 1, "", "__ge__"], [437, 3, 1, "", "__getitem__"], [437, 3, 1, "", "__getstate__"], [437, 3, 1, "", "__gt__"], [437, 3, 1, "", "__hash__"], [437, 3, 1, "", "__invert__"], [437, 3, 1, "", "__le__"], [437, 3, 1, "", "__lt__"], [437, 3, 1, "", "__ne__"], [437, 3, 1, "", "__new__"], [437, 3, 1, "", "__nonzero__"], [437, 3, 1, "", "__or__"], [437, 3, 1, "", "__pow__"], [437, 3, 1, "", "__repr__"], [437, 3, 1, "", "__setstate__"], [437, 3, 1, "", "__str__"], [437, 3, 1, "", "all"], [437, 3, 1, "", "allclose"], [437, 3, 1, "", "any"], [437, 3, 1, "", "constrain"], [437, 2, 1, "", "constraintMask"], [437, 3, 1, "", "copy"], [437, 2, 1, "", "divergence"], [437, 3, 1, "", "dot"], [437, 2, 1, "", "dtype"], [437, 3, 1, "", "inBaseUnits"], [437, 3, 1, "", "inUnitsOf"], [437, 2, 1, "", "mag"], [437, 3, 1, "", "max"], [437, 3, 1, "", "min"], [437, 3, 1, "", "rdot"], [437, 3, 1, "", "release"], [437, 3, 1, "", "setValue"], [437, 2, 1, "", "shape"], [437, 3, 1, "", "std"], [437, 2, 1, "", "unit"], [437, 2, 1, "", "value"]], "fipy.variables.surfactantConvectionVariable": [[438, 1, 1, "", "SurfactantConvectionVariable"]], "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable": [[438, 3, 1, "", "__abs__"], [438, 3, 1, "", "__and__"], [438, 3, 1, "", "__array__"], [438, 3, 1, "", "__array_wrap__"], [438, 3, 1, "", "__bool__"], [438, 3, 1, "", "__call__"], [438, 3, 1, "", "__eq__"], [438, 3, 1, "", "__ge__"], [438, 3, 1, "", "__getitem__"], [438, 3, 1, "", "__getstate__"], [438, 3, 1, "", "__gt__"], [438, 3, 1, "", "__hash__"], [438, 3, 1, "", "__invert__"], [438, 3, 1, "", "__le__"], [438, 3, 1, "", "__lt__"], [438, 3, 1, "", "__ne__"], [438, 3, 1, "", "__new__"], [438, 3, 1, "", "__nonzero__"], [438, 3, 1, "", "__or__"], [438, 3, 1, "", "__pow__"], [438, 3, 1, "", "__repr__"], [438, 3, 1, "", "__setstate__"], [438, 3, 1, "", "__str__"], [438, 3, 1, "", "all"], [438, 3, 1, "", "allclose"], [438, 3, 1, "", "any"], [438, 3, 1, "", "constrain"], [438, 2, 1, "", "constraintMask"], [438, 3, 1, "", "copy"], [438, 2, 1, "", "divergence"], [438, 3, 1, "", "dot"], [438, 2, 1, "", "dtype"], [438, 3, 1, "", "inBaseUnits"], [438, 3, 1, "", "inUnitsOf"], [438, 2, 1, "", "mag"], [438, 3, 1, "", "max"], [438, 3, 1, "", "min"], [438, 3, 1, "", "rdot"], [438, 3, 1, "", "release"], [438, 3, 1, "", "setValue"], [438, 2, 1, "", "shape"], [438, 3, 1, "", "std"], [438, 2, 1, "", "unit"], [438, 2, 1, "", "value"]], "fipy.variables.surfactantVariable": [[439, 1, 1, "", "SurfactantVariable"]], "fipy.variables.surfactantVariable.SurfactantVariable": [[439, 3, 1, "", "__abs__"], [439, 3, 1, "", "__and__"], [439, 3, 1, "", "__array__"], [439, 3, 1, "", "__array_wrap__"], [439, 3, 1, "", "__bool__"], [439, 3, 1, "", "__call__"], [439, 3, 1, "", "__eq__"], [439, 3, 1, "", "__ge__"], [439, 3, 1, "", "__getitem__"], [439, 3, 1, "", "__getstate__"], [439, 3, 1, "", "__gt__"], [439, 3, 1, "", "__hash__"], [439, 3, 1, "", "__invert__"], [439, 3, 1, "", "__le__"], [439, 3, 1, "", "__lt__"], [439, 3, 1, "", "__ne__"], [439, 3, 1, "", "__new__"], [439, 3, 1, "", "__nonzero__"], [439, 3, 1, "", "__or__"], [439, 3, 1, "", "__pow__"], [439, 3, 1, "", "__repr__"], [439, 3, 1, "", "__setstate__"], [439, 3, 1, "", "__str__"], [439, 3, 1, "", "all"], [439, 3, 1, "", "allclose"], [439, 3, 1, "", "any"], [439, 2, 1, "", "arithmeticFaceValue"], [439, 2, 1, "", "cellVolumeAverage"], [439, 3, 1, "", "constrain"], [439, 2, 1, "", "constraintMask"], [439, 3, 1, "", "copy"], [439, 3, 1, "", "dot"], [439, 2, 1, "", "dtype"], [439, 2, 1, "", "faceGrad"], [439, 2, 1, "", "faceValue"], [439, 2, 1, "", "gaussGrad"], [439, 2, 1, "", "globalValue"], [439, 2, 1, "", "grad"], [439, 2, 1, "", "harmonicFaceValue"], [439, 3, 1, "", "inBaseUnits"], [439, 3, 1, "", "inUnitsOf"], [439, 2, 1, "", "interfaceVar"], [439, 2, 1, "", "leastSquaresGrad"], [439, 2, 1, "", "mag"], [439, 3, 1, "", "max"], [439, 3, 1, "", "min"], [439, 2, 1, "", "minmodFaceValue"], [439, 2, 1, "", "old"], [439, 3, 1, "", "rdot"], [439, 3, 1, "", "release"], [439, 3, 1, "", "setValue"], [439, 2, 1, "", "shape"], [439, 3, 1, "", "std"], [439, 2, 1, "", "unit"], [439, 3, 1, "", "updateOld"], [439, 2, 1, "", "value"]], "fipy.variables.uniformNoiseVariable": [[442, 1, 1, "", "UniformNoiseVariable"]], "fipy.variables.uniformNoiseVariable.UniformNoiseVariable": [[442, 3, 1, "", "__abs__"], [442, 3, 1, "", "__and__"], [442, 3, 1, "", "__array__"], [442, 3, 1, "", "__array_wrap__"], [442, 3, 1, "", "__bool__"], [442, 3, 1, "", "__call__"], [442, 3, 1, "", "__eq__"], [442, 3, 1, "", "__ge__"], [442, 3, 1, "", "__getitem__"], [442, 3, 1, "", "__getstate__"], [442, 3, 1, "", "__gt__"], [442, 3, 1, "", "__hash__"], [442, 3, 1, "", "__invert__"], [442, 3, 1, "", "__le__"], [442, 3, 1, "", "__lt__"], [442, 3, 1, "", "__ne__"], [442, 3, 1, "", "__new__"], [442, 3, 1, "", "__nonzero__"], [442, 3, 1, "", "__or__"], [442, 3, 1, "", "__pow__"], [442, 3, 1, "", "__repr__"], [442, 3, 1, "", "__setstate__"], [442, 3, 1, "", "__str__"], [442, 3, 1, "", "all"], [442, 3, 1, "", "allclose"], [442, 3, 1, "", "any"], [442, 2, 1, "", "arithmeticFaceValue"], [442, 2, 1, "", "cellVolumeAverage"], [442, 3, 1, "", "constrain"], [442, 2, 1, "", "constraintMask"], [442, 3, 1, "", "copy"], [442, 3, 1, "", "dot"], [442, 2, 1, "", "dtype"], [442, 2, 1, "", "faceGrad"], [442, 2, 1, "", "faceValue"], [442, 2, 1, "", "gaussGrad"], [442, 2, 1, "", "globalValue"], [442, 2, 1, "", "grad"], [442, 2, 1, "", "harmonicFaceValue"], [442, 3, 1, "", "inBaseUnits"], [442, 3, 1, "", "inUnitsOf"], [442, 2, 1, "", "leastSquaresGrad"], [442, 2, 1, "", "mag"], [442, 3, 1, "", "max"], [442, 3, 1, "", "min"], [442, 2, 1, "", "minmodFaceValue"], [442, 2, 1, "", "old"], [442, 3, 1, "", "rdot"], [442, 3, 1, "", "release"], [442, 3, 1, "", "scramble"], [442, 3, 1, "", "setValue"], [442, 2, 1, "", "shape"], [442, 3, 1, "", "std"], [442, 2, 1, "", "unit"], [442, 3, 1, "", "updateOld"], [442, 2, 1, "", "value"]], "fipy.variables.variable": [[443, 1, 1, "", "Variable"]], "fipy.variables.variable.Variable": [[443, 3, 1, "", "__abs__"], [443, 3, 1, "", "__and__"], [443, 3, 1, "", "__array__"], [443, 3, 1, "", "__array_wrap__"], [443, 3, 1, "", "__bool__"], [443, 3, 1, "", "__call__"], [443, 3, 1, "", "__eq__"], [443, 3, 1, "", "__ge__"], [443, 3, 1, "", "__getitem__"], [443, 3, 1, "", "__getstate__"], [443, 3, 1, "", "__gt__"], [443, 3, 1, "", "__hash__"], [443, 3, 1, "", "__invert__"], [443, 3, 1, "", "__le__"], [443, 3, 1, "", "__lt__"], [443, 3, 1, "", "__ne__"], [443, 3, 1, "", "__new__"], [443, 3, 1, "", "__nonzero__"], [443, 3, 1, "", "__or__"], [443, 3, 1, "", "__pow__"], [443, 3, 1, "", "__repr__"], [443, 3, 1, "", "__setstate__"], [443, 3, 1, "", "__str__"], [443, 3, 1, "", "all"], [443, 3, 1, "", "allclose"], [443, 3, 1, "", "any"], [443, 3, 1, "", "constrain"], [443, 3, 1, "", "copy"], [443, 2, 1, "", "dtype"], [443, 3, 1, "", "inBaseUnits"], [443, 3, 1, "", "inUnitsOf"], [443, 2, 1, "", "mag"], [443, 3, 1, "", "max"], [443, 3, 1, "", "min"], [443, 3, 1, "", "release"], [443, 3, 1, "", "setValue"], [443, 2, 1, "", "shape"], [443, 3, 1, "", "std"], [443, 2, 1, "", "unit"], [443, 2, 1, "", "value"]], "fipy.viewers": [[444, 1, 1, "", "DummyViewer"], [444, 5, 1, "", "MeshDimensionError"], [444, 4, 1, "", "Viewer"], [445, 0, 0, "-", "matplotlibViewer"], [457, 0, 0, "-", "mayaviViewer"], [461, 0, 0, "-", "multiViewer"], [462, 0, 0, "-", "test"], [463, 0, 0, "-", "testinteractive"], [464, 0, 0, "-", "tsvViewer"], [465, 0, 0, "-", "viewer"], [466, 0, 0, "-", "vtkViewer"]], "fipy.viewers.DummyViewer": [[444, 3, 1, "", "plot"], [444, 3, 1, "", "plotMesh"], [444, 3, 1, "", "setLimits"], [444, 2, 1, "", "title"], [444, 2, 1, "", "vars"]], "fipy.viewers.MeshDimensionError": [[444, 6, 1, "", "__cause__"], [444, 6, 1, "", "__context__"], [444, 3, 1, "", "__delattr__"], [444, 3, 1, "", "__getattribute__"], [444, 3, 1, "", "__reduce__"], [444, 3, 1, "", "__repr__"], [444, 3, 1, "", "__setattr__"], [444, 3, 1, "", "__str__"], [444, 3, 1, "", "add_note"], [444, 3, 1, "", "with_traceback"]], "fipy.viewers.matplotlibViewer": [[445, 4, 1, "", "MatplotlibViewer"], [446, 0, 0, "-", "abstractMatplotlib2DViewer"], [447, 0, 0, "-", "abstractMatplotlibViewer"], [448, 0, 0, "-", "matplotlib1DViewer"], [449, 0, 0, "-", "matplotlib2DContourViewer"], [450, 0, 0, "-", "matplotlib2DGridContourViewer"], [451, 0, 0, "-", "matplotlib2DGridViewer"], [452, 0, 0, "-", "matplotlib2DViewer"], [453, 0, 0, "-", "matplotlibSparseMatrixViewer"], [454, 0, 0, "-", "matplotlibStreamViewer"], [455, 0, 0, "-", "matplotlibVectorViewer"], [456, 0, 0, "-", "test"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[446, 1, 1, "", "AbstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer": [[446, 2, 1, "", "axes"], [446, 2, 1, "", "cmap"], [446, 2, 1, "", "colorbar"], [446, 2, 1, "", "fig"], [446, 2, 1, "", "id"], [446, 2, 1, "", "log"], [446, 3, 1, "", "plot"], [446, 3, 1, "", "plotMesh"], [446, 3, 1, "", "setLimits"], [446, 2, 1, "", "title"], [446, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[447, 1, 1, "", "AbstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer": [[447, 2, 1, "", "axes"], [447, 2, 1, "", "cmap"], [447, 2, 1, "", "colorbar"], [447, 2, 1, "", "fig"], [447, 2, 1, "", "id"], [447, 2, 1, "", "log"], [447, 3, 1, "", "plot"], [447, 3, 1, "", "plotMesh"], [447, 3, 1, "", "setLimits"], [447, 2, 1, "", "title"], [447, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[448, 1, 1, "", "Matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer": [[448, 2, 1, "", "axes"], [448, 2, 1, "", "cmap"], [448, 2, 1, "", "colorbar"], [448, 2, 1, "", "fig"], [448, 2, 1, "", "id"], [448, 2, 1, "", "lines"], [448, 2, 1, "", "log"], [448, 3, 1, "", "plot"], [448, 3, 1, "", "plotMesh"], [448, 3, 1, "", "setLimits"], [448, 2, 1, "", "title"], [448, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[449, 1, 1, "", "Matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer": [[449, 2, 1, "", "axes"], [449, 2, 1, "", "cmap"], [449, 2, 1, "", "colorbar"], [449, 2, 1, "", "fig"], [449, 2, 1, "", "id"], [449, 2, 1, "", "levels"], [449, 2, 1, "", "log"], [449, 3, 1, "", "plot"], [449, 3, 1, "", "plotMesh"], [449, 3, 1, "", "setLimits"], [449, 2, 1, "", "title"], [449, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[450, 1, 1, "", "Matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer": [[450, 2, 1, "", "axes"], [450, 2, 1, "", "cmap"], [450, 2, 1, "", "colorbar"], [450, 2, 1, "", "fig"], [450, 2, 1, "", "id"], [450, 2, 1, "", "levels"], [450, 2, 1, "", "log"], [450, 3, 1, "", "plot"], [450, 3, 1, "", "plotMesh"], [450, 3, 1, "", "setLimits"], [450, 2, 1, "", "title"], [450, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[451, 1, 1, "", "Matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer": [[451, 2, 1, "", "axes"], [451, 2, 1, "", "cmap"], [451, 2, 1, "", "colorbar"], [451, 2, 1, "", "fig"], [451, 2, 1, "", "id"], [451, 2, 1, "", "log"], [451, 3, 1, "", "plot"], [451, 3, 1, "", "plotMesh"], [451, 3, 1, "", "setLimits"], [451, 2, 1, "", "title"], [451, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[452, 1, 1, "", "Matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer": [[452, 2, 1, "", "axes"], [452, 2, 1, "", "cmap"], [452, 2, 1, "", "collection"], [452, 2, 1, "", "colorbar"], [452, 2, 1, "", "fig"], [452, 2, 1, "", "id"], [452, 2, 1, "", "log"], [452, 3, 1, "", "plot"], [452, 3, 1, "", "plotMesh"], [452, 3, 1, "", "setLimits"], [452, 2, 1, "", "title"], [452, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[453, 1, 1, "", "MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[454, 1, 1, "", "MatplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer": [[454, 2, 1, "", "axes"], [454, 2, 1, "", "cmap"], [454, 2, 1, "", "colorbar"], [454, 2, 1, "", "fig"], [454, 2, 1, "", "id"], [454, 2, 1, "", "kwargs"], [454, 2, 1, "", "log"], [454, 3, 1, "", "plot"], [454, 3, 1, "", "plotMesh"], [454, 3, 1, "", "setLimits"], [454, 2, 1, "", "title"], [454, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[455, 1, 1, "", "MatplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer": [[455, 2, 1, "", "axes"], [455, 2, 1, "", "cmap"], [455, 2, 1, "", "colorbar"], [455, 2, 1, "", "fig"], [455, 2, 1, "", "id"], [455, 2, 1, "", "log"], [455, 3, 1, "", "plot"], [455, 3, 1, "", "plotMesh"], [455, 3, 1, "", "setLimits"], [455, 2, 1, "", "title"], [455, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer": [[457, 1, 1, "", "MayaviClient"], [458, 0, 0, "-", "mayaviClient"], [459, 0, 0, "-", "mayaviDaemon"], [460, 0, 0, "-", "test"]], "fipy.viewers.mayaviViewer.MayaviClient": [[457, 2, 1, "", "fps"], [457, 3, 1, "", "plot"], [457, 3, 1, "", "plotMesh"], [457, 3, 1, "", "setLimits"], [457, 2, 1, "", "title"], [457, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviClient": [[458, 1, 1, "", "MayaviClient"]], "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient": [[458, 2, 1, "", "fps"], [458, 3, 1, "", "plot"], [458, 3, 1, "", "plotMesh"], [458, 3, 1, "", "setLimits"], [458, 2, 1, "", "title"], [458, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[459, 1, 1, "", "MayaviDaemon"], [459, 4, 1, "", "main"]], "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon": [[459, 3, 1, "", "parse_command_line"], [459, 3, 1, "", "setup_source"], [459, 3, 1, "", "update_pipeline"], [459, 3, 1, "", "view_data"]], "fipy.viewers.multiViewer": [[461, 1, 1, "", "MultiViewer"]], "fipy.viewers.multiViewer.MultiViewer": [[461, 3, 1, "", "plot"], [461, 3, 1, "", "plotMesh"], [461, 3, 1, "", "setLimits"], [461, 2, 1, "", "title"], [461, 2, 1, "", "vars"]], "fipy.viewers.tsvViewer": [[464, 1, 1, "", "TSVViewer"]], "fipy.viewers.tsvViewer.TSVViewer": [[464, 3, 1, "", "plot"], [464, 3, 1, "", "plotMesh"], [464, 3, 1, "", "setLimits"], [464, 2, 1, "", "title"], [464, 2, 1, "", "vars"]], "fipy.viewers.viewer": [[465, 1, 1, "", "AbstractViewer"]], "fipy.viewers.viewer.AbstractViewer": [[465, 3, 1, "", "plot"], [465, 3, 1, "", "plotMesh"], [465, 3, 1, "", "setLimits"], [465, 2, 1, "", "title"], [465, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer": [[466, 1, 1, "", "VTKCellViewer"], [466, 1, 1, "", "VTKFaceViewer"], [466, 4, 1, "", "VTKViewer"], [467, 0, 0, "-", "test"], [468, 0, 0, "-", "vtkCellViewer"], [469, 0, 0, "-", "vtkFaceViewer"], [470, 0, 0, "-", "vtkViewer"]], "fipy.viewers.vtkViewer.VTKCellViewer": [[466, 3, 1, "", "plot"], [466, 3, 1, "", "plotMesh"], [466, 3, 1, "", "setLimits"], [466, 2, 1, "", "title"], [466, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.VTKFaceViewer": [[466, 3, 1, "", "plot"], [466, 3, 1, "", "plotMesh"], [466, 3, 1, "", "setLimits"], [466, 2, 1, "", "title"], [466, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[468, 1, 1, "", "VTKCellViewer"]], "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer": [[468, 3, 1, "", "plot"], [468, 3, 1, "", "plotMesh"], [468, 3, 1, "", "setLimits"], [468, 2, 1, "", "title"], [468, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[469, 1, 1, "", "VTKFaceViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer": [[469, 3, 1, "", "plot"], [469, 3, 1, "", "plotMesh"], [469, 3, 1, "", "setLimits"], [469, 2, 1, "", "title"], [469, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkViewer": [[470, 1, 1, "", "VTKViewer"]], "fipy.viewers.vtkViewer.vtkViewer.VTKViewer": [[470, 3, 1, "", "plot"], [470, 3, 1, "", "plotMesh"], [470, 3, 1, "", "setLimits"], [470, 2, 1, "", "title"], [470, 2, 1, "", "vars"]], "package": [[480, 0, 0, "-", "subpackage"]], "package.subpackage": [[481, 0, 0, "-", "base"], [482, 0, 0, "-", "object"]], "package.subpackage.base": [[481, 1, 1, "", "Base"]], "package.subpackage.base.Base": [[481, 3, 1, "", "method1"], [481, 3, 1, "", "method2"]], "package.subpackage.object": [[482, 1, 1, "", "Object"]], "package.subpackage.object.Object": [[482, 3, 1, "", "method1"], [482, 3, 1, "", "method2"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute", "7": "std:cmdoption", "8": "std:envvar"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["std", "cmdoption", "program option"], "8": ["std", "envvar", "environment variable"]}, "titleterms": {"git": [0, 9, 11], "practic": 0, "branch": [0, 9, 11], "merg": 0, "chang": [0, 2, 8], "from": 0, "master": 0, "submit": 0, "code": [0, 16], "review": 0, "refactor": 0, "complet": 0, "continu": 0, "integr": 0, "conda": [0, 11], "lockfil": 0, "readm": 0, "like": 0, "document": [0, 1, 483], "make": [0, 8], "releas": 0, "sourc": [0, 8, 21, 68, 474], "upload": 0, "updat": [0, 7, 190, 191, 192, 193], "forg": 0, "feedstock": 0, "announc": 0, "fipi": [1, 7, 8, 11, 17, 20, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473], "packag": [1, 11, 479, 480, 481, 482], "log": [2, 17, 396, 397], "version": [2, 29], "3": 2, "99": 2, "43": 2, "g0a8c8100f": 2, "4": 2, "5": 2, "2024": 2, "06": 2, "25": 2, "pull": 2, "fix": [2, 17], "2023": 2, "27": 2, "2022": 2, "15": 2, "2": 2, "1": 2, "2020": 2, "08": 2, "01": 2, "02": 2, "14": 2, "2019": 2, "28": 2, "04": 2, "22": 2, "2017": 2, "17": 2, "2016": 2, "12": 2, "24": 2, "2015": 2, "2013": 2, "09": 2, "30": 2, "0": 2, "2012": 2, "10": 2, "03": 2, "16": 2, "2011": 2, "20": 2, "2010": 2, "05": 2, "2009": 2, "11": 2, "23": 2, "2008": 2, "2007": 2, "2006": 2, "2005": 2, "2004": 2, "contact": 3, "github": 3, "discuss": 3, "issu": 3, "stackoverflow": 3, "mail": 3, "list": 3, "archiv": 3, "contributor": 4, "disclaim": 5, "effici": 6, "comparison": [6, 16], "between": [6, 8], "cach": 6, "flag": [6, 17, 22], "exampl": [7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "select": 7, "diffus": [7, 8, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 474], "convect": [7, 8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 474], "phase": [7, 114, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "field": 7, "level": [7, 11, 21, 140], "set": [7, 11], "cahn": 7, "hilliard": 7, "fluid": 7, "flow": [7, 118, 119, 120], "reactiv": 7, "wet": 7, "frequent": 8, "ask": 8, "question": 8, "how": [8, 483], "do": 8, "i": 8, "repres": 8, "an": 8, "equat": [8, 17, 474, 475], "wai": 8, "model": 8, "anisotrop": 8, "process": 8, "more": 8, "gener": [8, 475], "coeffici": 8, "tensor": 8, "so": 8, "term": [8, 12, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 474], "take": 8, "form": 8, "partial_i": 8, "gamma_": 8, "ij": 8, "partial_j": 8, "phi": [8, 474], "doesn": 8, "t": [8, 15, 474], "involv": 8, "depend": 8, "variabl": [8, 17, 22, 107, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443], "transient": [8, 474], "what": 8, "my": 8, "where": 8, "put": 8, "m": 8, "solv": [8, 17], "can": 8, "see": 8, "export": 8, "data": 8, "save": 8, "plot": 8, "imag": 8, "onli": 8, "want": 8, "file": 8, "displai": 8, "screen": 8, "movi": 8, "why": 8, "viewer": [8, 18, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470], "look": 8, "iter": 8, "timestep": 8, "sweep": 8, "oh": 8, "distinct": 8, "cellvari": [8, 410], "facevari": [8, 418], "boundari": [8, 17, 474], "condit": [8, 17, 474], "doe": 8, "thi": 8, "error": 8, "messag": 8, "mean": 8, "": 8, "default": [8, 16, 17], "behavior": 8, "tell": 8, "run": 8, "parallel": [8, 16, 17, 160], "don": [8, 15], "script": [8, 21], "work": 8, "anymor": 8, "isn": 8, "answer": 8, "here": 8, "usag": [9, 11], "client": [9, 11], "develop": [10, 11, 21], "guidelin": 10, "object": [10, 21, 482], "orient": [10, 21], "design": [10, 21], "program": [10, 21], "style": 10, "test": [10, 17, 21, 37, 42, 69, 79, 87, 105, 106, 117, 120, 125, 132, 147, 153, 154, 159, 169, 174, 181, 185, 188, 189, 201, 207, 245, 310, 371, 377, 378, 379, 380, 381, 401, 440, 456, 460, 462, 467], "instal": [11, 13, 15], "pre": 11, "binder": 11, "recommend": 11, "method": [11, 474], "creat": 11, "environ": [11, 17, 22, 397], "enabl": 11, "obtain": 11, "requir": 11, "python": [11, 21], "numpi": 11, "option": 11, "gmsh": [11, 17], "scipi": [11, 16, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308], "scikit": 11, "fmm": 11, "lsmlib": 11, "nix": [11, 13], "us": [12, 17], "public": 14, "present": 14, "overview": 15, "even": 15, "you": 15, "read": [15, 483], "manual": [15, 17, 473], "download": 15, "support": 15, "convent": 15, "notat": 15, "solver": [16, 17, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "suit": [16, 17], "featur": 16, "petsc": [16, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "pyamg": [16, 281, 282, 283], "pyamgx": [16, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "trilino": [16, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "perform": 16, "serial": 16, "scale": 16, "fit": 16, "paramet": [16, 41], "smaller": 16, "number": 16, "ar": 16, "better": 16, "converg": [16, 256], "residu": 16, "criteria": 16, "toler": 16, "legaci": 16, "absolute_toler": 16, "divergence_toler": 16, "report": 16, "statu": 16, "diverg": 16, "command": [17, 22], "line": [17, 22, 141], "openmp": 17, "thread": 17, "v": 17, "mpi": 17, "rank": 17, "mesh": [17, 155, 156, 157, 158, 159, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], "coupl": [17, 74], "vector": [17, 403], "appli": 17, "valu": 17, "dirichlet": 17, "gradient": 17, "neumann": 17, "flux": 17, "outlet": 17, "inlet": 17, "spatial": 17, "vari": 17, "robin": [17, 67], "intern": 17, "adapt": 17, "step": [17, 27], "matplotlib": 18, "mayavi": 18, "virtual": 19, "kinet": 19, "materi": 19, "laboratori": 19, "content": 20, "implement": 21, "numer": [21, 476, 477], "approach": 21, "structur": 21, "base": [21, 481], "open": 21, "high": 21, "languag": 21, "extern": 22, "benchmark": [24, 25, 26, 27, 28, 29], "size": 26, "util": 28, "cahnhilliard": [30, 31, 32, 33, 34, 35, 36, 37], "mesh2d": [31, 61, 112, 231], "mesh2dcoupl": 32, "mesh3d": 33, "sphere": [34, 158], "spheredaemon": 35, "tanh1d": 36, "chemotaxi": [38, 39, 40, 41, 42], "input": [39, 99, 113], "input2d": 40, "advect": [44, 45, 46, 47, 122, 123, 124, 125, 126], "explicitupwind": 45, "implicitupwind": 46, "vanleerupwind": 47, "exponential1d": [48, 49, 50, 51, 52], "cylindricalmesh1d": 49, "cylindricalmesh1dnonuniform": 50, "mesh1d": [51, 54, 56, 65, 77, 81, 89, 90, 91, 110, 124, 130, 172, 230], "tri2d": [52, 57, 62, 66, 80, 250], "exponential1dback": [53, 54], "exponential1dsourc": [55, 56, 57], "exponential2d": [58, 59, 60, 61, 62], "cylindricalmesh2d": 59, "cylindricalmesh2dnonuniform": 60, "peclet": 63, "powerlaw1d": [64, 65, 66], "anisotropi": [71, 162], "circl": [72, 123, 128, 150, 171], "circlequad": 73, "electrostat": 75, "explicit": [76, 77, 78, 79, 80], "mixedel": 78, "mesh20x20": [82, 92, 93, 94, 95, 96, 97, 167], "mesh20x20coupl": 83, "nthorder": [84, 85, 86, 87], "input4thorder1d": 85, "input4thorder_lin": 86, "steadyst": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "inputperiod": 90, "tri2dinput": [91, 97, 100], "gmshinput": 93, "isotropi": 94, "modifiedmeshinput": 95, "orthoerror": 96, "mesh50x50": [98, 99, 100], "othermesh": [101, 102, 103, 104], "cubicalproblem": 102, "grid3dinput": 103, "prism": 104, "elphf": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "mesh1ddimension": 111, "phasediffus": 115, "poisson": 116, "stokescav": 119, "levelset": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "trench": 126, "distancefunct": [127, 128, 129, 130, 131, 132], "interior": 129, "squar": [131, 152], "electrochem": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "adsorbingsurfactantequ": 134, "adsorpt": 135, "gapfilldistancevari": 136, "gapfillmesh": 137, "gold": 138, "howtowriteascript": 139, "matplotlibsurfactantview": 142, "mayavisurfactantview": 143, "metaliondiffusionequ": 144, "simpletrenchsystem": 145, "surfactantbulkdiffusionequ": 146, "trenchmesh": 148, "surfact": [149, 150, 151, 152, 153], "expandingcircl": 151, "gmshrefin": 156, "inputgrid2d": 157, "anisotropyold": 163, "binari": 164, "binarycoupl": 165, "imping": [166, 167, 168, 169], "mesh40x1": 168, "missorient": [170, 171, 172, 173, 174], "modcircl": 173, "phaseview": 175, "polyxt": 176, "polyxtalcoupl": 177, "quaternari": 178, "simpl": 179, "symmetri": 180, "reactivewet": [182, 183, 184, 185], "liquidvapor1d": 183, "liquidvapor2d": 184, "riemann": [186, 187, 188], "acoust": 187, "update0_1to1_0": 191, "update1_0to2_0": 192, "update2_0to3_0": 193, "boundarycondit": [195, 196, 197, 198, 199, 200, 201], "constraint": 197, "fixedflux": 198, "fixedvalu": 199, "nthorderboundarycondit": 200, "matric": [202, 203, 204, 205, 206, 207, 208], "offsetsparsematrix": 203, "petscmatrix": 204, "scipymatrix": 205, "sparsematrix": 206, "trilinosmatrix": 208, "abstractmesh": 210, "builder": [211, 212, 213, 214, 215, 216, 217], "abstractgridbuild": 212, "grid1dbuild": 213, "grid2dbuild": 214, "grid3dbuild": 215, "periodicgrid1dbuild": 216, "utilityclass": 217, "cylindricalgrid1d": 218, "cylindricalgrid2d": 219, "cylindricalnonuniformgrid1d": 220, "cylindricalnonuniformgrid2d": 221, "cylindricaluniformgrid1d": 222, "cylindricaluniformgrid2d": 223, "factorymesh": 224, "gmshmesh": 225, "grid1d": 226, "grid2d": 227, "grid3d": 228, "nonuniformgrid1d": 232, "nonuniformgrid2d": 233, "nonuniformgrid3d": 234, "periodicgrid1d": 235, "periodicgrid2d": 236, "periodicgrid3d": 237, "represent": [238, 239, 240, 241], "abstractrepresent": 239, "gridrepresent": 240, "meshrepresent": 241, "skewedgrid2d": 242, "sphericalnonuniformgrid1d": 243, "sphericaluniformgrid1d": 244, "topologi": [246, 247, 248, 249], "abstracttopologi": 247, "gridtopologi": 248, "meshtopologi": 249, "uniformgrid": 251, "uniformgrid1d": 252, "uniformgrid2d": 253, "uniformgrid3d": 254, "comm": [258, 259, 260, 261, 313, 314, 315, 316, 384, 385, 386], "parallelpetsccommwrapp": 259, "petsccommwrapp": 260, "serialpetsccommwrapp": 261, "dummysolv": 262, "linearbicgsolv": 263, "linearcgssolv": [264, 298, 318], "linearcgsolv": [265, 288, 299, 319], "lineargmressolv": [266, 290, 300, 320], "linearlusolv": [267, 291, 301, 321], "petscconverg": 268, "petsckrylovsolv": 269, "petscsolv": 270, "precondition": [271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 292, 302, 303, 304, 305, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "defaultprecondition": 272, "hypreprecondition": 273, "icprecondition": [274, 324], "iluprecondition": [275, 303, 325], "jacobiprecondition": [276, 304, 326], "luprecondition": 277, "petscprecondition": 278, "ssorprecondition": 279, "smoothedaggregationprecondition": 283, "aggregationamgsolv": 285, "classicalamgsolv": 286, "linearbicgstabsolv": [287, 297, 317], "linearfgmressolv": 289, "pyamgxsolv": 293, "pyamgxconverg": 294, "smoother": 295, "scipyprecondition": 305, "scipyconverg": 306, "scipykrylovsolv": 307, "scipysolv": 308, "aztecconverg": 312, "epetracommwrapp": 314, "parallelepetracommwrapp": 315, "serialepetracommwrapp": 316, "domdecompprecondition": 323, "multilevelddmlprecondition": 327, "multilevelddprecondition": 328, "multilevelnssaprecondition": 329, "multilevelprecondition": 330, "multilevelsaprecondition": 331, "multilevelsgsprecondition": 332, "multilevelsolversmootherprecondition": 333, "trilinosprecondition": 334, "trilinosaztecoosolv": 335, "trilinosmltest": 336, "trilinosnonlinearsolv": 337, "trilinossolv": 338, "stepper": [339, 340, 341, 342], "pidstepp": 340, "pseudorkqsstepp": 341, "abstractbinaryterm": 344, "abstractconvectionterm": 345, "abstractdiffusionterm": 346, "abstractupwindconvectionterm": 347, "advectionterm": 348, "asymmetricconvectionterm": 349, "binaryterm": 350, "cellterm": 351, "centraldiffconvectionterm": 352, "coupledbinaryterm": 353, "diffusionterm": 354, "diffusiontermcorrect": 355, "diffusiontermnocorrect": 356, "explicitdiffusionterm": 357, "explicitsourceterm": 358, "explicitupwindconvectionterm": 359, "exponentialconvectionterm": 360, "faceterm": 361, "firstorderadvectionterm": 362, "hybridconvectionterm": 363, "implicitdiffusionterm": 364, "implicitsourceterm": 365, "nondiffusionterm": 366, "powerlawconvectionterm": 367, "residualterm": 368, "sourceterm": 369, "transientterm": 372, "unaryterm": 373, "upwindconvectionterm": 374, "vanleerconvectionterm": 375, "testfipi": 376, "doctestplu": 378, "lateimporttest": 379, "testprogram": 381, "tool": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], "changelog": 383, "commwrapp": 385, "dummycomm": 386, "copy_script": 387, "debug": 388, "decor": 389, "dimens": [390, 391, 392, 393], "dictwithdefault": 391, "numberdict": 392, "physicalfield": 393, "dump": 394, "inlin": 395, "numerix": 398, "parser": 399, "sharedtempfil": 400, "timer": 402, "addoverfacesvari": 405, "arithmeticcelltofacevari": 406, "betanoisevari": 407, "binaryoperatorvari": 408, "celltofacevari": 409, "constant": 411, "constraintmask": 412, "coupledcellvari": 413, "distancevari": 414, "exponentialnoisevari": 415, "facegradcontributionsvari": 416, "facegradvari": 417, "gammanoisevari": 419, "gausscellgradvari": 420, "gaussiannoisevari": 421, "harmoniccelltofacevari": 422, "histogramvari": 423, "interfaceareavari": 424, "interfaceflagvari": 425, "leastsquarescellgradvari": 426, "levelsetdiffusionvari": 427, "meshvari": 428, "minmodcelltofacevari": 429, "modcellgradvari": 430, "modcelltofacevari": 431, "modfacegradvari": 432, "modphysicalfield": 433, "modularvari": 434, "noisevari": 435, "operatorvari": 436, "scharfettergummelfacevari": 437, "surfactantconvectionvari": 438, "surfactantvari": 439, "unaryoperatorvari": 441, "uniformnoisevari": 442, "matplotlibview": [445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "abstractmatplotlib2dview": 446, "abstractmatplotlibview": 447, "matplotlib1dview": 448, "matplotlib2dcontourview": 449, "matplotlib2dgridcontourview": 450, "matplotlib2dgridview": 451, "matplotlib2dview": 452, "matplotlibsparsematrixview": 453, "matplotlibstreamview": 454, "matplotlibvectorview": 455, "mayaviview": [457, 458, 459, 460], "mayavicli": 458, "mayavidaemon": 459, "multiview": 461, "testinteract": 463, "tsvviewer": 464, "vtkviewer": [466, 467, 468, 469, 470], "vtkcellview": 468, "vtkfaceview": 469, "glossari": 471, "introduct": 472, "finit": 474, "volum": 474, "cell": 474, "center": 474, "fvm": 474, "cc": 474, "vertex": 474, "vc": 474, "discret": 474, "partial": 474, "rho": 474, "nabla": 474, "cdot": 474, "left": 474, "vec": 474, "u": 474, "right": 474, "gamma_1": 474, "higher": 474, "order": 474, "linear": 474, "conserv": 475, "theoret": 476, "background": 476, "scheme": 477, "refer": 478, "subpackag": [480, 481, 482], "modul": 483}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"Git practices": [[0, "git-practices"]], "Branches": [[0, "branches"]], "Merging changes from master to the branch": [[0, "merging-changes-from-master-to-the-branch"]], "Submit branch for code review": [[0, "submit-branch-for-code-review"]], "Refactoring complete: merge branch to master": [[0, "refactoring-complete-merge-branch-to-master"]], "Continuous Integration": [[0, "continuous-integration"]], "Conda Lockfiles": [[0, "conda-lockfiles"]], "README-like documents": [[0, "readme-like-documents"]], "Making a Release": [[0, "making-a-release"]], "Source": [[0, "source"]], "Release from master": [[0, "release-from-master"]], "Upload": [[0, "upload"]], "Update conda-forge feedstock": [[0, "update-conda-forge-feedstock"]], "Announce": [[0, "announce"]], "fipy Package Documentation": [[1, "fipy-package-documentation"]], "Change Log": [[2, "change-log"]], "Version 3.99+43.g0a8c8100f": [[2, "version-release"]], "Version 3.4.5 - 2024-06-25": [[2, "version-3-4-5-2024-06-25"]], "Pulls": [[2, "pulls"], [2, "id21"], [2, "id29"], [2, "id74"], [2, "id83"], [2, "id89"], [2, "id102"], [2, "id120"], [2, "id193"]], "Fixes": [[2, "fixes"], [2, "id27"], [2, "id47"], [2, "id79"], [2, "id87"], [2, "id98"], [2, "id108"], [2, "id152"], [2, "id191"], [2, "id228"], [2, "id253"], [2, "id263"], [2, "id326"], [2, "id330"], [2, "id389"], [2, "id413"], [2, "id421"], [2, "id429"], [2, "id438"], [2, "id445"], [2, "id449"], [2, "id461"], [2, "id463"], [2, "id506"], [2, "id522"], [2, "id541"]], "Version 3.4.4 - 2023-06-27": [[2, "version-3-4-4-2023-06-27"]], "Version 3.4.3 - 2022-06-15": [[2, "version-3-4-3-2022-06-15"]], "Version 3.4.2.1 - 2020-08-01": [[2, "version-3-4-2-1-2020-08-01"]], "Version 3.4.1 - 2020-02-14": [[2, "version-3-4-1-2020-02-14"]], "Version 3.4 - 2020-02-06": [[2, "version-3-4-2020-02-06"]], "Version 3.3 - 2019-06-28": [[2, "version-3-3-2019-06-28"]], "Version 3.2 - 2019-04-22": [[2, "version-3-2-2019-04-22"]], "Version 3.1.3 - 2017-01-17": [[2, "version-3-1-3-2017-01-17"]], "Version 3.1.2 - 2016-12-24": [[2, "version-3-1-2-2016-12-24"]], "Version 3.1.1 - 2015-12-17": [[2, "version-3-1-1-2015-12-17"]], "Version 3.1 - 2013-09-30": [[2, "version-3-1-2013-09-30"]], "Version 3.0.1 - 2012-10-03": [[2, "version-3-0-1-2012-10-03"]], "Version 3.0 - 2012-08-16": [[2, "version-3-0-2012-08-16"]], "Version 2.1.3 - 2012-01-17": [[2, "version-2-1-3-2012-01-17"]], "Version 2.1.2 - 2011-04-20": [[2, "version-2-1-2-2011-04-20"]], "Version 2.1.1 - 2010-10-05": [[2, "version-2-1-1-2010-10-05"]], "Version 2.1 - 2010-04-01": [[2, "version-2-1-2010-04-01"]], "Version 2.0.3 - 2010-03-17": [[2, "version-2-0-3-2010-03-17"]], "Version 2.0.2 - 2009-06-11": [[2, "version-2-0-2-2009-06-11"]], "Version 2.0.1 - 2009-04-23": [[2, "version-2-0-1-2009-04-23"]], "Version 2.0 - 2009-02-09": [[2, "version-2-0-2009-02-09"]], "Version 1.2.3 - 2009-01-0": [[2, "version-1-2-3-2009-01-0"]], "Version 1.2.2 - 2008-12-30": [[2, "version-1-2-2-2008-12-30"]], "Version 1.2.1 - 2008-02-08": [[2, "version-1-2-1-2008-02-08"]], "Version 1.2 - 2007-02-12": [[2, "version-1-2-2007-02-12"]], "Version 1.1 - 2006-06-06": [[2, "version-1-1-2006-06-06"]], "Version 1.0 - 2005-09-16": [[2, "version-1-0-2005-09-16"]], "Version 0.1.1": [[2, "version-0-1-1"]], "Version 0.1 - 2004-11-05": [[2, "version-0-1-2004-11-05"]], "Contact": [[3, "contact"]], "GitHub Discussions": [[3, "github-discussions"]], "GitHub Issues": [[3, "github-issues"]], "StackOverflow": [[3, "stackoverflow"]], "Mailing List": [[3, "mailing-list"]], "List Archive": [[3, "list-archive"]], "Contributors": [[4, "contributors"]], "Disclaimer": [[5, "disclaimer"]], "Efficiency": [[6, "efficiency"]], "Efficiency comparison between --no-cache and --cache flags": [[6, "efficiency-comparison-between-no-cache-and-cache-flags"]], "Examples": [[7, "examples"]], "Selected Examples": [[7, "selected-examples"]], "Diffusion Examples": [[7, "diffusion-examples"]], "Convection Examples": [[7, "convection-examples"]], "Phase Field Examples": [[7, "phase-field-examples"]], "Level Set Examples": [[7, "level-set-examples"]], "Cahn-Hilliard Examples": [[7, "cahn-hilliard-examples"]], "Fluid Flow Examples": [[7, "fluid-flow-examples"]], "Reactive Wetting Examples": [[7, "reactive-wetting-examples"]], "Updating FiPy": [[7, "updating-fipy"]], "Frequently Asked Questions": [[8, "frequently-asked-questions"]], "How do I represent an equation in FiPy?": [[8, "how-do-i-represent-an-equation-in-fipy"]], "Is there a way to model an anisotropic diffusion process or more generally to represent the diffusion coefficient as a tensor so that the diffusion term takes the form \\partial_i \\Gamma_{ij}\\partial_j \\phi?": [[8, "is-there-a-way-to-model-an-anisotropic-diffusion-process-or-more-generally-to-represent-the-diffusion-coefficient-as-a-tensor-so-that-the-diffusion-term-takes-the-form-partial-i-gamma-ij-partial-j-phi"]], "How do I represent a \u2026 term that doesn\u2019t involve the dependent variable?": [[8, "how-do-i-represent-a-term-that-doesn-t-involve-the-dependent-variable"]], "How do I represent a diffusive source?": [[8, "how-do-i-represent-a-diffusive-source"]], "How do I represent a convective source?": [[8, "how-do-i-represent-a-convective-source"]], "How do I represent a transient source?": [[8, "how-do-i-represent-a-transient-source"]], "What if my term involves the dependent variable, but not where FiPy puts it?": [[8, "what-if-my-term-involves-the-dependent-variable-but-not-where-fipy-puts-it"]], "What if the coefficient of a term depends on the variable that I\u2019m solving for?": [[8, "what-if-the-coefficient-of-a-term-depends-on-the-variable-that-i-m-solving-for"]], "How can I see what I\u2019m doing?": [[8, "how-can-i-see-what-i-m-doing"]], "How do I export data?": [[8, "how-do-i-export-data"]], "How do I save a plot image?": [[8, "how-do-i-save-a-plot-image"]], "What if I only want the saved file, with no display on screen?": [[8, "what-if-i-only-want-the-saved-file-with-no-display-on-screen"]], "How do I make a movie?": [[8, "how-do-i-make-a-movie"]], "Why doesn\u2019t the Viewer look the way I want?": [[8, "why-doesn-t-the-viewer-look-the-way-i-want"]], "Iterations, timesteps, and sweeps? Oh, my!": [[8, "iterations-timesteps-and-sweeps-oh-my"]], "Why the distinction between CellVariable and FaceVariable coefficients?": [[8, "why-the-distinction-between-cellvariable-and-facevariable-coefficients"]], "How do I represent boundary conditions?": [[8, "how-do-i-represent-boundary-conditions"]], "What does this error message mean?": [[8, "what-does-this-error-message-mean"]], "How do I change FiPy\u2019s default behavior?": [[8, "how-do-i-change-fipy-s-default-behavior"]], "How can I tell if I\u2019m running in parallel?": [[8, "how-can-i-tell-if-i-m-running-in-parallel"]], "Why don\u2019t my scripts work anymore?": [[8, "why-don-t-my-scripts-work-anymore"]], "What if my question isn\u2019t answered here?": [[8, "what-if-my-question-isn-t-answered-here"]], "Git usage": [[9, "git-usage"], [11, "git-usage"]], "Git client": [[9, "git-client"], [11, "git-client"]], "Git branches": [[9, "git-branches"], [11, "git-branches"]], "Development Guidelines": [[10, "development-guidelines"]], "Object Oriented Design": [[10, "object-oriented-design"]], "Programming Style": [[10, "programming-style"]], "Testing": [[10, "testing"]], "Installation": [[11, "installation"]], "Pre-Installed on Binder": [[11, "pre-installed-on-binder"]], "Recommended Method": [[11, "recommended-method"]], "Install conda": [[11, "install-conda"]], "Create a conda environment": [[11, "create-a-conda-environment"]], "Install FiPy": [[11, "install-fipy"]], "Enable conda environment": [[11, "enable-conda-environment"]], "Obtaining FiPy": [[11, "obtaining-fipy"]], "Installing FiPy": [[11, "installing-fipy"]], "Required Packages": [[11, "required-packages"]], "Python": [[11, "python"]], "NumPy": [[11, "numpy"]], "Optional Packages": [[11, "optional-packages"]], "Gmsh": [[11, "gmsh"]], "SciPy": [[11, "scipy"], [16, "id13"]], "Level Set Packages": [[11, "level-set-packages"]], "Scikit-fmm": [[11, "scikit-fmm"]], "LSMLIB": [[11, "lsmlib"]], "Development Environment": [[11, "development-environment"]], "Nix": [[11, "nix"]], "Nix Installation": [[11, "nix-installation"], [13, "nix-installation"]], "Installing": [[11, "installing"], [13, "installing"]], "Terms of Use": [[12, "terms-of-use"]], "Publications": [[14, "publications"]], "Presentations": [[14, "presentations"]], "Overview": [[15, "overview"]], "Even if you don\u2019t read manuals\u2026": [[15, "even-if-you-don-t-read-manuals"]], "Download and Installation": [[15, "download-and-installation"]], "Support": [[15, "support"]], "Conventions and Notation": [[15, "conventions-and-notation"]], "Solvers": [[16, "solvers"]], "Solver Suite Features": [[16, "id41"]], "PETSc": [[16, "petsc"]], "PyAMG": [[16, "id9"]], "pyamgx": [[16, "id11"]], "Trilinos": [[16, "trilinos"]], "Performance Comparison": [[16, "performance-comparison"]], "Serial Performance": [[16, "serial-performance"]], "Parallel Performance": [[16, "parallel-performance"]], "Parallel scaling fitting parameters (smaller numbers are better)": [[16, "id48"]], "Convergence": [[16, "convergence"]], "Residual Criteria": [[16, "id49"]], "Tolerance": [[16, "tolerance"]], "default": [[16, "default"]], "legacy": [[16, "legacy"]], "absolute_tolerance": [[16, "absolute-tolerance"]], "divergence_tolerance": [[16, "divergence-tolerance"]], "Reporting": [[16, "reporting"]], "Convergence Status Codes": [[16, "id50"]], "Divergence Status Codes": [[16, "id51"]], "Using FiPy": [[17, "using-fipy"]], "Logging": [[17, "logging"]], "Testing FiPy": [[17, "testing-fipy"]], "Parallel Tests": [[17, "parallel-tests"]], "Command-line Flags and Environment Variables": [[17, "command-line-flags-and-environment-variables"]], "Command-line Flags": [[17, "command-line-flags"]], "Environment Variables": [[17, "environment-variables"]], "Solver Suites": [[17, "solver-suites"]], "Solving in Parallel": [[17, "solving-in-parallel"]], "OpenMP Threads vs. MPI Ranks": [[17, "openmp-threads-vs-mpi-ranks"]], "Meshing with Gmsh": [[17, "meshing-with-gmsh"]], "Coupled and Vector Equations": [[17, "coupled-and-vector-equations"]], "Boundary Conditions": [[17, "boundary-conditions"], [474, "boundary-conditions"]], "Default boundary conditions": [[17, "default-boundary-conditions"]], "Applying fixed value (Dirichlet) boundary conditions": [[17, "applying-fixed-value-dirichlet-boundary-conditions"]], "Applying fixed gradient boundary conditions (Neumann)": [[17, "applying-fixed-gradient-boundary-conditions-neumann"]], "Applying fixed flux boundary conditions": [[17, "applying-fixed-flux-boundary-conditions"]], "Applying outlet or inlet boundary conditions": [[17, "applying-outlet-or-inlet-boundary-conditions"]], "Applying spatially varying boundary conditions": [[17, "applying-spatially-varying-boundary-conditions"]], "Applying Robin boundary conditions": [[17, "applying-robin-boundary-conditions"]], "Applying internal \u201cboundary\u201d conditions": [[17, "applying-internal-boundary-conditions"]], "Internal fixed value": [[17, "internal-fixed-value"]], "Internal fixed gradient": [[17, "internal-fixed-gradient"]], "Internal Robin condition": [[17, "internal-robin-condition"]], "Adaptive Stepping": [[17, "adaptive-stepping"]], "Manual": [[17, "manual"]], "Viewers": [[18, "viewers"]], "Matplotlib": [[18, "matplotlib"]], "Mayavi": [[18, "mayavi"]], "Virtual Kinetics of Materials Laboratory": [[19, "virtual-kinetics-of-materials-laboratory"]], "FiPy Contents": [[20, "fipy-contents"]], "Design and Implementation": [[21, "design-and-implementation"]], "Design": [[21, "design"]], "Numerical Approach": [[21, "numerical-approach"]], "Object Oriented Structure": [[21, "object-oriented-structure"]], "Test Based Development": [[21, "test-based-development"]], "Open Source": [[21, "open-source"]], "High-Level Scripting Language": [[21, "high-level-scripting-language"]], "Python Programming Language": [[21, "python-programming-language"]], "Implementation": [[21, "implementation"]], "External Command-line Flags": [[22, "external-command-line-flags"]], "External Environment Variables": [[22, "external-environment-variables"]], "examples": [[23, "module-examples"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnHilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnHilliard.mesh2D": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnHilliard.mesh2DCoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnHilliard.mesh3D": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnHilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnHilliard.sphereDaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "examples.cahnHilliard.tanh1D": [[36, "module-examples.cahnHilliard.tanh1D"]], "examples.cahnHilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2D": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitUpwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitUpwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanLeerUpwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1D": [[48, "module-examples.convection.exponential1D"]], "examples.convection.exponential1D.cylindricalMesh1D": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1D.cylindricalMesh1DNonUniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1D.mesh1D": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1D.tri2D": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1DBack": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1DBack.mesh1D": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1DSource": [[55, "module-examples.convection.exponential1DSource"]], "examples.convection.exponential1DSource.mesh1D": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1DSource.tri2D": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2D": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2D.cylindricalMesh2D": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2D.cylindricalMesh2DNonUniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2D.mesh2D": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2D.tri2D": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerLaw1D": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerLaw1D.mesh1D": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerLaw1D.tri2D": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "examples.diffusion.circleQuad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1D": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2D": [[80, "module-examples.diffusion.explicit.tri2D"]], "examples.diffusion.mesh1D": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20Coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthOrder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthOrder.input4thOrder1D": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthOrder.input4thOrder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthOrder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadyState": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadyState.mesh1D": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadyState.mesh1D.inputPeriodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadyState.mesh1D.tri2Dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadyState.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadyState.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadyState.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadyState.mesh20x20.tri2Dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadyState.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadyState.mesh50x50.tri2Dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadyState.otherMeshes.cubicalProblem": [[102, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadyState.otherMeshes.grid3Dinput": [[103, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadyState.otherMeshes.prism": [[104, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadyState.test": [[105, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[106, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[107, "module-examples.diffusion.variable"]], "examples.elphf": [[108, "module-examples.elphf"]], "examples.elphf.diffusion": [[109, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1D": [[110, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1Ddimensional": [[111, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2D": [[112, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[113, "module-examples.elphf.input"]], "examples.elphf.phase": [[114, "module-examples.elphf.phase"]], "examples.elphf.phaseDiffusion": [[115, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[116, "module-examples.elphf.poisson"]], "examples.elphf.test": [[117, "module-examples.elphf.test"]], "examples.flow": [[118, "module-examples.flow"]], "examples.flow.stokesCavity": [[119, "module-examples.flow.stokesCavity"]], "examples.flow.test": [[120, "module-examples.flow.test"]], "examples.levelSet": [[121, "module-examples.levelSet"]], "examples.levelSet.advection": [[122, "module-examples.levelSet.advection"]], "examples.levelSet.advection.circle": [[123, "module-examples.levelSet.advection.circle"]], "examples.levelSet.advection.mesh1D": [[124, "module-examples.levelSet.advection.mesh1D"]], "examples.levelSet.advection.test": [[125, "module-examples.levelSet.advection.test"]], "examples.levelSet.advection.trench": [[126, "module-examples.levelSet.advection.trench"]], "examples.levelSet.distanceFunction": [[127, "module-examples.levelSet.distanceFunction"]], "examples.levelSet.distanceFunction.circle": [[128, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelSet.distanceFunction.interior": [[129, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelSet.distanceFunction.mesh1D": [[130, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelSet.distanceFunction.square": [[131, "module-examples.levelSet.distanceFunction.square"]], "examples.levelSet.distanceFunction.test": [[132, "module-examples.levelSet.distanceFunction.test"]], "examples.levelSet.electroChem": [[133, "module-examples.levelSet.electroChem"]], "examples.levelSet.electroChem.adsorbingSurfactantEquation": [[134, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelSet.electroChem.adsorption": [[135, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelSet.electroChem.gapFillDistanceVariable": [[136, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelSet.electroChem.gapFillMesh": [[137, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelSet.electroChem.gold": [[138, "module-examples.levelSet.electroChem.gold"]], "examples.levelSet.electroChem.howToWriteAScript": [[139, "module-examples.levelSet.electroChem.howToWriteAScript"]], "examples.levelSet.electroChem.leveler": [[140, "module-examples.levelSet.electroChem.leveler"]], "examples.levelSet.electroChem.lines": [[141, "module-examples.levelSet.electroChem.lines"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[142, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[143, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "examples.levelSet.electroChem.metalIonDiffusionEquation": [[144, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelSet.electroChem.simpleTrenchSystem": [[145, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "examples.levelSet.electroChem.surfactantBulkDiffusionEquation": [[146, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelSet.electroChem.test": [[147, "module-examples.levelSet.electroChem.test"]], "examples.levelSet.electroChem.trenchMesh": [[148, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelSet.surfactant": [[149, "module-examples.levelSet.surfactant"]], "examples.levelSet.surfactant.circle": [[150, "module-examples.levelSet.surfactant.circle"]], "examples.levelSet.surfactant.expandingCircle": [[151, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelSet.surfactant.square": [[152, "module-examples.levelSet.surfactant.square"]], "examples.levelSet.surfactant.test": [[153, "module-examples.levelSet.surfactant.test"]], "examples.levelSet.test": [[154, "module-examples.levelSet.test"]], "examples.meshing": [[155, "module-examples.meshing"]], "examples.meshing.gmshRefinement": [[156, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputGrid2D": [[157, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[158, "module-examples.meshing.sphere"]], "examples.meshing.test": [[159, "module-examples.meshing.test"]], "examples.parallel": [[160, "module-examples.parallel"]], "examples.phase": [[161, "module-examples.phase"]], "examples.phase.anisotropy": [[162, "module-examples.phase.anisotropy"]], "examples.phase.anisotropyOLD": [[163, "module-examples.phase.anisotropyOLD"]], "examples.phase.binary": [[164, "module-examples.phase.binary"]], "examples.phase.binaryCoupled": [[165, "module-examples.phase.binaryCoupled"]], "examples.phase.impingement": [[166, "module-examples.phase.impingement"]], "examples.phase.impingement.mesh20x20": [[167, "module-examples.phase.impingement.mesh20x20"]], "examples.phase.impingement.mesh40x1": [[168, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[169, "module-examples.phase.impingement.test"]], "examples.phase.missOrientation": [[170, "module-examples.phase.missOrientation"]], "examples.phase.missOrientation.circle": [[171, "module-examples.phase.missOrientation.circle"]], "examples.phase.missOrientation.mesh1D": [[172, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missOrientation.modCircle": [[173, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missOrientation.test": [[174, "module-examples.phase.missOrientation.test"]], "examples.phase.phaseViewer": [[175, "module-examples.phase.phaseViewer"]], "examples.phase.polyxtal": [[176, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalCoupled": [[177, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[178, "module-examples.phase.quaternary"]], "examples.phase.simple": [[179, "module-examples.phase.simple"]], "examples.phase.symmetry": [[180, "module-examples.phase.symmetry"]], "examples.phase.test": [[181, "module-examples.phase.test"]], "examples.reactiveWetting": [[182, "module-examples.reactiveWetting"]], "examples.reactiveWetting.liquidVapor1D": [[183, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactiveWetting.liquidVapor2D": [[184, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactiveWetting.test": [[185, "module-examples.reactiveWetting.test"]], "examples.riemann": [[186, "module-examples.riemann"]], "examples.riemann.acoustics": [[187, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[188, "module-examples.riemann.test"]], "examples.test": [[189, "module-examples.test"]], "examples.updating": [[190, "module-examples.updating"]], "examples.updating.update0_1to1_0": [[191, "module-examples.updating.update0_1to1_0"]], "examples.updating.update1_0to2_0": [[192, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[193, "module-examples.updating.update2_0to3_0"]], "fipy": [[194, "module-fipy"]], "fipy.boundaryConditions": [[195, "module-fipy.boundaryConditions"]], "fipy.boundaryConditions.boundaryCondition": [[196, "module-fipy.boundaryConditions.boundaryCondition"]], "fipy.boundaryConditions.constraint": [[197, "module-fipy.boundaryConditions.constraint"]], "fipy.boundaryConditions.fixedFlux": [[198, "module-fipy.boundaryConditions.fixedFlux"]], "fipy.boundaryConditions.fixedValue": [[199, "module-fipy.boundaryConditions.fixedValue"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[200, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryConditions.test": [[201, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[202, "module-fipy.matrices"]], "fipy.matrices.offsetSparseMatrix": [[203, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscMatrix": [[204, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.scipyMatrix": [[205, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparseMatrix": [[206, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[207, "module-fipy.matrices.test"]], "fipy.matrices.trilinosMatrix": [[208, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[209, "module-fipy.meshes"]], "fipy.meshes.abstractMesh": [[210, "module-fipy.meshes.abstractMesh"]], "fipy.meshes.builders": [[211, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractGridBuilder": [[212, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1DBuilder": [[213, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2DBuilder": [[214, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3DBuilder": [[215, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicGrid1DBuilder": [[216, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityClasses": [[217, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalGrid1D": [[218, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalGrid2D": [[219, "module-fipy.meshes.cylindricalGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[220, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[221, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid1D": [[222, "module-fipy.meshes.cylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid2D": [[223, "module-fipy.meshes.cylindricalUniformGrid2D"]], "fipy.meshes.factoryMeshes": [[224, "module-fipy.meshes.factoryMeshes"]], "fipy.meshes.gmshMesh": [[225, "module-fipy.meshes.gmshMesh"]], "fipy.meshes.grid1D": [[226, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2D": [[227, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3D": [[228, "module-fipy.meshes.grid3D"]], "fipy.meshes.mesh": [[229, "module-fipy.meshes.mesh"]], "fipy.meshes.mesh1D": [[230, "module-fipy.meshes.mesh1D"]], "fipy.meshes.mesh2D": [[231, "module-fipy.meshes.mesh2D"]], "fipy.meshes.nonUniformGrid1D": [[232, "module-fipy.meshes.nonUniformGrid1D"]], "fipy.meshes.nonUniformGrid2D": [[233, "module-fipy.meshes.nonUniformGrid2D"]], "fipy.meshes.nonUniformGrid3D": [[234, "module-fipy.meshes.nonUniformGrid3D"]], "fipy.meshes.periodicGrid1D": [[235, "module-fipy.meshes.periodicGrid1D"]], "fipy.meshes.periodicGrid2D": [[236, "module-fipy.meshes.periodicGrid2D"]], "fipy.meshes.periodicGrid3D": [[237, "module-fipy.meshes.periodicGrid3D"]], "fipy.meshes.representations": [[238, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractRepresentation": [[239, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridRepresentation": [[240, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshRepresentation": [[241, "module-fipy.meshes.representations.meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[242, "module-fipy.meshes.skewedGrid2D"]], "fipy.meshes.sphericalNonUniformGrid1D": [[243, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D": [[244, "module-fipy.meshes.sphericalUniformGrid1D"]], "fipy.meshes.test": [[245, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[246, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstractTopology": [[247, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridTopology": [[248, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshTopology": [[249, "module-fipy.meshes.topologies.meshTopology"]], "fipy.meshes.tri2D": [[250, "module-fipy.meshes.tri2D"]], "fipy.meshes.uniformGrid": [[251, "module-fipy.meshes.uniformGrid"]], "fipy.meshes.uniformGrid1D": [[252, "module-fipy.meshes.uniformGrid1D"]], "fipy.meshes.uniformGrid2D": [[253, "module-fipy.meshes.uniformGrid2D"]], "fipy.meshes.uniformGrid3D": [[254, "module-fipy.meshes.uniformGrid3D"]], "fipy.solvers": [[255, "module-fipy.solvers"]], "fipy.solvers.convergence": [[256, "module-fipy.solvers.convergence"]], "fipy.solvers.petsc": [[257, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[258, "module-fipy.solvers.petsc.comms"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[259, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[260, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[261, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "fipy.solvers.petsc.dummySolver": [[262, "module-fipy.solvers.petsc.dummySolver"]], "fipy.solvers.petsc.linearBicgSolver": [[263, "module-fipy.solvers.petsc.linearBicgSolver"]], "fipy.solvers.petsc.linearCGSSolver": [[264, "module-fipy.solvers.petsc.linearCGSSolver"]], "fipy.solvers.petsc.linearCGSolver": [[265, "module-fipy.solvers.petsc.linearCGSolver"]], "fipy.solvers.petsc.linearGMRESSolver": [[266, "module-fipy.solvers.petsc.linearGMRESSolver"]], "fipy.solvers.petsc.linearLUSolver": [[267, "module-fipy.solvers.petsc.linearLUSolver"]], "fipy.solvers.petsc.petscConvergence": [[268, "module-fipy.solvers.petsc.petscConvergence"]], "fipy.solvers.petsc.petscKrylovSolver": [[269, "module-fipy.solvers.petsc.petscKrylovSolver"]], "fipy.solvers.petsc.petscSolver": [[270, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.petsc.preconditioners": [[271, "module-fipy.solvers.petsc.preconditioners"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[272, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.hyprePreconditioner": [[273, "module-fipy.solvers.petsc.preconditioners.hyprePreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[274, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[275, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[276, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[277, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[278, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[279, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "fipy.solvers.preconditioner": [[280, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyAMG": [[281, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyAMG.preconditioners": [[282, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[283, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[284, "module-fipy.solvers.pyamgx"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[285, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[286, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[287, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearCGSolver": [[288, "module-fipy.solvers.pyamgx.linearCGSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[289, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[290, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "fipy.solvers.pyamgx.linearLUSolver": [[291, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.preconditioners": [[292, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[293, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[294, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "fipy.solvers.pyamgx.smoothers": [[295, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.scipy": [[296, "module-fipy.solvers.scipy"]], "fipy.solvers.scipy.linearBicgstabSolver": [[297, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "fipy.solvers.scipy.linearCGSSolver": [[298, "module-fipy.solvers.scipy.linearCGSSolver"]], "fipy.solvers.scipy.linearCGSolver": [[299, "module-fipy.solvers.scipy.linearCGSolver"]], "fipy.solvers.scipy.linearGMRESSolver": [[300, "module-fipy.solvers.scipy.linearGMRESSolver"]], "fipy.solvers.scipy.linearLUSolver": [[301, "module-fipy.solvers.scipy.linearLUSolver"]], "fipy.solvers.scipy.preconditioners": [[302, "module-fipy.solvers.scipy.preconditioners"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[303, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[304, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[305, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[306, "module-fipy.solvers.scipy.scipyConvergence"]], "fipy.solvers.scipy.scipyKrylovSolver": [[307, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipySolver": [[308, "module-fipy.solvers.scipy.scipySolver"]], "fipy.solvers.solver": [[309, "module-fipy.solvers.solver"]], "fipy.solvers.test": [[310, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[311, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.aztecConvergence": [[312, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[313, "module-fipy.solvers.trilinos.comms"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[314, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[315, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[316, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[317, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "fipy.solvers.trilinos.linearCGSSolver": [[318, "module-fipy.solvers.trilinos.linearCGSSolver"]], "fipy.solvers.trilinos.linearCGSolver": [[319, "module-fipy.solvers.trilinos.linearCGSolver"]], "fipy.solvers.trilinos.linearGMRESSolver": [[320, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "fipy.solvers.trilinos.linearLUSolver": [[321, "module-fipy.solvers.trilinos.linearLUSolver"]], "fipy.solvers.trilinos.preconditioners": [[322, "module-fipy.solvers.trilinos.preconditioners"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[323, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[329, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[330, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[331, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[332, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[333, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[334, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[335, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosMLTest": [[336, "module-fipy.solvers.trilinos.trilinosMLTest"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[337, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosSolver": [[338, "module-fipy.solvers.trilinos.trilinosSolver"]], "fipy.steppers": [[339, "module-fipy.steppers"]], "fipy.steppers.pidStepper": [[340, "module-fipy.steppers.pidStepper"]], "fipy.steppers.pseudoRKQSStepper": [[341, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[342, "module-fipy.steppers.stepper"]], "fipy.terms": [[343, "module-fipy.terms"]], "fipy.terms.abstractBinaryTerm": [[344, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractConvectionTerm": [[345, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractDiffusionTerm": [[346, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractUpwindConvectionTerm": [[347, "module-fipy.terms.abstractUpwindConvectionTerm"]], "fipy.terms.advectionTerm": [[348, "module-fipy.terms.advectionTerm"]], "fipy.terms.asymmetricConvectionTerm": [[349, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryTerm": [[350, "module-fipy.terms.binaryTerm"]], "fipy.terms.cellTerm": [[351, "module-fipy.terms.cellTerm"]], "fipy.terms.centralDiffConvectionTerm": [[352, "module-fipy.terms.centralDiffConvectionTerm"]], "fipy.terms.coupledBinaryTerm": [[353, "module-fipy.terms.coupledBinaryTerm"]], "fipy.terms.diffusionTerm": [[354, "module-fipy.terms.diffusionTerm"]], "fipy.terms.diffusionTermCorrection": [[355, "module-fipy.terms.diffusionTermCorrection"]], "fipy.terms.diffusionTermNoCorrection": [[356, "module-fipy.terms.diffusionTermNoCorrection"]], "fipy.terms.explicitDiffusionTerm": [[357, "module-fipy.terms.explicitDiffusionTerm"]], "fipy.terms.explicitSourceTerm": [[358, "module-fipy.terms.explicitSourceTerm"]], "fipy.terms.explicitUpwindConvectionTerm": [[359, "module-fipy.terms.explicitUpwindConvectionTerm"]], "fipy.terms.exponentialConvectionTerm": [[360, "module-fipy.terms.exponentialConvectionTerm"]], "fipy.terms.faceTerm": [[361, "module-fipy.terms.faceTerm"]], "fipy.terms.firstOrderAdvectionTerm": [[362, "module-fipy.terms.firstOrderAdvectionTerm"]], "fipy.terms.hybridConvectionTerm": [[363, "module-fipy.terms.hybridConvectionTerm"]], "fipy.terms.implicitDiffusionTerm": [[364, "module-fipy.terms.implicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[365, "module-fipy.terms.implicitSourceTerm"]], "fipy.terms.nonDiffusionTerm": [[366, "module-fipy.terms.nonDiffusionTerm"]], "fipy.terms.powerLawConvectionTerm": [[367, "module-fipy.terms.powerLawConvectionTerm"]], "fipy.terms.residualTerm": [[368, "module-fipy.terms.residualTerm"]], "fipy.terms.sourceTerm": [[369, "module-fipy.terms.sourceTerm"]], "fipy.terms.term": [[370, "module-fipy.terms.term"]], "fipy.terms.test": [[371, "module-fipy.terms.test"]], "fipy.terms.transientTerm": [[372, "module-fipy.terms.transientTerm"]], "fipy.terms.unaryTerm": [[373, "module-fipy.terms.unaryTerm"]], "fipy.terms.upwindConvectionTerm": [[374, "module-fipy.terms.upwindConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm": [[375, "module-fipy.terms.vanLeerConvectionTerm"]], "fipy.testFiPy": [[376, "module-fipy.testFiPy"]], "fipy.tests": [[377, "module-fipy.tests"]], "fipy.tests.doctestPlus": [[378, "module-fipy.tests.doctestPlus"]], "fipy.tests.lateImportTest": [[379, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[380, "module-fipy.tests.test"]], "fipy.tests.testProgram": [[381, "module-fipy.tests.testProgram"]], "fipy.tools": [[382, "module-fipy.tools"]], "fipy.tools.changelog": [[383, "module-fipy.tools.changelog"]], "fipy.tools.comms": [[384, "module-fipy.tools.comms"]], "fipy.tools.comms.commWrapper": [[385, "module-fipy.tools.comms.commWrapper"]], "fipy.tools.comms.dummyComm": [[386, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.copy_script": [[387, "module-fipy.tools.copy_script"]], "fipy.tools.debug": [[388, "module-fipy.tools.debug"]], "fipy.tools.decorators": [[389, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[390, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.DictWithDefault": [[391, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.NumberDict": [[392, "module-fipy.tools.dimensions.NumberDict"]], "fipy.tools.dimensions.physicalField": [[393, "module-fipy.tools.dimensions.physicalField"]], "fipy.tools.dump": [[394, "module-fipy.tools.dump"]], "fipy.tools.inline": [[395, "module-fipy.tools.inline"]], "fipy.tools.logging": [[396, "module-fipy.tools.logging"]], "fipy.tools.logging.environment": [[397, "module-fipy.tools.logging.environment"]], "fipy.tools.numerix": [[398, "module-fipy.tools.numerix"]], "fipy.tools.parser": [[399, "module-fipy.tools.parser"]], "fipy.tools.sharedtempfile": [[400, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[401, "module-fipy.tools.test"]], "fipy.tools.timer": [[402, "module-fipy.tools.timer"]], "fipy.tools.vector": [[403, "module-fipy.tools.vector"]], "fipy.variables": [[404, "module-fipy.variables"]], "fipy.variables.addOverFacesVariable": [[405, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticCellToFaceVariable": [[406, "module-fipy.variables.arithmeticCellToFaceVariable"]], "fipy.variables.betaNoiseVariable": [[407, "module-fipy.variables.betaNoiseVariable"]], "fipy.variables.binaryOperatorVariable": [[408, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.cellToFaceVariable": [[409, "module-fipy.variables.cellToFaceVariable"]], "fipy.variables.cellVariable": [[410, "module-fipy.variables.cellVariable"]], "fipy.variables.constant": [[411, "module-fipy.variables.constant"]], "fipy.variables.constraintMask": [[412, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledCellVariable": [[413, "module-fipy.variables.coupledCellVariable"]], "fipy.variables.distanceVariable": [[414, "module-fipy.variables.distanceVariable"]], "fipy.variables.exponentialNoiseVariable": [[415, "module-fipy.variables.exponentialNoiseVariable"]], "fipy.variables.faceGradContributionsVariable": [[416, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.faceGradVariable": [[417, "module-fipy.variables.faceGradVariable"]], "fipy.variables.faceVariable": [[418, "module-fipy.variables.faceVariable"]], "fipy.variables.gammaNoiseVariable": [[419, "module-fipy.variables.gammaNoiseVariable"]], "fipy.variables.gaussCellGradVariable": [[420, "module-fipy.variables.gaussCellGradVariable"]], "fipy.variables.gaussianNoiseVariable": [[421, "module-fipy.variables.gaussianNoiseVariable"]], "fipy.variables.harmonicCellToFaceVariable": [[422, "module-fipy.variables.harmonicCellToFaceVariable"]], "fipy.variables.histogramVariable": [[423, "module-fipy.variables.histogramVariable"]], "fipy.variables.interfaceAreaVariable": [[424, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceFlagVariable": [[425, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastSquaresCellGradVariable": [[426, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelSetDiffusionVariable": [[427, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshVariable": [[428, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodCellToFaceVariable": [[429, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modCellGradVariable": [[430, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modCellToFaceVariable": [[431, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modFaceGradVariable": [[432, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modPhysicalField": [[433, "module-fipy.variables.modPhysicalField"]], "fipy.variables.modularVariable": [[434, "module-fipy.variables.modularVariable"]], "fipy.variables.noiseVariable": [[435, "module-fipy.variables.noiseVariable"]], "fipy.variables.operatorVariable": [[436, "module-fipy.variables.operatorVariable"]], "fipy.variables.scharfetterGummelFaceVariable": [[437, "module-fipy.variables.scharfetterGummelFaceVariable"]], "fipy.variables.surfactantConvectionVariable": [[438, "module-fipy.variables.surfactantConvectionVariable"]], "fipy.variables.surfactantVariable": [[439, "module-fipy.variables.surfactantVariable"]], "fipy.variables.test": [[440, "module-fipy.variables.test"]], "fipy.variables.unaryOperatorVariable": [[441, "module-fipy.variables.unaryOperatorVariable"]], "fipy.variables.uniformNoiseVariable": [[442, "module-fipy.variables.uniformNoiseVariable"]], "fipy.variables.variable": [[443, "module-fipy.variables.variable"]], "fipy.viewers": [[444, "module-fipy.viewers"]], "fipy.viewers.matplotlibViewer": [[445, "module-fipy.viewers.matplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[446, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[447, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[448, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[449, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[450, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[451, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[452, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[453, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[454, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[455, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.test": [[456, "module-fipy.viewers.matplotlibViewer.test"]], "fipy.viewers.mayaviViewer": [[457, "module-fipy.viewers.mayaviViewer"]], "fipy.viewers.mayaviViewer.mayaviClient": [[458, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[459, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "fipy.viewers.mayaviViewer.test": [[460, "module-fipy.viewers.mayaviViewer.test"]], "fipy.viewers.multiViewer": [[461, "module-fipy.viewers.multiViewer"]], "fipy.viewers.test": [[462, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[463, "module-fipy.viewers.testinteractive"]], "fipy.viewers.tsvViewer": [[464, "module-fipy.viewers.tsvViewer"]], "fipy.viewers.viewer": [[465, "module-fipy.viewers.viewer"]], "fipy.viewers.vtkViewer": [[466, "module-fipy.viewers.vtkViewer"]], "fipy.viewers.vtkViewer.test": [[467, "module-fipy.viewers.vtkViewer.test"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[468, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[469, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "fipy.viewers.vtkViewer.vtkViewer": [[470, "module-fipy.viewers.vtkViewer.vtkViewer"]], "Glossary": [[471, "glossary"]], "Introduction": [[472, "introduction"]], "FiPy Manual": [[473, "fipy-manual"]], "Finite Volume Method": [[474, "finite-volume-method"]], "Cell Centered FVM (CC-FVM)": [[474, "cell-centered-fvm-cc-fvm"]], "Vertex Centered FVM (VC-FVM)": [[474, "vertex-centered-fvm-vc-fvm"]], "Discretization": [[474, "discretization"]], "Transient Term \\partial (\\rho \\phi) / \\partial t": [[474, "transient-term-partial-rho-phi-partial-t"]], "Convection Term \\nabla \\cdot \\left( \\vec{u} \\phi \\right)": [[474, "convection-term-nabla-cdot-left-vec-u-phi-right"]], "Diffusion Term \\nabla \\cdot \\left( \\Gamma_1 \\nabla \\phi \\right)": [[474, "diffusion-term-nabla-cdot-left-gamma-1-nabla-phi-right"]], "Higher Order Diffusion": [[474, "higher-order-diffusion"]], "Source Term": [[474, "source-term"]], "Linear Equations": [[474, "linear-equations"]], "General Conservation Equation": [[475, "general-conservation-equation"]], "Theoretical and Numerical Background": [[476, "theoretical-and-numerical-background"]], "Numerical Schemes": [[477, "numerical-schemes"]], "References": [[478, "references"]], "package": [[479, "module-package"]], "package.subpackage": [[480, "module-package.subpackage"]], "package.subpackage.base": [[481, "module-package.subpackage.base"]], "package.subpackage.object": [[482, "module-package.subpackage.object"]], "How to Read the Modules Documentation": [[483, "how-to-read-the-modules-documentation"]]}, "indexentries": {"fipy_solvers": [[2, "index-0"], [16, "index-0"], [16, "index-1"], [17, "envvar-FIPY_SOLVERS"], [17, "index-1"]], "environment variable": [[2, "index-0"], [10, "index-1"], [16, "index-0"], [16, "index-1"], [17, "envvar-FIPY_CACHE"], [17, "envvar-FIPY_DEFAULT_CRITERION"], [17, "envvar-FIPY_DISPLAY_MATRIX"], [17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [17, "envvar-FIPY_INLINE"], [17, "envvar-FIPY_INLINE_COMMENT"], [17, "envvar-FIPY_LOG_CONFIG"], [17, "envvar-FIPY_SOLVERS"], [17, "envvar-FIPY_VIEWER"], [17, "envvar-PETSC_OPTIONS"], [17, "index-0"], [17, "index-1"], [22, "envvar-DYLD_LIBRARY_PATH"], [22, "envvar-LD_LIBRARY_PATH"], [193, "index-0"]], "path": [[10, "index-1"]], "pep 8": [[10, "index-0"]], "python enhancement proposals": [[10, "index-0"], [471, "index-0"]], "--cache": [[17, "cmdoption-cache"]], "--inline": [[17, "cmdoption-inline"]], "--lsmlib": [[17, "cmdoption-lsmlib"]], "--no-cache": [[17, "cmdoption-no-cache"]], "--petsc": [[17, "cmdoption-petsc"]], "--pyamgx": [[17, "cmdoption-pyamgx"]], "--scipy": [[17, "cmdoption-scipy"]], "--skfmm": [[17, "cmdoption-skfmm"]], "--trilinos": [[17, "cmdoption-trilinos"]], "fipy_cache": [[17, "envvar-FIPY_CACHE"]], "fipy_default_criterion": [[17, "envvar-FIPY_DEFAULT_CRITERION"]], "fipy_display_matrix": [[17, "envvar-FIPY_DISPLAY_MATRIX"]], "fipy_include_numerix_all": [[17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [193, "index-0"]], "fipy_inline": [[17, "envvar-FIPY_INLINE"]], "fipy_inline_comment": [[17, "envvar-FIPY_INLINE_COMMENT"]], "fipy_log_config": [[17, "envvar-FIPY_LOG_CONFIG"], [17, "index-0"]], "fipy_viewer": [[17, "envvar-FIPY_VIEWER"]], "petsc_options": [[17, "envvar-PETSC_OPTIONS"]], "command line option": [[17, "cmdoption-cache"], [17, "cmdoption-inline"], [17, "cmdoption-lsmlib"], [17, "cmdoption-no-cache"], [17, "cmdoption-petsc"], [17, "cmdoption-pyamgx"], [17, "cmdoption-scipy"], [17, "cmdoption-skfmm"], [17, "cmdoption-trilinos"], [22, "cmdoption-home"], [22, "cmdoption-prefix"]], "--home": [[22, "cmdoption-home"]], "--prefix": [[22, "cmdoption-prefix"]], "dyld_library_path": [[22, "envvar-DYLD_LIBRARY_PATH"]], "ld_library_path": [[22, "envvar-LD_LIBRARY_PATH"]], "examples": [[23, "module-examples"]], "module": [[23, "module-examples"], [24, "module-examples.benchmarking"], [25, "module-examples.benchmarking.benchmarker"], [26, "module-examples.benchmarking.size"], [27, "module-examples.benchmarking.steps"], [28, "module-examples.benchmarking.utils"], [29, "module-examples.benchmarking.versions"], [30, "module-examples.cahnHilliard"], [31, "module-examples.cahnHilliard.mesh2D"], [32, "module-examples.cahnHilliard.mesh2DCoupled"], [33, "module-examples.cahnHilliard.mesh3D"], [34, "module-examples.cahnHilliard.sphere"], [35, "module-examples.cahnHilliard.sphereDaemon"], [36, "index-5"], [36, "module-examples.cahnHilliard.tanh1D"], [37, "module-examples.cahnHilliard.test"], [38, "module-examples.chemotaxis"], [39, "module-examples.chemotaxis.input"], [40, "module-examples.chemotaxis.input2D"], [41, "module-examples.chemotaxis.parameters"], [42, "module-examples.chemotaxis.test"], [43, "module-examples.convection"], [44, "module-examples.convection.advection"], [45, "module-examples.convection.advection.explicitUpwind"], [46, "module-examples.convection.advection.implicitUpwind"], [47, "module-examples.convection.advection.vanLeerUpwind"], [48, "module-examples.convection.exponential1D"], [49, "index-2"], [49, "module-examples.convection.exponential1D.cylindricalMesh1D"], [50, "index-1"], [50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"], [51, "index-2"], [51, "module-examples.convection.exponential1D.mesh1D"], [52, "module-examples.convection.exponential1D.tri2D"], [53, "module-examples.convection.exponential1DBack"], [54, "module-examples.convection.exponential1DBack.mesh1D"], [55, "module-examples.convection.exponential1DSource"], [56, "index-4"], [56, "module-examples.convection.exponential1DSource.mesh1D"], [57, "module-examples.convection.exponential1DSource.tri2D"], [58, "module-examples.convection.exponential2D"], [59, "index-2"], [59, "module-examples.convection.exponential2D.cylindricalMesh2D"], [60, "index-1"], [60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"], [61, "module-examples.convection.exponential2D.mesh2D"], [62, "module-examples.convection.exponential2D.tri2D"], [63, "module-examples.convection.peclet"], [64, "module-examples.convection.powerLaw1D"], [65, "module-examples.convection.powerLaw1D.mesh1D"], [66, "module-examples.convection.powerLaw1D.tri2D"], [67, "module-examples.convection.robin"], [68, "module-examples.convection.source"], [69, "module-examples.convection.test"], [70, "module-examples.diffusion"], [71, "module-examples.diffusion.anisotropy"], [72, "index-3"], [72, "module-examples.diffusion.circle"], [73, "index-3"], [73, "module-examples.diffusion.circleQuad"], [74, "module-examples.diffusion.coupled"], [75, "module-examples.diffusion.electrostatics"], [76, "module-examples.diffusion.explicit"], [77, "module-examples.diffusion.explicit.mesh1D"], [78, "module-examples.diffusion.explicit.mixedelement"], [79, "module-examples.diffusion.explicit.test"], [80, "module-examples.diffusion.explicit.tri2D"], [81, "index-1"], [81, "module-examples.diffusion.mesh1D"], [82, "index-1"], [82, "module-examples.diffusion.mesh20x20"], [83, "index-1"], [83, "module-examples.diffusion.mesh20x20Coupled"], [84, "module-examples.diffusion.nthOrder"], [85, "index-3"], [85, "module-examples.diffusion.nthOrder.input4thOrder1D"], [86, "module-examples.diffusion.nthOrder.input4thOrder_line"], [87, "module-examples.diffusion.nthOrder.test"], [88, "module-examples.diffusion.steadyState"], [89, "module-examples.diffusion.steadyState.mesh1D"], [90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"], [91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"], [92, "module-examples.diffusion.steadyState.mesh20x20"], [93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"], [94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"], [95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"], [96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"], [97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"], [98, "module-examples.diffusion.steadyState.mesh50x50"], [99, "module-examples.diffusion.steadyState.mesh50x50.input"], [100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"], [101, "module-examples.diffusion.steadyState.otherMeshes"], [102, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"], [103, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"], [104, "module-examples.diffusion.steadyState.otherMeshes.prism"], [105, "module-examples.diffusion.steadyState.test"], [106, "module-examples.diffusion.test"], [107, "module-examples.diffusion.variable"], [108, "module-examples.elphf"], [109, "module-examples.elphf.diffusion"], [110, "module-examples.elphf.diffusion.mesh1D"], [111, "module-examples.elphf.diffusion.mesh1Ddimensional"], [112, "module-examples.elphf.diffusion.mesh2D"], [113, "module-examples.elphf.input"], [114, "module-examples.elphf.phase"], [115, "module-examples.elphf.phaseDiffusion"], [116, "module-examples.elphf.poisson"], [117, "module-examples.elphf.test"], [118, "module-examples.flow"], [119, "index-2"], [119, "module-examples.flow.stokesCavity"], [120, "module-examples.flow.test"], [121, "module-examples.levelSet"], [122, "module-examples.levelSet.advection"], [123, "module-examples.levelSet.advection.circle"], [124, "module-examples.levelSet.advection.mesh1D"], [125, "module-examples.levelSet.advection.test"], [126, "module-examples.levelSet.advection.trench"], [127, "module-examples.levelSet.distanceFunction"], [128, "module-examples.levelSet.distanceFunction.circle"], [129, "module-examples.levelSet.distanceFunction.interior"], [130, "module-examples.levelSet.distanceFunction.mesh1D"], [131, "module-examples.levelSet.distanceFunction.square"], [132, "module-examples.levelSet.distanceFunction.test"], [133, "module-examples.levelSet.electroChem"], [134, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"], [135, "module-examples.levelSet.electroChem.adsorption"], [136, "module-examples.levelSet.electroChem.gapFillDistanceVariable"], [137, "module-examples.levelSet.electroChem.gapFillMesh"], [138, "index-1"], [138, "module-examples.levelSet.electroChem.gold"], [139, "index-0"], [139, "module-examples.levelSet.electroChem.howToWriteAScript"], [140, "index-1"], [140, "module-examples.levelSet.electroChem.leveler"], [141, "module-examples.levelSet.electroChem.lines"], [142, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"], [143, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"], [144, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"], [145, "index-1"], [145, "module-examples.levelSet.electroChem.simpleTrenchSystem"], [146, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"], [147, "module-examples.levelSet.electroChem.test"], [148, "module-examples.levelSet.electroChem.trenchMesh"], [149, "module-examples.levelSet.surfactant"], [150, "module-examples.levelSet.surfactant.circle"], [151, "module-examples.levelSet.surfactant.expandingCircle"], [152, "module-examples.levelSet.surfactant.square"], [153, "module-examples.levelSet.surfactant.test"], [154, "module-examples.levelSet.test"], [155, "module-examples.meshing"], [156, "module-examples.meshing.gmshRefinement"], [157, "module-examples.meshing.inputGrid2D"], [158, "module-examples.meshing.sphere"], [159, "module-examples.meshing.test"], [160, "module-examples.parallel"], [161, "module-examples.phase"], [162, "module-examples.phase.anisotropy"], [163, "index-4"], [163, "module-examples.phase.anisotropyOLD"], [164, "index-7"], [164, "module-examples.phase.binary"], [165, "index-5"], [165, "index-6"], [165, "module-examples.phase.binaryCoupled"], [166, "module-examples.phase.impingement"], [167, "index-0"], [167, "index-6"], [167, "index-8"], [167, "module-examples.phase.impingement.mesh20x20"], [168, "index-4"], [168, "module-examples.phase.impingement.mesh40x1"], [169, "module-examples.phase.impingement.test"], [170, "module-examples.phase.missOrientation"], [171, "module-examples.phase.missOrientation.circle"], [172, "module-examples.phase.missOrientation.mesh1D"], [173, "module-examples.phase.missOrientation.modCircle"], [174, "module-examples.phase.missOrientation.test"], [175, "module-examples.phase.phaseViewer"], [176, "module-examples.phase.polyxtal"], [177, "module-examples.phase.polyxtalCoupled"], [178, "index-4"], [178, "module-examples.phase.quaternary"], [179, "index-2"], [179, "index-8"], [179, "module-examples.phase.simple"], [180, "module-examples.phase.symmetry"], [181, "module-examples.phase.test"], [182, "module-examples.reactiveWetting"], [183, "module-examples.reactiveWetting.liquidVapor1D"], [184, "module-examples.reactiveWetting.liquidVapor2D"], [185, "module-examples.reactiveWetting.test"], [186, "module-examples.riemann"], [187, "module-examples.riemann.acoustics"], [188, "module-examples.riemann.test"], [189, "module-examples.test"], [190, "module-examples.updating"], [191, "index-5"], [191, "module-examples.updating.update0_1to1_0"], [192, "module-examples.updating.update1_0to2_0"], [193, "module-examples.updating.update2_0to3_0"], [194, "module-fipy"], [195, "module-fipy.boundaryConditions"], [196, "module-fipy.boundaryConditions.boundaryCondition"], [197, "module-fipy.boundaryConditions.constraint"], [198, "module-fipy.boundaryConditions.fixedFlux"], [199, "module-fipy.boundaryConditions.fixedValue"], [200, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"], [201, "module-fipy.boundaryConditions.test"], [202, "module-fipy.matrices"], [203, "module-fipy.matrices.offsetSparseMatrix"], [204, "module-fipy.matrices.petscMatrix"], [205, "module-fipy.matrices.scipyMatrix"], [206, "module-fipy.matrices.sparseMatrix"], [207, "module-fipy.matrices.test"], [208, "module-fipy.matrices.trilinosMatrix"], [209, "module-fipy.meshes"], [210, "module-fipy.meshes.abstractMesh"], [211, "module-fipy.meshes.builders"], [212, "module-fipy.meshes.builders.abstractGridBuilder"], [213, "module-fipy.meshes.builders.grid1DBuilder"], [214, "module-fipy.meshes.builders.grid2DBuilder"], [215, "module-fipy.meshes.builders.grid3DBuilder"], [216, "module-fipy.meshes.builders.periodicGrid1DBuilder"], [217, "module-fipy.meshes.builders.utilityClasses"], [218, "module-fipy.meshes.cylindricalGrid1D"], [219, "module-fipy.meshes.cylindricalGrid2D"], [220, "module-fipy.meshes.cylindricalNonUniformGrid1D"], [221, "module-fipy.meshes.cylindricalNonUniformGrid2D"], [222, "module-fipy.meshes.cylindricalUniformGrid1D"], [223, "module-fipy.meshes.cylindricalUniformGrid2D"], [224, "module-fipy.meshes.factoryMeshes"], [225, "module-fipy.meshes.gmshMesh"], [226, "module-fipy.meshes.grid1D"], [227, "module-fipy.meshes.grid2D"], [228, "module-fipy.meshes.grid3D"], [229, "module-fipy.meshes.mesh"], [230, "module-fipy.meshes.mesh1D"], [231, "module-fipy.meshes.mesh2D"], [232, "module-fipy.meshes.nonUniformGrid1D"], [233, "module-fipy.meshes.nonUniformGrid2D"], [234, "module-fipy.meshes.nonUniformGrid3D"], [235, "module-fipy.meshes.periodicGrid1D"], [236, "module-fipy.meshes.periodicGrid2D"], [237, "module-fipy.meshes.periodicGrid3D"], [238, "module-fipy.meshes.representations"], [239, "module-fipy.meshes.representations.abstractRepresentation"], [240, "module-fipy.meshes.representations.gridRepresentation"], [241, "module-fipy.meshes.representations.meshRepresentation"], [242, "module-fipy.meshes.skewedGrid2D"], [243, "module-fipy.meshes.sphericalNonUniformGrid1D"], [244, "module-fipy.meshes.sphericalUniformGrid1D"], [245, "module-fipy.meshes.test"], [246, "module-fipy.meshes.topologies"], [247, "module-fipy.meshes.topologies.abstractTopology"], [248, "module-fipy.meshes.topologies.gridTopology"], [249, "module-fipy.meshes.topologies.meshTopology"], [250, "module-fipy.meshes.tri2D"], [251, "module-fipy.meshes.uniformGrid"], [252, "module-fipy.meshes.uniformGrid1D"], [253, "module-fipy.meshes.uniformGrid2D"], [254, "module-fipy.meshes.uniformGrid3D"], [255, "module-fipy.solvers"], [256, "module-fipy.solvers.convergence"], [257, "module-fipy.solvers.petsc"], [258, "module-fipy.solvers.petsc.comms"], [259, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"], [260, "module-fipy.solvers.petsc.comms.petscCommWrapper"], [261, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"], [262, "module-fipy.solvers.petsc.dummySolver"], [263, "module-fipy.solvers.petsc.linearBicgSolver"], [264, "module-fipy.solvers.petsc.linearCGSSolver"], [265, "module-fipy.solvers.petsc.linearCGSolver"], [266, "module-fipy.solvers.petsc.linearGMRESSolver"], [267, "module-fipy.solvers.petsc.linearLUSolver"], [268, "module-fipy.solvers.petsc.petscConvergence"], [269, "module-fipy.solvers.petsc.petscKrylovSolver"], [270, "module-fipy.solvers.petsc.petscSolver"], [271, "module-fipy.solvers.petsc.preconditioners"], [272, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"], [273, "module-fipy.solvers.petsc.preconditioners.hyprePreconditioner"], [274, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"], [275, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"], [276, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"], [277, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"], [278, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"], [279, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"], [280, "module-fipy.solvers.preconditioner"], [281, "module-fipy.solvers.pyAMG"], [282, "module-fipy.solvers.pyAMG.preconditioners"], [283, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"], [284, "module-fipy.solvers.pyamgx"], [285, "module-fipy.solvers.pyamgx.aggregationAMGSolver"], [286, "module-fipy.solvers.pyamgx.classicalAMGSolver"], [287, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"], [288, "module-fipy.solvers.pyamgx.linearCGSolver"], [289, "module-fipy.solvers.pyamgx.linearFGMRESSolver"], [290, "module-fipy.solvers.pyamgx.linearGMRESSolver"], [291, "module-fipy.solvers.pyamgx.linearLUSolver"], [292, "module-fipy.solvers.pyamgx.preconditioners"], [293, "module-fipy.solvers.pyamgx.pyAMGXSolver"], [294, "module-fipy.solvers.pyamgx.pyamgxConvergence"], [295, "module-fipy.solvers.pyamgx.smoothers"], [296, "module-fipy.solvers.scipy"], [297, "module-fipy.solvers.scipy.linearBicgstabSolver"], [298, "module-fipy.solvers.scipy.linearCGSSolver"], [299, "module-fipy.solvers.scipy.linearCGSolver"], [300, "module-fipy.solvers.scipy.linearGMRESSolver"], [301, "module-fipy.solvers.scipy.linearLUSolver"], [302, "module-fipy.solvers.scipy.preconditioners"], [303, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"], [304, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"], [305, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"], [306, "module-fipy.solvers.scipy.scipyConvergence"], [307, "module-fipy.solvers.scipy.scipyKrylovSolver"], [308, "module-fipy.solvers.scipy.scipySolver"], [309, "module-fipy.solvers.solver"], [310, "module-fipy.solvers.test"], [311, "module-fipy.solvers.trilinos"], [312, "module-fipy.solvers.trilinos.aztecConvergence"], [313, "module-fipy.solvers.trilinos.comms"], [314, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"], [315, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"], [316, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"], [317, "module-fipy.solvers.trilinos.linearBicgstabSolver"], [318, "module-fipy.solvers.trilinos.linearCGSSolver"], [319, "module-fipy.solvers.trilinos.linearCGSolver"], [320, "module-fipy.solvers.trilinos.linearGMRESSolver"], [321, "module-fipy.solvers.trilinos.linearLUSolver"], [322, "module-fipy.solvers.trilinos.preconditioners"], [323, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"], [324, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"], [325, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"], [326, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"], [327, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"], [328, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"], [329, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"], [330, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"], [331, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"], [332, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"], [333, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"], [334, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"], [335, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"], [336, "module-fipy.solvers.trilinos.trilinosMLTest"], [337, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"], [338, "module-fipy.solvers.trilinos.trilinosSolver"], [339, "module-fipy.steppers"], [340, "module-fipy.steppers.pidStepper"], [341, "module-fipy.steppers.pseudoRKQSStepper"], [342, "module-fipy.steppers.stepper"], [343, "module-fipy.terms"], [344, "module-fipy.terms.abstractBinaryTerm"], [345, "module-fipy.terms.abstractConvectionTerm"], [346, "module-fipy.terms.abstractDiffusionTerm"], [347, "module-fipy.terms.abstractUpwindConvectionTerm"], [348, "module-fipy.terms.advectionTerm"], [349, "module-fipy.terms.asymmetricConvectionTerm"], [350, "module-fipy.terms.binaryTerm"], [351, "module-fipy.terms.cellTerm"], [352, "module-fipy.terms.centralDiffConvectionTerm"], [353, "module-fipy.terms.coupledBinaryTerm"], [354, "module-fipy.terms.diffusionTerm"], [355, "module-fipy.terms.diffusionTermCorrection"], [356, "module-fipy.terms.diffusionTermNoCorrection"], [357, "module-fipy.terms.explicitDiffusionTerm"], [358, "module-fipy.terms.explicitSourceTerm"], [359, "module-fipy.terms.explicitUpwindConvectionTerm"], [360, "module-fipy.terms.exponentialConvectionTerm"], [361, "module-fipy.terms.faceTerm"], [362, "module-fipy.terms.firstOrderAdvectionTerm"], [363, "module-fipy.terms.hybridConvectionTerm"], [364, "module-fipy.terms.implicitDiffusionTerm"], [365, "module-fipy.terms.implicitSourceTerm"], [366, "module-fipy.terms.nonDiffusionTerm"], [367, "module-fipy.terms.powerLawConvectionTerm"], [368, "module-fipy.terms.residualTerm"], [369, "module-fipy.terms.sourceTerm"], [370, "module-fipy.terms.term"], [371, "module-fipy.terms.test"], [372, "module-fipy.terms.transientTerm"], [373, "module-fipy.terms.unaryTerm"], [374, "module-fipy.terms.upwindConvectionTerm"], [375, "module-fipy.terms.vanLeerConvectionTerm"], [376, "module-fipy.testFiPy"], [377, "module-fipy.tests"], [378, "module-fipy.tests.doctestPlus"], [379, "module-fipy.tests.lateImportTest"], [380, "module-fipy.tests.test"], [381, "module-fipy.tests.testProgram"], [382, "module-fipy.tools"], [383, "module-fipy.tools.changelog"], [384, "module-fipy.tools.comms"], [385, "module-fipy.tools.comms.commWrapper"], [386, "module-fipy.tools.comms.dummyComm"], [387, "module-fipy.tools.copy_script"], [388, "module-fipy.tools.debug"], [389, "module-fipy.tools.decorators"], [390, "module-fipy.tools.dimensions"], [391, "module-fipy.tools.dimensions.DictWithDefault"], [392, "module-fipy.tools.dimensions.NumberDict"], [393, "module-fipy.tools.dimensions.physicalField"], [394, "module-fipy.tools.dump"], [395, "module-fipy.tools.inline"], [396, "module-fipy.tools.logging"], [397, "module-fipy.tools.logging.environment"], [398, "module-fipy.tools.numerix"], [399, "module-fipy.tools.parser"], [400, "module-fipy.tools.sharedtempfile"], [401, "module-fipy.tools.test"], [402, "module-fipy.tools.timer"], [403, "module-fipy.tools.vector"], [404, "module-fipy.variables"], [405, "module-fipy.variables.addOverFacesVariable"], [406, "module-fipy.variables.arithmeticCellToFaceVariable"], [407, "module-fipy.variables.betaNoiseVariable"], [408, "module-fipy.variables.binaryOperatorVariable"], [409, "module-fipy.variables.cellToFaceVariable"], [410, "module-fipy.variables.cellVariable"], [411, "module-fipy.variables.constant"], [412, "module-fipy.variables.constraintMask"], [413, "module-fipy.variables.coupledCellVariable"], [414, "module-fipy.variables.distanceVariable"], [415, "module-fipy.variables.exponentialNoiseVariable"], [416, "module-fipy.variables.faceGradContributionsVariable"], [417, "module-fipy.variables.faceGradVariable"], [418, "module-fipy.variables.faceVariable"], [419, "module-fipy.variables.gammaNoiseVariable"], [420, "module-fipy.variables.gaussCellGradVariable"], [421, "module-fipy.variables.gaussianNoiseVariable"], [422, "module-fipy.variables.harmonicCellToFaceVariable"], [423, "module-fipy.variables.histogramVariable"], [424, "module-fipy.variables.interfaceAreaVariable"], [425, "module-fipy.variables.interfaceFlagVariable"], [426, "module-fipy.variables.leastSquaresCellGradVariable"], [427, "module-fipy.variables.levelSetDiffusionVariable"], [428, "module-fipy.variables.meshVariable"], [429, "module-fipy.variables.minmodCellToFaceVariable"], [430, "module-fipy.variables.modCellGradVariable"], [431, "module-fipy.variables.modCellToFaceVariable"], [432, "module-fipy.variables.modFaceGradVariable"], [433, "module-fipy.variables.modPhysicalField"], [434, "module-fipy.variables.modularVariable"], [435, "module-fipy.variables.noiseVariable"], [436, "module-fipy.variables.operatorVariable"], [437, "module-fipy.variables.scharfetterGummelFaceVariable"], [438, "module-fipy.variables.surfactantConvectionVariable"], [439, "module-fipy.variables.surfactantVariable"], [440, "module-fipy.variables.test"], [441, "module-fipy.variables.unaryOperatorVariable"], [442, "module-fipy.variables.uniformNoiseVariable"], [443, "module-fipy.variables.variable"], [444, "module-fipy.viewers"], [445, "module-fipy.viewers.matplotlibViewer"], [446, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"], [447, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"], [448, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"], [449, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"], [450, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"], [451, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"], [452, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"], [453, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"], [454, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"], [455, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"], [456, "module-fipy.viewers.matplotlibViewer.test"], [457, "module-fipy.viewers.mayaviViewer"], [458, "module-fipy.viewers.mayaviViewer.mayaviClient"], [459, "module-fipy.viewers.mayaviViewer.mayaviDaemon"], [460, "module-fipy.viewers.mayaviViewer.test"], [461, "module-fipy.viewers.multiViewer"], [462, "module-fipy.viewers.test"], [463, "module-fipy.viewers.testinteractive"], [464, "module-fipy.viewers.tsvViewer"], [465, "module-fipy.viewers.viewer"], [466, "module-fipy.viewers.vtkViewer"], [467, "module-fipy.viewers.vtkViewer.test"], [468, "module-fipy.viewers.vtkViewer.vtkCellViewer"], [469, "module-fipy.viewers.vtkViewer.vtkFaceViewer"], [470, "module-fipy.viewers.vtkViewer.vtkViewer"], [479, "module-package"], [480, "module-package.subpackage"], [481, "module-package.subpackage.base"], [482, "module-package.subpackage.object"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnhilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnhilliard.mesh2d": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnhilliard.mesh2dcoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnhilliard.mesh3d": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnhilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnhilliard.spheredaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "cellvariable": [[36, "index-1"], [56, "index-1"], [85, "index-1"], [119, "index-1"], [139, "index-5"], [163, "index-1"], [164, "index-1"], [165, "index-1"], [167, "index-2"], [168, "index-1"], [178, "index-1"], [179, "index-1"], [191, "index-2"], [191, "index-9"]], "defaultsolver": [[36, "index-3"]], "grid2d": [[36, "index-0"], [82, "index-0"], [83, "index-0"], [119, "index-0"], [128, "index-0"], [130, "index-0"], [139, "index-2"], [163, "index-0"], [167, "index-1"], [191, "index-0"]], "linearlusolver": [[36, "index-3"], [191, "index-3"]], "nthorderboundarycondition": [[36, "index-2"], [85, "index-2"]], "examples.cahnhilliard.tanh1d": [[36, "module-examples.cahnHilliard.tanh1D"]], "exp": [[36, "index-4"], [49, "index-1"], [50, "index-0"], [51, "index-1"], [56, "index-3"], [59, "index-1"], [60, "index-0"], [139, "index-1"], [164, "index-4"], [165, "index-3"], [167, "index-5"], [168, "index-3"]], "fipy.viewers": [[36, "index-5"], [49, "index-2"], [50, "index-1"], [51, "index-2"], [56, "index-4"], [59, "index-2"], [60, "index-1"], [81, "index-1"], [82, "index-1"], [83, "index-1"], [85, "index-3"], [119, "index-2"], [163, "index-4"], [164, "index-7"], [165, "index-6"], [167, "index-6"], [168, "index-4"], [179, "index-2"], [191, "index-11"], [444, "module-fipy.viewers"]], "sqrt": [[36, "index-4"], [72, "index-3"], [73, "index-3"], [139, "index-1"], [167, "index-1"], [179, "index-3"]], "examples.cahnhilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2d": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitupwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitupwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanleerupwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1d": [[48, "module-examples.convection.exponential1D"]], "grid1d": [[49, "index-0"], [51, "index-0"], [56, "index-0"], [59, "index-0"], [85, "index-0"], [124, "index-0"], [164, "index-0"], [165, "index-0"], [168, "index-0"], [178, "index-0"], [179, "index-0"], [191, "index-7"]], "examples.convection.exponential1d.cylindricalmesh1d": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1d.cylindricalmesh1dnonuniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1d.mesh1d": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1d.tri2d": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1dback": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1dback.mesh1d": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1dsource": [[55, "module-examples.convection.exponential1DSource"]], "defaultasymmetricsolver": [[56, "index-2"], [165, "index-7"], [178, "index-5"]], "examples.convection.exponential1dsource.mesh1d": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1dsource.tri2d": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2d": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2d.cylindricalmesh2d": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2d.cylindricalmesh2dnonuniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2d.mesh2d": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2d.tri2d": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerlaw1d": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerlaw1d.mesh1d": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerlaw1d.tri2d": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "arcsin; cos": [[72, "index-3"], [73, "index-3"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "fipy.terms.implicitdiffusionterm.diffusionterm": [[72, "index-1"], [73, "index-1"]], "fipy.terms.transientterm.transientterm": [[72, "index-1"], [73, "index-1"]], "fipy.variables.cellvariable.cellvariable": [[72, "index-0"], [73, "index-0"]], "fipy.viewers.tsvviewer.tsvviewer": [[72, "index-2"], [73, "index-2"]], "object": [[72, "index-0"], [72, "index-1"], [72, "index-2"], [73, "index-0"], [73, "index-1"], [73, "index-2"]], "scipy": [[72, "index-3"], [73, "index-3"], [164, "index-6"], [165, "index-5"], [179, "index-8"], [471, "term-SciPy"]], "examples.diffusion.circlequad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1d": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2d": [[80, "module-examples.diffusion.explicit.tri2D"]], "explicitdiffusionterm": [[81, "index-0"], [163, "index-3"], [167, "index-4"], [168, "index-2"]], "facevariable": [[81, "index-2"]], "transientterm": [[81, "index-0"], [163, "index-3"], [167, "index-4"], [168, "index-2"], [179, "index-4"]], "examples.diffusion.mesh1d": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthorder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthorder.input4thorder1d": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthorder.input4thorder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthorder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadystate": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadystate.mesh1d": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadystate.mesh1d.inputperiodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadystate.mesh1d.tri2dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadystate.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadystate.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadystate.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadystate.mesh20x20.modifiedmeshinput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadystate.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadystate.mesh20x20.tri2dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadystate.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadystate.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadystate.mesh50x50.tri2dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadystate.othermeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadystate.othermeshes.cubicalproblem": [[102, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadystate.othermeshes.grid3dinput": [[103, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadystate.othermeshes.prism": [[104, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadystate.test": [[105, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[106, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[107, "module-examples.diffusion.variable"]], "examples.elphf": [[108, "module-examples.elphf"]], "examples.elphf.diffusion": [[109, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1d": [[110, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1ddimensional": [[111, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2d": [[112, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[113, "module-examples.elphf.input"]], "examples.elphf.phase": [[114, "module-examples.elphf.phase"]], "examples.elphf.phasediffusion": [[115, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[116, "module-examples.elphf.poisson"]], "examples.elphf.test": [[117, "module-examples.elphf.test"]], "examples.flow": [[118, "module-examples.flow"]], "rhsvector": [[119, "index-3"]], "cachematrix": [[119, "index-3"]], "cacherhsvector": [[119, "index-3"]], "examples.flow.stokescavity": [[119, "module-examples.flow.stokesCavity"]], "matrix": [[119, "index-3"]], "sweep": [[119, "index-3"], [165, "index-7"], [179, "index-7"]], "examples.flow.test": [[120, "module-examples.flow.test"]], "examples.levelset": [[121, "module-examples.levelSet"]], "examples.levelset.advection": [[122, "module-examples.levelSet.advection"]], "examples.levelset.advection.circle": [[123, "module-examples.levelSet.advection.circle"]], "examples.levelset.advection.mesh1d": [[124, "module-examples.levelSet.advection.mesh1D"]], "examples.levelset.advection.test": [[125, "module-examples.levelSet.advection.test"]], "examples.levelset.advection.trench": [[126, "module-examples.levelSet.advection.trench"]], "examples.levelset.distancefunction": [[127, "module-examples.levelSet.distanceFunction"]], "examples.levelset.distancefunction.circle": [[128, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelset.distancefunction.interior": [[129, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelset.distancefunction.mesh1d": [[130, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelset.distancefunction.square": [[131, "module-examples.levelSet.distanceFunction.square"]], "examples.levelset.distancefunction.test": [[132, "module-examples.levelSet.distanceFunction.test"]], "examples.levelset.electrochem": [[133, "module-examples.levelSet.electroChem"]], "examples.levelset.electrochem.adsorbingsurfactantequation": [[134, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelset.electrochem.adsorption": [[135, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelset.electrochem.gapfilldistancevariable": [[136, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelset.electrochem.gapfillmesh": [[137, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelset.electrochem.gold": [[138, "module-examples.levelSet.electroChem.gold"]], "gmsh": [[138, "index-1"], [140, "index-1"], [145, "index-1"], [471, "term-Gmsh"]], "rungold": [[138, "index-0"]], "advectionterm": [[139, "index-6"]], "distancevariable": [[139, "index-3"]], "mayavisurfactantviewer": [[139, "index-7"]], "surfactantvariable": [[139, "index-4"]], "examples.levelset.electrochem.howtowriteascript": [[139, "module-examples.levelSet.electroChem.howToWriteAScript"]], "fipy.tools.parser": [[139, "index-0"], [167, "index-0"], [399, "module-fipy.tools.parser"]], "loadtxt": [[139, "index-8"], [163, "index-5"], [167, "index-7"], [168, "index-6"]], "examples.levelset.electrochem.leveler": [[140, "module-examples.levelSet.electroChem.leveler"]], "runleveler": [[140, "index-0"]], "examples.levelset.electrochem.lines": [[141, "module-examples.levelSet.electroChem.lines"]], "matplotlibsurfactantviewer (class in examples.levelset.electrochem.matplotlibsurfactantviewer)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer"]], "axes (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.axes"]], "cmap (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.cmap"]], "colorbar (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.colorbar"]], "examples.levelset.electrochem.matplotlibsurfactantviewer": [[142, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "fig (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.fig"]], "id (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.id"]], "log (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.log"]], "plot() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plot"]], "plotmesh() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.title"]], "vars (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[142, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.vars"]], "mayavisurfactantviewer (class in examples.levelset.electrochem.mayavisurfactantviewer)": [[143, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer"]], "examples.levelset.electrochem.mayavisurfactantviewer": [[143, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "plotmesh() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[143, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[143, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[143, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.title"]], "vars (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[143, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.vars"]], "examples.levelset.electrochem.metaliondiffusionequation": [[144, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelset.electrochem.simpletrenchsystem": [[145, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "runsimpletrenchsystem": [[145, "index-0"]], "examples.levelset.electrochem.surfactantbulkdiffusionequation": [[146, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelset.electrochem.test": [[147, "module-examples.levelSet.electroChem.test"]], "examples.levelset.electrochem.trenchmesh": [[148, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelset.surfactant": [[149, "module-examples.levelSet.surfactant"]], "examples.levelset.surfactant.circle": [[150, "module-examples.levelSet.surfactant.circle"]], "examples.levelset.surfactant.expandingcircle": [[151, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelset.surfactant.square": [[152, "module-examples.levelSet.surfactant.square"]], "examples.levelset.surfactant.test": [[153, "module-examples.levelSet.surfactant.test"]], "examples.levelset.test": [[154, "module-examples.levelSet.test"]], "examples.meshing": [[155, "module-examples.meshing"]], "examples.meshing.gmshrefinement": [[156, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputgrid2d": [[157, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[158, "module-examples.meshing.sphere"]], "examples.meshing.test": [[159, "module-examples.meshing.test"]], "examples.parallel": [[160, "module-examples.parallel"]], "examples.phase": [[161, "module-examples.phase"]], ":math:`\\pi`": [[162, "index-0"], [163, "index-2"], [167, "index-3"], [168, "index-5"]], "arctan": [[162, "index-0"], [163, "index-2"]], "arctan2": [[162, "index-0"], [163, "index-2"]], "examples.phase.anisotropy": [[162, "module-examples.phase.anisotropy"]], "pi": [[162, "index-0"], [163, "index-2"], [167, "index-3"], [168, "index-5"]], "tan": [[162, "index-0"], [163, "index-2"]], "implicitsourceterm": [[163, "index-3"], [167, "index-4"], [168, "index-2"], [179, "index-5"]], "allclose": [[163, "index-5"], [178, "index-6"]], "examples.phase.anisotropyold": [[163, "module-examples.phase.anisotropyOLD"]], "powerlawconvectionterm": [[164, "index-3"], [178, "index-3"]], "variable": [[164, "index-2"], [165, "index-2"], [179, "index-6"]], "array": [[164, "index-5"], [165, "index-4"]], "examples.phase.binary": [[164, "module-examples.phase.binary"]], "log": [[164, "index-5"], [165, "index-4"], [178, "index-2"]], "hyprepreconditioner": [[165, "index-7"]], "linearbicgstabsolver": [[165, "index-7"]], "examples.phase.binarycoupled": [[165, "module-examples.phase.binaryCoupled"]], "solve": [[165, "index-7"]], "examples.phase.impingement": [[166, "module-examples.phase.impingement"]], "modularvariable": [[167, "index-3"]], "examples.phase.impingement.mesh20x20": [[167, "module-examples.phase.impingement.mesh20x20"]], "fipy.tools.dump": [[167, "index-8"], [394, "module-fipy.tools.dump"]], "examples.phase.impingement.mesh40x1": [[168, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[169, "module-examples.phase.impingement.test"]], "examples.phase.missorientation": [[170, "module-examples.phase.missOrientation"]], "examples.phase.missorientation.circle": [[171, "module-examples.phase.missOrientation.circle"]], "examples.phase.missorientation.mesh1d": [[172, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missorientation.modcircle": [[173, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missorientation.test": [[174, "module-examples.phase.missOrientation.test"]], "phaseviewer (class in examples.phase.phaseviewer)": [[175, "examples.phase.phaseViewer.PhaseViewer"]], "axes (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.axes"]], "cmap (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.cmap"]], "colorbar (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.colorbar"]], "examples.phase.phaseviewer": [[175, "module-examples.phase.phaseViewer"]], "fig (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.fig"]], "id (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.id"]], "lines (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.lines"]], "log (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.log"]], "plot() (examples.phase.phaseviewer.phaseviewer method)": [[175, "examples.phase.phaseViewer.PhaseViewer.plot"]], "plotmesh() (examples.phase.phaseviewer.phaseviewer method)": [[175, "examples.phase.phaseViewer.PhaseViewer.plotMesh"]], "setlimits() (examples.phase.phaseviewer.phaseviewer method)": [[175, "examples.phase.phaseViewer.PhaseViewer.setLimits"]], "title (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.title"]], "vars (examples.phase.phaseviewer.phaseviewer property)": [[175, "examples.phase.phaseViewer.PhaseViewer.vars"]], "examples.phase.polyxtal": [[176, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalcoupled": [[177, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[178, "module-examples.phase.quaternary"]], "viewers": [[178, "index-4"]], "examples.phase.simple": [[179, "module-examples.phase.simple"]], "tanh": [[179, "index-3"]], "examples.phase.symmetry": [[180, "module-examples.phase.symmetry"]], "examples.phase.test": [[181, "module-examples.phase.test"]], "examples.reactivewetting": [[182, "module-examples.reactiveWetting"]], "examples.reactivewetting.liquidvapor1d": [[183, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactivewetting.liquidvapor2d": [[184, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactivewetting.test": [[185, "module-examples.reactiveWetting.test"]], "examples.riemann": [[186, "module-examples.riemann"]], "examples.riemann.acoustics": [[187, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[188, "module-examples.riemann.test"]], "examples.test": [[189, "module-examples.test"]], "examples.updating": [[190, "module-examples.updating"]], "exponentialconvectionterm": [[191, "index-3"]], "fixedflux": [[191, "index-1"]], "fixedvalue": [[191, "index-1"], [191, "index-8"]], "gist1dviewer": [[191, "index-10"]], "grid2dgistviewer": [[191, "index-6"]], "iterator": [[191, "index-4"]], "steadyconvectiondiffusionscequation": [[191, "index-3"]], "examples.updating.update0_1to1_0": [[191, "module-examples.updating.update0_1to1_0"]], "fipy.numerix": [[191, "index-5"]], "examples.updating.update1_0to2_0": [[192, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[193, "module-examples.updating.update2_0to3_0"]], "doctest_raw_input() (in module fipy)": [[194, "fipy.doctest_raw_input"]], "fipy": [[194, "module-fipy"], [471, "term-FiPy"]], "test() (in module fipy)": [[194, "fipy.test"]], "fipy.boundaryconditions": [[195, "module-fipy.boundaryConditions"]], "boundarycondition (class in fipy.boundaryconditions.boundarycondition)": [[196, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition"]], "__repr__() (fipy.boundaryconditions.boundarycondition.boundarycondition method)": [[196, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition.__repr__"]], "fipy.boundaryconditions.boundarycondition": [[196, "module-fipy.boundaryConditions.boundaryCondition"]], "constraint (class in fipy.boundaryconditions.constraint)": [[197, "fipy.boundaryConditions.constraint.Constraint"]], "__repr__() (fipy.boundaryconditions.constraint.constraint method)": [[197, "fipy.boundaryConditions.constraint.Constraint.__repr__"]], "fipy.boundaryconditions.constraint": [[197, "module-fipy.boundaryConditions.constraint"]], "fixedflux (class in fipy.boundaryconditions.fixedflux)": [[198, "fipy.boundaryConditions.fixedFlux.FixedFlux"]], "__repr__() (fipy.boundaryconditions.fixedflux.fixedflux method)": [[198, "fipy.boundaryConditions.fixedFlux.FixedFlux.__repr__"]], "fipy.boundaryconditions.fixedflux": [[198, "module-fipy.boundaryConditions.fixedFlux"]], "fixedvalue (class in fipy.boundaryconditions.fixedvalue)": [[199, "fipy.boundaryConditions.fixedValue.FixedValue"]], "__repr__() (fipy.boundaryconditions.fixedvalue.fixedvalue method)": [[199, "fipy.boundaryConditions.fixedValue.FixedValue.__repr__"]], "fipy.boundaryconditions.fixedvalue": [[199, "module-fipy.boundaryConditions.fixedValue"]], "nthorderboundarycondition (class in fipy.boundaryconditions.nthorderboundarycondition)": [[200, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition"]], "__repr__() (fipy.boundaryconditions.nthorderboundarycondition.nthorderboundarycondition method)": [[200, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition.__repr__"]], "fipy.boundaryconditions.nthorderboundarycondition": [[200, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryconditions.test": [[201, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[202, "module-fipy.matrices"]], "offsetsparsematrix() (in module fipy.matrices.offsetsparsematrix)": [[203, "fipy.matrices.offsetSparseMatrix.OffsetSparseMatrix"]], "fipy.matrices.offsetsparsematrix": [[203, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscmatrix": [[204, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.scipymatrix": [[205, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparsematrix": [[206, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[207, "module-fipy.matrices.test"]], "fipy.matrices.trilinosmatrix": [[208, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[209, "module-fipy.meshes"]], "abstractmesh (class in fipy.meshes.abstractmesh)": [[210, "fipy.meshes.abstractMesh.AbstractMesh"]], "meshadditionerror": [[210, "fipy.meshes.abstractMesh.MeshAdditionError"], [229, "fipy.meshes.mesh.MeshAdditionError"]], "vtkcelldataset (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.abstractmesh.abstractmesh method)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.__add__"]], "__cause__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.abstractmesh.abstractmesh method)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.__div__"]], "__getattribute__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.abstractmesh.abstractmesh method)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.__getstate__"]], "__radd__() (fipy.meshes.abstractmesh.abstractmesh method)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.__radd__"]], "__reduce__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.abstractmesh.abstractmesh method)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.__repr__"]], "__repr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__repr__"]], "__setattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.abstractmesh.abstractmesh method)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.__sub__"]], "__truediv__() (fipy.meshes.abstractmesh.abstractmesh method)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.__truediv__"]], "add_note() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.aspect2D"]], "cellcenters (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.cellCenters"]], "cellfaceids (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.cellFaceIDs"]], "facesback (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesBack"]], "facesbottom (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesBottom"]], "facesdown (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesDown"]], "facesfront (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesFront"]], "facesleft (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesLeft"]], "facesright (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesRight"]], "facestop (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesTop"]], "facesup (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.facesUp"]], "fipy.meshes.abstractmesh": [[210, "module-fipy.meshes.abstractMesh"]], "with_traceback() (fipy.meshes.abstractmesh.meshadditionerror method)": [[210, "fipy.meshes.abstractMesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.x"]], "y (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.y"]], "z (fipy.meshes.abstractmesh.abstractmesh property)": [[210, "fipy.meshes.abstractMesh.AbstractMesh.z"]], "fipy.meshes.builders": [[211, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractgridbuilder": [[212, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1dbuilder": [[213, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2dbuilder": [[214, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3dbuilder": [[215, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicgrid1dbuilder": [[216, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityclasses": [[217, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalgrid1d": [[218, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalgrid2d": [[219, "module-fipy.meshes.cylindricalGrid2D"]], "cylindricalnonuniformgrid1d (class in fipy.meshes.cylindricalnonuniformgrid1d)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid1d": [[220, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "x (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[220, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.z"]], "cylindricalnonuniformgrid2d (class in fipy.meshes.cylindricalnonuniformgrid2d)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.extrude"]], "facesback (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid2d": [[221, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "x (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.z"]], "cylindricaluniformgrid1d (class in fipy.meshes.cylindricaluniformgrid1d)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesUp"]], "fipy.meshes.cylindricaluniformgrid1d": [[222, "module-fipy.meshes.cylindricalUniformGrid1D"]], "x (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.x"]], "y (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.y"]], "z (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[222, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.z"]], "cylindricaluniformgrid2d (class in fipy.meshes.cylindricaluniformgrid2d)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesUp"]], "fipy.meshes.cylindricaluniformgrid2d": [[223, "module-fipy.meshes.cylindricalUniformGrid2D"]], "x (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.x"]], "y (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.y"]], "z (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[223, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.z"]], "cylindricalgrid1d() (in module fipy.meshes.factorymeshes)": [[224, "fipy.meshes.factoryMeshes.CylindricalGrid1D"]], "cylindricalgrid2d() (in module fipy.meshes.factorymeshes)": [[224, "fipy.meshes.factoryMeshes.CylindricalGrid2D"]], "grid1d() (in module fipy.meshes.factorymeshes)": [[224, "fipy.meshes.factoryMeshes.Grid1D"]], "grid2d() (in module fipy.meshes.factorymeshes)": [[224, "fipy.meshes.factoryMeshes.Grid2D"]], "grid3d() (in module fipy.meshes.factorymeshes)": [[224, "fipy.meshes.factoryMeshes.Grid3D"]], "sphericalgrid1d() (in module fipy.meshes.factorymeshes)": [[224, "fipy.meshes.factoryMeshes.SphericalGrid1D"]], "fipy.meshes.factorymeshes": [[224, "module-fipy.meshes.factoryMeshes"]], "gmsh2d (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.Gmsh2D"]], "gmsh2din3dspace (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace"]], "gmsh3d (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.Gmsh3D"]], "gmshexception": [[225, "fipy.meshes.gmshMesh.GmshException"]], "gmshfile (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.GmshFile"]], "gmshgrid2d (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D"]], "gmshgrid3d (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D"]], "mshfile (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.MSHFile"]], "meshexporterror": [[225, "fipy.meshes.gmshMesh.MeshExportError"]], "posfile (class in fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.POSFile"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__add__"]], "__cause__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[225, "fipy.meshes.gmshMesh.GmshException.__cause__"]], "__cause__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__cause__"]], "__context__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[225, "fipy.meshes.gmshMesh.GmshException.__context__"]], "__context__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__context__"]], "__delattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.__delattr__"]], "__delattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__delattr__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__div__"]], "__getattribute__() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.__getattribute__"]], "__getattribute__() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__getattribute__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__getstate__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__mul__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__radd__"]], "__reduce__() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.__reduce__"]], "__reduce__() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__reduce__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__repr__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__rmul__"]], "__setattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.__setattr__"]], "__setattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__setattr__"]], "__str__() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.__str__"]], "__str__() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.__str__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__sub__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh3d method)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.__truediv__"]], "add_note() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.add_note"]], "add_note() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.add_note"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.aspect2D"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.cellFaceIDs"]], "extrude() (fipy.meshes.gmshmesh.gmsh2d method)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.extrude"]], "facesback (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesBack"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesBottom"]], "facesdown (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesDown"]], "facesfront (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesFront"]], "facesleft (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesLeft"]], "facesright (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesRight"]], "facestop (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesTop"]], "facesup (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.facesUp"]], "fipy.meshes.gmshmesh": [[225, "module-fipy.meshes.gmshMesh"]], "gmshversion() (in module fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.gmshVersion"]], "makemapvariables() (fipy.meshes.gmshmesh.mshfile method)": [[225, "fipy.meshes.gmshMesh.MSHFile.makeMapVariables"]], "openmshfile() (in module fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.openMSHFile"]], "openposfile() (in module fipy.meshes.gmshmesh)": [[225, "fipy.meshes.gmshMesh.openPOSFile"]], "read() (fipy.meshes.gmshmesh.mshfile method)": [[225, "fipy.meshes.gmshMesh.MSHFile.read"]], "with_traceback() (fipy.meshes.gmshmesh.gmshexception method)": [[225, "fipy.meshes.gmshMesh.GmshException.with_traceback"]], "with_traceback() (fipy.meshes.gmshmesh.meshexporterror method)": [[225, "fipy.meshes.gmshMesh.MeshExportError.with_traceback"]], "x (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.x"]], "x (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.x"]], "x (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.x"]], "y (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.y"]], "y (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.y"]], "y (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.y"]], "z (fipy.meshes.gmshmesh.gmsh2d property)": [[225, "fipy.meshes.gmshMesh.Gmsh2D.z"]], "z (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[225, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.z"]], "z (fipy.meshes.gmshmesh.gmsh3d property)": [[225, "fipy.meshes.gmshMesh.Gmsh3D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid2d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid2D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid3d property)": [[225, "fipy.meshes.gmshMesh.GmshGrid3D.z"]], "fipy.meshes.grid1d": [[226, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2d": [[227, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3d": [[228, "module-fipy.meshes.grid3D"]], "mesh (class in fipy.meshes.mesh)": [[229, "fipy.meshes.mesh.Mesh"]], "vtkcelldataset (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__add__"]], "__cause__ (fipy.meshes.mesh.meshadditionerror attribute)": [[229, "fipy.meshes.mesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.mesh.meshadditionerror attribute)": [[229, "fipy.meshes.mesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__div__"]], "__getattribute__() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__getstate__"]], "__mul__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__mul__"]], "__radd__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__radd__"]], "__reduce__() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__repr__"]], "__repr__() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.__repr__"]], "__rmul__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__rmul__"]], "__setattr__() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__sub__"]], "__truediv__() (fipy.meshes.mesh.mesh method)": [[229, "fipy.meshes.mesh.Mesh.__truediv__"]], "add_note() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.aspect2D"]], "cellcenters (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.cellCenters"]], "cellfaceids (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.cellFaceIDs"]], "facesback (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesBack"]], "facesbottom (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesBottom"]], "facesdown (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesDown"]], "facesfront (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesFront"]], "facesleft (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesLeft"]], "facesright (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesRight"]], "facestop (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesTop"]], "facesup (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.facesUp"]], "fipy.meshes.mesh": [[229, "module-fipy.meshes.mesh"]], "with_traceback() (fipy.meshes.mesh.meshadditionerror method)": [[229, "fipy.meshes.mesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.x"]], "y (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.y"]], "z (fipy.meshes.mesh.mesh property)": [[229, "fipy.meshes.mesh.Mesh.z"]], "mesh1d (class in fipy.meshes.mesh1d)": [[230, "fipy.meshes.mesh1D.Mesh1D"]], "vtkcelldataset (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__add__"]], "__div__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__div__"]], "__getstate__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__getstate__"]], "__mul__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__mul__"]], "__radd__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__radd__"]], "__repr__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__repr__"]], "__rmul__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__rmul__"]], "__sub__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__sub__"]], "__truediv__() (fipy.meshes.mesh1d.mesh1d method)": [[230, "fipy.meshes.mesh1D.Mesh1D.__truediv__"]], "aspect2d (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.aspect2D"]], "cellcenters (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.cellCenters"]], "cellfaceids (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.cellFaceIDs"]], "facesback (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesBack"]], "facesbottom (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesBottom"]], "facesdown (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesDown"]], "facesfront (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesFront"]], "facesleft (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesLeft"]], "facesright (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesRight"]], "facestop (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesTop"]], "facesup (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.facesUp"]], "fipy.meshes.mesh1d": [[230, "module-fipy.meshes.mesh1D"]], "x (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.x"]], "y (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.y"]], "z (fipy.meshes.mesh1d.mesh1d property)": [[230, "fipy.meshes.mesh1D.Mesh1D.z"]], "mesh2d (class in fipy.meshes.mesh2d)": [[231, "fipy.meshes.mesh2D.Mesh2D"]], "vtkcelldataset (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__add__"]], "__div__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__div__"]], "__getstate__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__getstate__"]], "__mul__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__mul__"]], "__radd__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__radd__"]], "__repr__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__repr__"]], "__rmul__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__rmul__"]], "__sub__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__sub__"]], "__truediv__() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.__truediv__"]], "aspect2d (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.aspect2D"]], "cellcenters (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.cellCenters"]], "cellfaceids (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.cellFaceIDs"]], "extrude() (fipy.meshes.mesh2d.mesh2d method)": [[231, "fipy.meshes.mesh2D.Mesh2D.extrude"]], "facesback (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesBack"]], "facesbottom (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesBottom"]], "facesdown (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesDown"]], "facesfront (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesFront"]], "facesleft (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesLeft"]], "facesright (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesRight"]], "facestop (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesTop"]], "facesup (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.facesUp"]], "fipy.meshes.mesh2d": [[231, "module-fipy.meshes.mesh2D"]], "x (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.x"]], "y (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.y"]], "z (fipy.meshes.mesh2d.mesh2d property)": [[231, "fipy.meshes.mesh2D.Mesh2D.z"]], "nonuniformgrid1d (class in fipy.meshes.nonuniformgrid1d)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesUp"]], "fipy.meshes.nonuniformgrid1d": [[232, "module-fipy.meshes.nonUniformGrid1D"]], "x (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.x"]], "y (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.y"]], "z (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[232, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.z"]], "nonuniformgrid2d (class in fipy.meshes.nonuniformgrid2d)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.extrude"]], "facesback (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesUp"]], "fipy.meshes.nonuniformgrid2d": [[233, "module-fipy.meshes.nonUniformGrid2D"]], "x (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.x"]], "y (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.y"]], "z (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[233, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.z"]], "nonuniformgrid3d (class in fipy.meshes.nonuniformgrid3d)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesUp"]], "fipy.meshes.nonuniformgrid3d": [[234, "module-fipy.meshes.nonUniformGrid3D"]], "x (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.x"]], "y (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.y"]], "z (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[234, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.z"]], "periodicgrid1d (class in fipy.meshes.periodicgrid1d)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D"]], "vtkcelldataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__add__"]], "__div__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__div__"]], "__getstate__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__mul__"]], "__radd__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__radd__"]], "__repr__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBack"]], "facesbottom (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBottom"]], "facesdown (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesDown"]], "facesfront (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesFront"]], "facesleft (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesLeft"]], "facesright (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesRight"]], "facestop (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesTop"]], "facesup (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesUp"]], "fipy.meshes.periodicgrid1d": [[235, "module-fipy.meshes.periodicGrid1D"]], "x (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.x"]], "y (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.y"]], "z (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[235, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.z"]], "periodicgrid2d (class in fipy.meshes.periodicgrid2d)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D"]], "periodicgrid2dleftright (class in fipy.meshes.periodicgrid2d)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight"]], "periodicgrid2dtopbottom (class in fipy.meshes.periodicgrid2d)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__add__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__div__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__mul__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__radd__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellFaceIDs"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.extrude"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBack"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBottom"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesDown"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesFront"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesLeft"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesRight"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesTop"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesUp"]], "fipy.meshes.periodicgrid2d": [[236, "module-fipy.meshes.periodicGrid2D"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.x"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.y"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[236, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.z"]], "periodicgrid3d (class in fipy.meshes.periodicgrid3d)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D"]], "periodicgrid3dfrontback (class in fipy.meshes.periodicgrid3d)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack"]], "periodicgrid3dleftright (class in fipy.meshes.periodicgrid3d)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight"]], "periodicgrid3dleftrightfrontback (class in fipy.meshes.periodicgrid3d)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack"]], "periodicgrid3dleftrighttopbottom (class in fipy.meshes.periodicgrid3d)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom"]], "periodicgrid3dtopbottom (class in fipy.meshes.periodicgrid3d)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom"]], "periodicgrid3dtopbottomfrontback (class in fipy.meshes.periodicgrid3d)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__add__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__div__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__mul__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__radd__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBack"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBottom"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesDown"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesFront"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesLeft"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesRight"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesTop"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesUp"]], "fipy.meshes.periodicgrid3d": [[237, "module-fipy.meshes.periodicGrid3D"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.x"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.y"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[237, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.z"]], "fipy.meshes.representations": [[238, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractrepresentation": [[239, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridrepresentation": [[240, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshrepresentation": [[241, "module-fipy.meshes.representations.meshRepresentation"]], "skewedgrid2d (class in fipy.meshes.skewedgrid2d)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D"]], "vtkcelldataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__add__"]], "__div__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__div__"]], "__getstate__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__getstate__"]], "__mul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__mul__"]], "__radd__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__radd__"]], "__repr__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__repr__"]], "__rmul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__rmul__"]], "__sub__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__sub__"]], "__truediv__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__truediv__"]], "aspect2d (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.aspect2D"]], "cellcenters (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.extrude"]], "facesback (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBack"]], "facesbottom (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBottom"]], "facesdown (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesDown"]], "facesfront (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesFront"]], "facesleft (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesLeft"]], "facesright (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesRight"]], "facestop (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesTop"]], "facesup (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesUp"]], "fipy.meshes.skewedgrid2d": [[242, "module-fipy.meshes.skewedGrid2D"]], "physicalshape (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.physicalShape"]], "x (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.x"]], "y (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.y"]], "z (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[242, "fipy.meshes.skewedGrid2D.SkewedGrid2D.z"]], "sphericalnonuniformgrid1d (class in fipy.meshes.sphericalnonuniformgrid1d)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesUp"]], "fipy.meshes.sphericalnonuniformgrid1d": [[243, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "x (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.x"]], "y (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.y"]], "z (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[243, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.z"]], "sphericaluniformgrid1d (class in fipy.meshes.sphericaluniformgrid1d)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesUp"]], "fipy.meshes.sphericaluniformgrid1d": [[244, "module-fipy.meshes.sphericalUniformGrid1D"]], "x (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.x"]], "y (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.y"]], "z (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[244, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.z"]], "fipy.meshes.test": [[245, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[246, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstracttopology": [[247, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridtopology": [[248, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshtopology": [[249, "module-fipy.meshes.topologies.meshTopology"]], "tri2d (class in fipy.meshes.tri2d)": [[250, "fipy.meshes.tri2D.Tri2D"]], "vtkcelldataset (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__add__"]], "__div__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__div__"]], "__getstate__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__getstate__"]], "__mul__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__mul__"]], "__radd__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__radd__"]], "__repr__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__repr__"]], "__rmul__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__rmul__"]], "__sub__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__sub__"]], "__truediv__() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.__truediv__"]], "aspect2d (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.aspect2D"]], "cellcenters (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.cellCenters"]], "cellfaceids (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.cellFaceIDs"]], "extrude() (fipy.meshes.tri2d.tri2d method)": [[250, "fipy.meshes.tri2D.Tri2D.extrude"]], "facesback (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesBack"]], "facesbottom (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesBottom"]], "facesdown (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesDown"]], "facesfront (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesFront"]], "facesleft (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesLeft"]], "facesright (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesRight"]], "facestop (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesTop"]], "facesup (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.facesUp"]], "fipy.meshes.tri2d": [[250, "module-fipy.meshes.tri2D"]], "physicalshape (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.physicalShape"]], "x (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.x"]], "y (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.y"]], "z (fipy.meshes.tri2d.tri2d property)": [[250, "fipy.meshes.tri2D.Tri2D.z"]], "uniformgrid (class in fipy.meshes.uniformgrid)": [[251, "fipy.meshes.uniformGrid.UniformGrid"]], "vtkcelldataset (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid.uniformgrid method)": [[251, "fipy.meshes.uniformGrid.UniformGrid.__add__"]], "__div__() (fipy.meshes.uniformgrid.uniformgrid method)": [[251, "fipy.meshes.uniformGrid.UniformGrid.__div__"]], "__getstate__() (fipy.meshes.uniformgrid.uniformgrid method)": [[251, "fipy.meshes.uniformGrid.UniformGrid.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid.uniformgrid method)": [[251, "fipy.meshes.uniformGrid.UniformGrid.__radd__"]], "__repr__() (fipy.meshes.uniformgrid.uniformgrid method)": [[251, "fipy.meshes.uniformGrid.UniformGrid.__repr__"]], "__sub__() (fipy.meshes.uniformgrid.uniformgrid method)": [[251, "fipy.meshes.uniformGrid.UniformGrid.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid.uniformgrid method)": [[251, "fipy.meshes.uniformGrid.UniformGrid.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesBack"]], "facesbottom (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesBottom"]], "facesdown (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesDown"]], "facesfront (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesFront"]], "facesleft (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesLeft"]], "facesright (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesRight"]], "facestop (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesTop"]], "facesup (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.facesUp"]], "fipy.meshes.uniformgrid": [[251, "module-fipy.meshes.uniformGrid"]], "x (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.x"]], "y (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.y"]], "z (fipy.meshes.uniformgrid.uniformgrid property)": [[251, "fipy.meshes.uniformGrid.UniformGrid.z"]], "uniformgrid1d (class in fipy.meshes.uniformgrid1d)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D"]], "vtkcelldataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.__add__"]], "__div__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesDown"]], "facesfront (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesFront"]], "facesleft (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesLeft"]], "facesright (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesRight"]], "facestop (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesTop"]], "facesup (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesUp"]], "fipy.meshes.uniformgrid1d": [[252, "module-fipy.meshes.uniformGrid1D"]], "x (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.x"]], "y (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.y"]], "z (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[252, "fipy.meshes.uniformGrid1D.UniformGrid1D.z"]], "uniformgrid2d (class in fipy.meshes.uniformgrid2d)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D"]], "vtkcelldataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.__add__"]], "__div__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesDown"]], "facesfront (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesFront"]], "facesleft (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesLeft"]], "facesright (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesRight"]], "facestop (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesTop"]], "facesup (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesUp"]], "fipy.meshes.uniformgrid2d": [[253, "module-fipy.meshes.uniformGrid2D"]], "x (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.x"]], "y (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.y"]], "z (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[253, "fipy.meshes.uniformGrid2D.UniformGrid2D.z"]], "uniformgrid3d (class in fipy.meshes.uniformgrid3d)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D"]], "vtkcelldataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.__add__"]], "__div__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesDown"]], "facesfront (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesFront"]], "facesleft (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesLeft"]], "facesright (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesRight"]], "facestop (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesTop"]], "facesup (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesUp"]], "fipy.meshes.uniformgrid3d": [[254, "module-fipy.meshes.uniformGrid3D"]], "x (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.x"]], "y (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.y"]], "z (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[254, "fipy.meshes.uniformGrid3D.UniformGrid3D.z"]], "defaultasymmetricsolver (in module fipy.solvers)": [[255, "fipy.solvers.DefaultAsymmetricSolver"]], "defaultsolver (in module fipy.solvers)": [[255, "fipy.solvers.DefaultSolver"]], "dummysolver (in module fipy.solvers)": [[255, "fipy.solvers.DummySolver"]], "generalsolver (in module fipy.solvers)": [[255, "fipy.solvers.GeneralSolver"]], "serialsolvererror": [[255, "fipy.solvers.SerialSolverError"]], "__cause__ (fipy.solvers.serialsolvererror attribute)": [[255, "fipy.solvers.SerialSolverError.__cause__"]], "__context__ (fipy.solvers.serialsolvererror attribute)": [[255, "fipy.solvers.SerialSolverError.__context__"]], "__delattr__() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.__delattr__"]], "__getattribute__() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.__getattribute__"]], "__reduce__() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.__reduce__"]], "__repr__() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.__repr__"]], "__setattr__() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.__setattr__"]], "__str__() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.__str__"]], "add_note() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.add_note"]], "fipy.solvers": [[255, "module-fipy.solvers"]], "with_traceback() (fipy.solvers.serialsolvererror method)": [[255, "fipy.solvers.SerialSolverError.with_traceback"]], "absolutetoleranceconvergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.AbsoluteToleranceConvergence"]], "breakdowndivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.BreakdownDivergence"]], "convergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.Convergence"]], "convergencebase (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.ConvergenceBase"]], "divergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.Divergence"]], "divergencewarning": [[256, "fipy.solvers.convergence.DivergenceWarning"]], "happybreakdownconvergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.HappyBreakdownConvergence"]], "illconditioneddivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.IllConditionedDivergence"]], "illconditionedpreconditionerdivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence"]], "iteratingconvergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.IteratingConvergence"]], "iterationconvergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.IterationConvergence"]], "iterationdivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.IterationDivergence"]], "lossofaccuracyconvergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.LossOfAccuracyConvergence"]], "nulldivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.NullDivergence"]], "outofrangedivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.OutOfRangeDivergence"]], "preconditioningdivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.PreconditioningDivergence"]], "rhszeroconvergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.RHSZeroConvergence"]], "relativetoleranceconvergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.RelativeToleranceConvergence"]], "stagnateddivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.StagnatedDivergence"]], "tolerancedivergence (class in fipy.solvers.convergence)": [[256, "fipy.solvers.convergence.ToleranceDivergence"]], "__cause__ (fipy.solvers.convergence.divergencewarning attribute)": [[256, "fipy.solvers.convergence.DivergenceWarning.__cause__"]], "__context__ (fipy.solvers.convergence.divergencewarning attribute)": [[256, "fipy.solvers.convergence.DivergenceWarning.__context__"]], "__delattr__() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.__delattr__"]], "__getattribute__() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.__getattribute__"]], "__reduce__() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.__reduce__"]], "__repr__() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.__repr__"]], "__setattr__() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.__setattr__"]], "__str__() (fipy.solvers.convergence.absolutetoleranceconvergence method)": [[256, "fipy.solvers.convergence.AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.breakdowndivergence method)": [[256, "fipy.solvers.convergence.BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.convergence.convergence method)": [[256, "fipy.solvers.convergence.Convergence.__str__"]], "__str__() (fipy.solvers.convergence.convergencebase method)": [[256, "fipy.solvers.convergence.ConvergenceBase.__str__"]], "__str__() (fipy.solvers.convergence.divergence method)": [[256, "fipy.solvers.convergence.Divergence.__str__"]], "__str__() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.__str__"]], "__str__() (fipy.solvers.convergence.happybreakdownconvergence method)": [[256, "fipy.solvers.convergence.HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditioneddivergence method)": [[256, "fipy.solvers.convergence.IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditionedpreconditionerdivergence method)": [[256, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.convergence.iteratingconvergence method)": [[256, "fipy.solvers.convergence.IteratingConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationconvergence method)": [[256, "fipy.solvers.convergence.IterationConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationdivergence method)": [[256, "fipy.solvers.convergence.IterationDivergence.__str__"]], "__str__() (fipy.solvers.convergence.lossofaccuracyconvergence method)": [[256, "fipy.solvers.convergence.LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.convergence.nulldivergence method)": [[256, "fipy.solvers.convergence.NullDivergence.__str__"]], "__str__() (fipy.solvers.convergence.outofrangedivergence method)": [[256, "fipy.solvers.convergence.OutOfRangeDivergence.__str__"]], "__str__() (fipy.solvers.convergence.preconditioningdivergence method)": [[256, "fipy.solvers.convergence.PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.convergence.rhszeroconvergence method)": [[256, "fipy.solvers.convergence.RHSZeroConvergence.__str__"]], "__str__() (fipy.solvers.convergence.relativetoleranceconvergence method)": [[256, "fipy.solvers.convergence.RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.stagnateddivergence method)": [[256, "fipy.solvers.convergence.StagnatedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.tolerancedivergence method)": [[256, "fipy.solvers.convergence.ToleranceDivergence.__str__"]], "actual_code (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.actual_code"]], "add_note() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.add_note"]], "criterion (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.criterion"]], "fipy.solvers.convergence": [[256, "module-fipy.solvers.convergence"]], "iterations (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.iterations"]], "residual (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.residual"]], "solver (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.solver"]], "status_code (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.status_code"]], "status_name (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.status_name"]], "tolerance_scale (fipy.solvers.convergence.convergencebase attribute)": [[256, "fipy.solvers.convergence.ConvergenceBase.tolerance_scale"]], "with_traceback() (fipy.solvers.convergence.divergencewarning method)": [[256, "fipy.solvers.convergence.DivergenceWarning.with_traceback"]], "fipy.solvers.petsc": [[257, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[258, "module-fipy.solvers.petsc.comms"]], "parallelpetsccommwrapper (class in fipy.solvers.petsc.comms.parallelpetsccommwrapper)": [[259, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[259, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[259, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.parallelpetsccommwrapper": [[259, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "petsccommwrapper (class in fipy.solvers.petsc.comms.petsccommwrapper)": [[260, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[260, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[260, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.petsccommwrapper": [[260, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "serialpetsccommwrapper (class in fipy.solvers.petsc.comms.serialpetsccommwrapper)": [[261, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[261, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[261, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.serialpetsccommwrapper": [[261, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "default_iterations (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_TOLERANCE"]], "dummysolver (class in fipy.solvers.petsc.dummysolver)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver"]], "legacy_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.petsc.dummysolver.dummysolver method)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver property)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver.default_tolerance"]], "fipy.solvers.petsc.dummysolver": [[262, "module-fipy.solvers.petsc.dummySolver"]], "default_iterations (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.LEGACY_TOLERANCE"]], "linearbicgsolver (class in fipy.solvers.petsc.linearbicgsolver)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver"]], "__repr__() (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver method)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver property)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.default_tolerance"]], "fipy.solvers.petsc.linearbicgsolver": [[263, "module-fipy.solvers.petsc.linearBicgSolver"]], "default_iterations (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.petsc.linearcgssolver)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.petsc.linearcgssolver.linearcgssolver method)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver property)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.petsc.linearcgssolver": [[264, "module-fipy.solvers.petsc.linearCGSSolver"]], "default_iterations (fipy.solvers.petsc.linearcgsolver.linearcgsolver attribute)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearcgsolver.linearcgsolver attribute)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearcgsolver.linearcgsolver attribute)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearcgsolver.linearcgsolver attribute)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearCGSolver.LEGACY_TOLERANCE"]], "linearcgsolver (class in fipy.solvers.petsc.linearcgsolver)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearCGSolver"]], "linearpcgsolver (in module fipy.solvers.petsc.linearcgsolver)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.petsc.linearcgsolver.linearcgsolver method)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearCGSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearcgsolver.linearcgsolver property)": [[265, "fipy.solvers.petsc.linearCGSolver.LinearCGSolver.default_tolerance"]], "fipy.solvers.petsc.linearcgsolver": [[265, "module-fipy.solvers.petsc.linearCGSolver"]], "default_iterations (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[266, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[266, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[266, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[266, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.petsc.lineargmressolver)": [[266, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.petsc.lineargmressolver.lineargmressolver method)": [[266, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver property)": [[266, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.petsc.lineargmressolver": [[266, "module-fipy.solvers.petsc.linearGMRESSolver"]], "default_iterations (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[267, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[267, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[267, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[267, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.petsc.linearlusolver)": [[267, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.petsc.linearlusolver.linearlusolver method)": [[267, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver property)": [[267, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.petsc.linearlusolver": [[267, "module-fipy.solvers.petsc.linearLUSolver"]], "ksp_absolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence"]], "ksp_breakdownbicgdivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence"]], "ksp_breakdowndivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence"]], "ksp_happybreakdownconvergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence"]], "ksp_indefinitematrixdivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence"]], "ksp_indefinitepreconditionerdivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence"]], "ksp_iteratingconvergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence"]], "ksp_iterationconvergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence"]], "ksp_iterationdivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence"]], "ksp_nanorinfdivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence"]], "ksp_nonsymmetricdivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence"]], "ksp_normalabsolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence"]], "ksp_normalrelativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence"]], "ksp_nulldivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence"]], "ksp_preconditioningdivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence"]], "ksp_relativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence"]], "ksp_tolerancedivergence (class in fipy.solvers.petsc.petscconvergence)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_absolutetoleranceconvergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdownbicgdivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdowndivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_happybreakdownconvergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitematrixdivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitepreconditionerdivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iteratingconvergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationconvergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationdivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nanorinfdivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nonsymmetricdivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalabsolutetoleranceconvergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalrelativetoleranceconvergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nulldivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_preconditioningdivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_relativetoleranceconvergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_tolerancedivergence method)": [[268, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence.__str__"]], "fipy.solvers.petsc.petscconvergence": [[268, "module-fipy.solvers.petsc.petscConvergence"]], "default_iterations (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[269, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[269, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[269, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[269, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.LEGACY_TOLERANCE"]], "petsckrylovsolver (class in fipy.solvers.petsc.petsckrylovsolver)": [[269, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver"]], "__repr__() (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver method)": [[269, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver property)": [[269, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.default_tolerance"]], "fipy.solvers.petsc.petsckrylovsolver": [[269, "module-fipy.solvers.petsc.petscKrylovSolver"]], "default_iterations (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[270, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[270, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[270, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[270, "fipy.solvers.petsc.petscSolver.PETScSolver.LEGACY_TOLERANCE"]], "petscsolver (class in fipy.solvers.petsc.petscsolver)": [[270, "fipy.solvers.petsc.petscSolver.PETScSolver"]], "__repr__() (fipy.solvers.petsc.petscsolver.petscsolver method)": [[270, "fipy.solvers.petsc.petscSolver.PETScSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver property)": [[270, "fipy.solvers.petsc.petscSolver.PETScSolver.default_tolerance"]], "fipy.solvers.petsc.petscsolver": [[270, "module-fipy.solvers.petsc.petscSolver"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[271, "fipy.solvers.petsc.preconditioners.DefaultPreconditioner"]], "hyprepreconditioner (class in fipy.solvers.petsc.preconditioners)": [[271, "fipy.solvers.petsc.preconditioners.HYPREPreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[271, "fipy.solvers.petsc.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[271, "fipy.solvers.petsc.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners)": [[271, "fipy.solvers.petsc.preconditioners.JacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[271, "fipy.solvers.petsc.preconditioners.LUPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[271, "fipy.solvers.petsc.preconditioners.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners": [[271, "module-fipy.solvers.petsc.preconditioners"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners.defaultpreconditioner)": [[272, "fipy.solvers.petsc.preconditioners.defaultPreconditioner.DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultpreconditioner": [[272, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "hyprepreconditioner (class in fipy.solvers.petsc.preconditioners.hyprepreconditioner)": [[273, "fipy.solvers.petsc.preconditioners.hyprePreconditioner.HYPREPreconditioner"]], "fipy.solvers.petsc.preconditioners.hyprepreconditioner": [[273, "module-fipy.solvers.petsc.preconditioners.hyprePreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners.icpreconditioner)": [[274, "fipy.solvers.petsc.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.icpreconditioner": [[274, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners.ilupreconditioner)": [[275, "fipy.solvers.petsc.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.ilupreconditioner": [[275, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners.jacobipreconditioner)": [[276, "fipy.solvers.petsc.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobipreconditioner": [[276, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners.lupreconditioner)": [[277, "fipy.solvers.petsc.preconditioners.luPreconditioner.LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.lupreconditioner": [[277, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "petscpreconditioner (class in fipy.solvers.petsc.preconditioners.petscpreconditioner)": [[278, "fipy.solvers.petsc.preconditioners.petscPreconditioner.PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscpreconditioner": [[278, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners.ssorpreconditioner)": [[279, "fipy.solvers.petsc.preconditioners.ssorPreconditioner.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorpreconditioner": [[279, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "matrixmodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[280, "fipy.solvers.preconditioner.MatrixModifyingPreconditioner"]], "preconditioner (class in fipy.solvers.preconditioner)": [[280, "fipy.solvers.preconditioner.Preconditioner"]], "solvermodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[280, "fipy.solvers.preconditioner.SolverModifyingPreconditioner"]], "fipy.solvers.preconditioner": [[280, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyamg": [[281, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyamg.preconditioners": [[282, "module-fipy.solvers.pyAMG.preconditioners"]], "smoothedaggregationpreconditioner (class in fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner)": [[283, "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner": [[283, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[284, "module-fipy.solvers.pyamgx"]], "aggregationamgsolver (class in fipy.solvers.pyamgx.aggregationamgsolver)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver method)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver property)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.aggregationamgsolver": [[285, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "classicalamgsolver (class in fipy.solvers.pyamgx.classicalamgsolver)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver method)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver property)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.classicalamgsolver": [[286, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.pyamgx.linearbicgstabsolver)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver"]], "__repr__() (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver method)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver property)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearbicgstabsolver": [[287, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "default_iterations (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver attribute)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver attribute)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver attribute)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver attribute)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver attribute)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.LEGACY_TOLERANCE"]], "linearcgsolver (class in fipy.solvers.pyamgx.linearcgsolver)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver"]], "linearpcgsolver (in module fipy.solvers.pyamgx.linearcgsolver)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver method)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver property)": [[288, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearcgsolver": [[288, "module-fipy.solvers.pyamgx.linearCGSolver"]], "default_iterations (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.LEGACY_TOLERANCE"]], "linearfgmressolver (class in fipy.solvers.pyamgx.linearfgmressolver)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver method)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver property)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearfgmressolver": [[289, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pyamgx.lineargmressolver)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver method)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver property)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.lineargmressolver": [[290, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pyamgx.linearlusolver)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamgx.linearlusolver.linearlusolver method)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver property)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearlusolver": [[291, "module-fipy.solvers.pyamgx.linearLUSolver"]], "amgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.AMGPreconditioner"]], "aggregationamgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.AggregationAMGPreconditioner"]], "bicgstabpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.BiCGStabPreconditioner"]], "cgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.CGPreconditioner"]], "dilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.DILUPreconditioner"]], "fgmrespreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.FGMRESPreconditioner"]], "gaussseidelpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.GaussSeidelPreconditioner"]], "ilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.JacobiPreconditioner"]], "polynomialpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.PolynomialPreconditioner"]], "pyamgxpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.preconditioners": [[292, "module-fipy.solvers.pyamgx.preconditioners"]], "default_iterations (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.LEGACY_TOLERANCE"]], "pyamgxsolver (class in fipy.solvers.pyamgx.pyamgxsolver)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver"]], "__repr__() (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver method)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver property)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.default_tolerance"]], "fipy.solvers.pyamgx.pyamgxsolver": [[293, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_breakdowndivergence method)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_convergence method)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_iterationdivergence method)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence.__str__"]], "fipy.solvers.pyamgx.pyamgxconvergence": [[294, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "pyamgx_breakdowndivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence"]], "pyamgx_convergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence"]], "pyamgx_iterationdivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence"]], "smoother (class in fipy.solvers.pyamgx.smoothers)": [[295, "fipy.solvers.pyamgx.smoothers.Smoother"]], "fipy.solvers.pyamgx.smoothers": [[295, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.scipy": [[296, "module-fipy.solvers.scipy"]], "default_iterations (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[297, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[297, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[297, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[297, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.scipy.linearbicgstabsolver)": [[297, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver method)": [[297, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver property)": [[297, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.scipy.linearbicgstabsolver": [[297, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "default_iterations (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.scipy.linearcgssolver)": [[298, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.scipy.linearcgssolver.linearcgssolver method)": [[298, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver property)": [[298, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.scipy.linearcgssolver": [[298, "module-fipy.solvers.scipy.linearCGSSolver"]], "default_iterations (fipy.solvers.scipy.linearcgsolver.linearcgsolver attribute)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearcgsolver.linearcgsolver attribute)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearcgsolver.linearcgsolver attribute)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearcgsolver.linearcgsolver attribute)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearCGSolver.LEGACY_TOLERANCE"]], "linearcgsolver (class in fipy.solvers.scipy.linearcgsolver)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearCGSolver"]], "linearpcgsolver (in module fipy.solvers.scipy.linearcgsolver)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.scipy.linearcgsolver.linearcgsolver method)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearCGSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearcgsolver.linearcgsolver property)": [[299, "fipy.solvers.scipy.linearCGSolver.LinearCGSolver.default_tolerance"]], "fipy.solvers.scipy.linearcgsolver": [[299, "module-fipy.solvers.scipy.linearCGSolver"]], "default_iterations (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[300, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[300, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[300, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[300, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.scipy.lineargmressolver)": [[300, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.scipy.lineargmressolver.lineargmressolver method)": [[300, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver property)": [[300, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.scipy.lineargmressolver": [[300, "module-fipy.solvers.scipy.linearGMRESSolver"]], "default_iterations (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.scipy.linearlusolver)": [[301, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.scipy.linearlusolver.linearlusolver method)": [[301, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver property)": [[301, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.scipy.linearlusolver": [[301, "module-fipy.solvers.scipy.linearLUSolver"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners)": [[302, "fipy.solvers.scipy.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners)": [[302, "fipy.solvers.scipy.preconditioners.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners": [[302, "module-fipy.solvers.scipy.preconditioners"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners.ilupreconditioner)": [[303, "fipy.solvers.scipy.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.ilupreconditioner": [[303, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners.jacobipreconditioner)": [[304, "fipy.solvers.scipy.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobipreconditioner": [[304, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "scipypreconditioner (class in fipy.solvers.scipy.preconditioners.scipypreconditioner)": [[305, "fipy.solvers.scipy.preconditioners.scipyPreconditioner.ScipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipypreconditioner": [[305, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "scipy_breakdowndivergence (class in fipy.solvers.scipy.scipyconvergence)": [[306, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence"]], "scipy_convergence (class in fipy.solvers.scipy.scipyconvergence)": [[306, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence"]], "scipy_iterationdivergence (class in fipy.solvers.scipy.scipyconvergence)": [[306, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_breakdowndivergence method)": [[306, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_convergence method)": [[306, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_iterationdivergence method)": [[306, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence.__str__"]], "fipy.solvers.scipy.scipyconvergence": [[306, "module-fipy.solvers.scipy.scipyConvergence"]], "default_iterations (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[307, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[307, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[307, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[307, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.LEGACY_TOLERANCE"]], "scipykrylovsolver (class in fipy.solvers.scipy.scipykrylovsolver)": [[307, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver"]], "__repr__() (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver method)": [[307, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver property)": [[307, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.default_tolerance"]], "fipy.solvers.scipy.scipykrylovsolver": [[307, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "default_iterations (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[308, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[308, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[308, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[308, "fipy.solvers.scipy.scipySolver.ScipySolver.LEGACY_TOLERANCE"]], "scipysolver (class in fipy.solvers.scipy.scipysolver)": [[308, "fipy.solvers.scipy.scipySolver.ScipySolver"]], "__repr__() (fipy.solvers.scipy.scipysolver.scipysolver method)": [[308, "fipy.solvers.scipy.scipySolver.ScipySolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver property)": [[308, "fipy.solvers.scipy.scipySolver.ScipySolver.default_tolerance"]], "fipy.solvers.scipy.scipysolver": [[308, "module-fipy.solvers.scipy.scipySolver"]], "breakdownwarning": [[309, "fipy.solvers.solver.BreakdownWarning"]], "default_iterations (fipy.solvers.solver.solver attribute)": [[309, "fipy.solvers.solver.Solver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.solver.solver attribute)": [[309, "fipy.solvers.solver.Solver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.solver.solver attribute)": [[309, "fipy.solvers.solver.Solver.DEFAULT_TOLERANCE"]], "illconditionedpreconditionerwarning": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning"]], "illegalinputorbreakdownwarning": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning"]], "legacy_tolerance (fipy.solvers.solver.solver attribute)": [[309, "fipy.solvers.solver.Solver.LEGACY_TOLERANCE"]], "lossofprecisionwarning": [[309, "fipy.solvers.solver.LossOfPrecisionWarning"]], "matrixillconditionedwarning": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning"]], "maximumiterationwarning": [[309, "fipy.solvers.solver.MaximumIterationWarning"]], "normalconvergence": [[309, "fipy.solvers.solver.NormalConvergence"]], "parameterwarning": [[309, "fipy.solvers.solver.ParameterWarning"]], "preconditionernotpositivedefinitewarning": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning"]], "preconditionerwarning": [[309, "fipy.solvers.solver.PreconditionerWarning"]], "scalarquantityoutofrangewarning": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning"]], "solver (class in fipy.solvers.solver)": [[309, "fipy.solvers.solver.Solver"]], "solverconvergencewarning": [[309, "fipy.solvers.solver.SolverConvergenceWarning"]], "stagnatedsolverwarning": [[309, "fipy.solvers.solver.StagnatedSolverWarning"]], "__cause__ (fipy.solvers.solver.breakdownwarning attribute)": [[309, "fipy.solvers.solver.BreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__cause__"]], "__cause__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__cause__"]], "__cause__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__cause__"]], "__cause__ (fipy.solvers.solver.normalconvergence attribute)": [[309, "fipy.solvers.solver.NormalConvergence.__cause__"]], "__cause__ (fipy.solvers.solver.parameterwarning attribute)": [[309, "fipy.solvers.solver.ParameterWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionerwarning attribute)": [[309, "fipy.solvers.solver.PreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__cause__"]], "__cause__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__cause__"]], "__cause__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__cause__"]], "__context__ (fipy.solvers.solver.breakdownwarning attribute)": [[309, "fipy.solvers.solver.BreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__context__"]], "__context__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__context__"]], "__context__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__context__"]], "__context__ (fipy.solvers.solver.normalconvergence attribute)": [[309, "fipy.solvers.solver.NormalConvergence.__context__"]], "__context__ (fipy.solvers.solver.parameterwarning attribute)": [[309, "fipy.solvers.solver.ParameterWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionerwarning attribute)": [[309, "fipy.solvers.solver.PreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__context__"]], "__context__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__context__"]], "__context__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__context__"]], "__delattr__() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.__delattr__"]], "__delattr__() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__delattr__"]], "__getattribute__() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__getattribute__"]], "__reduce__() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.__reduce__"]], "__reduce__() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__reduce__"]], "__repr__() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__repr__"]], "__repr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__repr__"]], "__repr__() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__repr__"]], "__repr__() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.__repr__"]], "__repr__() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__repr__"]], "__repr__() (fipy.solvers.solver.solver method)": [[309, "fipy.solvers.solver.Solver.__repr__"]], "__repr__() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__repr__"]], "__repr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__repr__"]], "__setattr__() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.__setattr__"]], "__setattr__() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__setattr__"]], "__str__() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.__str__"]], "__str__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.__str__"]], "__str__() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.__str__"]], "__str__() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.__str__"]], "__str__() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__str__"]], "__str__() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.__str__"]], "__str__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.__str__"]], "add_note() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.add_note"]], "add_note() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.add_note"]], "add_note() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.add_note"]], "add_note() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.add_note"]], "add_note() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.add_note"]], "add_note() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.add_note"]], "add_note() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.add_note"]], "default_tolerance (fipy.solvers.solver.solver property)": [[309, "fipy.solvers.solver.Solver.default_tolerance"]], "fipy.solvers.solver": [[309, "module-fipy.solvers.solver"]], "with_traceback() (fipy.solvers.solver.breakdownwarning method)": [[309, "fipy.solvers.solver.BreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[309, "fipy.solvers.solver.IllConditionedPreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[309, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.lossofprecisionwarning method)": [[309, "fipy.solvers.solver.LossOfPrecisionWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.matrixillconditionedwarning method)": [[309, "fipy.solvers.solver.MatrixIllConditionedWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.maximumiterationwarning method)": [[309, "fipy.solvers.solver.MaximumIterationWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.normalconvergence method)": [[309, "fipy.solvers.solver.NormalConvergence.with_traceback"]], "with_traceback() (fipy.solvers.solver.parameterwarning method)": [[309, "fipy.solvers.solver.ParameterWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[309, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionerwarning method)": [[309, "fipy.solvers.solver.PreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[309, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.solverconvergencewarning method)": [[309, "fipy.solvers.solver.SolverConvergenceWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.stagnatedsolverwarning method)": [[309, "fipy.solvers.solver.StagnatedSolverWarning.with_traceback"]], "fipy.solvers.test": [[310, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[311, "module-fipy.solvers.trilinos"]], "az_breakdowndivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence"]], "az_illconditioneddivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence"]], "az_iterationdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence"]], "az_lossofaccuracyconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence"]], "az_normalconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence"]], "az_parameterdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_breakdowndivergence method)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_illconditioneddivergence method)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_iterationdivergence method)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_lossofaccuracyconvergence method)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_normalconvergence method)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_parameterdivergence method)": [[312, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence.__str__"]], "fipy.solvers.trilinos.aztecconvergence": [[312, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[313, "module-fipy.solvers.trilinos.comms"]], "epetracommwrapper (class in fipy.solvers.trilinos.comms.epetracommwrapper)": [[314, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[314, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[314, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.epetracommwrapper": [[314, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "maxall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[315, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MaxAll"]], "minall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[315, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MinAll"]], "parallelepetracommwrapper (class in fipy.solvers.trilinos.comms.parallelepetracommwrapper)": [[315, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[315, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[315, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__repr__"]], "allgather() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[315, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.allgather"]], "fipy.solvers.trilinos.comms.parallelepetracommwrapper": [[315, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "serialepetracommwrapper (class in fipy.solvers.trilinos.comms.serialepetracommwrapper)": [[316, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[316, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[316, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.serialepetracommwrapper": [[316, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "default_iterations (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[317, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[317, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[317, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[317, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.trilinos.linearbicgstabsolver)": [[317, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver method)": [[317, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver property)": [[317, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.trilinos.linearbicgstabsolver": [[317, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "default_iterations (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[318, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[318, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[318, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[318, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.trilinos.linearcgssolver)": [[318, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgssolver.linearcgssolver method)": [[318, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver property)": [[318, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.trilinos.linearcgssolver": [[318, "module-fipy.solvers.trilinos.linearCGSSolver"]], "default_iterations (fipy.solvers.trilinos.linearcgsolver.linearcgsolver attribute)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearcgsolver.linearcgsolver attribute)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearcgsolver.linearcgsolver attribute)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearcgsolver.linearcgsolver attribute)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver.LEGACY_TOLERANCE"]], "linearcgsolver (class in fipy.solvers.trilinos.linearcgsolver)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver"]], "linearpcgsolver (in module fipy.solvers.trilinos.linearcgsolver)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgsolver.linearcgsolver method)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearcgsolver.linearcgsolver property)": [[319, "fipy.solvers.trilinos.linearCGSolver.LinearCGSolver.default_tolerance"]], "fipy.solvers.trilinos.linearcgsolver": [[319, "module-fipy.solvers.trilinos.linearCGSolver"]], "default_iterations (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.trilinos.lineargmressolver)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.trilinos.lineargmressolver.lineargmressolver method)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver property)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.trilinos.lineargmressolver": [[320, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "default_iterations (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.trilinos.linearlusolver)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.trilinos.linearlusolver.linearlusolver method)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver property)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.trilinos.linearlusolver": [[321, "module-fipy.solvers.trilinos.linearLUSolver"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.DomDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.JacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.MultilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.MultilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.MultilevelNSSAPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.MultilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.MultilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[322, "fipy.solvers.trilinos.preconditioners.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners": [[322, "module-fipy.solvers.trilinos.preconditioners"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners.domdecomppreconditioner)": [[323, "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domdecomppreconditioner": [[323, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners.icpreconditioner)": [[324, "fipy.solvers.trilinos.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icpreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners.ilupreconditioner)": [[325, "fipy.solvers.trilinos.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.ilupreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners.jacobipreconditioner)": [[326, "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobipreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner)": [[327, "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner)": [[328, "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner)": [[329, "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner": [[329, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "multilevelpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelpreconditioner)": [[330, "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelpreconditioner": [[330, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner)": [[331, "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner": [[331, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner)": [[332, "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner": [[332, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner)": [[333, "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner": [[333, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "trilinospreconditioner (class in fipy.solvers.trilinos.preconditioners.trilinospreconditioner)": [[334, "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.TrilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinospreconditioner": [[334, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "default_iterations (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[335, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[335, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[335, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[335, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.LEGACY_TOLERANCE"]], "trilinosaztecoosolver (class in fipy.solvers.trilinos.trilinosaztecoosolver)": [[335, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver method)": [[335, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver property)": [[335, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosaztecoosolver": [[335, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "default_iterations (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[336, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[336, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[336, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[336, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.LEGACY_TOLERANCE"]], "trilinosmltest (class in fipy.solvers.trilinos.trilinosmltest)": [[336, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest"]], "__repr__() (fipy.solvers.trilinos.trilinosmltest.trilinosmltest method)": [[336, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest property)": [[336, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.default_tolerance"]], "fipy.solvers.trilinos.trilinosmltest": [[336, "module-fipy.solvers.trilinos.trilinosMLTest"]], "default_iterations (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[337, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[337, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[337, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[337, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.LEGACY_TOLERANCE"]], "trilinosnonlinearsolver (class in fipy.solvers.trilinos.trilinosnonlinearsolver)": [[337, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver method)": [[337, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver property)": [[337, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosnonlinearsolver": [[337, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "default_iterations (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[338, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[338, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[338, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[338, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.LEGACY_TOLERANCE"]], "trilinossolver (class in fipy.solvers.trilinos.trilinossolver)": [[338, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver"]], "__repr__() (fipy.solvers.trilinos.trilinossolver.trilinossolver method)": [[338, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver property)": [[338, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinossolver": [[338, "module-fipy.solvers.trilinos.trilinosSolver"]], "l1error() (in module fipy.steppers)": [[339, "fipy.steppers.L1error"]], "l2error() (in module fipy.steppers)": [[339, "fipy.steppers.L2error"]], "linferror() (in module fipy.steppers)": [[339, "fipy.steppers.LINFerror"]], "error() (in module fipy.steppers)": [[339, "fipy.steppers.error"]], "fipy.steppers": [[339, "module-fipy.steppers"]], "residual() (in module fipy.steppers)": [[339, "fipy.steppers.residual"]], "sweepmonotonic() (in module fipy.steppers)": [[339, "fipy.steppers.sweepMonotonic"]], "pidstepper() (in module fipy.steppers.pidstepper)": [[340, "fipy.steppers.pidStepper.PIDStepper"]], "fipy.steppers.pidstepper": [[340, "module-fipy.steppers.pidStepper"]], "pseudorkqsstepper() (in module fipy.steppers.pseudorkqsstepper)": [[341, "fipy.steppers.pseudoRKQSStepper.PseudoRKQSStepper"]], "fipy.steppers.pseudorkqsstepper": [[341, "module-fipy.steppers.pseudoRKQSStepper"]], "stepper (class in fipy.steppers.stepper)": [[342, "fipy.steppers.stepper.Stepper"]], "fipy.steppers.stepper": [[342, "module-fipy.steppers.stepper"]], "abstractbaseclasserror": [[343, "fipy.terms.AbstractBaseClassError"]], "explicitvariableerror": [[343, "fipy.terms.ExplicitVariableError"]], "incorrectsolutionvariable": [[343, "fipy.terms.IncorrectSolutionVariable"]], "solutionvariablenumbererror": [[343, "fipy.terms.SolutionVariableNumberError"]], "solutionvariablerequirederror": [[343, "fipy.terms.SolutionVariableRequiredError"]], "termmultiplyerror": [[343, "fipy.terms.TermMultiplyError"]], "transienttermerror": [[343, "fipy.terms.TransientTermError"]], "vectorcoefferror": [[343, "fipy.terms.VectorCoeffError"]], "__cause__ (fipy.terms.abstractbaseclasserror attribute)": [[343, "fipy.terms.AbstractBaseClassError.__cause__"]], "__cause__ (fipy.terms.explicitvariableerror attribute)": [[343, "fipy.terms.ExplicitVariableError.__cause__"]], "__cause__ (fipy.terms.incorrectsolutionvariable attribute)": [[343, "fipy.terms.IncorrectSolutionVariable.__cause__"]], "__cause__ (fipy.terms.solutionvariablenumbererror attribute)": [[343, "fipy.terms.SolutionVariableNumberError.__cause__"]], "__cause__ (fipy.terms.solutionvariablerequirederror attribute)": [[343, "fipy.terms.SolutionVariableRequiredError.__cause__"]], "__cause__ (fipy.terms.termmultiplyerror attribute)": [[343, "fipy.terms.TermMultiplyError.__cause__"]], "__cause__ (fipy.terms.transienttermerror attribute)": [[343, "fipy.terms.TransientTermError.__cause__"]], "__cause__ (fipy.terms.vectorcoefferror attribute)": [[343, "fipy.terms.VectorCoeffError.__cause__"]], "__context__ (fipy.terms.abstractbaseclasserror attribute)": [[343, "fipy.terms.AbstractBaseClassError.__context__"]], "__context__ (fipy.terms.explicitvariableerror attribute)": [[343, "fipy.terms.ExplicitVariableError.__context__"]], "__context__ (fipy.terms.incorrectsolutionvariable attribute)": [[343, "fipy.terms.IncorrectSolutionVariable.__context__"]], "__context__ (fipy.terms.solutionvariablenumbererror attribute)": [[343, "fipy.terms.SolutionVariableNumberError.__context__"]], "__context__ (fipy.terms.solutionvariablerequirederror attribute)": [[343, "fipy.terms.SolutionVariableRequiredError.__context__"]], "__context__ (fipy.terms.termmultiplyerror attribute)": [[343, "fipy.terms.TermMultiplyError.__context__"]], "__context__ (fipy.terms.transienttermerror attribute)": [[343, "fipy.terms.TransientTermError.__context__"]], "__context__ (fipy.terms.vectorcoefferror attribute)": [[343, "fipy.terms.VectorCoeffError.__context__"]], "__delattr__() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.__delattr__"]], "__delattr__() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.__delattr__"]], "__delattr__() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.__delattr__"]], "__delattr__() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.__delattr__"]], "__delattr__() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.__delattr__"]], "__delattr__() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.__delattr__"]], "__getattribute__() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.__getattribute__"]], "__getattribute__() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.__getattribute__"]], "__getattribute__() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.__getattribute__"]], "__getattribute__() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.__getattribute__"]], "__getattribute__() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.__getattribute__"]], "__getattribute__() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.__getattribute__"]], "__reduce__() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.__reduce__"]], "__reduce__() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.__reduce__"]], "__reduce__() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.__reduce__"]], "__reduce__() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.__reduce__"]], "__reduce__() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.__reduce__"]], "__reduce__() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.__reduce__"]], "__repr__() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.__repr__"]], "__repr__() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.__repr__"]], "__repr__() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.__repr__"]], "__repr__() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.__repr__"]], "__repr__() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.__repr__"]], "__repr__() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.__repr__"]], "__repr__() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.__repr__"]], "__repr__() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.__repr__"]], "__setattr__() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.__setattr__"]], "__setattr__() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.__setattr__"]], "__setattr__() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.__setattr__"]], "__setattr__() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.__setattr__"]], "__setattr__() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.__setattr__"]], "__setattr__() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.__setattr__"]], "__str__() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.__str__"]], "__str__() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.__str__"]], "__str__() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.__str__"]], "__str__() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.__str__"]], "__str__() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.__str__"]], "__str__() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.__str__"]], "__str__() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.__str__"]], "__str__() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.__str__"]], "add_note() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.add_note"]], "add_note() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.add_note"]], "add_note() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.add_note"]], "add_note() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.add_note"]], "add_note() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.add_note"]], "add_note() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.add_note"]], "add_note() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.add_note"]], "add_note() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.add_note"]], "fipy.terms": [[343, "module-fipy.terms"]], "with_traceback() (fipy.terms.abstractbaseclasserror method)": [[343, "fipy.terms.AbstractBaseClassError.with_traceback"]], "with_traceback() (fipy.terms.explicitvariableerror method)": [[343, "fipy.terms.ExplicitVariableError.with_traceback"]], "with_traceback() (fipy.terms.incorrectsolutionvariable method)": [[343, "fipy.terms.IncorrectSolutionVariable.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablenumbererror method)": [[343, "fipy.terms.SolutionVariableNumberError.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablerequirederror method)": [[343, "fipy.terms.SolutionVariableRequiredError.with_traceback"]], "with_traceback() (fipy.terms.termmultiplyerror method)": [[343, "fipy.terms.TermMultiplyError.with_traceback"]], "with_traceback() (fipy.terms.transienttermerror method)": [[343, "fipy.terms.TransientTermError.with_traceback"]], "with_traceback() (fipy.terms.vectorcoefferror method)": [[343, "fipy.terms.VectorCoeffError.with_traceback"]], "fipy.terms.abstractbinaryterm": [[344, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractconvectionterm": [[345, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractdiffusionterm": [[346, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractupwindconvectionterm": [[347, "module-fipy.terms.abstractUpwindConvectionTerm"]], "advectionterm (class in fipy.terms.advectionterm)": [[348, "fipy.terms.advectionTerm.AdvectionTerm"]], "rhsvector (fipy.terms.advectionterm.advectionterm property)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.__eq__"]], "__hash__() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.__hash__"]], "__mul__() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.__mul__"]], "__neg__() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.__neg__"]], "__repr__() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.cacheRHSvector"]], "fipy.terms.advectionterm": [[348, "module-fipy.terms.advectionTerm"]], "justerrorvector() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.justResidualVector"]], "matrix (fipy.terms.advectionterm.advectionterm property)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.solve"]], "sweep() (fipy.terms.advectionterm.advectionterm method)": [[348, "fipy.terms.advectionTerm.AdvectionTerm.sweep"]], "fipy.terms.asymmetricconvectionterm": [[349, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryterm": [[350, "module-fipy.terms.binaryTerm"]], "cellterm (class in fipy.terms.cellterm)": [[351, "fipy.terms.cellTerm.CellTerm"]], "rhsvector (fipy.terms.cellterm.cellterm property)": [[351, "fipy.terms.cellTerm.CellTerm.RHSvector"]], "__eq__() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.__eq__"]], "__hash__() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.__hash__"]], "__mul__() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.__mul__"]], "__neg__() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.__neg__"]], "__repr__() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.__repr__"]], "__rmul__() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.__rmul__"]], "cachematrix() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.cacheRHSvector"]], "fipy.terms.cellterm": [[351, "module-fipy.terms.cellTerm"]], "justerrorvector() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.justErrorVector"]], "justresidualvector() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.justResidualVector"]], "matrix (fipy.terms.cellterm.cellterm property)": [[351, "fipy.terms.cellTerm.CellTerm.matrix"]], "residualvectorandnorm() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.residualVectorAndNorm"]], "solve() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.solve"]], "sweep() (fipy.terms.cellterm.cellterm method)": [[351, "fipy.terms.cellTerm.CellTerm.sweep"]], "centraldifferenceconvectionterm (class in fipy.terms.centraldiffconvectionterm)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm"]], "rhsvector (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__eq__"]], "__hash__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__hash__"]], "__mul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__mul__"]], "__neg__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__neg__"]], "__repr__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheRHSvector"]], "fipy.terms.centraldiffconvectionterm": [[352, "module-fipy.terms.centralDiffConvectionTerm"]], "justerrorvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justResidualVector"]], "matrix (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.solve"]], "sweep() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[352, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.sweep"]], "fipy.terms.coupledbinaryterm": [[353, "module-fipy.terms.coupledBinaryTerm"]], "diffusionterm (class in fipy.terms.diffusionterm)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm"]], "rhsvector (fipy.terms.diffusionterm.diffusionterm property)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.__eq__"]], "__hash__() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.__hash__"]], "__repr__() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.cacheRHSvector"]], "fipy.terms.diffusionterm": [[354, "module-fipy.terms.diffusionTerm"]], "justerrorvector() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.justResidualVector"]], "matrix (fipy.terms.diffusionterm.diffusionterm property)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.solve"]], "sweep() (fipy.terms.diffusionterm.diffusionterm method)": [[354, "fipy.terms.diffusionTerm.DiffusionTerm.sweep"]], "diffusiontermcorrection (class in fipy.terms.diffusiontermcorrection)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection"]], "rhsvector (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermcorrection": [[355, "module-fipy.terms.diffusionTermCorrection"]], "justerrorvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.solve"]], "sweep() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[355, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.sweep"]], "diffusiontermnocorrection (class in fipy.terms.diffusiontermnocorrection)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection"]], "rhsvector (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermnocorrection": [[356, "module-fipy.terms.diffusionTermNoCorrection"]], "justerrorvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.solve"]], "sweep() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[356, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.sweep"]], "explicitdiffusionterm (class in fipy.terms.explicitdiffusionterm)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm"]], "rhsvector (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__eq__"]], "__hash__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__hash__"]], "__repr__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheRHSvector"]], "fipy.terms.explicitdiffusionterm": [[357, "module-fipy.terms.explicitDiffusionTerm"]], "justerrorvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justResidualVector"]], "matrix (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.solve"]], "sweep() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[357, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.sweep"]], "fipy.terms.explicitsourceterm": [[358, "module-fipy.terms.explicitSourceTerm"]], "explicitupwindconvectionterm (class in fipy.terms.explicitupwindconvectionterm)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm"]], "rhsvector (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.explicitupwindconvectionterm": [[359, "module-fipy.terms.explicitUpwindConvectionTerm"]], "justerrorvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.solve"]], "sweep() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[359, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.sweep"]], "exponentialconvectionterm (class in fipy.terms.exponentialconvectionterm)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm"]], "rhsvector (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__eq__"]], "__hash__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__hash__"]], "__mul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__mul__"]], "__neg__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__neg__"]], "__repr__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheRHSvector"]], "fipy.terms.exponentialconvectionterm": [[360, "module-fipy.terms.exponentialConvectionTerm"]], "justerrorvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justResidualVector"]], "matrix (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.solve"]], "sweep() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[360, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.sweep"]], "faceterm (class in fipy.terms.faceterm)": [[361, "fipy.terms.faceTerm.FaceTerm"]], "rhsvector (fipy.terms.faceterm.faceterm property)": [[361, "fipy.terms.faceTerm.FaceTerm.RHSvector"]], "__eq__() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.__eq__"]], "__hash__() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.__hash__"]], "__mul__() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.__mul__"]], "__neg__() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.__neg__"]], "__repr__() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.__repr__"]], "__rmul__() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.__rmul__"]], "cachematrix() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.cacheRHSvector"]], "fipy.terms.faceterm": [[361, "module-fipy.terms.faceTerm"]], "justerrorvector() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.justResidualVector"]], "matrix (fipy.terms.faceterm.faceterm property)": [[361, "fipy.terms.faceTerm.FaceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.solve"]], "sweep() (fipy.terms.faceterm.faceterm method)": [[361, "fipy.terms.faceTerm.FaceTerm.sweep"]], "firstorderadvectionterm (class in fipy.terms.firstorderadvectionterm)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm"]], "rhsvector (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__eq__"]], "__hash__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__hash__"]], "__mul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__mul__"]], "__neg__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__neg__"]], "__repr__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheRHSvector"]], "fipy.terms.firstorderadvectionterm": [[362, "module-fipy.terms.firstOrderAdvectionTerm"]], "justerrorvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justResidualVector"]], "matrix (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.solve"]], "sweep() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[362, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.sweep"]], "hybridconvectionterm (class in fipy.terms.hybridconvectionterm)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm"]], "rhsvector (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__eq__"]], "__hash__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__hash__"]], "__mul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__mul__"]], "__neg__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__neg__"]], "__repr__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheRHSvector"]], "fipy.terms.hybridconvectionterm": [[363, "module-fipy.terms.hybridConvectionTerm"]], "justerrorvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justResidualVector"]], "matrix (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.solve"]], "sweep() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[363, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.sweep"]], "implicitdiffusionterm (in module fipy.terms.implicitdiffusionterm)": [[364, "fipy.terms.implicitDiffusionTerm.ImplicitDiffusionTerm"]], "fipy.terms.implicitdiffusionterm": [[364, "module-fipy.terms.implicitDiffusionTerm"]], "implicitsourceterm (class in fipy.terms.implicitsourceterm)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm"]], "rhsvector (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.RHSvector"]], "__eq__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__eq__"]], "__hash__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__hash__"]], "__mul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__mul__"]], "__neg__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__neg__"]], "__repr__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__repr__"]], "__rmul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__rmul__"]], "cachematrix() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheRHSvector"]], "fipy.terms.implicitsourceterm": [[365, "module-fipy.terms.implicitSourceTerm"]], "justerrorvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justResidualVector"]], "matrix (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.solve"]], "sweep() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[365, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.sweep"]], "fipy.terms.nondiffusionterm": [[366, "module-fipy.terms.nonDiffusionTerm"]], "powerlawconvectionterm (class in fipy.terms.powerlawconvectionterm)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm"]], "rhsvector (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__eq__"]], "__hash__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__hash__"]], "__mul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__mul__"]], "__neg__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__neg__"]], "__repr__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheRHSvector"]], "fipy.terms.powerlawconvectionterm": [[367, "module-fipy.terms.powerLawConvectionTerm"]], "justerrorvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justResidualVector"]], "matrix (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.solve"]], "sweep() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[367, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.sweep"]], "rhsvector (fipy.terms.residualterm.residualterm property)": [[368, "fipy.terms.residualTerm.ResidualTerm.RHSvector"]], "residualterm (class in fipy.terms.residualterm)": [[368, "fipy.terms.residualTerm.ResidualTerm"]], "__eq__() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.__eq__"]], "__hash__() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.__hash__"]], "__mul__() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.__mul__"]], "__neg__() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.__neg__"]], "__repr__() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.__repr__"]], "__rmul__() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.__rmul__"]], "cachematrix() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.cacheRHSvector"]], "fipy.terms.residualterm": [[368, "module-fipy.terms.residualTerm"]], "justerrorvector() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.justErrorVector"]], "justresidualvector() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.justResidualVector"]], "matrix (fipy.terms.residualterm.residualterm property)": [[368, "fipy.terms.residualTerm.ResidualTerm.matrix"]], "residualvectorandnorm() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.residualVectorAndNorm"]], "solve() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.solve"]], "sweep() (fipy.terms.residualterm.residualterm method)": [[368, "fipy.terms.residualTerm.ResidualTerm.sweep"]], "rhsvector (fipy.terms.sourceterm.sourceterm property)": [[369, "fipy.terms.sourceTerm.SourceTerm.RHSvector"]], "sourceterm (class in fipy.terms.sourceterm)": [[369, "fipy.terms.sourceTerm.SourceTerm"]], "__eq__() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.__eq__"]], "__hash__() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.__hash__"]], "__mul__() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.__mul__"]], "__neg__() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.__neg__"]], "__repr__() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.__repr__"]], "__rmul__() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.__rmul__"]], "cachematrix() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.cacheRHSvector"]], "fipy.terms.sourceterm": [[369, "module-fipy.terms.sourceTerm"]], "justerrorvector() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.justResidualVector"]], "matrix (fipy.terms.sourceterm.sourceterm property)": [[369, "fipy.terms.sourceTerm.SourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.solve"]], "sweep() (fipy.terms.sourceterm.sourceterm method)": [[369, "fipy.terms.sourceTerm.SourceTerm.sweep"]], "rhsvector (fipy.terms.term.term property)": [[370, "fipy.terms.term.Term.RHSvector"]], "term (class in fipy.terms.term)": [[370, "fipy.terms.term.Term"]], "__eq__() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.__eq__"]], "__hash__() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.__hash__"]], "__repr__() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.__repr__"]], "cachematrix() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.cacheMatrix"]], "cacherhsvector() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.cacheRHSvector"]], "fipy.terms.term": [[370, "module-fipy.terms.term"]], "justerrorvector() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.justErrorVector"]], "justresidualvector() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.justResidualVector"]], "matrix (fipy.terms.term.term property)": [[370, "fipy.terms.term.Term.matrix"]], "residualvectorandnorm() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.residualVectorAndNorm"]], "solve() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.solve"]], "sweep() (fipy.terms.term.term method)": [[370, "fipy.terms.term.Term.sweep"]], "fipy.terms.test": [[371, "module-fipy.terms.test"]], "rhsvector (fipy.terms.transientterm.transientterm property)": [[372, "fipy.terms.transientTerm.TransientTerm.RHSvector"]], "transientterm (class in fipy.terms.transientterm)": [[372, "fipy.terms.transientTerm.TransientTerm"]], "__eq__() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.__eq__"]], "__hash__() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.__hash__"]], "__mul__() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.__mul__"]], "__neg__() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.__neg__"]], "__repr__() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.__repr__"]], "__rmul__() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.__rmul__"]], "cachematrix() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.cacheRHSvector"]], "fipy.terms.transientterm": [[372, "module-fipy.terms.transientTerm"]], "justerrorvector() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.justErrorVector"]], "justresidualvector() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.justResidualVector"]], "matrix (fipy.terms.transientterm.transientterm property)": [[372, "fipy.terms.transientTerm.TransientTerm.matrix"]], "residualvectorandnorm() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.residualVectorAndNorm"]], "solve() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.solve"]], "sweep() (fipy.terms.transientterm.transientterm method)": [[372, "fipy.terms.transientTerm.TransientTerm.sweep"]], "fipy.terms.unaryterm": [[373, "module-fipy.terms.unaryTerm"]], "rhsvector (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.RHSvector"]], "upwindconvectionterm (class in fipy.terms.upwindconvectionterm)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm"]], "__eq__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.upwindconvectionterm": [[374, "module-fipy.terms.upwindConvectionTerm"]], "justerrorvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.solve"]], "sweep() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[374, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.sweep"]], "rhsvector (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.RHSvector"]], "vanleerconvectionterm (class in fipy.terms.vanleerconvectionterm)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm"]], "__eq__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__eq__"]], "__hash__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__hash__"]], "__mul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__mul__"]], "__neg__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__neg__"]], "__repr__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheRHSvector"]], "fipy.terms.vanleerconvectionterm": [[375, "module-fipy.terms.vanLeerConvectionTerm"]], "justerrorvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justResidualVector"]], "matrix (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.solve"]], "sweep() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[375, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.sweep"]], "fipy.testfipy": [[376, "module-fipy.testFiPy"]], "fipy.tests": [[377, "module-fipy.tests"]], "execbutnotest() (in module fipy.tests.doctestplus)": [[378, "fipy.tests.doctestPlus.execButNoTest"]], "fipy.tests.doctestplus": [[378, "module-fipy.tests.doctestPlus"]], "register_skipper() (in module fipy.tests.doctestplus)": [[378, "fipy.tests.doctestPlus.register_skipper"]], "report_skips() (in module fipy.tests.doctestplus)": [[378, "fipy.tests.doctestPlus.report_skips"]], "testmod() (in module fipy.tests.doctestplus)": [[378, "fipy.tests.doctestPlus.testmod"]], "fipy.tests.lateimporttest": [[379, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[380, "module-fipy.tests.test"]], "testprogram (class in fipy.tests.testprogram)": [[381, "fipy.tests.testProgram.TestProgram"]], "fipy.tests.testprogram": [[381, "module-fipy.tests.testProgram"]], "main (in module fipy.tests.testprogram)": [[381, "fipy.tests.testProgram.main"]], "physicalfield (class in fipy.tools)": [[382, "fipy.tools.PhysicalField"]], "sharedtemporaryfile() (in module fipy.tools)": [[382, "fipy.tools.SharedTemporaryFile"]], "__abs__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__abs__"]], "__add__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__add__"]], "__array__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__bool__"]], "__div__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__div__"]], "__eq__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__eq__"]], "__float__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__float__"]], "__ge__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__ge__"]], "__getitem__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__gt__"]], "__hash__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__hash__"]], "__le__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__le__"]], "__lt__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__lt__"]], "__mod__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__mod__"]], "__mul__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__mul__"]], "__ne__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__ne__"]], "__neg__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__pow__"]], "__radd__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__radd__"]], "__repr__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__repr__"]], "__rmul__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__rmul__"]], "__setitem__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__setitem__"]], "__str__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__str__"]], "__sub__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.__truediv__"]], "add() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.add"]], "allclose() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.allclose"]], "allequal() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.allequal"]], "arccos() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.arccos"]], "arccosh() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.arccosh"]], "arcsin() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.arcsin"]], "arctan() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.arctan"]], "arctan2() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.arctan2"]], "arctanh() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.arctanh"]], "ceil() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.ceil"]], "conjugate() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.conjugate"]], "converttounit() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.convertToUnit"]], "copy() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.copy"]], "cos() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.cos"]], "cosh() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.cosh"]], "divide() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.divide"]], "dot() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.dot"]], "dtype (fipy.tools.physicalfield property)": [[382, "fipy.tools.PhysicalField.dtype"]], "fipy.tools": [[382, "module-fipy.tools"]], "floor() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.floor"]], "inbaseunits() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.inRadians"]], "insiunits() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.inUnitsOf"]], "log() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.log"]], "log10() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.log10"]], "multiply() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.multiply"]], "numericvalue (fipy.tools.physicalfield property)": [[382, "fipy.tools.PhysicalField.numericValue"]], "parallelcomm (in module fipy.tools)": [[382, "fipy.tools.parallelComm"]], "put() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.put"]], "reshape() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.reshape"]], "serialcomm (in module fipy.tools)": [[382, "fipy.tools.serialComm"]], "shape (fipy.tools.physicalfield property)": [[382, "fipy.tools.PhysicalField.shape"]], "sign() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.sign"]], "sin() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.sin"]], "sinh() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.sinh"]], "sqrt() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.sqrt"]], "subtract() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.subtract"]], "sum() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.sum"]], "take() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.take"]], "tan() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.tan"]], "tanh() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.tanh"]], "tostring() (fipy.tools.physicalfield method)": [[382, "fipy.tools.PhysicalField.tostring"]], "unit (fipy.tools.physicalfield property)": [[382, "fipy.tools.PhysicalField.unit"]], "fipy.tools.changelog": [[383, "module-fipy.tools.changelog"]], "fipy.tools.comms": [[384, "module-fipy.tools.comms"]], "commwrapper (class in fipy.tools.comms.commwrapper)": [[385, "fipy.tools.comms.commWrapper.CommWrapper"]], "__getstate__() (fipy.tools.comms.commwrapper.commwrapper method)": [[385, "fipy.tools.comms.commWrapper.CommWrapper.__getstate__"]], "__repr__() (fipy.tools.comms.commwrapper.commwrapper method)": [[385, "fipy.tools.comms.commWrapper.CommWrapper.__repr__"]], "fipy.tools.comms.commwrapper": [[385, "module-fipy.tools.comms.commWrapper"]], "dummycomm (class in fipy.tools.comms.dummycomm)": [[386, "fipy.tools.comms.dummyComm.DummyComm"]], "__getstate__() (fipy.tools.comms.dummycomm.dummycomm method)": [[386, "fipy.tools.comms.dummyComm.DummyComm.__getstate__"]], "__repr__() (fipy.tools.comms.dummycomm.dummycomm method)": [[386, "fipy.tools.comms.dummyComm.DummyComm.__repr__"]], "fipy.tools.comms.dummycomm": [[386, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.copy_script": [[387, "module-fipy.tools.copy_script"]], "print() (in module fipy.tools.debug)": [[388, "fipy.tools.debug.PRINT"]], "fipy.tools.debug": [[388, "module-fipy.tools.debug"]], "deprecate() (in module fipy.tools.decorators)": [[389, "fipy.tools.decorators.deprecate"]], "fipy.tools.decorators": [[389, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[390, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.dictwithdefault": [[391, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.numberdict": [[392, "module-fipy.tools.dimensions.NumberDict"]], "physicalfield (class in fipy.tools.dimensions.physicalfield)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField"]], "physicalunit (class in fipy.tools.dimensions.physicalfield)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit"]], "__abs__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__abs__"]], "__add__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__add__"]], "__array__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__bool__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__div__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__div__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__eq__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__eq__"]], "__float__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__float__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__ge__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ge__"]], "__getitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__gt__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__gt__"]], "__hash__ (fipy.tools.dimensions.physicalfield.physicalunit attribute)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__hash__"]], "__hash__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__hash__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__le__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__le__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__lt__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__lt__"]], "__mod__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__mod__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__mul__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__mul__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__ne__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ne__"]], "__neg__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__pow__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__pow__"]], "__radd__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__radd__"]], "__rdiv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rdiv__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__repr__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__repr__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__rmul__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rmul__"]], "__rtruediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rtruediv__"]], "__setitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__setitem__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__str__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__str__"]], "__sub__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.__truediv__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.__truediv__"]], "add() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.add"]], "allclose() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.allclose"]], "allequal() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.allequal"]], "arccos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.arccos"]], "arccosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.arccosh"]], "arcsin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.arcsin"]], "arctan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.arctan"]], "arctan2() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.arctan2"]], "arctanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.arctanh"]], "ceil() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.ceil"]], "conjugate() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.conjugate"]], "conversionfactorto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionFactorTo"]], "conversiontupleto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionTupleTo"]], "converttounit() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.convertToUnit"]], "copy() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.copy"]], "cos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.cos"]], "cosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.cosh"]], "divide() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.divide"]], "dot() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.dot"]], "dtype (fipy.tools.dimensions.physicalfield.physicalfield property)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.dtype"]], "fipy.tools.dimensions.physicalfield": [[393, "module-fipy.tools.dimensions.physicalField"]], "floor() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.floor"]], "inbaseunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.inRadians"]], "insiunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.inUnitsOf"]], "isangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.isAngle"]], "iscompatible() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.isCompatible"]], "isdimensionless() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionless"]], "isdimensionlessorangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionlessOrAngle"]], "isinverseangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.isInverseAngle"]], "log() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.log"]], "log10() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.log10"]], "multiply() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.multiply"]], "name() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.name"]], "numericvalue (fipy.tools.dimensions.physicalfield.physicalfield property)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.numericValue"]], "put() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.put"]], "reshape() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.reshape"]], "setname() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalUnit.setName"]], "shape (fipy.tools.dimensions.physicalfield.physicalfield property)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.shape"]], "sign() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.sign"]], "sin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.sin"]], "sinh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.sinh"]], "sqrt() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.sqrt"]], "subtract() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.subtract"]], "sum() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.sum"]], "take() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.take"]], "tan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.tan"]], "tanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.tanh"]], "tostring() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.tostring"]], "unit (fipy.tools.dimensions.physicalfield.physicalfield property)": [[393, "fipy.tools.dimensions.physicalField.PhysicalField.unit"]], "read() (in module fipy.tools.dump)": [[394, "fipy.tools.dump.read"]], "write() (in module fipy.tools.dump)": [[394, "fipy.tools.dump.write"]], "fipy.tools.inline": [[395, "module-fipy.tools.inline"]], "fipy.tools.logging": [[396, "module-fipy.tools.logging"]], "conda_info() (in module fipy.tools.logging.environment)": [[397, "fipy.tools.logging.environment.conda_info"]], "fipy.tools.logging.environment": [[397, "module-fipy.tools.logging.environment"]], "nix_info() (in module fipy.tools.logging.environment)": [[397, "fipy.tools.logging.environment.nix_info"]], "package_info() (in module fipy.tools.logging.environment)": [[397, "fipy.tools.logging.environment.package_info"]], "pip_info() (in module fipy.tools.logging.environment)": [[397, "fipy.tools.logging.environment.pip_info"]], "platform_info() (in module fipy.tools.logging.environment)": [[397, "fipy.tools.logging.environment.platform_info"]], "l1norm() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.L1norm"]], "l2norm() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.L2norm"]], "linfnorm() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.LINFnorm"]], "all() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.all"]], "allclose() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.allclose"]], "allequal() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.allequal"]], "dot() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.dot"]], "fipy.tools.numerix": [[398, "module-fipy.tools.numerix"]], "getshape() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.getShape"]], "getunit() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.getUnit"]], "isclose() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.isclose"]], "nearest() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.nearest"]], "put() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.put"]], "rank() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.rank"]], "reshape() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.reshape"]], "sqrtdot() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.sqrtDot"]], "sum() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.sum"]], "take() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.take"]], "tostring() (in module fipy.tools.numerix)": [[398, "fipy.tools.numerix.tostring"]], "parse() (in module fipy.tools.parser)": [[399, "fipy.tools.parser.parse"]], "sharedtemporaryfile() (in module fipy.tools.sharedtempfile)": [[400, "fipy.tools.sharedtempfile.SharedTemporaryFile"]], "fipy.tools.sharedtempfile": [[400, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[401, "module-fipy.tools.test"]], "timer (class in fipy.tools.timer)": [[402, "fipy.tools.timer.Timer"]], "clock_ns() (fipy.tools.timer.timer static method)": [[402, "fipy.tools.timer.Timer.clock_ns"]], "elapsed (fipy.tools.timer.timer property)": [[402, "fipy.tools.timer.Timer.elapsed"]], "fipy.tools.timer": [[402, "module-fipy.tools.timer"]], "fipy.tools.vector": [[403, "module-fipy.tools.vector"]], "prune() (in module fipy.tools.vector)": [[403, "fipy.tools.vector.prune"]], "putadd() (in module fipy.tools.vector)": [[403, "fipy.tools.vector.putAdd"]], "fipy.variables": [[404, "module-fipy.variables"]], "fipy.variables.addoverfacesvariable": [[405, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticcelltofacevariable": [[406, "module-fipy.variables.arithmeticCellToFaceVariable"]], "betanoisevariable (class in fipy.variables.betanoisevariable)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable"]], "__abs__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__abs__"]], "__and__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__and__"]], "__array__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__bool__"]], "__call__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__call__"]], "__eq__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__invert__"]], "__le__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__le__"]], "__lt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ne__"]], "__new__() (fipy.variables.betanoisevariable.betanoisevariable static method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__or__"]], "__pow__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__str__"]], "all() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.all"]], "allclose() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.allclose"]], "any() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constrain"]], "constraintmask (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constraintMask"]], "copy() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.copy"]], "dot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dot"]], "dtype (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dtype"]], "facegrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGrad"]], "facevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceValue"]], "fipy.variables.betanoisevariable": [[407, "module-fipy.variables.betaNoiseVariable"]], "gaussgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.gaussGrad"]], "globalvalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.globalValue"]], "grad (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.mag"]], "max() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.max"]], "min() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.old"]], "rdot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.rdot"]], "release() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.release"]], "scramble() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.scramble"]], "setvalue() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.setValue"]], "shape (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.shape"]], "std() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.std"]], "unit (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.unit"]], "updateold() (fipy.variables.betanoisevariable.betanoisevariable method)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.updateOld"]], "value (fipy.variables.betanoisevariable.betanoisevariable property)": [[407, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.value"]], "fipy.variables.binaryoperatorvariable": [[408, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.celltofacevariable": [[409, "module-fipy.variables.cellToFaceVariable"]], "cellvariable (class in fipy.variables.cellvariable)": [[410, "fipy.variables.cellVariable.CellVariable"]], "__abs__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__abs__"]], "__and__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__and__"]], "__array__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__array__"]], "__array_wrap__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__array_wrap__"]], "__bool__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__bool__"]], "__call__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__call__"]], "__eq__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__eq__"]], "__ge__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__ge__"]], "__getitem__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__getitem__"]], "__getstate__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__getstate__"]], "__gt__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__gt__"]], "__hash__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__hash__"]], "__invert__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__invert__"]], "__le__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__le__"]], "__lt__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__lt__"]], "__ne__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__ne__"]], "__new__() (fipy.variables.cellvariable.cellvariable static method)": [[410, "fipy.variables.cellVariable.CellVariable.__new__"]], "__nonzero__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__nonzero__"]], "__or__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__or__"]], "__pow__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__pow__"]], "__repr__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__repr__"]], "__setstate__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__setstate__"]], "__str__() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.__str__"]], "all() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.all"]], "allclose() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.allclose"]], "any() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.any"]], "arithmeticfacevalue (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.cellVolumeAverage"]], "constrain() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.constrain"]], "constraintmask (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.constraintMask"]], "copy() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.copy"]], "dot() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.dot"]], "dtype (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.dtype"]], "facegrad (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.faceGrad"]], "facevalue (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.faceValue"]], "fipy.variables.cellvariable": [[410, "module-fipy.variables.cellVariable"]], "gaussgrad (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.gaussGrad"]], "globalvalue (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.globalValue"]], "grad (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.grad"]], "harmonicfacevalue (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.inBaseUnits"]], "inunitsof() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.leastSquaresGrad"]], "mag (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.mag"]], "max() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.max"]], "min() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.min"]], "minmodfacevalue (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.minmodFaceValue"]], "old (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.old"]], "rdot() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.rdot"]], "release() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.release"]], "setvalue() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.setValue"]], "shape (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.shape"]], "std() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.std"]], "unit (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.unit"]], "updateold() (fipy.variables.cellvariable.cellvariable method)": [[410, "fipy.variables.cellVariable.CellVariable.updateOld"]], "value (fipy.variables.cellvariable.cellvariable property)": [[410, "fipy.variables.cellVariable.CellVariable.value"]], "fipy.variables.constant": [[411, "module-fipy.variables.constant"]], "fipy.variables.constraintmask": [[412, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledcellvariable": [[413, "module-fipy.variables.coupledCellVariable"]], "distancevariable (class in fipy.variables.distancevariable)": [[414, "fipy.variables.distanceVariable.DistanceVariable"]], "__abs__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__abs__"]], "__and__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__and__"]], "__array__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__array__"]], "__array_wrap__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__array_wrap__"]], "__bool__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__bool__"]], "__call__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__call__"]], "__eq__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__eq__"]], "__ge__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__ge__"]], "__getitem__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__getitem__"]], "__getstate__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__getstate__"]], "__gt__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__gt__"]], "__hash__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__hash__"]], "__invert__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__invert__"]], "__le__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__le__"]], "__lt__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__lt__"]], "__ne__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__ne__"]], "__new__() (fipy.variables.distancevariable.distancevariable static method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__new__"]], "__nonzero__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__nonzero__"]], "__or__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__or__"]], "__pow__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__pow__"]], "__repr__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__repr__"]], "__setstate__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__setstate__"]], "__str__() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.__str__"]], "all() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.all"]], "allclose() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.allclose"]], "any() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.any"]], "arithmeticfacevalue (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.arithmeticFaceValue"]], "calcdistancefunction() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.calcDistanceFunction"]], "cellinterfaceareas (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.cellInterfaceAreas"]], "cellvolumeaverage (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.cellVolumeAverage"]], "constrain() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.constrain"]], "constraintmask (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.constraintMask"]], "copy() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.copy"]], "dot() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.dot"]], "dtype (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.dtype"]], "extendvariable() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.extendVariable"]], "facegrad (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.faceGrad"]], "facevalue (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.faceValue"]], "fipy.variables.distancevariable": [[414, "module-fipy.variables.distanceVariable"]], "gaussgrad (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.gaussGrad"]], "globalvalue (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.globalValue"]], "grad (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.grad"]], "harmonicfacevalue (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.leastSquaresGrad"]], "mag (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.mag"]], "max() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.max"]], "min() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.min"]], "minmodfacevalue (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.minmodFaceValue"]], "old (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.old"]], "rdot() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.rdot"]], "release() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.release"]], "setvalue() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.setValue"]], "shape (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.shape"]], "std() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.std"]], "unit (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.unit"]], "updateold() (fipy.variables.distancevariable.distancevariable method)": [[414, "fipy.variables.distanceVariable.DistanceVariable.updateOld"]], "value (fipy.variables.distancevariable.distancevariable property)": [[414, "fipy.variables.distanceVariable.DistanceVariable.value"]], "exponentialnoisevariable (class in fipy.variables.exponentialnoisevariable)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable"]], "__abs__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__abs__"]], "__and__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__and__"]], "__array__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__bool__"]], "__call__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__call__"]], "__eq__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__eq__"]], "__ge__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__gt__"]], "__hash__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__hash__"]], "__invert__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__invert__"]], "__le__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__le__"]], "__lt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__lt__"]], "__ne__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ne__"]], "__new__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable static method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__or__"]], "__pow__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__pow__"]], "__repr__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__setstate__"]], "__str__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__str__"]], "all() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.all"]], "allclose() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.allclose"]], "any() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constrain"]], "constraintmask (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constraintMask"]], "copy() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.copy"]], "dot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dot"]], "dtype (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dtype"]], "facegrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGrad"]], "facevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceValue"]], "fipy.variables.exponentialnoisevariable": [[415, "module-fipy.variables.exponentialNoiseVariable"]], "gaussgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.gaussGrad"]], "globalvalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.globalValue"]], "grad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.mag"]], "max() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.max"]], "min() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.min"]], "minmodfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.minmodFaceValue"]], "old (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.old"]], "rdot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.rdot"]], "release() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.release"]], "scramble() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.scramble"]], "setvalue() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.setValue"]], "shape (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.shape"]], "std() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.std"]], "unit (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.unit"]], "updateold() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.updateOld"]], "value (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[415, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.value"]], "fipy.variables.facegradcontributionsvariable": [[416, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.facegradvariable": [[417, "module-fipy.variables.faceGradVariable"]], "facevariable (class in fipy.variables.facevariable)": [[418, "fipy.variables.faceVariable.FaceVariable"]], "__abs__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__abs__"]], "__and__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__and__"]], "__array__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__array__"]], "__array_wrap__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__bool__"]], "__call__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__call__"]], "__eq__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__eq__"]], "__ge__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__ge__"]], "__getitem__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__getitem__"]], "__getstate__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__getstate__"]], "__gt__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__gt__"]], "__hash__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__hash__"]], "__invert__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__invert__"]], "__le__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__le__"]], "__lt__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__lt__"]], "__ne__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__ne__"]], "__new__() (fipy.variables.facevariable.facevariable static method)": [[418, "fipy.variables.faceVariable.FaceVariable.__new__"]], "__nonzero__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__nonzero__"]], "__or__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__or__"]], "__pow__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__pow__"]], "__repr__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__repr__"]], "__setstate__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__setstate__"]], "__str__() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.__str__"]], "all() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.all"]], "allclose() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.allclose"]], "any() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.any"]], "constrain() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.constrain"]], "constraintmask (fipy.variables.facevariable.facevariable property)": [[418, "fipy.variables.faceVariable.FaceVariable.constraintMask"]], "copy() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.copy"]], "divergence (fipy.variables.facevariable.facevariable property)": [[418, "fipy.variables.faceVariable.FaceVariable.divergence"]], "dot() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.dot"]], "dtype (fipy.variables.facevariable.facevariable property)": [[418, "fipy.variables.faceVariable.FaceVariable.dtype"]], "fipy.variables.facevariable": [[418, "module-fipy.variables.faceVariable"]], "inbaseunits() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.inUnitsOf"]], "mag (fipy.variables.facevariable.facevariable property)": [[418, "fipy.variables.faceVariable.FaceVariable.mag"]], "max() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.max"]], "min() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.min"]], "rdot() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.rdot"]], "release() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.release"]], "setvalue() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.setValue"]], "shape (fipy.variables.facevariable.facevariable property)": [[418, "fipy.variables.faceVariable.FaceVariable.shape"]], "std() (fipy.variables.facevariable.facevariable method)": [[418, "fipy.variables.faceVariable.FaceVariable.std"]], "unit (fipy.variables.facevariable.facevariable property)": [[418, "fipy.variables.faceVariable.FaceVariable.unit"]], "value (fipy.variables.facevariable.facevariable property)": [[418, "fipy.variables.faceVariable.FaceVariable.value"]], "gammanoisevariable (class in fipy.variables.gammanoisevariable)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable"]], "__abs__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__abs__"]], "__and__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__and__"]], "__array__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__bool__"]], "__call__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__call__"]], "__eq__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__invert__"]], "__le__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__le__"]], "__lt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ne__"]], "__new__() (fipy.variables.gammanoisevariable.gammanoisevariable static method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__or__"]], "__pow__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__str__"]], "all() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.all"]], "allclose() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.allclose"]], "any() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constrain"]], "constraintmask (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constraintMask"]], "copy() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.copy"]], "dot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dot"]], "dtype (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dtype"]], "facegrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGrad"]], "facevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceValue"]], "fipy.variables.gammanoisevariable": [[419, "module-fipy.variables.gammaNoiseVariable"]], "gaussgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.gaussGrad"]], "globalvalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.globalValue"]], "grad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.mag"]], "max() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.max"]], "min() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.old"]], "rdot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.rdot"]], "release() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.release"]], "scramble() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.scramble"]], "setvalue() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.setValue"]], "shape (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.shape"]], "std() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.std"]], "unit (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.unit"]], "updateold() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.updateOld"]], "value (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[419, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.value"]], "fipy.variables.gausscellgradvariable": [[420, "module-fipy.variables.gaussCellGradVariable"]], "gaussiannoisevariable (class in fipy.variables.gaussiannoisevariable)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable"]], "__abs__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__abs__"]], "__and__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__and__"]], "__array__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__bool__"]], "__call__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__call__"]], "__eq__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__invert__"]], "__le__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__le__"]], "__lt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ne__"]], "__new__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable static method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__or__"]], "__pow__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__str__"]], "all() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.all"]], "allclose() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.allclose"]], "any() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constrain"]], "constraintmask (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constraintMask"]], "copy() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.copy"]], "dot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dot"]], "dtype (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dtype"]], "facegrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGrad"]], "facevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceValue"]], "fipy.variables.gaussiannoisevariable": [[421, "module-fipy.variables.gaussianNoiseVariable"]], "gaussgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.gaussGrad"]], "globalvalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.globalValue"]], "grad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.mag"]], "max() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.max"]], "min() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.old"]], "rdot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.rdot"]], "release() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.release"]], "scramble() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.scramble"]], "setvalue() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.setValue"]], "shape (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.shape"]], "std() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.std"]], "unit (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.unit"]], "updateold() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.updateOld"]], "value (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[421, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.value"]], "fipy.variables.harmoniccelltofacevariable": [[422, "module-fipy.variables.harmonicCellToFaceVariable"]], "histogramvariable (class in fipy.variables.histogramvariable)": [[423, "fipy.variables.histogramVariable.HistogramVariable"]], "__abs__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__abs__"]], "__and__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__and__"]], "__array__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__array__"]], "__array_wrap__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__array_wrap__"]], "__bool__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__bool__"]], "__call__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__call__"]], "__eq__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__eq__"]], "__ge__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__ge__"]], "__getitem__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__getitem__"]], "__getstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__getstate__"]], "__gt__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__gt__"]], "__hash__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__hash__"]], "__invert__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__invert__"]], "__le__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__le__"]], "__lt__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__lt__"]], "__ne__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__ne__"]], "__new__() (fipy.variables.histogramvariable.histogramvariable static method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__new__"]], "__nonzero__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__nonzero__"]], "__or__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__or__"]], "__pow__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__pow__"]], "__repr__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__repr__"]], "__setstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__setstate__"]], "__str__() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.__str__"]], "all() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.all"]], "allclose() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.allclose"]], "any() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.any"]], "arithmeticfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.cellVolumeAverage"]], "constrain() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.constrain"]], "constraintmask (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.constraintMask"]], "copy() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.copy"]], "dot() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.dot"]], "dtype (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.dtype"]], "facegrad (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.faceGrad"]], "facevalue (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.faceValue"]], "fipy.variables.histogramvariable": [[423, "module-fipy.variables.histogramVariable"]], "gaussgrad (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.gaussGrad"]], "globalvalue (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.globalValue"]], "grad (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.grad"]], "harmonicfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.inBaseUnits"]], "inunitsof() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.leastSquaresGrad"]], "mag (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.mag"]], "max() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.max"]], "min() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.min"]], "minmodfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.minmodFaceValue"]], "old (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.old"]], "rdot() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.rdot"]], "release() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.release"]], "setvalue() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.setValue"]], "shape (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.shape"]], "std() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.std"]], "unit (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.unit"]], "updateold() (fipy.variables.histogramvariable.histogramvariable method)": [[423, "fipy.variables.histogramVariable.HistogramVariable.updateOld"]], "value (fipy.variables.histogramvariable.histogramvariable property)": [[423, "fipy.variables.histogramVariable.HistogramVariable.value"]], "fipy.variables.interfaceareavariable": [[424, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceflagvariable": [[425, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastsquarescellgradvariable": [[426, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelsetdiffusionvariable": [[427, "module-fipy.variables.levelSetDiffusionVariable"]], "meshvariable (class in fipy.variables.meshvariable)": [[428, "fipy.variables.meshVariable.MeshVariable"]], "__abs__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__abs__"]], "__and__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__and__"]], "__array__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__array__"]], "__array_wrap__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__array_wrap__"]], "__bool__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__bool__"]], "__call__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__call__"]], "__eq__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__eq__"]], "__ge__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__ge__"]], "__getitem__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__getitem__"]], "__getstate__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__getstate__"]], "__gt__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__gt__"]], "__hash__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__hash__"]], "__invert__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__invert__"]], "__le__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__le__"]], "__lt__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__lt__"]], "__ne__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__ne__"]], "__new__() (fipy.variables.meshvariable.meshvariable static method)": [[428, "fipy.variables.meshVariable.MeshVariable.__new__"]], "__nonzero__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__nonzero__"]], "__or__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__or__"]], "__pow__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__pow__"]], "__repr__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__repr__"]], "__setstate__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__setstate__"]], "__str__() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.__str__"]], "all() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.all"]], "allclose() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.allclose"]], "any() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.any"]], "constrain() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.constrain"]], "constraintmask (fipy.variables.meshvariable.meshvariable property)": [[428, "fipy.variables.meshVariable.MeshVariable.constraintMask"]], "copy() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.copy"]], "dot() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.dot"]], "dtype (fipy.variables.meshvariable.meshvariable property)": [[428, "fipy.variables.meshVariable.MeshVariable.dtype"]], "fipy.variables.meshvariable": [[428, "module-fipy.variables.meshVariable"]], "inbaseunits() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.inBaseUnits"]], "inunitsof() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.inUnitsOf"]], "mag (fipy.variables.meshvariable.meshvariable property)": [[428, "fipy.variables.meshVariable.MeshVariable.mag"]], "max() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.max"]], "min() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.min"]], "rdot() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.rdot"]], "release() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.release"]], "setvalue() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.setValue"]], "shape (fipy.variables.meshvariable.meshvariable property)": [[428, "fipy.variables.meshVariable.MeshVariable.shape"]], "std() (fipy.variables.meshvariable.meshvariable method)": [[428, "fipy.variables.meshVariable.MeshVariable.std"]], "unit (fipy.variables.meshvariable.meshvariable property)": [[428, "fipy.variables.meshVariable.MeshVariable.unit"]], "value (fipy.variables.meshvariable.meshvariable property)": [[428, "fipy.variables.meshVariable.MeshVariable.value"]], "fipy.variables.minmodcelltofacevariable": [[429, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modcellgradvariable": [[430, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modcelltofacevariable": [[431, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modfacegradvariable": [[432, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modphysicalfield": [[433, "module-fipy.variables.modPhysicalField"]], "modularvariable (class in fipy.variables.modularvariable)": [[434, "fipy.variables.modularVariable.ModularVariable"]], "__abs__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__abs__"]], "__and__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__and__"]], "__array__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__array__"]], "__array_wrap__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__array_wrap__"]], "__bool__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__bool__"]], "__call__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__call__"]], "__eq__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__eq__"]], "__ge__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__ge__"]], "__getitem__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__getitem__"]], "__getstate__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__getstate__"]], "__gt__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__gt__"]], "__hash__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__hash__"]], "__invert__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__invert__"]], "__le__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__le__"]], "__lt__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__lt__"]], "__ne__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__ne__"]], "__new__() (fipy.variables.modularvariable.modularvariable static method)": [[434, "fipy.variables.modularVariable.ModularVariable.__new__"]], "__nonzero__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__nonzero__"]], "__or__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__or__"]], "__pow__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__pow__"]], "__repr__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__repr__"]], "__setstate__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__setstate__"]], "__str__() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.__str__"]], "all() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.all"]], "allclose() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.allclose"]], "any() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.any"]], "arithmeticfacevalue (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.cellVolumeAverage"]], "constrain() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.constrain"]], "constraintmask (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.constraintMask"]], "copy() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.copy"]], "dot() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.dot"]], "dtype (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.dtype"]], "facegrad (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.faceGrad"]], "facegradnomod (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.faceGradNoMod"]], "facevalue (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.faceValue"]], "fipy.variables.modularvariable": [[434, "module-fipy.variables.modularVariable"]], "gaussgrad (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.gaussGrad"]], "globalvalue (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.globalValue"]], "grad (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.grad"]], "harmonicfacevalue (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.inBaseUnits"]], "inunitsof() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.leastSquaresGrad"]], "mag (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.mag"]], "max() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.max"]], "min() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.min"]], "minmodfacevalue (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.minmodFaceValue"]], "old (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.old"]], "rdot() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.rdot"]], "release() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.release"]], "setvalue() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.setValue"]], "shape (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.shape"]], "std() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.std"]], "unit (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.unit"]], "updateold() (fipy.variables.modularvariable.modularvariable method)": [[434, "fipy.variables.modularVariable.ModularVariable.updateOld"]], "value (fipy.variables.modularvariable.modularvariable property)": [[434, "fipy.variables.modularVariable.ModularVariable.value"]], "noisevariable (class in fipy.variables.noisevariable)": [[435, "fipy.variables.noiseVariable.NoiseVariable"]], "__abs__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__abs__"]], "__and__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__and__"]], "__array__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__bool__"]], "__call__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__call__"]], "__eq__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__eq__"]], "__ge__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__ge__"]], "__getitem__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__getstate__"]], "__gt__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__gt__"]], "__hash__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__hash__"]], "__invert__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__invert__"]], "__le__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__le__"]], "__lt__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__lt__"]], "__ne__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__ne__"]], "__new__() (fipy.variables.noisevariable.noisevariable static method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__new__"]], "__nonzero__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__nonzero__"]], "__or__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__or__"]], "__pow__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__pow__"]], "__repr__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__repr__"]], "__setstate__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__setstate__"]], "__str__() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.__str__"]], "all() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.all"]], "allclose() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.allclose"]], "any() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.constrain"]], "constraintmask (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.constraintMask"]], "copy() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.copy"]], "dot() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.dot"]], "dtype (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.dtype"]], "facegrad (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.faceGrad"]], "facevalue (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.faceValue"]], "fipy.variables.noisevariable": [[435, "module-fipy.variables.noiseVariable"]], "gaussgrad (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.gaussGrad"]], "globalvalue (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.globalValue"]], "grad (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.mag"]], "max() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.max"]], "min() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.min"]], "minmodfacevalue (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.minmodFaceValue"]], "old (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.old"]], "rdot() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.rdot"]], "release() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.release"]], "scramble() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.scramble"]], "setvalue() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.setValue"]], "shape (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.shape"]], "std() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.std"]], "unit (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.unit"]], "updateold() (fipy.variables.noisevariable.noisevariable method)": [[435, "fipy.variables.noiseVariable.NoiseVariable.updateOld"]], "value (fipy.variables.noisevariable.noisevariable property)": [[435, "fipy.variables.noiseVariable.NoiseVariable.value"]], "fipy.variables.operatorvariable": [[436, "module-fipy.variables.operatorVariable"]], "scharfettergummelfacevariable (class in fipy.variables.scharfettergummelfacevariable)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable"]], "__abs__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__abs__"]], "__and__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__and__"]], "__array__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array__"]], "__array_wrap__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__bool__"]], "__call__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__call__"]], "__eq__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__eq__"]], "__ge__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ge__"]], "__getitem__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getitem__"]], "__getstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getstate__"]], "__gt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__gt__"]], "__hash__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__hash__"]], "__invert__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__invert__"]], "__le__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__le__"]], "__lt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__lt__"]], "__ne__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ne__"]], "__new__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable static method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__new__"]], "__nonzero__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__nonzero__"]], "__or__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__or__"]], "__pow__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__pow__"]], "__repr__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__repr__"]], "__setstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__setstate__"]], "__str__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__str__"]], "all() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.all"]], "allclose() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.allclose"]], "any() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.any"]], "constrain() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constrain"]], "constraintmask (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constraintMask"]], "copy() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.copy"]], "divergence (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.divergence"]], "dot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dot"]], "dtype (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dtype"]], "fipy.variables.scharfettergummelfacevariable": [[437, "module-fipy.variables.scharfetterGummelFaceVariable"]], "inbaseunits() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inUnitsOf"]], "mag (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.mag"]], "max() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.max"]], "min() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.min"]], "rdot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.rdot"]], "release() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.release"]], "setvalue() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.setValue"]], "shape (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.shape"]], "std() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.std"]], "unit (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.unit"]], "value (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[437, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.value"]], "surfactantconvectionvariable (class in fipy.variables.surfactantconvectionvariable)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable"]], "__abs__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__abs__"]], "__and__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__and__"]], "__array__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__bool__"]], "__call__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__call__"]], "__eq__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__eq__"]], "__ge__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__gt__"]], "__hash__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__hash__"]], "__invert__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__invert__"]], "__le__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__le__"]], "__lt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__lt__"]], "__ne__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ne__"]], "__new__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable static method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__or__"]], "__pow__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__pow__"]], "__repr__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__setstate__"]], "__str__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__str__"]], "all() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.all"]], "allclose() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.allclose"]], "any() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.any"]], "constrain() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constrain"]], "constraintmask (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constraintMask"]], "copy() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.copy"]], "divergence (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.divergence"]], "dot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dot"]], "dtype (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dtype"]], "fipy.variables.surfactantconvectionvariable": [[438, "module-fipy.variables.surfactantConvectionVariable"]], "inbaseunits() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inUnitsOf"]], "mag (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.mag"]], "max() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.max"]], "min() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.min"]], "rdot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.rdot"]], "release() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.release"]], "setvalue() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.setValue"]], "shape (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.shape"]], "std() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.std"]], "unit (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.unit"]], "value (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[438, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.value"]], "surfactantvariable (class in fipy.variables.surfactantvariable)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable"]], "__abs__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__abs__"]], "__and__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__and__"]], "__array__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__bool__"]], "__call__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__call__"]], "__eq__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__eq__"]], "__ge__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__gt__"]], "__hash__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__hash__"]], "__invert__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__invert__"]], "__le__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__le__"]], "__lt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__lt__"]], "__ne__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__ne__"]], "__new__() (fipy.variables.surfactantvariable.surfactantvariable static method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__or__"]], "__pow__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__pow__"]], "__repr__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__setstate__"]], "__str__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.__str__"]], "all() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.all"]], "allclose() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.allclose"]], "any() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.any"]], "arithmeticfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.cellVolumeAverage"]], "constrain() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.constrain"]], "constraintmask (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.constraintMask"]], "copy() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.copy"]], "dot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.dot"]], "dtype (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.dtype"]], "facegrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.faceGrad"]], "facevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.faceValue"]], "fipy.variables.surfactantvariable": [[439, "module-fipy.variables.surfactantVariable"]], "gaussgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.gaussGrad"]], "globalvalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.globalValue"]], "grad (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.grad"]], "harmonicfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.inUnitsOf"]], "interfacevar (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.interfaceVar"]], "leastsquaresgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.leastSquaresGrad"]], "mag (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.mag"]], "max() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.max"]], "min() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.min"]], "minmodfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.minmodFaceValue"]], "old (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.old"]], "rdot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.rdot"]], "release() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.release"]], "setvalue() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.setValue"]], "shape (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.shape"]], "std() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.std"]], "unit (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.unit"]], "updateold() (fipy.variables.surfactantvariable.surfactantvariable method)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.updateOld"]], "value (fipy.variables.surfactantvariable.surfactantvariable property)": [[439, "fipy.variables.surfactantVariable.SurfactantVariable.value"]], "fipy.variables.test": [[440, "module-fipy.variables.test"]], "fipy.variables.unaryoperatorvariable": [[441, "module-fipy.variables.unaryOperatorVariable"]], "uniformnoisevariable (class in fipy.variables.uniformnoisevariable)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable"]], "__abs__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__abs__"]], "__and__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__and__"]], "__array__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__bool__"]], "__call__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__call__"]], "__eq__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__eq__"]], "__ge__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__gt__"]], "__hash__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__hash__"]], "__invert__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__invert__"]], "__le__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__le__"]], "__lt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__lt__"]], "__ne__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ne__"]], "__new__() (fipy.variables.uniformnoisevariable.uniformnoisevariable static method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__or__"]], "__pow__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__pow__"]], "__repr__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__setstate__"]], "__str__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__str__"]], "all() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.all"]], "allclose() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.allclose"]], "any() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constrain"]], "constraintmask (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constraintMask"]], "copy() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.copy"]], "dot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dot"]], "dtype (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dtype"]], "facegrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGrad"]], "facevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceValue"]], "fipy.variables.uniformnoisevariable": [[442, "module-fipy.variables.uniformNoiseVariable"]], "gaussgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.gaussGrad"]], "globalvalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.globalValue"]], "grad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.mag"]], "max() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.max"]], "min() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.min"]], "minmodfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.minmodFaceValue"]], "old (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.old"]], "rdot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.rdot"]], "release() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.release"]], "scramble() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.scramble"]], "setvalue() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.setValue"]], "shape (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.shape"]], "std() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.std"]], "unit (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.unit"]], "updateold() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.updateOld"]], "value (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[442, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.value"]], "variable (class in fipy.variables.variable)": [[443, "fipy.variables.variable.Variable"]], "__abs__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__abs__"]], "__and__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__and__"]], "__array__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__array__"]], "__array_wrap__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__array_wrap__"]], "__bool__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__bool__"]], "__call__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__call__"]], "__eq__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__eq__"]], "__ge__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__ge__"]], "__getitem__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__getitem__"]], "__getstate__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__getstate__"]], "__gt__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__gt__"]], "__hash__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__hash__"]], "__invert__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__invert__"]], "__le__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__le__"]], "__lt__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__lt__"]], "__ne__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__ne__"]], "__new__() (fipy.variables.variable.variable static method)": [[443, "fipy.variables.variable.Variable.__new__"]], "__nonzero__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__nonzero__"]], "__or__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__or__"]], "__pow__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__pow__"]], "__repr__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__repr__"]], "__setstate__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__setstate__"]], "__str__() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.__str__"]], "all() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.all"]], "allclose() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.allclose"]], "any() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.any"]], "constrain() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.constrain"]], "copy() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.copy"]], "dtype (fipy.variables.variable.variable property)": [[443, "fipy.variables.variable.Variable.dtype"]], "fipy.variables.variable": [[443, "module-fipy.variables.variable"]], "inbaseunits() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.inBaseUnits"]], "inunitsof() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.inUnitsOf"]], "mag (fipy.variables.variable.variable property)": [[443, "fipy.variables.variable.Variable.mag"]], "max() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.max"]], "min() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.min"]], "release() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.release"]], "setvalue() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.setValue"]], "shape (fipy.variables.variable.variable property)": [[443, "fipy.variables.variable.Variable.shape"]], "std() (fipy.variables.variable.variable method)": [[443, "fipy.variables.variable.Variable.std"]], "unit (fipy.variables.variable.variable property)": [[443, "fipy.variables.variable.Variable.unit"]], "value (fipy.variables.variable.variable property)": [[443, "fipy.variables.variable.Variable.value"]], "dummyviewer (class in fipy.viewers)": [[444, "fipy.viewers.DummyViewer"]], "meshdimensionerror": [[444, "fipy.viewers.MeshDimensionError"]], "viewer() (in module fipy.viewers)": [[444, "fipy.viewers.Viewer"]], "__cause__ (fipy.viewers.meshdimensionerror attribute)": [[444, "fipy.viewers.MeshDimensionError.__cause__"]], "__context__ (fipy.viewers.meshdimensionerror attribute)": [[444, "fipy.viewers.MeshDimensionError.__context__"]], "__delattr__() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.__delattr__"]], "__getattribute__() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.__getattribute__"]], "__reduce__() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.__reduce__"]], "__repr__() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.__repr__"]], "__setattr__() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.__setattr__"]], "__str__() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.__str__"]], "add_note() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.add_note"]], "plot() (fipy.viewers.dummyviewer method)": [[444, "fipy.viewers.DummyViewer.plot"]], "plotmesh() (fipy.viewers.dummyviewer method)": [[444, "fipy.viewers.DummyViewer.plotMesh"]], "setlimits() (fipy.viewers.dummyviewer method)": [[444, "fipy.viewers.DummyViewer.setLimits"]], "title (fipy.viewers.dummyviewer property)": [[444, "fipy.viewers.DummyViewer.title"]], "vars (fipy.viewers.dummyviewer property)": [[444, "fipy.viewers.DummyViewer.vars"]], "with_traceback() (fipy.viewers.meshdimensionerror method)": [[444, "fipy.viewers.MeshDimensionError.with_traceback"]], "matplotlibviewer() (in module fipy.viewers.matplotlibviewer)": [[445, "fipy.viewers.matplotlibViewer.MatplotlibViewer"]], "fipy.viewers.matplotlibviewer": [[445, "module-fipy.viewers.matplotlibViewer"]], "abstractmatplotlib2dviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer": [[446, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.vars"]], "abstractmatplotlibviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlibviewer)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlibviewer": [[447, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[447, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.vars"]], "matplotlib1dviewer (class in fipy.viewers.matplotlibviewer.matplotlib1dviewer)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib1dviewer": [[448, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.id"]], "lines (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.lines"]], "log (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.vars"]], "matplotlib2dcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer": [[449, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.vars"]], "matplotlib2dgridcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer": [[450, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[450, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.vars"]], "matplotlib2dgridviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridviewer)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridviewer": [[451, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.vars"]], "matplotlib2dviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dviewer)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.cmap"]], "collection (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.collection"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dviewer": [[452, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.vars"]], "matplotlibsparsematrixviewer (class in fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer)": [[453, "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer": [[453, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "matplotlibstreamviewer (class in fipy.viewers.matplotlibviewer.matplotlibstreamviewer)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibstreamviewer": [[454, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.id"]], "kwargs (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.kwargs"]], "log (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[454, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.vars"]], "matplotlibvectorviewer (class in fipy.viewers.matplotlibviewer.matplotlibvectorviewer)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibvectorviewer": [[455, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[455, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.vars"]], "fipy.viewers.matplotlibviewer.test": [[456, "module-fipy.viewers.matplotlibViewer.test"]], "mayaviclient (class in fipy.viewers.mayaviviewer)": [[457, "fipy.viewers.mayaviViewer.MayaviClient"]], "fipy.viewers.mayaviviewer": [[457, "module-fipy.viewers.mayaviViewer"]], "fps (fipy.viewers.mayaviviewer.mayaviclient property)": [[457, "fipy.viewers.mayaviViewer.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient method)": [[457, "fipy.viewers.mayaviViewer.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient method)": [[457, "fipy.viewers.mayaviViewer.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient method)": [[457, "fipy.viewers.mayaviViewer.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient property)": [[457, "fipy.viewers.mayaviViewer.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient property)": [[457, "fipy.viewers.mayaviViewer.MayaviClient.vars"]], "mayaviclient (class in fipy.viewers.mayaviviewer.mayaviclient)": [[458, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient"]], "fipy.viewers.mayaviviewer.mayaviclient": [[458, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fps (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[458, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[458, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[458, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[458, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[458, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[458, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.vars"]], "mayavidaemon (class in fipy.viewers.mayaviviewer.mayavidaemon)": [[459, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon"]], "fipy.viewers.mayaviviewer.mayavidaemon": [[459, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "main() (in module fipy.viewers.mayaviviewer.mayavidaemon)": [[459, "fipy.viewers.mayaviViewer.mayaviDaemon.main"]], "parse_command_line() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[459, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.parse_command_line"]], "setup_source() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[459, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.setup_source"]], "update_pipeline() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[459, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.update_pipeline"]], "view_data() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[459, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.view_data"]], "fipy.viewers.mayaviviewer.test": [[460, "module-fipy.viewers.mayaviViewer.test"]], "multiviewer (class in fipy.viewers.multiviewer)": [[461, "fipy.viewers.multiViewer.MultiViewer"]], "fipy.viewers.multiviewer": [[461, "module-fipy.viewers.multiViewer"]], "plot() (fipy.viewers.multiviewer.multiviewer method)": [[461, "fipy.viewers.multiViewer.MultiViewer.plot"]], "plotmesh() (fipy.viewers.multiviewer.multiviewer method)": [[461, "fipy.viewers.multiViewer.MultiViewer.plotMesh"]], "setlimits() (fipy.viewers.multiviewer.multiviewer method)": [[461, "fipy.viewers.multiViewer.MultiViewer.setLimits"]], "title (fipy.viewers.multiviewer.multiviewer property)": [[461, "fipy.viewers.multiViewer.MultiViewer.title"]], "vars (fipy.viewers.multiviewer.multiviewer property)": [[461, "fipy.viewers.multiViewer.MultiViewer.vars"]], "fipy.viewers.test": [[462, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[463, "module-fipy.viewers.testinteractive"]], "tsvviewer (class in fipy.viewers.tsvviewer)": [[464, "fipy.viewers.tsvViewer.TSVViewer"]], "fipy.viewers.tsvviewer": [[464, "module-fipy.viewers.tsvViewer"]], "plot() (fipy.viewers.tsvviewer.tsvviewer method)": [[464, "fipy.viewers.tsvViewer.TSVViewer.plot"]], "plotmesh() (fipy.viewers.tsvviewer.tsvviewer method)": [[464, "fipy.viewers.tsvViewer.TSVViewer.plotMesh"]], "setlimits() (fipy.viewers.tsvviewer.tsvviewer method)": [[464, "fipy.viewers.tsvViewer.TSVViewer.setLimits"]], "title (fipy.viewers.tsvviewer.tsvviewer property)": [[464, "fipy.viewers.tsvViewer.TSVViewer.title"]], "vars (fipy.viewers.tsvviewer.tsvviewer property)": [[464, "fipy.viewers.tsvViewer.TSVViewer.vars"]], "abstractviewer (class in fipy.viewers.viewer)": [[465, "fipy.viewers.viewer.AbstractViewer"]], "fipy.viewers.viewer": [[465, "module-fipy.viewers.viewer"]], "plot() (fipy.viewers.viewer.abstractviewer method)": [[465, "fipy.viewers.viewer.AbstractViewer.plot"]], "plotmesh() (fipy.viewers.viewer.abstractviewer method)": [[465, "fipy.viewers.viewer.AbstractViewer.plotMesh"]], "setlimits() (fipy.viewers.viewer.abstractviewer method)": [[465, "fipy.viewers.viewer.AbstractViewer.setLimits"]], "title (fipy.viewers.viewer.abstractviewer property)": [[465, "fipy.viewers.viewer.AbstractViewer.title"]], "vars (fipy.viewers.viewer.abstractviewer property)": [[465, "fipy.viewers.viewer.AbstractViewer.vars"]], "vtkcellviewer (class in fipy.viewers.vtkviewer)": [[466, "fipy.viewers.vtkViewer.VTKCellViewer"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer)": [[466, "fipy.viewers.vtkViewer.VTKFaceViewer"]], "vtkviewer() (in module fipy.viewers.vtkviewer)": [[466, "fipy.viewers.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer": [[466, "module-fipy.viewers.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[466, "fipy.viewers.vtkViewer.VTKCellViewer.plot"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[466, "fipy.viewers.vtkViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[466, "fipy.viewers.vtkViewer.VTKCellViewer.plotMesh"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[466, "fipy.viewers.vtkViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[466, "fipy.viewers.vtkViewer.VTKCellViewer.setLimits"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[466, "fipy.viewers.vtkViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer property)": [[466, "fipy.viewers.vtkViewer.VTKCellViewer.title"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[466, "fipy.viewers.vtkViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer property)": [[466, "fipy.viewers.vtkViewer.VTKCellViewer.vars"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[466, "fipy.viewers.vtkViewer.VTKFaceViewer.vars"]], "fipy.viewers.vtkviewer.test": [[467, "module-fipy.viewers.vtkViewer.test"]], "vtkcellviewer (class in fipy.viewers.vtkviewer.vtkcellviewer)": [[468, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer"]], "fipy.viewers.vtkviewer.vtkcellviewer": [[468, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[468, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[468, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[468, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[468, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[468, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.vars"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer.vtkfaceviewer)": [[469, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer"]], "fipy.viewers.vtkviewer.vtkfaceviewer": [[469, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[469, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[469, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[469, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[469, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[469, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.vars"]], "vtkviewer (class in fipy.viewers.vtkviewer.vtkviewer)": [[470, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer.vtkviewer": [[470, "module-fipy.viewers.vtkViewer.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[470, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[470, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[470, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[470, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[470, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.vars"]], "amg": [[471, "term-AMG"]], "appveyor": [[471, "term-AppVeyor"]], "azure": [[471, "term-Azure"]], "bicg": [[471, "term-BiCG"]], "bicgstab": [[471, "term-BiCGSTAB"]], "cg": [[471, "term-CG"]], "cgs": [[471, "term-CGS"]], "circleci": [[471, "term-CircleCI"]], "continuous integration": [[471, "term-Continuous-Integration"]], "fgmres": [[471, "term-FGMRES"]], "gmres": [[471, "term-GMRES"]], "github actions": [[471, "term-GitHub-Actions"]], "ipython": [[471, "term-IPython"]], "jor": [[471, "term-JOR"]], "json": [[471, "term-JSON"]], "lu": [[471, "term-LU"]], "mpi": [[471, "term-MPI"]], "matplotlib": [[471, "term-Matplotlib"]], "mayavi": [[471, "term-MayaVi"], [471, "term-Mayavi"]], "numpy": [[471, "term-NumPy"]], "numeric": [[471, "term-Numeric"]], "openmp": [[471, "term-OpenMP"]], "pcg": [[471, "term-PCG"]], "pep 3000": [[471, "index-0"]], "pypi": [[471, "term-PyPI"]], "pytrilinos": [[471, "term-PyTrilinos"]], "pyrex": [[471, "term-Pyrex"]], "pysparse": [[471, "term-Pysparse"]], "python": [[471, "term-Python"]], "python 3": [[471, "term-Python-3"]], "pyxviewer": [[471, "term-PyxViewer"]], "scientificpython": [[471, "term-ScientificPython"]], "sphinx": [[471, "term-Sphinx"]], "travisci": [[471, "term-TravisCI"]], "weave": [[471, "term-Weave"]], "windows": [[471, "term-Windows"]], "conda": [[471, "term-conda"]], "linux": [[471, "term-linux"]], "macos": [[471, "term-macOS"]], "mpi4py": [[471, "term-mpi4py"]], "numarray": [[471, "term-numarray"]], "pandas": [[471, "term-pandas"]], "petsc4py": [[471, "term-petsc4py"]], "pip": [[471, "term-pip"]], "steppyngstounes": [[471, "term-steppyngstounes"]], "package": [[479, "module-package"]], "package.subpackage": [[480, "module-package.subpackage"]], "base (class in package.subpackage.base)": [[481, "package.subpackage.base.Base"]], "method1() (package.subpackage.base.base method)": [[481, "package.subpackage.base.Base.method1"]], "method2() (package.subpackage.base.base method)": [[481, "package.subpackage.base.Base.method2"]], "package.subpackage.base": [[481, "module-package.subpackage.base"]], "object (class in package.subpackage.object)": [[482, "package.subpackage.object.Object"]], "method1() (package.subpackage.object.object method)": [[482, "package.subpackage.object.Object.method1"]], "method2() (package.subpackage.object.object method)": [[482, "package.subpackage.object.Object.method2"]], "package.subpackage.object": [[482, "module-package.subpackage.object"]]}})