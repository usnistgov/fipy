Search.setIndex({"docnames": ["ADMINISTRATA", "API", "CHANGELOG", "CONTACT", "CREDITS", "DISCLAIMER", "EFFICIENCY", "EXAMPLES", "FAQ", "GIT", "GUIDELINES", "INSTALLATION", "LICENSE", "NIX-README", "PUBLICATIONS", "README", "SOLVERS", "USAGE", "VIEWERS", "VKML", "contents", "design", "external_definitions", "generated/examples", "generated/examples.benchmarking", "generated/examples.benchmarking.benchmarker", "generated/examples.benchmarking.size", "generated/examples.benchmarking.steps", "generated/examples.benchmarking.utils", "generated/examples.benchmarking.versions", "generated/examples.cahnHilliard", "generated/examples.cahnHilliard.mesh2D", "generated/examples.cahnHilliard.mesh2DCoupled", "generated/examples.cahnHilliard.mesh3D", "generated/examples.cahnHilliard.sphere", "generated/examples.cahnHilliard.sphereDaemon", "generated/examples.cahnHilliard.tanh1D", "generated/examples.cahnHilliard.test", "generated/examples.chemotaxis", "generated/examples.chemotaxis.input", "generated/examples.chemotaxis.input2D", "generated/examples.chemotaxis.parameters", "generated/examples.chemotaxis.test", "generated/examples.convection", "generated/examples.convection.advection", "generated/examples.convection.exponential1D", "generated/examples.convection.exponential1D.cylindricalMesh1D", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform", "generated/examples.convection.exponential1D.mesh1D", "generated/examples.convection.exponential1D.tri2D", "generated/examples.convection.exponential1DBack", "generated/examples.convection.exponential1DBack.mesh1D", "generated/examples.convection.exponential1DSource", "generated/examples.convection.exponential1DSource.mesh1D", "generated/examples.convection.exponential1DSource.tri2D", "generated/examples.convection.exponential2D", "generated/examples.convection.exponential2D.cylindricalMesh2D", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform", "generated/examples.convection.exponential2D.mesh2D", "generated/examples.convection.exponential2D.tri2D", "generated/examples.convection.peclet", "generated/examples.convection.powerLaw1D", "generated/examples.convection.powerLaw1D.mesh1D", "generated/examples.convection.powerLaw1D.tri2D", "generated/examples.convection.robin", "generated/examples.convection.source", "generated/examples.convection.test", "generated/examples.diffusion", "generated/examples.diffusion.anisotropy", "generated/examples.diffusion.circle", "generated/examples.diffusion.circleQuad", "generated/examples.diffusion.coupled", "generated/examples.diffusion.electrostatics", "generated/examples.diffusion.explicit", "generated/examples.diffusion.explicit.mesh1D", "generated/examples.diffusion.explicit.mixedelement", "generated/examples.diffusion.explicit.test", "generated/examples.diffusion.mesh1D", "generated/examples.diffusion.mesh20x20", "generated/examples.diffusion.mesh20x20Coupled", "generated/examples.diffusion.nthOrder", "generated/examples.diffusion.nthOrder.input4thOrder1D", "generated/examples.diffusion.nthOrder.test", "generated/examples.diffusion.steadyState", "generated/examples.diffusion.steadyState.mesh1D", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic", "generated/examples.diffusion.steadyState.mesh20x20", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput", "generated/examples.diffusion.steadyState.mesh20x20.isotropy", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror", "generated/examples.diffusion.steadyState.mesh50x50", "generated/examples.diffusion.steadyState.otherMeshes", "generated/examples.diffusion.steadyState.otherMeshes.prism", "generated/examples.diffusion.steadyState.test", "generated/examples.diffusion.test", "generated/examples.elphf", "generated/examples.elphf.diffusion", "generated/examples.elphf.diffusion.mesh1D", "generated/examples.elphf.diffusion.mesh1Ddimensional", "generated/examples.elphf.diffusion.mesh2D", "generated/examples.elphf.input", "generated/examples.elphf.phase", "generated/examples.elphf.phaseDiffusion", "generated/examples.elphf.poisson", "generated/examples.elphf.test", "generated/examples.flow", "generated/examples.flow.stokesCavity", "generated/examples.flow.test", "generated/examples.levelSet", "generated/examples.levelSet.advection", "generated/examples.levelSet.advection.circle", "generated/examples.levelSet.advection.mesh1D", "generated/examples.levelSet.advection.test", "generated/examples.levelSet.advection.trench", "generated/examples.levelSet.distanceFunction", "generated/examples.levelSet.distanceFunction.circle", "generated/examples.levelSet.distanceFunction.mesh1D", "generated/examples.levelSet.distanceFunction.test", "generated/examples.levelSet.electroChem", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation", "generated/examples.levelSet.electroChem.gapFillDistanceVariable", "generated/examples.levelSet.electroChem.gapFillMesh", "generated/examples.levelSet.electroChem.gold", "generated/examples.levelSet.electroChem.howToWriteAScript", "generated/examples.levelSet.electroChem.leveler", "generated/examples.levelSet.electroChem.lines", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation", "generated/examples.levelSet.electroChem.simpleTrenchSystem", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "generated/examples.levelSet.electroChem.test", "generated/examples.levelSet.electroChem.trenchMesh", "generated/examples.levelSet.surfactant", "generated/examples.levelSet.surfactant.test", "generated/examples.levelSet.test", "generated/examples.meshing", "generated/examples.meshing.gmshRefinement", "generated/examples.meshing.inputGrid2D", "generated/examples.meshing.sphere", "generated/examples.meshing.test", "generated/examples.parallel", "generated/examples.phase", "generated/examples.phase.anisotropy", "generated/examples.phase.anisotropyOLD", "generated/examples.phase.binary", "generated/examples.phase.binaryCoupled", "generated/examples.phase.impingement", "generated/examples.phase.impingement.mesh20x20", "generated/examples.phase.impingement.mesh40x1", "generated/examples.phase.impingement.test", "generated/examples.phase.missOrientation", "generated/examples.phase.missOrientation.test", "generated/examples.phase.polyxtal", "generated/examples.phase.polyxtalCoupled", "generated/examples.phase.quaternary", "generated/examples.phase.simple", "generated/examples.phase.symmetry", "generated/examples.phase.test", "generated/examples.reactiveWetting", "generated/examples.reactiveWetting.liquidVapor1D", "generated/examples.reactiveWetting.liquidVapor2D", "generated/examples.reactiveWetting.test", "generated/examples.riemann", "generated/examples.riemann.test", "generated/examples.test", "generated/examples.updating", "generated/examples.updating.update0_1to1_0", "generated/examples.updating.update1_0to2_0", "generated/examples.updating.update2_0to3_0", "generated/fipy", "generated/fipy.boundaryConditions", "generated/fipy.boundaryConditions.boundaryCondition", "generated/fipy.boundaryConditions.constraint", "generated/fipy.boundaryConditions.fixedFlux", "generated/fipy.boundaryConditions.fixedValue", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition", "generated/fipy.boundaryConditions.test", "generated/fipy.matrices", "generated/fipy.matrices.offsetSparseMatrix", "generated/fipy.matrices.petscMatrix", "generated/fipy.matrices.pysparseMatrix", "generated/fipy.matrices.scipyMatrix", "generated/fipy.matrices.sparseMatrix", "generated/fipy.matrices.test", "generated/fipy.matrices.trilinosMatrix", "generated/fipy.meshes", "generated/fipy.meshes.abstractMesh", "generated/fipy.meshes.builders", "generated/fipy.meshes.builders.abstractGridBuilder", "generated/fipy.meshes.builders.grid1DBuilder", "generated/fipy.meshes.builders.grid2DBuilder", "generated/fipy.meshes.builders.grid3DBuilder", "generated/fipy.meshes.builders.periodicGrid1DBuilder", "generated/fipy.meshes.builders.utilityClasses", "generated/fipy.meshes.cylindricalGrid1D", "generated/fipy.meshes.cylindricalGrid2D", "generated/fipy.meshes.cylindricalNonUniformGrid1D", "generated/fipy.meshes.cylindricalNonUniformGrid2D", "generated/fipy.meshes.cylindricalUniformGrid1D", "generated/fipy.meshes.cylindricalUniformGrid2D", "generated/fipy.meshes.factoryMeshes", "generated/fipy.meshes.gmshMesh", "generated/fipy.meshes.grid1D", "generated/fipy.meshes.grid2D", "generated/fipy.meshes.grid3D", "generated/fipy.meshes.mesh", "generated/fipy.meshes.mesh1D", "generated/fipy.meshes.mesh2D", "generated/fipy.meshes.nonUniformGrid1D", "generated/fipy.meshes.nonUniformGrid2D", "generated/fipy.meshes.nonUniformGrid3D", "generated/fipy.meshes.periodicGrid1D", "generated/fipy.meshes.periodicGrid2D", "generated/fipy.meshes.periodicGrid3D", "generated/fipy.meshes.representations", "generated/fipy.meshes.representations.abstractRepresentation", "generated/fipy.meshes.representations.gridRepresentation", "generated/fipy.meshes.representations.meshRepresentation", "generated/fipy.meshes.skewedGrid2D", "generated/fipy.meshes.sphericalNonUniformGrid1D", "generated/fipy.meshes.sphericalUniformGrid1D", "generated/fipy.meshes.test", "generated/fipy.meshes.topologies", "generated/fipy.meshes.topologies.abstractTopology", "generated/fipy.meshes.topologies.gridTopology", "generated/fipy.meshes.topologies.meshTopology", "generated/fipy.meshes.tri2D", "generated/fipy.meshes.uniformGrid", "generated/fipy.meshes.uniformGrid1D", "generated/fipy.meshes.uniformGrid2D", "generated/fipy.solvers", "generated/fipy.solvers.convergence", "generated/fipy.solvers.petsc", "generated/fipy.solvers.petsc.comms", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper", "generated/fipy.solvers.petsc.comms.petscCommWrapper", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper", "generated/fipy.solvers.petsc.dummySolver", "generated/fipy.solvers.petsc.linearBicgSolver", "generated/fipy.solvers.petsc.linearCGSSolver", "generated/fipy.solvers.petsc.linearGMRESSolver", "generated/fipy.solvers.petsc.linearLUSolver", "generated/fipy.solvers.petsc.linearPCGSolver", "generated/fipy.solvers.petsc.petscConvergence", "generated/fipy.solvers.petsc.petscKrylovSolver", "generated/fipy.solvers.petsc.petscSolver", "generated/fipy.solvers.petsc.preconditioners", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner", "generated/fipy.solvers.preconditioner", "generated/fipy.solvers.pyAMG", "generated/fipy.solvers.pyAMG.linearCGSSolver", "generated/fipy.solvers.pyAMG.linearGMRESSolver", "generated/fipy.solvers.pyAMG.linearGeneralSolver", "generated/fipy.solvers.pyAMG.linearLUSolver", "generated/fipy.solvers.pyAMG.linearPCGSolver", "generated/fipy.solvers.pyAMG.preconditioners", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "generated/fipy.solvers.pyamgx", "generated/fipy.solvers.pyamgx.aggregationAMGSolver", "generated/fipy.solvers.pyamgx.classicalAMGSolver", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver", "generated/fipy.solvers.pyamgx.linearFGMRESSolver", "generated/fipy.solvers.pyamgx.linearGMRESSolver", "generated/fipy.solvers.pyamgx.linearLUSolver", "generated/fipy.solvers.pyamgx.linearPCGSolver", "generated/fipy.solvers.pyamgx.preconditioners", "generated/fipy.solvers.pyamgx.pyAMGXSolver", "generated/fipy.solvers.pyamgx.pyamgxConvergence", "generated/fipy.solvers.pyamgx.smoothers", "generated/fipy.solvers.pysparse", "generated/fipy.solvers.pysparse.linearCGSSolver", "generated/fipy.solvers.pysparse.linearGMRESSolver", "generated/fipy.solvers.pysparse.linearInitialSolver", "generated/fipy.solvers.pysparse.linearJORSolver", "generated/fipy.solvers.pysparse.linearLUSolver", "generated/fipy.solvers.pysparse.linearPCGSolver", "generated/fipy.solvers.pysparse.linearRHSSolver", "generated/fipy.solvers.pysparse.preconditioners", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.pysparse.preconditioners.pysparsePreconditioner", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "generated/fipy.solvers.pysparse.pysparseConvergence", "generated/fipy.solvers.pysparse.pysparseSolver", "generated/fipy.solvers.pysparseMatrixSolver", "generated/fipy.solvers.scipy", "generated/fipy.solvers.scipy.linearBicgstabSolver", "generated/fipy.solvers.scipy.linearCGSSolver", "generated/fipy.solvers.scipy.linearGMRESSolver", "generated/fipy.solvers.scipy.linearLUSolver", "generated/fipy.solvers.scipy.linearPCGSolver", "generated/fipy.solvers.scipy.preconditioners", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner", "generated/fipy.solvers.scipy.scipyConvergence", "generated/fipy.solvers.scipy.scipyKrylovSolver", "generated/fipy.solvers.scipy.scipySolver", "generated/fipy.solvers.solver", "generated/fipy.solvers.test", "generated/fipy.solvers.trilinos", "generated/fipy.solvers.trilinos.aztecConvergence", "generated/fipy.solvers.trilinos.comms", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "generated/fipy.solvers.trilinos.linearBicgstabSolver", "generated/fipy.solvers.trilinos.linearCGSSolver", "generated/fipy.solvers.trilinos.linearGMRESSolver", "generated/fipy.solvers.trilinos.linearLUSolver", "generated/fipy.solvers.trilinos.linearPCGSolver", "generated/fipy.solvers.trilinos.preconditioners", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver", "generated/fipy.solvers.trilinos.trilinosMLTest", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver", "generated/fipy.solvers.trilinos.trilinosSolver", "generated/fipy.steppers", "generated/fipy.steppers.pidStepper", "generated/fipy.steppers.pseudoRKQSStepper", "generated/fipy.steppers.stepper", "generated/fipy.terms", "generated/fipy.terms.abstractBinaryTerm", "generated/fipy.terms.abstractConvectionTerm", "generated/fipy.terms.abstractDiffusionTerm", "generated/fipy.terms.abstractUpwindConvectionTerm", "generated/fipy.terms.advectionTerm", "generated/fipy.terms.asymmetricConvectionTerm", "generated/fipy.terms.binaryTerm", "generated/fipy.terms.cellTerm", "generated/fipy.terms.centralDiffConvectionTerm", "generated/fipy.terms.coupledBinaryTerm", "generated/fipy.terms.diffusionTerm", "generated/fipy.terms.diffusionTermCorrection", "generated/fipy.terms.diffusionTermNoCorrection", "generated/fipy.terms.explicitDiffusionTerm", "generated/fipy.terms.explicitSourceTerm", "generated/fipy.terms.explicitUpwindConvectionTerm", "generated/fipy.terms.exponentialConvectionTerm", "generated/fipy.terms.faceTerm", "generated/fipy.terms.firstOrderAdvectionTerm", "generated/fipy.terms.hybridConvectionTerm", "generated/fipy.terms.implicitDiffusionTerm", "generated/fipy.terms.implicitSourceTerm", "generated/fipy.terms.nonDiffusionTerm", "generated/fipy.terms.powerLawConvectionTerm", "generated/fipy.terms.residualTerm", "generated/fipy.terms.sourceTerm", "generated/fipy.terms.term", "generated/fipy.terms.test", "generated/fipy.terms.transientTerm", "generated/fipy.terms.unaryTerm", "generated/fipy.terms.upwindConvectionTerm", "generated/fipy.terms.vanLeerConvectionTerm", "generated/fipy.testFiPy", "generated/fipy.tests", "generated/fipy.tests.doctestPlus", "generated/fipy.tests.lateImportTest", "generated/fipy.tests.test", "generated/fipy.tests.testProgram", "generated/fipy.tools", "generated/fipy.tools.comms", "generated/fipy.tools.comms.commWrapper", "generated/fipy.tools.comms.dummyComm", "generated/fipy.tools.debug", "generated/fipy.tools.decorators", "generated/fipy.tools.dimensions", "generated/fipy.tools.dimensions.DictWithDefault", "generated/fipy.tools.dimensions.NumberDict", "generated/fipy.tools.dimensions.physicalField", "generated/fipy.tools.dump", "generated/fipy.tools.inline", "generated/fipy.tools.logging", "generated/fipy.tools.logging.environment", "generated/fipy.tools.numerix", "generated/fipy.tools.parser", "generated/fipy.tools.sharedtempfile", "generated/fipy.tools.test", "generated/fipy.tools.vector", "generated/fipy.tools.version", "generated/fipy.variables", "generated/fipy.variables.addOverFacesVariable", "generated/fipy.variables.arithmeticCellToFaceVariable", "generated/fipy.variables.betaNoiseVariable", "generated/fipy.variables.binaryOperatorVariable", "generated/fipy.variables.cellToFaceVariable", "generated/fipy.variables.cellVariable", "generated/fipy.variables.constant", "generated/fipy.variables.constraintMask", "generated/fipy.variables.coupledCellVariable", "generated/fipy.variables.distanceVariable", "generated/fipy.variables.exponentialNoiseVariable", "generated/fipy.variables.faceGradContributionsVariable", "generated/fipy.variables.faceGradVariable", "generated/fipy.variables.faceVariable", "generated/fipy.variables.gammaNoiseVariable", "generated/fipy.variables.gaussCellGradVariable", "generated/fipy.variables.gaussianNoiseVariable", "generated/fipy.variables.harmonicCellToFaceVariable", "generated/fipy.variables.histogramVariable", "generated/fipy.variables.interfaceAreaVariable", "generated/fipy.variables.interfaceFlagVariable", "generated/fipy.variables.leastSquaresCellGradVariable", "generated/fipy.variables.levelSetDiffusionVariable", "generated/fipy.variables.meshVariable", "generated/fipy.variables.minmodCellToFaceVariable", "generated/fipy.variables.modCellGradVariable", "generated/fipy.variables.modCellToFaceVariable", "generated/fipy.variables.modFaceGradVariable", "generated/fipy.variables.modPhysicalField", "generated/fipy.variables.modularVariable", "generated/fipy.variables.noiseVariable", "generated/fipy.variables.operatorVariable", "generated/fipy.variables.scharfetterGummelFaceVariable", "generated/fipy.variables.surfactantConvectionVariable", "generated/fipy.variables.surfactantVariable", "generated/fipy.variables.test", "generated/fipy.variables.unaryOperatorVariable", "generated/fipy.variables.uniformNoiseVariable", "generated/fipy.variables.variable", "generated/fipy.viewers", "generated/fipy.viewers.matplotlibViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "generated/fipy.viewers.matplotlibViewer.test", "generated/fipy.viewers.mayaviViewer", "generated/fipy.viewers.mayaviViewer.mayaviClient", "generated/fipy.viewers.mayaviViewer.mayaviDaemon", "generated/fipy.viewers.mayaviViewer.test", "generated/fipy.viewers.multiViewer", "generated/fipy.viewers.test", "generated/fipy.viewers.testinteractive", "generated/fipy.viewers.tsvViewer", "generated/fipy.viewers.viewer", "generated/fipy.viewers.vtkViewer", "generated/fipy.viewers.vtkViewer.test", "generated/fipy.viewers.vtkViewer.vtkCellViewer", "generated/fipy.viewers.vtkViewer.vtkFaceViewer", "generated/fipy.viewers.vtkViewer.vtkViewer", "glossary", "introduction", "manual", "numerical/discret", "numerical/equation", "numerical/index", "numerical/scheme", "references", "tutorial/generated/package", "tutorial/generated/package.subpackage", "tutorial/generated/package.subpackage.base", "tutorial/generated/package.subpackage.object", "tutorial/index"], "filenames": ["ADMINISTRATA.rst", "API.rst", "CHANGELOG.rst", "CONTACT.rst", "CREDITS.rst", "DISCLAIMER.rst", "EFFICIENCY.rst", "EXAMPLES.rst", "FAQ.rst", "GIT.rst", "GUIDELINES.rst", "INSTALLATION.rst", "LICENSE.rst", "NIX-README.rst", "PUBLICATIONS.rst", "README.rst", "SOLVERS.rst", "USAGE.rst", "VIEWERS.rst", "VKML.rst", "contents.rst", "design.rst", "external_definitions.rst", "generated/examples.rst", "generated/examples.benchmarking.rst", "generated/examples.benchmarking.benchmarker.rst", "generated/examples.benchmarking.size.rst", "generated/examples.benchmarking.steps.rst", "generated/examples.benchmarking.utils.rst", "generated/examples.benchmarking.versions.rst", "generated/examples.cahnHilliard.rst", "generated/examples.cahnHilliard.mesh2D.rst", "generated/examples.cahnHilliard.mesh2DCoupled.rst", "generated/examples.cahnHilliard.mesh3D.rst", "generated/examples.cahnHilliard.sphere.rst", "generated/examples.cahnHilliard.sphereDaemon.rst", "generated/examples.cahnHilliard.tanh1D.rst", "generated/examples.cahnHilliard.test.rst", "generated/examples.chemotaxis.rst", "generated/examples.chemotaxis.input.rst", "generated/examples.chemotaxis.input2D.rst", "generated/examples.chemotaxis.parameters.rst", "generated/examples.chemotaxis.test.rst", "generated/examples.convection.rst", "generated/examples.convection.advection.rst", "generated/examples.convection.exponential1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform.rst", "generated/examples.convection.exponential1D.mesh1D.rst", "generated/examples.convection.exponential1D.tri2D.rst", "generated/examples.convection.exponential1DBack.rst", "generated/examples.convection.exponential1DBack.mesh1D.rst", "generated/examples.convection.exponential1DSource.rst", "generated/examples.convection.exponential1DSource.mesh1D.rst", "generated/examples.convection.exponential1DSource.tri2D.rst", "generated/examples.convection.exponential2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform.rst", "generated/examples.convection.exponential2D.mesh2D.rst", "generated/examples.convection.exponential2D.tri2D.rst", "generated/examples.convection.peclet.rst", "generated/examples.convection.powerLaw1D.rst", "generated/examples.convection.powerLaw1D.mesh1D.rst", "generated/examples.convection.powerLaw1D.tri2D.rst", "generated/examples.convection.robin.rst", "generated/examples.convection.source.rst", "generated/examples.convection.test.rst", "generated/examples.diffusion.rst", "generated/examples.diffusion.anisotropy.rst", "generated/examples.diffusion.circle.rst", "generated/examples.diffusion.circleQuad.rst", "generated/examples.diffusion.coupled.rst", "generated/examples.diffusion.electrostatics.rst", "generated/examples.diffusion.explicit.rst", "generated/examples.diffusion.explicit.mesh1D.rst", "generated/examples.diffusion.explicit.mixedelement.rst", "generated/examples.diffusion.explicit.test.rst", "generated/examples.diffusion.mesh1D.rst", "generated/examples.diffusion.mesh20x20.rst", "generated/examples.diffusion.mesh20x20Coupled.rst", "generated/examples.diffusion.nthOrder.rst", "generated/examples.diffusion.nthOrder.input4thOrder1D.rst", "generated/examples.diffusion.nthOrder.test.rst", "generated/examples.diffusion.steadyState.rst", "generated/examples.diffusion.steadyState.mesh1D.rst", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic.rst", "generated/examples.diffusion.steadyState.mesh20x20.rst", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.isotropy.rst", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput.rst", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror.rst", "generated/examples.diffusion.steadyState.mesh50x50.rst", "generated/examples.diffusion.steadyState.otherMeshes.rst", "generated/examples.diffusion.steadyState.otherMeshes.prism.rst", "generated/examples.diffusion.steadyState.test.rst", "generated/examples.diffusion.test.rst", "generated/examples.elphf.rst", "generated/examples.elphf.diffusion.rst", "generated/examples.elphf.diffusion.mesh1D.rst", "generated/examples.elphf.diffusion.mesh1Ddimensional.rst", "generated/examples.elphf.diffusion.mesh2D.rst", "generated/examples.elphf.input.rst", "generated/examples.elphf.phase.rst", "generated/examples.elphf.phaseDiffusion.rst", "generated/examples.elphf.poisson.rst", "generated/examples.elphf.test.rst", "generated/examples.flow.rst", "generated/examples.flow.stokesCavity.rst", "generated/examples.flow.test.rst", "generated/examples.levelSet.rst", "generated/examples.levelSet.advection.rst", "generated/examples.levelSet.advection.circle.rst", "generated/examples.levelSet.advection.mesh1D.rst", "generated/examples.levelSet.advection.test.rst", "generated/examples.levelSet.advection.trench.rst", "generated/examples.levelSet.distanceFunction.rst", "generated/examples.levelSet.distanceFunction.circle.rst", "generated/examples.levelSet.distanceFunction.mesh1D.rst", "generated/examples.levelSet.distanceFunction.test.rst", "generated/examples.levelSet.electroChem.rst", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation.rst", "generated/examples.levelSet.electroChem.gapFillDistanceVariable.rst", "generated/examples.levelSet.electroChem.gapFillMesh.rst", "generated/examples.levelSet.electroChem.gold.rst", "generated/examples.levelSet.electroChem.howToWriteAScript.rst", "generated/examples.levelSet.electroChem.leveler.rst", "generated/examples.levelSet.electroChem.lines.rst", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer.rst", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer.rst", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation.rst", "generated/examples.levelSet.electroChem.simpleTrenchSystem.rst", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation.rst", "generated/examples.levelSet.electroChem.test.rst", "generated/examples.levelSet.electroChem.trenchMesh.rst", "generated/examples.levelSet.surfactant.rst", "generated/examples.levelSet.surfactant.test.rst", "generated/examples.levelSet.test.rst", "generated/examples.meshing.rst", "generated/examples.meshing.gmshRefinement.rst", "generated/examples.meshing.inputGrid2D.rst", "generated/examples.meshing.sphere.rst", "generated/examples.meshing.test.rst", "generated/examples.parallel.rst", "generated/examples.phase.rst", "generated/examples.phase.anisotropy.rst", "generated/examples.phase.anisotropyOLD.rst", "generated/examples.phase.binary.rst", "generated/examples.phase.binaryCoupled.rst", "generated/examples.phase.impingement.rst", "generated/examples.phase.impingement.mesh20x20.rst", "generated/examples.phase.impingement.mesh40x1.rst", "generated/examples.phase.impingement.test.rst", "generated/examples.phase.missOrientation.rst", "generated/examples.phase.missOrientation.test.rst", "generated/examples.phase.polyxtal.rst", "generated/examples.phase.polyxtalCoupled.rst", "generated/examples.phase.quaternary.rst", "generated/examples.phase.simple.rst", "generated/examples.phase.symmetry.rst", "generated/examples.phase.test.rst", "generated/examples.reactiveWetting.rst", "generated/examples.reactiveWetting.liquidVapor1D.rst", "generated/examples.reactiveWetting.liquidVapor2D.rst", "generated/examples.reactiveWetting.test.rst", "generated/examples.riemann.rst", "generated/examples.riemann.test.rst", "generated/examples.test.rst", "generated/examples.updating.rst", "generated/examples.updating.update0_1to1_0.rst", "generated/examples.updating.update1_0to2_0.rst", "generated/examples.updating.update2_0to3_0.rst", "generated/fipy.rst", "generated/fipy.boundaryConditions.rst", "generated/fipy.boundaryConditions.boundaryCondition.rst", "generated/fipy.boundaryConditions.constraint.rst", "generated/fipy.boundaryConditions.fixedFlux.rst", "generated/fipy.boundaryConditions.fixedValue.rst", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition.rst", "generated/fipy.boundaryConditions.test.rst", "generated/fipy.matrices.rst", "generated/fipy.matrices.offsetSparseMatrix.rst", "generated/fipy.matrices.petscMatrix.rst", "generated/fipy.matrices.pysparseMatrix.rst", "generated/fipy.matrices.scipyMatrix.rst", "generated/fipy.matrices.sparseMatrix.rst", "generated/fipy.matrices.test.rst", "generated/fipy.matrices.trilinosMatrix.rst", "generated/fipy.meshes.rst", "generated/fipy.meshes.abstractMesh.rst", "generated/fipy.meshes.builders.rst", "generated/fipy.meshes.builders.abstractGridBuilder.rst", "generated/fipy.meshes.builders.grid1DBuilder.rst", "generated/fipy.meshes.builders.grid2DBuilder.rst", "generated/fipy.meshes.builders.grid3DBuilder.rst", "generated/fipy.meshes.builders.periodicGrid1DBuilder.rst", "generated/fipy.meshes.builders.utilityClasses.rst", "generated/fipy.meshes.cylindricalGrid1D.rst", "generated/fipy.meshes.cylindricalGrid2D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid1D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid2D.rst", "generated/fipy.meshes.cylindricalUniformGrid1D.rst", "generated/fipy.meshes.cylindricalUniformGrid2D.rst", "generated/fipy.meshes.factoryMeshes.rst", "generated/fipy.meshes.gmshMesh.rst", "generated/fipy.meshes.grid1D.rst", "generated/fipy.meshes.grid2D.rst", "generated/fipy.meshes.grid3D.rst", "generated/fipy.meshes.mesh.rst", "generated/fipy.meshes.mesh1D.rst", "generated/fipy.meshes.mesh2D.rst", "generated/fipy.meshes.nonUniformGrid1D.rst", "generated/fipy.meshes.nonUniformGrid2D.rst", "generated/fipy.meshes.nonUniformGrid3D.rst", "generated/fipy.meshes.periodicGrid1D.rst", "generated/fipy.meshes.periodicGrid2D.rst", "generated/fipy.meshes.periodicGrid3D.rst", "generated/fipy.meshes.representations.rst", "generated/fipy.meshes.representations.abstractRepresentation.rst", "generated/fipy.meshes.representations.gridRepresentation.rst", "generated/fipy.meshes.representations.meshRepresentation.rst", "generated/fipy.meshes.skewedGrid2D.rst", "generated/fipy.meshes.sphericalNonUniformGrid1D.rst", "generated/fipy.meshes.sphericalUniformGrid1D.rst", "generated/fipy.meshes.test.rst", "generated/fipy.meshes.topologies.rst", "generated/fipy.meshes.topologies.abstractTopology.rst", "generated/fipy.meshes.topologies.gridTopology.rst", "generated/fipy.meshes.topologies.meshTopology.rst", "generated/fipy.meshes.tri2D.rst", "generated/fipy.meshes.uniformGrid.rst", "generated/fipy.meshes.uniformGrid1D.rst", "generated/fipy.meshes.uniformGrid2D.rst", "generated/fipy.solvers.rst", "generated/fipy.solvers.convergence.rst", "generated/fipy.solvers.petsc.rst", "generated/fipy.solvers.petsc.comms.rst", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper.rst", "generated/fipy.solvers.petsc.comms.petscCommWrapper.rst", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper.rst", "generated/fipy.solvers.petsc.dummySolver.rst", "generated/fipy.solvers.petsc.linearBicgSolver.rst", "generated/fipy.solvers.petsc.linearCGSSolver.rst", "generated/fipy.solvers.petsc.linearGMRESSolver.rst", "generated/fipy.solvers.petsc.linearLUSolver.rst", "generated/fipy.solvers.petsc.linearPCGSolver.rst", "generated/fipy.solvers.petsc.petscConvergence.rst", "generated/fipy.solvers.petsc.petscKrylovSolver.rst", "generated/fipy.solvers.petsc.petscSolver.rst", "generated/fipy.solvers.petsc.preconditioners.rst", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.preconditioner.rst", "generated/fipy.solvers.pyAMG.rst", "generated/fipy.solvers.pyAMG.linearCGSSolver.rst", "generated/fipy.solvers.pyAMG.linearGMRESSolver.rst", "generated/fipy.solvers.pyAMG.linearGeneralSolver.rst", "generated/fipy.solvers.pyAMG.linearLUSolver.rst", "generated/fipy.solvers.pyAMG.linearPCGSolver.rst", "generated/fipy.solvers.pyAMG.preconditioners.rst", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.rst", "generated/fipy.solvers.pyamgx.rst", "generated/fipy.solvers.pyamgx.aggregationAMGSolver.rst", "generated/fipy.solvers.pyamgx.classicalAMGSolver.rst", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver.rst", "generated/fipy.solvers.pyamgx.linearFGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearLUSolver.rst", "generated/fipy.solvers.pyamgx.linearPCGSolver.rst", "generated/fipy.solvers.pyamgx.preconditioners.rst", "generated/fipy.solvers.pyamgx.pyAMGXSolver.rst", "generated/fipy.solvers.pyamgx.pyamgxConvergence.rst", "generated/fipy.solvers.pyamgx.smoothers.rst", "generated/fipy.solvers.pysparse.rst", "generated/fipy.solvers.pysparse.linearCGSSolver.rst", "generated/fipy.solvers.pysparse.linearGMRESSolver.rst", "generated/fipy.solvers.pysparse.linearInitialSolver.rst", "generated/fipy.solvers.pysparse.linearJORSolver.rst", "generated/fipy.solvers.pysparse.linearLUSolver.rst", "generated/fipy.solvers.pysparse.linearPCGSolver.rst", "generated/fipy.solvers.pysparse.linearRHSSolver.rst", "generated/fipy.solvers.pysparse.preconditioners.rst", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.pysparsePreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.pysparse.pysparseConvergence.rst", "generated/fipy.solvers.pysparse.pysparseSolver.rst", "generated/fipy.solvers.pysparseMatrixSolver.rst", "generated/fipy.solvers.scipy.rst", "generated/fipy.solvers.scipy.linearBicgstabSolver.rst", "generated/fipy.solvers.scipy.linearCGSSolver.rst", "generated/fipy.solvers.scipy.linearGMRESSolver.rst", "generated/fipy.solvers.scipy.linearLUSolver.rst", "generated/fipy.solvers.scipy.linearPCGSolver.rst", "generated/fipy.solvers.scipy.preconditioners.rst", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner.rst", "generated/fipy.solvers.scipy.scipyConvergence.rst", "generated/fipy.solvers.scipy.scipyKrylovSolver.rst", "generated/fipy.solvers.scipy.scipySolver.rst", "generated/fipy.solvers.solver.rst", "generated/fipy.solvers.test.rst", "generated/fipy.solvers.trilinos.rst", "generated/fipy.solvers.trilinos.aztecConvergence.rst", "generated/fipy.solvers.trilinos.comms.rst", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.linearBicgstabSolver.rst", "generated/fipy.solvers.trilinos.linearCGSSolver.rst", "generated/fipy.solvers.trilinos.linearGMRESSolver.rst", "generated/fipy.solvers.trilinos.linearLUSolver.rst", "generated/fipy.solvers.trilinos.linearPCGSolver.rst", "generated/fipy.solvers.trilinos.preconditioners.rst", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.rst", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver.rst", "generated/fipy.solvers.trilinos.trilinosMLTest.rst", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver.rst", "generated/fipy.solvers.trilinos.trilinosSolver.rst", "generated/fipy.steppers.rst", "generated/fipy.steppers.pidStepper.rst", "generated/fipy.steppers.pseudoRKQSStepper.rst", "generated/fipy.steppers.stepper.rst", "generated/fipy.terms.rst", "generated/fipy.terms.abstractBinaryTerm.rst", "generated/fipy.terms.abstractConvectionTerm.rst", "generated/fipy.terms.abstractDiffusionTerm.rst", "generated/fipy.terms.abstractUpwindConvectionTerm.rst", "generated/fipy.terms.advectionTerm.rst", "generated/fipy.terms.asymmetricConvectionTerm.rst", "generated/fipy.terms.binaryTerm.rst", "generated/fipy.terms.cellTerm.rst", "generated/fipy.terms.centralDiffConvectionTerm.rst", "generated/fipy.terms.coupledBinaryTerm.rst", "generated/fipy.terms.diffusionTerm.rst", "generated/fipy.terms.diffusionTermCorrection.rst", "generated/fipy.terms.diffusionTermNoCorrection.rst", "generated/fipy.terms.explicitDiffusionTerm.rst", "generated/fipy.terms.explicitSourceTerm.rst", "generated/fipy.terms.explicitUpwindConvectionTerm.rst", "generated/fipy.terms.exponentialConvectionTerm.rst", "generated/fipy.terms.faceTerm.rst", "generated/fipy.terms.firstOrderAdvectionTerm.rst", "generated/fipy.terms.hybridConvectionTerm.rst", "generated/fipy.terms.implicitDiffusionTerm.rst", "generated/fipy.terms.implicitSourceTerm.rst", "generated/fipy.terms.nonDiffusionTerm.rst", "generated/fipy.terms.powerLawConvectionTerm.rst", "generated/fipy.terms.residualTerm.rst", "generated/fipy.terms.sourceTerm.rst", "generated/fipy.terms.term.rst", "generated/fipy.terms.test.rst", "generated/fipy.terms.transientTerm.rst", "generated/fipy.terms.unaryTerm.rst", "generated/fipy.terms.upwindConvectionTerm.rst", "generated/fipy.terms.vanLeerConvectionTerm.rst", "generated/fipy.testFiPy.rst", "generated/fipy.tests.rst", "generated/fipy.tests.doctestPlus.rst", "generated/fipy.tests.lateImportTest.rst", "generated/fipy.tests.test.rst", "generated/fipy.tests.testProgram.rst", "generated/fipy.tools.rst", "generated/fipy.tools.comms.rst", "generated/fipy.tools.comms.commWrapper.rst", "generated/fipy.tools.comms.dummyComm.rst", "generated/fipy.tools.debug.rst", "generated/fipy.tools.decorators.rst", "generated/fipy.tools.dimensions.rst", "generated/fipy.tools.dimensions.DictWithDefault.rst", "generated/fipy.tools.dimensions.NumberDict.rst", "generated/fipy.tools.dimensions.physicalField.rst", "generated/fipy.tools.dump.rst", "generated/fipy.tools.inline.rst", "generated/fipy.tools.logging.rst", "generated/fipy.tools.logging.environment.rst", "generated/fipy.tools.numerix.rst", "generated/fipy.tools.parser.rst", "generated/fipy.tools.sharedtempfile.rst", "generated/fipy.tools.test.rst", "generated/fipy.tools.vector.rst", "generated/fipy.tools.version.rst", "generated/fipy.variables.rst", "generated/fipy.variables.addOverFacesVariable.rst", "generated/fipy.variables.arithmeticCellToFaceVariable.rst", "generated/fipy.variables.betaNoiseVariable.rst", "generated/fipy.variables.binaryOperatorVariable.rst", "generated/fipy.variables.cellToFaceVariable.rst", "generated/fipy.variables.cellVariable.rst", "generated/fipy.variables.constant.rst", "generated/fipy.variables.constraintMask.rst", "generated/fipy.variables.coupledCellVariable.rst", "generated/fipy.variables.distanceVariable.rst", "generated/fipy.variables.exponentialNoiseVariable.rst", "generated/fipy.variables.faceGradContributionsVariable.rst", "generated/fipy.variables.faceGradVariable.rst", "generated/fipy.variables.faceVariable.rst", "generated/fipy.variables.gammaNoiseVariable.rst", "generated/fipy.variables.gaussCellGradVariable.rst", "generated/fipy.variables.gaussianNoiseVariable.rst", "generated/fipy.variables.harmonicCellToFaceVariable.rst", "generated/fipy.variables.histogramVariable.rst", "generated/fipy.variables.interfaceAreaVariable.rst", "generated/fipy.variables.interfaceFlagVariable.rst", "generated/fipy.variables.leastSquaresCellGradVariable.rst", "generated/fipy.variables.levelSetDiffusionVariable.rst", "generated/fipy.variables.meshVariable.rst", "generated/fipy.variables.minmodCellToFaceVariable.rst", "generated/fipy.variables.modCellGradVariable.rst", "generated/fipy.variables.modCellToFaceVariable.rst", "generated/fipy.variables.modFaceGradVariable.rst", "generated/fipy.variables.modPhysicalField.rst", "generated/fipy.variables.modularVariable.rst", "generated/fipy.variables.noiseVariable.rst", "generated/fipy.variables.operatorVariable.rst", "generated/fipy.variables.scharfetterGummelFaceVariable.rst", "generated/fipy.variables.surfactantConvectionVariable.rst", "generated/fipy.variables.surfactantVariable.rst", "generated/fipy.variables.test.rst", "generated/fipy.variables.unaryOperatorVariable.rst", "generated/fipy.variables.uniformNoiseVariable.rst", "generated/fipy.variables.variable.rst", "generated/fipy.viewers.rst", "generated/fipy.viewers.matplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer.rst", "generated/fipy.viewers.matplotlibViewer.test.rst", "generated/fipy.viewers.mayaviViewer.rst", "generated/fipy.viewers.mayaviViewer.mayaviClient.rst", "generated/fipy.viewers.mayaviViewer.mayaviDaemon.rst", "generated/fipy.viewers.mayaviViewer.test.rst", "generated/fipy.viewers.multiViewer.rst", "generated/fipy.viewers.test.rst", "generated/fipy.viewers.testinteractive.rst", "generated/fipy.viewers.tsvViewer.rst", "generated/fipy.viewers.viewer.rst", "generated/fipy.viewers.vtkViewer.rst", "generated/fipy.viewers.vtkViewer.test.rst", "generated/fipy.viewers.vtkViewer.vtkCellViewer.rst", "generated/fipy.viewers.vtkViewer.vtkFaceViewer.rst", "generated/fipy.viewers.vtkViewer.vtkViewer.rst", "glossary.rst", "introduction.rst", "manual.rst", "numerical/discret.rst", "numerical/equation.rst", "numerical/index.rst", "numerical/scheme.rst", "references.rst", "tutorial/generated/package.rst", "tutorial/generated/package.subpackage.rst", "tutorial/generated/package.subpackage.base.rst", "tutorial/generated/package.subpackage.object.rst", "tutorial/index.rst"], "titles": ["Git practices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fipy</span></code> Package Documentation", "Change Log", "Contact", "Contributors", "Disclaimer", "Efficiency", "Examples", "Frequently Asked Questions", "Git usage", "Development Guidelines", "Installation", "Terms of Use", "Nix Installation", "Publications", "Overview", "Solvers", "Using FiPy", "Viewers", "Virtual Kinetics of Materials Laboratory", "FiPy Contents", "Design and Implementation", "External Command-line Flags", "examples", "examples.benchmarking", "examples.benchmarking.benchmarker", "examples.benchmarking.size", "examples.benchmarking.steps", "examples.benchmarking.utils", "examples.benchmarking.versions", "examples.cahnHilliard", "examples.cahnHilliard.mesh2D", "examples.cahnHilliard.mesh2DCoupled", "examples.cahnHilliard.mesh3D", "examples.cahnHilliard.sphere", "examples.cahnHilliard.sphereDaemon", "examples.cahnHilliard.tanh1D", "examples.cahnHilliard.test", "examples.chemotaxis", "examples.chemotaxis.input", "examples.chemotaxis.input2D", "examples.chemotaxis.parameters", "examples.chemotaxis.test", "examples.convection", "examples.convection.advection", "examples.convection.exponential1D", "examples.convection.exponential1D.cylindricalMesh1D", "examples.convection.exponential1D.cylindricalMesh1DNonUniform", "examples.convection.exponential1D.mesh1D", "examples.convection.exponential1D.tri2D", "examples.convection.exponential1DBack", "examples.convection.exponential1DBack.mesh1D", "examples.convection.exponential1DSource", "examples.convection.exponential1DSource.mesh1D", "examples.convection.exponential1DSource.tri2D", "examples.convection.exponential2D", "examples.convection.exponential2D.cylindricalMesh2D", "examples.convection.exponential2D.cylindricalMesh2DNonUniform", "examples.convection.exponential2D.mesh2D", "examples.convection.exponential2D.tri2D", "examples.convection.peclet", "examples.convection.powerLaw1D", "examples.convection.powerLaw1D.mesh1D", "examples.convection.powerLaw1D.tri2D", "examples.convection.robin", "examples.convection.source", "examples.convection.test", "examples.diffusion", "examples.diffusion.anisotropy", "examples.diffusion.circle", "examples.diffusion.circleQuad", "examples.diffusion.coupled", "examples.diffusion.electrostatics", "examples.diffusion.explicit", "examples.diffusion.explicit.mesh1D", "examples.diffusion.explicit.mixedelement", "examples.diffusion.explicit.test", "examples.diffusion.mesh1D", "examples.diffusion.mesh20x20", "examples.diffusion.mesh20x20Coupled", "examples.diffusion.nthOrder", "examples.diffusion.nthOrder.input4thOrder1D", "examples.diffusion.nthOrder.test", "examples.diffusion.steadyState", "examples.diffusion.steadyState.mesh1D", "examples.diffusion.steadyState.mesh1D.inputPeriodic", "examples.diffusion.steadyState.mesh20x20", "examples.diffusion.steadyState.mesh20x20.gmshinput", "examples.diffusion.steadyState.mesh20x20.isotropy", "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "examples.diffusion.steadyState.mesh20x20.orthoerror", "examples.diffusion.steadyState.mesh50x50", "examples.diffusion.steadyState.otherMeshes", "examples.diffusion.steadyState.otherMeshes.prism", "examples.diffusion.steadyState.test", "examples.diffusion.test", "examples.elphf", "examples.elphf.diffusion", "examples.elphf.diffusion.mesh1D", "examples.elphf.diffusion.mesh1Ddimensional", "examples.elphf.diffusion.mesh2D", "examples.elphf.input", "examples.elphf.phase", "examples.elphf.phaseDiffusion", "examples.elphf.poisson", "examples.elphf.test", "examples.flow", "examples.flow.stokesCavity", "examples.flow.test", "examples.levelSet", "examples.levelSet.advection", "examples.levelSet.advection.circle", "examples.levelSet.advection.mesh1D", "examples.levelSet.advection.test", "examples.levelSet.advection.trench", "examples.levelSet.distanceFunction", "examples.levelSet.distanceFunction.circle", "examples.levelSet.distanceFunction.mesh1D", "examples.levelSet.distanceFunction.test", "examples.levelSet.electroChem", "examples.levelSet.electroChem.adsorbingSurfactantEquation", "examples.levelSet.electroChem.gapFillDistanceVariable", "examples.levelSet.electroChem.gapFillMesh", "examples.levelSet.electroChem.gold", "examples.levelSet.electroChem.howToWriteAScript", "examples.levelSet.electroChem.leveler", "examples.levelSet.electroChem.lines", "examples.levelSet.electroChem.matplotlibSurfactantViewer", "examples.levelSet.electroChem.mayaviSurfactantViewer", "examples.levelSet.electroChem.metalIonDiffusionEquation", "examples.levelSet.electroChem.simpleTrenchSystem", "examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "examples.levelSet.electroChem.test", "examples.levelSet.electroChem.trenchMesh", "examples.levelSet.surfactant", "examples.levelSet.surfactant.test", "examples.levelSet.test", "examples.meshing", "examples.meshing.gmshRefinement", "examples.meshing.inputGrid2D", "examples.meshing.sphere", "examples.meshing.test", "examples.parallel", "examples.phase", "examples.phase.anisotropy", "examples.phase.anisotropyOLD", "examples.phase.binary", "examples.phase.binaryCoupled", "examples.phase.impingement", "examples.phase.impingement.mesh20x20", "examples.phase.impingement.mesh40x1", "examples.phase.impingement.test", "examples.phase.missOrientation", "examples.phase.missOrientation.test", "examples.phase.polyxtal", "examples.phase.polyxtalCoupled", "examples.phase.quaternary", "examples.phase.simple", "examples.phase.symmetry", "examples.phase.test", "examples.reactiveWetting", "examples.reactiveWetting.liquidVapor1D", "examples.reactiveWetting.liquidVapor2D", "examples.reactiveWetting.test", "examples.riemann", "examples.riemann.test", "examples.test", "examples.updating", "examples.updating.update0_1to1_0", "examples.updating.update1_0to2_0", "examples.updating.update2_0to3_0", "fipy", "fipy.boundaryConditions", "fipy.boundaryConditions.boundaryCondition", "fipy.boundaryConditions.constraint", "fipy.boundaryConditions.fixedFlux", "fipy.boundaryConditions.fixedValue", "fipy.boundaryConditions.nthOrderBoundaryCondition", "fipy.boundaryConditions.test", "fipy.matrices", "fipy.matrices.offsetSparseMatrix", "fipy.matrices.petscMatrix", "fipy.matrices.pysparseMatrix", "fipy.matrices.scipyMatrix", "fipy.matrices.sparseMatrix", "fipy.matrices.test", "fipy.matrices.trilinosMatrix", "fipy.meshes", "fipy.meshes.abstractMesh", "fipy.meshes.builders", "fipy.meshes.builders.abstractGridBuilder", "fipy.meshes.builders.grid1DBuilder", "fipy.meshes.builders.grid2DBuilder", "fipy.meshes.builders.grid3DBuilder", "fipy.meshes.builders.periodicGrid1DBuilder", "fipy.meshes.builders.utilityClasses", "fipy.meshes.cylindricalGrid1D", "fipy.meshes.cylindricalGrid2D", "fipy.meshes.cylindricalNonUniformGrid1D", "fipy.meshes.cylindricalNonUniformGrid2D", "fipy.meshes.cylindricalUniformGrid1D", "fipy.meshes.cylindricalUniformGrid2D", "fipy.meshes.factoryMeshes", "fipy.meshes.gmshMesh", "fipy.meshes.grid1D", "fipy.meshes.grid2D", "fipy.meshes.grid3D", "fipy.meshes.mesh", "fipy.meshes.mesh1D", "fipy.meshes.mesh2D", "fipy.meshes.nonUniformGrid1D", "fipy.meshes.nonUniformGrid2D", "fipy.meshes.nonUniformGrid3D", "fipy.meshes.periodicGrid1D", "fipy.meshes.periodicGrid2D", "fipy.meshes.periodicGrid3D", "fipy.meshes.representations", "fipy.meshes.representations.abstractRepresentation", "fipy.meshes.representations.gridRepresentation", "fipy.meshes.representations.meshRepresentation", "fipy.meshes.skewedGrid2D", "fipy.meshes.sphericalNonUniformGrid1D", "fipy.meshes.sphericalUniformGrid1D", "fipy.meshes.test", "fipy.meshes.topologies", "fipy.meshes.topologies.abstractTopology", "fipy.meshes.topologies.gridTopology", "fipy.meshes.topologies.meshTopology", "fipy.meshes.tri2D", "fipy.meshes.uniformGrid", "fipy.meshes.uniformGrid1D", "fipy.meshes.uniformGrid2D", "fipy.solvers", "fipy.solvers.convergence", "fipy.solvers.petsc", "fipy.solvers.petsc.comms", "fipy.solvers.petsc.comms.parallelPETScCommWrapper", "fipy.solvers.petsc.comms.petscCommWrapper", "fipy.solvers.petsc.comms.serialPETScCommWrapper", "fipy.solvers.petsc.dummySolver", "fipy.solvers.petsc.linearBicgSolver", "fipy.solvers.petsc.linearCGSSolver", "fipy.solvers.petsc.linearGMRESSolver", "fipy.solvers.petsc.linearLUSolver", "fipy.solvers.petsc.linearPCGSolver", "fipy.solvers.petsc.petscConvergence", "fipy.solvers.petsc.petscKrylovSolver", "fipy.solvers.petsc.petscSolver", "fipy.solvers.petsc.preconditioners", "fipy.solvers.petsc.preconditioners.defaultPreconditioner", "fipy.solvers.petsc.preconditioners.icPreconditioner", "fipy.solvers.petsc.preconditioners.iluPreconditioner", "fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "fipy.solvers.petsc.preconditioners.luPreconditioner", "fipy.solvers.petsc.preconditioners.petscPreconditioner", "fipy.solvers.petsc.preconditioners.ssorPreconditioner", "fipy.solvers.preconditioner", "fipy.solvers.pyAMG", "fipy.solvers.pyAMG.linearCGSSolver", "fipy.solvers.pyAMG.linearGMRESSolver", "fipy.solvers.pyAMG.linearGeneralSolver", "fipy.solvers.pyAMG.linearLUSolver", "fipy.solvers.pyAMG.linearPCGSolver", "fipy.solvers.pyAMG.preconditioners", "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "fipy.solvers.pyamgx", "fipy.solvers.pyamgx.aggregationAMGSolver", "fipy.solvers.pyamgx.classicalAMGSolver", "fipy.solvers.pyamgx.linearBiCGStabSolver", "fipy.solvers.pyamgx.linearFGMRESSolver", "fipy.solvers.pyamgx.linearGMRESSolver", "fipy.solvers.pyamgx.linearLUSolver", "fipy.solvers.pyamgx.linearPCGSolver", "fipy.solvers.pyamgx.preconditioners", "fipy.solvers.pyamgx.pyAMGXSolver", "fipy.solvers.pyamgx.pyamgxConvergence", "fipy.solvers.pyamgx.smoothers", "fipy.solvers.pysparse", "fipy.solvers.pysparse.linearCGSSolver", "fipy.solvers.pysparse.linearGMRESSolver", "fipy.solvers.pysparse.linearInitialSolver", "fipy.solvers.pysparse.linearJORSolver", "fipy.solvers.pysparse.linearLUSolver", "fipy.solvers.pysparse.linearPCGSolver", "fipy.solvers.pysparse.linearRHSSolver", "fipy.solvers.pysparse.preconditioners", "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner", "fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "fipy.solvers.pysparse.pysparseConvergence", "fipy.solvers.pysparse.pysparseSolver", "fipy.solvers.pysparseMatrixSolver", "fipy.solvers.scipy", "fipy.solvers.scipy.linearBicgstabSolver", "fipy.solvers.scipy.linearCGSSolver", "fipy.solvers.scipy.linearGMRESSolver", "fipy.solvers.scipy.linearLUSolver", "fipy.solvers.scipy.linearPCGSolver", "fipy.solvers.scipy.preconditioners", "fipy.solvers.scipy.preconditioners.iluPreconditioner", "fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "fipy.solvers.scipy.preconditioners.scipyPreconditioner", "fipy.solvers.scipy.scipyConvergence", "fipy.solvers.scipy.scipyKrylovSolver", "fipy.solvers.scipy.scipySolver", "fipy.solvers.solver", "fipy.solvers.test", "fipy.solvers.trilinos", "fipy.solvers.trilinos.aztecConvergence", "fipy.solvers.trilinos.comms", "fipy.solvers.trilinos.comms.epetraCommWrapper", "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "fipy.solvers.trilinos.linearBicgstabSolver", "fipy.solvers.trilinos.linearCGSSolver", "fipy.solvers.trilinos.linearGMRESSolver", "fipy.solvers.trilinos.linearLUSolver", "fipy.solvers.trilinos.linearPCGSolver", "fipy.solvers.trilinos.preconditioners", "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "fipy.solvers.trilinos.preconditioners.icPreconditioner", "fipy.solvers.trilinos.preconditioners.iluPreconditioner", "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "fipy.solvers.trilinos.trilinosAztecOOSolver", "fipy.solvers.trilinos.trilinosMLTest", "fipy.solvers.trilinos.trilinosNonlinearSolver", "fipy.solvers.trilinos.trilinosSolver", "fipy.steppers", "fipy.steppers.pidStepper", "fipy.steppers.pseudoRKQSStepper", "fipy.steppers.stepper", "fipy.terms", "fipy.terms.abstractBinaryTerm", "fipy.terms.abstractConvectionTerm", "fipy.terms.abstractDiffusionTerm", "fipy.terms.abstractUpwindConvectionTerm", "fipy.terms.advectionTerm", "fipy.terms.asymmetricConvectionTerm", "fipy.terms.binaryTerm", "fipy.terms.cellTerm", "fipy.terms.centralDiffConvectionTerm", "fipy.terms.coupledBinaryTerm", "fipy.terms.diffusionTerm", "fipy.terms.diffusionTermCorrection", "fipy.terms.diffusionTermNoCorrection", "fipy.terms.explicitDiffusionTerm", "fipy.terms.explicitSourceTerm", "fipy.terms.explicitUpwindConvectionTerm", "fipy.terms.exponentialConvectionTerm", "fipy.terms.faceTerm", "fipy.terms.firstOrderAdvectionTerm", "fipy.terms.hybridConvectionTerm", "fipy.terms.implicitDiffusionTerm", "fipy.terms.implicitSourceTerm", "fipy.terms.nonDiffusionTerm", "fipy.terms.powerLawConvectionTerm", "fipy.terms.residualTerm", "fipy.terms.sourceTerm", "fipy.terms.term", "fipy.terms.test", "fipy.terms.transientTerm", "fipy.terms.unaryTerm", "fipy.terms.upwindConvectionTerm", "fipy.terms.vanLeerConvectionTerm", "fipy.testFiPy", "fipy.tests", "fipy.tests.doctestPlus", "fipy.tests.lateImportTest", "fipy.tests.test", "fipy.tests.testProgram", "fipy.tools", "fipy.tools.comms", "fipy.tools.comms.commWrapper", "fipy.tools.comms.dummyComm", "fipy.tools.debug", "fipy.tools.decorators", "fipy.tools.dimensions", "fipy.tools.dimensions.DictWithDefault", "fipy.tools.dimensions.NumberDict", "fipy.tools.dimensions.physicalField", "fipy.tools.dump", "fipy.tools.inline", "fipy.tools.logging", "fipy.tools.logging.environment", "fipy.tools.numerix", "fipy.tools.parser", "fipy.tools.sharedtempfile", "fipy.tools.test", "fipy.tools.vector", "fipy.tools.version", "fipy.variables", "fipy.variables.addOverFacesVariable", "fipy.variables.arithmeticCellToFaceVariable", "fipy.variables.betaNoiseVariable", "fipy.variables.binaryOperatorVariable", "fipy.variables.cellToFaceVariable", "fipy.variables.cellVariable", "fipy.variables.constant", "fipy.variables.constraintMask", "fipy.variables.coupledCellVariable", "fipy.variables.distanceVariable", "fipy.variables.exponentialNoiseVariable", "fipy.variables.faceGradContributionsVariable", "fipy.variables.faceGradVariable", "fipy.variables.faceVariable", "fipy.variables.gammaNoiseVariable", "fipy.variables.gaussCellGradVariable", "fipy.variables.gaussianNoiseVariable", "fipy.variables.harmonicCellToFaceVariable", "fipy.variables.histogramVariable", "fipy.variables.interfaceAreaVariable", "fipy.variables.interfaceFlagVariable", "fipy.variables.leastSquaresCellGradVariable", "fipy.variables.levelSetDiffusionVariable", "fipy.variables.meshVariable", "fipy.variables.minmodCellToFaceVariable", "fipy.variables.modCellGradVariable", "fipy.variables.modCellToFaceVariable", "fipy.variables.modFaceGradVariable", "fipy.variables.modPhysicalField", "fipy.variables.modularVariable", "fipy.variables.noiseVariable", "fipy.variables.operatorVariable", "fipy.variables.scharfetterGummelFaceVariable", "fipy.variables.surfactantConvectionVariable", "fipy.variables.surfactantVariable", "fipy.variables.test", "fipy.variables.unaryOperatorVariable", "fipy.variables.uniformNoiseVariable", "fipy.variables.variable", "fipy.viewers", "fipy.viewers.matplotlibViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "fipy.viewers.matplotlibViewer.matplotlib1DViewer", "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "fipy.viewers.matplotlibViewer.matplotlib2DViewer", "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "fipy.viewers.matplotlibViewer.test", "fipy.viewers.mayaviViewer", "fipy.viewers.mayaviViewer.mayaviClient", "fipy.viewers.mayaviViewer.mayaviDaemon", "fipy.viewers.mayaviViewer.test", "fipy.viewers.multiViewer", "fipy.viewers.test", "fipy.viewers.testinteractive", "fipy.viewers.tsvViewer", "fipy.viewers.viewer", "fipy.viewers.vtkViewer", "fipy.viewers.vtkViewer.test", "fipy.viewers.vtkViewer.vtkCellViewer", "fipy.viewers.vtkViewer.vtkFaceViewer", "fipy.viewers.vtkViewer.vtkViewer", "Glossary", "Introduction", "FiPy Manual", "Finite Volume Method", "General Conservation Equation", "Theoretical and Numerical Background", "Numerical Schemes", "References", "package", "package.subpackage", "package.subpackage.base", "package.subpackage.object", "How to Read the Modules Documentation"], "terms": {"refer": [0, 2, 8, 15, 16, 20, 21, 68, 77, 107, 157, 161, 170, 213, 228, 273, 467, 475, 476], "usag": [0, 5, 6, 20, 466], "current": [0, 2, 8, 9, 11, 13, 15, 16, 17, 19, 123, 124, 125, 130, 161, 169, 171, 332, 335, 374, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "convent": [0, 20, 466, 469], "whether": [0, 8, 10, 12, 19, 21, 71, 125, 127, 128, 130, 233, 374, 378, 387, 388, 392, 394, 408, 437, 440, 441, 442, 443, 444, 445, 446, 448, 449], "fix": [0, 8, 9, 11, 20, 69, 70, 72, 77, 85, 104, 144, 154, 155, 157, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466], "bug": [0, 2, 3, 8, 21, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "ad": [0, 2, 4, 9, 11, 17, 21, 102, 107, 149, 150, 154, 155, 157, 168, 175, 176, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 353, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 475], "featur": [0, 3, 8, 21, 107, 465, 472], "all": [0, 2, 3, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 31, 32, 72, 77, 90, 95, 98, 104, 124, 127, 128, 130, 136, 139, 141, 144, 146, 147, 154, 155, 161, 163, 166, 168, 169, 170, 188, 203, 239, 246, 247, 260, 261, 271, 279, 280, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 311, 313, 314, 315, 317, 331, 333, 334, 344, 374, 376, 378, 382, 387, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469, 471, 475, 476], "work": [0, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 60, 71, 77, 107, 145, 146, 147, 157, 161, 168, 169, 171, 332, 337, 368, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 466, 468, 475], "fipi": [0, 2, 3, 4, 6, 9, 10, 13, 14, 15, 16, 18, 19, 21, 23, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 123, 124, 125, 127, 128, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 465, 466, 468, 469, 470, 471, 473, 474, 475, 477], "should": [0, 2, 6, 8, 9, 10, 11, 15, 17, 69, 70, 71, 77, 123, 130, 146, 147, 157, 161, 168, 169, 170, 203, 232, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 383, 387, 392, 393, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 475, 476], "conduct": [0, 8, 77, 468, 471], "pull": [0, 20, 466], "request": [0, 2, 3, 16, 233, 245], "If": [0, 3, 7, 8, 11, 14, 16, 17, 21, 34, 36, 46, 47, 48, 53, 56, 57, 62, 69, 70, 71, 72, 74, 75, 77, 81, 98, 99, 100, 101, 102, 103, 104, 111, 123, 124, 125, 127, 128, 130, 145, 146, 147, 149, 150, 156, 157, 168, 169, 170, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 305, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 382, 383, 387, 388, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 468, 475, 476], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 53, 54, 56, 57, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 87, 88, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 122, 123, 124, 125, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 171, 173, 175, 177, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 256, 258, 259, 260, 262, 266, 267, 268, 269, 270, 271, 272, 278, 279, 280, 282, 283, 284, 287, 289, 290, 293, 294, 295, 296, 297, 301, 303, 304, 305, 311, 313, 314, 315, 316, 317, 330, 331, 332, 334, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 377, 378, 382, 383, 387, 388, 391, 392, 393, 394, 396, 397, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 440, 441, 443, 445, 446, 448, 449, 453, 458, 459, 465, 466, 468, 469, 470, 471, 472, 475, 476], "alreadi": [0, 3, 10, 168, 378, 387], "report": [0, 2, 3, 17, 20, 374, 466], "github": [0, 2, 8, 9, 11, 13, 15, 16, 20, 154, 155, 465], "issu": [0, 2, 8, 9, 11, 15, 17, 20, 21, 146, 147, 169, 170, 383, 408, 448], "name": [0, 2, 5, 8, 10, 11, 17, 20, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 128, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 170, 188, 203, 207, 232, 305, 339, 374, 378, 383, 387, 388, 391, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 475, 476], "accordingli": 0, "issue12345": 0, "summary_of_what_branch_address": 0, "checkout": [0, 9, 11], "b": [0, 2, 14, 16, 17, 21, 31, 32, 125, 146, 147, 149, 157, 203, 233, 260, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468, 472], "edit": [0, 2, 124, 337, 472], "add": [0, 2, 11, 14, 17, 20, 53, 101, 102, 157, 175, 176, 177, 188, 203, 207, 232, 305, 339, 364, 378, 387, 438, 453], "emac": 0, "commit": 0, "m": [0, 11, 13, 14, 17, 20, 71, 99, 101, 125, 127, 130, 144, 145, 154, 155, 156, 157, 161, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 336, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 458, 466, 472], "refactoring_stage_a": 0, "refactoring_stage_b": 0, "sure": [0, 9, 11, 16, 17, 169], "up": [0, 2, 3, 6, 8, 11, 13, 14, 16, 17, 18, 21, 31, 32, 69, 70, 107, 124, 145, 156, 203, 438, 453, 468], "date": [0, 2], "fetch": [0, 9, 11], "origin": [0, 2, 21, 149, 154, 155, 198, 199, 200, 201, 202, 221, 222, 230, 231, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "state": [0, 2, 8, 9, 11, 12, 31, 32, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 69, 70, 72, 77, 78, 79, 81, 88, 102, 124, 130, 157, 161, 168, 469, 470], "diff": [0, 36, 169, 170], "resolv": [0, 2, 8, 11, 168, 344], "ani": [0, 2, 7, 8, 9, 10, 11, 12, 15, 16, 17, 20, 21, 31, 32, 72, 104, 124, 125, 127, 128, 130, 157, 168, 169, 170, 177, 203, 213, 232, 245, 289, 344, 376, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469, 475, 476], "conflict": [0, 2, 11], "test": [0, 2, 4, 6, 7, 8, 9, 11, 13, 16, 20, 23, 32, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 69, 70, 74, 75, 77, 78, 79, 87, 89, 90, 93, 98, 102, 104, 107, 111, 112, 114, 116, 117, 124, 145, 146, 147, 149, 150, 158, 168, 171, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 245, 332, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 372, 378, 387, 388, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 457, 465, 466], "python": [0, 2, 3, 6, 7, 8, 13, 14, 15, 16, 18, 20, 22, 77, 123, 124, 125, 127, 128, 130, 139, 144, 154, 155, 156, 157, 161, 169, 171, 305, 378, 387, 391, 393, 397, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 451, 452, 453, 465, 466, 468, 472, 475, 476], "setup": [0, 2, 7, 11, 13, 17, 77, 96, 98, 102, 104, 111, 112, 116, 117, 124, 171, 376], "py": [0, 2, 6, 7, 10, 11, 13, 15, 16, 17, 34, 75, 77, 85, 87, 88, 89, 93, 99, 101, 123, 124, 125, 130, 139, 154, 155, 157, 168, 171, 305, 451, 452, 453, 475], "necessari": [0, 2, 8, 11, 16, 17, 21, 64, 74, 77, 144, 145, 146, 147, 150, 154, 155, 161, 168, 169, 170, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 469, 475], "fork": 0, "repositori": [0, 2, 8, 9, 11, 21, 465], "remot": 0, "link": [0, 2, 3, 9, 11, 21], "your": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 17, 19, 71, 77, 168, 169, 170, 305, 387, 392, 465, 475], "myfork": 0, "myforkurl": 0, "push": 0, "now": [0, 2, 3, 8, 9, 11, 13, 17, 32, 60, 69, 70, 72, 77, 98, 99, 100, 104, 107, 124, 145, 146, 147, 157, 168, 169, 170, 465, 468], "creat": [0, 2, 6, 8, 12, 17, 20, 34, 36, 46, 47, 48, 56, 57, 68, 69, 70, 74, 77, 78, 79, 81, 98, 99, 100, 101, 102, 103, 114, 117, 124, 127, 128, 140, 144, 145, 149, 150, 154, 155, 156, 157, 158, 168, 169, 173, 177, 198, 199, 200, 201, 202, 203, 210, 211, 213, 214, 215, 220, 221, 222, 228, 230, 231, 239, 246, 247, 254, 256, 260, 261, 271, 278, 279, 280, 281, 282, 283, 284, 287, 290, 293, 294, 295, 296, 297, 301, 303, 304, 305, 311, 313, 314, 315, 317, 330, 331, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 363, 365, 366, 368, 370, 371, 374, 378, 387, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 451, 452, 453, 458, 459, 460, 462, 463, 464, 465, 466, 468, 475, 476], "against": [0, 6, 17, 46, 47, 48, 51, 53, 56, 57, 58, 62, 65, 74, 75, 77, 145, 146, 147, 149, 157, 168, 378, 387, 439], "usnistgov": [0, 3, 8, 9, 11], "The": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 31, 32, 33, 34, 36, 46, 47, 48, 49, 53, 54, 56, 57, 59, 63, 64, 65, 69, 70, 71, 72, 74, 75, 77, 81, 85, 88, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 122, 123, 124, 125, 127, 128, 130, 139, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 168, 169, 170, 171, 175, 176, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 240, 241, 242, 243, 244, 248, 249, 258, 259, 260, 262, 266, 267, 268, 269, 270, 271, 272, 278, 279, 281, 282, 283, 289, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 383, 387, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 477], "initi": [0, 2, 8, 11, 16, 17, 21, 31, 32, 46, 47, 48, 53, 56, 57, 68, 74, 77, 78, 79, 81, 85, 100, 107, 111, 114, 117, 123, 124, 127, 128, 130, 145, 146, 147, 149, 150, 156, 157, 161, 168, 169, 203, 239, 240, 241, 242, 243, 244, 245, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 404, 408, 412, 422, 428, 429, 431, 433], "autom": [0, 2, 4, 6, 21, 169, 465], "check": [0, 2, 9, 10, 11, 17, 21, 75, 77, 99, 114, 203, 388, 397, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "statu": [0, 9, 11, 233], "absolut": [0, 8, 16, 89, 99, 114, 233, 240, 241, 242, 244, 246, 260, 261, 271, 293, 294, 295, 296, 297, 303, 304, 378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "document": [0, 2, 3, 5, 7, 9, 11, 12, 16, 17, 20, 21, 77, 332, 392, 393, 465, 467, 475], "failur": [0, 2, 8, 77, 245, 374, 375], "still": [0, 2, 6, 8, 11, 16, 71, 102, 157, 168, 169, 233, 245, 376, 392, 468], "an": [0, 2, 3, 6, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 31, 32, 36, 46, 47, 56, 57, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 96, 98, 99, 100, 101, 102, 103, 104, 107, 123, 124, 140, 144, 145, 146, 147, 150, 154, 155, 157, 161, 168, 169, 171, 177, 203, 240, 241, 242, 243, 244, 246, 258, 259, 260, 262, 266, 267, 268, 269, 270, 272, 289, 293, 294, 295, 297, 313, 314, 315, 316, 317, 344, 374, 378, 387, 388, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 443, 444, 445, 460, 465, 466, 468, 469, 471, 472, 475, 476], "experiment": [0, 2, 77, 123, 124, 125, 130, 144, 154, 155], "you": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 31, 32, 33, 34, 71, 77, 123, 125, 130, 144, 145, 154, 155, 168, 169, 170, 203, 245, 305, 392, 466, 475, 476], "would": [0, 10, 11, 15, 16, 17, 31, 33, 34, 77, 107, 146, 147, 157, 169, 171, 378, 394, 468], "like": [0, 6, 8, 11, 15, 17, 19, 21, 53, 77, 107, 157, 168, 177, 245, 378, 387, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 453, 465, 468, 469, 475, 476], "its": [0, 2, 6, 11, 12, 16, 17, 19, 21, 77, 117, 124, 144, 154, 155, 169, 173, 177, 203, 246, 247, 254, 256, 280, 284, 287, 290, 301, 303, 304, 305, 330, 331, 334, 335, 347, 357, 365, 366, 378, 387, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 441, 448, 459, 468, 475], "impact": 0, "mai": [0, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 21, 77, 146, 147, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 305, 376, 383, 392, 468, 476], "prepend": 0, "wip": 0, "titl": [0, 2, 12, 20, 39, 40, 127, 128, 144, 154, 155, 336, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "thi": [0, 2, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 31, 32, 34, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 87, 88, 89, 90, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 122, 123, 124, 125, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 168, 169, 170, 171, 173, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 245, 246, 247, 254, 256, 280, 281, 282, 284, 287, 290, 301, 303, 304, 305, 330, 331, 332, 334, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 377, 378, 383, 387, 392, 393, 394, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 453, 459, 465, 466, 468, 470, 471, 475, 476], "prevent": [0, 6, 16, 125, 161, 375, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 475], "being": [0, 9, 11, 12, 17, 46, 47, 48, 56, 57, 74, 77, 88, 89, 93, 157, 168, 228, 408, 465, 468, 475, 476], "befor": [0, 2, 8, 9, 10, 11, 16, 17, 22, 31, 32, 77, 146, 147, 156, 168, 169, 180, 245, 289, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 382, 476], "": [0, 2, 3, 4, 6, 7, 10, 11, 14, 16, 17, 20, 21, 31, 32, 39, 64, 69, 70, 77, 96, 99, 101, 104, 124, 125, 127, 130, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 168, 169, 176, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 248, 249, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 440, 441, 443, 444, 445, 446, 448, 449, 465, 466, 470, 472, 475], "allow": [0, 2, 6, 8, 11, 16, 17, 19, 21, 90, 104, 157, 374, 387, 393, 465, 471], "run": [0, 2, 6, 7, 9, 10, 11, 16, 18, 19, 20, 21, 36, 46, 47, 48, 53, 56, 57, 62, 69, 70, 72, 74, 77, 81, 90, 95, 98, 99, 100, 101, 102, 103, 104, 123, 124, 125, 130, 136, 139, 141, 145, 149, 150, 156, 157, 163, 166, 168, 171, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 374, 377, 378, 391, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 451, 452, 453, 465, 466], "pleas": [0, 2, 3, 7, 8, 11, 14, 15, 168, 169, 170], "respect": [0, 2, 96, 101, 103, 145, 146, 147, 150, 156, 161, 177, 468, 469], "resourc": [0, 2, 3, 11, 17, 171], "do": [0, 2, 3, 7, 9, 10, 11, 17, 20, 21, 77, 124, 125, 157, 161, 168, 169, 170, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 239, 337, 378, 394, 396, 438, 453, 458, 466, 475, 476], "bulk": [0, 123, 124, 130, 146, 147], "local": [0, 11, 13, 19, 69, 70, 77, 89, 203, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 465], "machin": [0, 16, 17, 19, 21], "own": [0, 7, 9, 11, 13, 16, 17, 21, 77, 168, 169, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 473, 474, 477], "account": [0, 3, 11, 17, 123, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "have": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 32, 65, 68, 74, 75, 77, 96, 98, 99, 100, 101, 102, 103, 107, 117, 123, 125, 130, 144, 146, 147, 154, 155, 156, 157, 168, 169, 170, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 239, 344, 376, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 448, 458, 468, 469, 475], "lot": [0, 90, 374], "enabl": [0, 2, 15, 16, 17, 20, 21, 171, 375, 466], "servic": [0, 12], "can": [0, 2, 3, 6, 7, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 34, 36, 46, 47, 48, 53, 56, 57, 62, 65, 68, 69, 70, 71, 74, 77, 78, 79, 81, 85, 96, 98, 99, 100, 102, 103, 107, 111, 112, 114, 116, 117, 125, 130, 139, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 168, 169, 170, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 283, 305, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 448, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477], "avoid": [0, 2, 11, 107, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "individu": [0, 2, 7, 8, 21, 170], "skip": [0, 17, 374], "ci": [0, 2, 465], "messag": [0, 3, 16, 17, 20, 77, 383, 465, 466], "when": [0, 2, 6, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 77, 98, 107, 114, 124, 125, 146, 147, 157, 168, 169, 170, 188, 202, 203, 233, 245, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 468, 469, 476], "readi": [0, 9, 11, 203], "successfulli": [0, 9, 11], "pass": [0, 2, 9, 11, 16, 17, 48, 107, 168, 169, 170, 171, 332, 374, 378, 387, 443, 444, 448, 465, 475], "send": [0, 3], "mail": [0, 2, 8, 15, 17, 20, 169, 170], "list": [0, 2, 8, 9, 10, 11, 13, 14, 15, 20, 21, 22, 69, 70, 77, 98, 99, 100, 127, 128, 169, 170, 171, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 311, 387, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 468, 476], "about": [0, 2, 3, 6, 7, 8, 9, 11, 13, 14, 16, 17, 21, 31, 32, 33, 34, 36, 77, 139, 144, 146, 147, 157, 168, 169, 171, 233, 273, 305, 332, 344, 391], "develop": [0, 2, 3, 4, 9, 12, 14, 15, 17, 19, 20, 171, 466, 472], "automat": [0, 2, 7, 8, 11, 17, 21, 31, 32, 33, 34, 77, 78, 79, 146, 147, 161, 168, 169, 378, 388, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 443, 444, 453, 475, 476], "see": [0, 2, 3, 6, 7, 11, 16, 17, 18, 19, 20, 21, 22, 36, 69, 70, 77, 78, 79, 98, 99, 100, 107, 123, 125, 130, 144, 145, 146, 147, 149, 150, 154, 155, 157, 168, 169, 170, 174, 239, 240, 241, 242, 243, 244, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 348, 355, 356, 359, 363, 370, 374, 393, 448, 453, 465, 466, 468, 470], "respond": 0, "without": [0, 2, 6, 11, 12, 17, 19, 21, 65, 77, 149, 150, 154, 155, 161, 169, 374, 375, 378, 387, 394, 428, 448, 475], "further": [0, 2, 3, 10, 11, 17, 21, 107, 130, 348, 355, 356, 359, 363, 370], "action": [0, 21, 124, 139, 149, 393, 465, 475], "part": [0, 8, 9, 11, 13, 19, 21, 36, 77, 96, 123, 161, 203, 228, 468], "administr": [0, 14], "onli": [0, 2, 6, 7, 9, 10, 11, 16, 17, 18, 19, 20, 21, 33, 34, 71, 72, 77, 100, 102, 104, 107, 122, 123, 125, 127, 128, 145, 146, 147, 157, 161, 168, 175, 176, 203, 220, 344, 347, 350, 351, 352, 353, 357, 358, 366, 368, 374, 378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 432, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 468, 471], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 14, 15, 16, 18, 20, 21, 31, 32, 33, 34, 36, 48, 49, 54, 62, 63, 65, 68, 69, 70, 71, 75, 77, 78, 79, 81, 85, 87, 88, 89, 93, 99, 107, 111, 112, 117, 122, 123, 124, 125, 127, 128, 130, 144, 145, 146, 147, 149, 150, 156, 157, 161, 168, 169, 170, 171, 177, 180, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 239, 245, 247, 258, 259, 260, 261, 262, 271, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 317, 318, 328, 329, 331, 333, 334, 335, 336, 338, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 383, 387, 388, 391, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476], "interfac": [0, 2, 4, 7, 8, 11, 14, 16, 17, 19, 21, 96, 114, 123, 124, 144, 146, 147, 154, 155, 157, 240, 241, 242, 243, 244, 258, 259, 260, 262, 266, 267, 268, 269, 270, 272, 273, 276, 293, 294, 295, 297, 313, 314, 315, 316, 317, 394, 408, 433, 465, 472], "particularli": [0, 9, 11, 69, 70, 77], "long": [0, 2, 17, 99, 146, 147, 169, 376, 378, 387, 392, 476], "histori": 0, "consid": [0, 2, 8, 11, 65, 72, 77, 107, 144, 154, 155, 156, 169, 305, 468], "squash": 0, "we": [0, 2, 3, 6, 8, 9, 10, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 46, 47, 48, 51, 53, 56, 57, 58, 62, 64, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 98, 99, 100, 101, 102, 103, 104, 107, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 168, 169, 170, 203, 213, 337, 368, 387, 392, 396, 401, 408, 409, 413, 415, 436, 468, 475, 476], "azur": [0, 2, 465], "cloud": [0, 2, 465], "These": [0, 2, 6, 7, 8, 10, 11, 17, 19, 21, 31, 32, 69, 70, 103, 107, 469, 473, 474, 475, 477], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 32, 36, 39, 40, 49, 54, 65, 69, 70, 71, 72, 77, 78, 79, 96, 98, 99, 100, 101, 102, 103, 104, 107, 123, 124, 125, 130, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 168, 169, 170, 171, 176, 203, 214, 215, 220, 228, 232, 237, 305, 310, 332, 344, 347, 350, 351, 352, 353, 357, 358, 366, 368, 374, 376, 378, 380, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442, 448, 465, 468, 469, 470, 471, 475, 476], "configur": [0, 2, 3, 16, 17, 273, 276], "fipysourc": [0, 17], "pipelin": [0, 2, 4, 453], "yml": [0, 11], "workflow": 0, "nistthedocs2death": 0, "nix": [0, 2, 20, 466], "lock": [0, 11, 17], "environ": [0, 2, 8, 14, 16, 20, 21, 170, 438, 465, 466, 470], "solver": [0, 2, 4, 6, 8, 11, 14, 17, 20, 21, 31, 33, 34, 36, 49, 51, 53, 54, 58, 63, 77, 78, 79, 81, 85, 98, 99, 101, 107, 124, 146, 147, 149, 156, 157, 168, 169, 171, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 465, 466, 467, 468], "petsc": [0, 2, 17, 20, 32, 98, 465, 466], "pyspars": [0, 2, 11, 17, 20, 21, 32, 36, 81, 169, 465, 466, 468], "scipi": [0, 2, 8, 10, 17, 20, 21, 46, 47, 56, 57, 69, 70, 74, 75, 77, 146, 147, 157, 258, 259, 262, 271, 374, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 465, 466, 468], "trilino": [0, 2, 4, 11, 13, 17, 20, 32, 171, 465, 466], "file": [0, 2, 7, 9, 10, 11, 13, 15, 17, 20, 21, 39, 40, 41, 69, 70, 74, 75, 87, 88, 89, 90, 93, 123, 124, 125, 127, 128, 130, 145, 149, 150, 203, 376, 378, 388, 394, 401, 409, 413, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 475], "render": [0, 2, 8, 15, 21, 77, 171, 433, 460, 462, 463, 464], "filenam": [0, 8, 17, 69, 70, 101, 127, 128, 149, 203, 388, 404, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "templat": [0, 7], "platform": [0, 2, 8, 9, 11, 17, 18, 391, 465], "done": [0, 8, 9, 11, 17, 169, 376], "new": [0, 2, 6, 8, 11, 13, 16, 21, 68, 77, 102, 103, 124, 130, 150, 157, 169, 170, 199, 203, 209, 211, 214, 220, 228, 374, 378, 383, 387, 388, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 476], "valid": [0, 2, 17, 465], "everyth": [0, 11, 169], "log": [0, 20, 103, 127, 146, 147, 156, 161, 162, 378, 387, 440, 441, 442, 443, 444, 445, 446, 448, 449, 466, 467], "changelog": [0, 2], "txt": [0, 2, 378, 394], "rel": [0, 2, 16, 17, 21, 31, 32, 99, 161, 233, 240, 241, 242, 244, 246, 260, 261, 271, 293, 294, 295, 296, 297, 303, 304, 378, 387, 392], "after": [0, 2, 10, 11, 13, 16, 17, 21, 32, 101, 103, 107, 157, 169, 245, 376, 378, 383, 387, 392, 408], "x": [0, 2, 7, 8, 9, 11, 13, 15, 16, 17, 18, 20, 22, 36, 40, 48, 51, 53, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 128, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 168, 169, 170, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 442, 444, 445, 446, 448, 449, 451, 452, 453, 458, 465], "y": [0, 7, 8, 9, 11, 14, 15, 17, 18, 20, 40, 49, 54, 68, 69, 70, 78, 79, 88, 100, 107, 111, 114, 116, 124, 127, 128, 140, 144, 145, 149, 154, 155, 157, 158, 169, 170, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 458, 465], "mileston": 0, "z": [0, 9, 11, 20, 140, 144, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 451, 452], "obtain": [0, 2, 7, 8, 9, 17, 20, 31, 33, 34, 72, 77, 104, 107, 124, 125, 139, 145, 146, 147, 157, 168, 170, 203, 415, 428, 466, 468, 470, 471], "rest": [0, 124], "format": [0, 2, 16, 17, 32, 36, 378, 387, 388, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 458, 460, 462, 463, 464, 465], "everi": [0, 19, 21, 77, 123, 130, 311, 378, 387, 392], "close": [0, 2, 11, 13, 19, 21, 71, 77, 107, 161, 203, 378, 394, 448], "sinc": [0, 2, 6, 21, 98, 99, 100, 102, 104, 157, 169, 170, 213, 337, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 471], "last": [0, 2, 8, 107, 161, 168, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 348, 355, 356, 359, 363, 370, 371, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "major": [0, 2, 8, 161], "curat": [0, 7], "output": [0, 2, 15, 16, 19, 31, 32, 33, 34, 36, 107, 203, 305, 332, 392, 458], "so": [0, 3, 6, 10, 11, 13, 16, 17, 19, 20, 21, 31, 33, 34, 64, 71, 101, 103, 107, 124, 127, 128, 144, 146, 147, 149, 154, 155, 157, 161, 168, 169, 203, 233, 289, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 387, 392, 408, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 466, 468, 471, 476], "clear": [0, 2, 17, 21], "what": [0, 2, 10, 16, 17, 20, 21, 77, 161, 169, 332, 392, 396, 466, 475], "big": 0, "deal": [0, 10, 11, 17, 21, 122], "sometim": [0, 2, 8, 69, 70], "redund": [0, 21], "e": [0, 2, 8, 10, 11, 14, 15, 17, 19, 51, 53, 54, 58, 63, 71, 72, 77, 96, 101, 102, 104, 124, 146, 147, 150, 157, 161, 162, 168, 170, 232, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 443, 444, 458, 468, 469, 470, 472, 473, 474, 477], "g": [0, 8, 10, 11, 14, 15, 17, 19, 39, 69, 70, 77, 89, 96, 101, 102, 146, 147, 156, 157, 170, 203, 232, 336, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 443, 444, 458, 468, 470, 472, 473, 474, 477], "issue123": 0, "blah": 0, "prefer": [0, 2, 8, 10, 11, 17, 69, 70, 468], "given": [0, 2, 6, 7, 11, 15, 17, 21, 36, 46, 47, 48, 49, 54, 56, 57, 59, 63, 64, 68, 72, 74, 75, 77, 96, 103, 107, 116, 123, 124, 125, 130, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 168, 169, 175, 176, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 374, 378, 383, 387, 388, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 453, 468, 469, 473, 474, 477], "correspond": [0, 15, 64, 77, 125, 130, 175, 176, 177, 203, 378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "under": [0, 2, 14, 16, 20, 21, 31, 32, 77, 144, 154, 155, 156, 161, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 466, 476], "altern": [0, 7, 11, 17, 127, 128, 202, 283, 392, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 475], "item": [0, 169, 170], "remov": [0, 2, 8, 9, 11, 19, 107, 125, 144, 388, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448], "appropri": [0, 2, 8, 11, 17, 77, 81, 101, 103, 149, 156, 157, 168, 177, 201, 337, 378, 387, 468, 475], "move": [0, 2, 7, 8, 11, 14, 77, 87, 107, 127, 128, 146, 147, 157, 168], "thank": [0, 2, 17, 107], "mention": [0, 11, 77, 471], "recogn": 0, "outsid": [0, 140, 213, 458], "contributor": [0, 20, 466, 467], "requir": [0, 2, 6, 8, 15, 16, 17, 18, 19, 20, 21, 32, 46, 47, 56, 57, 65, 71, 74, 77, 107, 123, 124, 125, 130, 140, 146, 147, 149, 150, 154, 155, 157, 161, 169, 170, 202, 203, 213, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 466, 468, 476], "pygithub": 0, "panda": [0, 17, 465], "doesn": [0, 2, 3, 17, 20, 31, 32, 33, 34, 161, 203, 239, 438, 466], "t": [0, 2, 3, 9, 10, 11, 14, 16, 17, 20, 21, 31, 32, 33, 34, 36, 68, 69, 70, 71, 74, 75, 77, 96, 98, 102, 111, 112, 124, 125, 130, 144, 145, 146, 147, 150, 154, 155, 156, 157, 161, 169, 170, 203, 232, 239, 289, 339, 344, 358, 368, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 466, 469, 470, 472, 475, 476], "show": [0, 2, 3, 6, 17, 107, 125, 127, 128, 130, 149, 428], "green": [0, 2], "box": [0, 2, 19, 77, 144, 154, 155, 158, 168, 228, 260], "note": [0, 3, 11, 13, 21, 31, 32, 64, 77, 144, 157, 188, 203, 207, 232, 248, 249, 305, 339, 376, 415, 438], "readm": [0, 2], "instal": [0, 2, 5, 8, 9, 10, 16, 17, 19, 20, 21, 22, 123, 130, 144, 154, 155, 391, 465, 466, 467, 472], "tag": [0, 2, 3, 9, 11], "abov": [0, 6, 8, 10, 15, 17, 21, 36, 77, 107, 124, 125, 130, 157, 158, 228, 344, 378, 387, 475], "annot": [0, 382], "upon": [0, 12, 17, 21, 69, 70], "success": [0, 6, 8, 9, 11, 71, 283], "system": [0, 2, 9, 11, 13, 15, 16, 17, 71, 77, 98, 99, 100, 103, 123, 144, 145, 149, 150, 154, 155, 156, 157, 161, 175, 176, 177, 212, 232, 233, 260, 271, 278, 279, 281, 282, 283, 289, 296, 318, 327, 332, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 468, 469, 470, 472], "build": [0, 2, 6, 9, 11, 16, 17, 18, 21, 74, 107, 124, 139, 145, 149, 156, 157, 203, 232, 245, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "product": [0, 2, 5, 11, 16, 17, 21, 289, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "artifact": 0, "place": [0, 2, 8, 10, 11, 21, 32, 337, 376, 378, 387, 388, 392, 442], "dist": [0, 2, 376], "linux": [0, 2, 11, 13, 19, 22, 98, 465], "none": [0, 2, 10, 33, 34, 69, 70, 81, 98, 99, 100, 101, 103, 104, 124, 127, 128, 144, 147, 154, 155, 161, 162, 174, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 280, 281, 282, 284, 289, 290, 293, 294, 295, 296, 297, 302, 303, 304, 305, 308, 316, 332, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 377, 378, 383, 387, 388, 392, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 476], "whl": 0, "tar": 0, "gz": [0, 124, 145, 149, 150, 388, 404], "windows_nt": 0, "zip": [0, 154, 155, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "doc": [0, 2, 16, 17, 374, 393, 465, 472], "pdf": [0, 2, 14, 16, 17, 472], "html": [0, 3, 8, 11, 13, 17, 332, 393], "directori": [0, 6, 7, 8, 9, 11, 13, 15, 17, 22, 77, 123, 124, 125, 130, 139, 157, 473, 474, 477], "unpack": [0, 2, 11, 17], "xzf": 0, "c": [0, 2, 6, 11, 14, 16, 17, 21, 64, 77, 124, 125, 130, 144, 145, 146, 147, 154, 155, 161, 337, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 472], "attach": [0, 2, 475], "associ": [0, 17, 21, 123, 124, 146, 147], "pypi": [0, 2, 465], "twine": 0, "fipy_vers": 0, "web": [0, 2, 11, 19], "site": [0, 3, 11, 124, 125, 130], "ctcm": [0, 8, 171, 465], "export": [0, 2, 4, 17, 20, 69, 70, 203, 391, 466], "fipy_wwwhost": 0, "bunter": [0, 2], "u": [0, 2, 3, 7, 8, 14, 17, 20, 21, 46, 47, 48, 49, 51, 53, 54, 56, 57, 77, 107, 111, 112, 146, 147, 157, 161, 162, 168, 169, 170, 344, 348, 355, 356, 358, 359, 363, 370, 408, 412, 431, 432, 466, 469, 470, 475], "www": [0, 3, 8, 11, 16, 17, 34, 465, 472], "wd15": [0, 11, 13], "fipy_wwwactiv": 0, "updatewww": 0, "upload_product": 0, "some": [0, 2, 6, 8, 9, 10, 11, 15, 16, 17, 21, 31, 32, 33, 34, 39, 40, 69, 70, 77, 85, 107, 124, 149, 161, 169, 170, 232, 237, 305, 310, 344, 358, 380, 465, 472], "version": [0, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 20, 21, 77, 107, 162, 168, 169, 170, 203, 213, 391, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466], "rsync": 0, "mac": [0, 2, 11, 13, 19, 22], "o": [0, 2, 4, 11, 13, 17, 22, 68, 69, 70, 124, 145, 149, 150], "caus": [0, 2, 8, 15, 16, 17, 107, 144, 154, 155, 168, 169, 188, 203, 207, 232, 305, 339, 438], "problem": [0, 2, 4, 6, 7, 8, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 46, 47, 48, 49, 53, 54, 56, 57, 59, 62, 63, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 87, 88, 89, 90, 93, 98, 99, 100, 101, 102, 103, 104, 111, 112, 116, 117, 124, 140, 144, 146, 147, 150, 154, 155, 156, 157, 161, 168, 169, 171, 233, 305, 318, 325, 344, 358, 408, 465, 469], "thei": [0, 3, 8, 10, 11, 15, 16, 17, 21, 71, 77, 146, 147, 169, 170, 171, 344, 374, 387, 476], "try": [0, 2, 9, 11, 16, 34, 46, 47, 56, 57, 69, 70, 75, 77, 107, 124, 144, 146, 147, 154, 155, 157, 169, 245, 378, 387], "erron": 0, "rsrc": 0, "2": [0, 6, 8, 10, 11, 14, 15, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 56, 57, 60, 62, 63, 64, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 125, 127, 128, 130, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 171, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 289, 318, 324, 335, 337, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 374, 378, 387, 388, 392, 393, 396, 397, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 446, 448, 449, 451, 452, 458, 466, 468, 469, 471, 472], "6": [0, 2, 6, 8, 14, 15, 16, 17, 31, 32, 33, 34, 36, 49, 69, 70, 77, 81, 89, 98, 99, 100, 101, 103, 107, 114, 124, 125, 127, 128, 130, 144, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 169, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 358, 378, 387, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 458, 471, 472], "doe": [0, 2, 9, 11, 16, 17, 18, 20, 21, 60, 77, 101, 103, 107, 157, 168, 177, 203, 228, 289, 332, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392, 393, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 465, 466, 468, 475], "onc": [0, 3, 6, 11, 13, 72, 77, 101, 103, 117, 139, 156, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387], "receiv": [0, 2, 17], "amend": 0, "ask": [0, 2, 3, 10, 15, 20, 169, 170, 466, 467], "maintain": [0, 17, 98, 99, 100, 169, 170, 408, 433], "process": [0, 2, 6, 11, 14, 15, 17, 19, 20, 21, 31, 32, 144, 154, 155, 156, 171, 203, 248, 249, 311, 336, 387, 451, 452, 465, 466, 469, 470], "hour": [0, 17, 19, 21, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "don": [0, 2, 10, 17, 20, 144, 154, 155, 157, 169, 170, 232, 344, 466, 475, 476], "wish": [0, 7, 8, 11, 17, 64, 68, 123, 125, 130, 145, 158, 169], "wait": [0, 21, 146, 147], "trigger": [0, 437], "reason": [0, 2, 8, 11, 16, 17, 21, 32, 75, 77, 107, 124, 157, 169, 305, 378, 387, 458, 468], "manual": [0, 2, 7, 8, 11, 16, 19, 20, 31, 32, 33, 34, 69, 70, 168, 415, 466, 472, 476], "gener": [0, 2, 6, 9, 11, 14, 16, 17, 20, 21, 77, 90, 104, 124, 146, 147, 157, 168, 169, 170, 173, 177, 202, 203, 207, 208, 209, 245, 260, 273, 278, 279, 281, 282, 376, 383, 387, 394, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 438, 439, 460, 465, 466, 468, 470, 471, 475], "revis": [0, 2, 9, 11], "number": [0, 2, 8, 9, 11, 13, 16, 17, 21, 48, 60, 72, 75, 77, 98, 99, 100, 103, 104, 107, 123, 124, 125, 127, 130, 139, 156, 157, 168, 169, 199, 202, 203, 209, 211, 212, 214, 215, 220, 228, 231, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 339, 350, 368, 378, 382, 387, 392, 401, 404, 409, 412, 413, 415, 417, 422, 428, 429, 431, 436, 440, 441, 442, 443, 444, 445, 446, 448, 449, 468, 469, 471], "sha256": 0, "openssl": 0, "dgst": 0, "path": [0, 10, 15, 17, 68, 124, 145, 149, 150, 203, 451, 452], "reset": [0, 77, 130, 145, 149], "0": [0, 6, 8, 10, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 125, 127, 128, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 176, 177, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 245, 248, 249, 260, 261, 271, 281, 289, 293, 294, 295, 296, 297, 303, 304, 336, 337, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 387, 392, 394, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 458, 466, 468, 471], "nist": [0, 2, 3, 6, 8, 11, 12, 17, 171, 387, 465], "gov": [0, 3, 8, 11, 16, 17, 332, 465], "how": [1, 2, 3, 7, 11, 17, 20, 21, 31, 32, 64, 69, 70, 77, 124, 139, 140, 146, 147, 149, 168, 169, 170, 374, 428, 466, 467, 475], "read": [1, 2, 3, 11, 20, 21, 149, 168, 169, 170, 203, 378, 388, 394, 404, 466, 467], "modul": [1, 2, 4, 7, 8, 10, 11, 15, 16, 17, 19, 20, 21, 23, 24, 30, 38, 43, 44, 45, 50, 52, 55, 61, 67, 73, 80, 83, 84, 86, 91, 92, 96, 97, 106, 109, 110, 115, 119, 134, 137, 143, 148, 152, 160, 164, 167, 168, 169, 170, 171, 172, 179, 187, 189, 216, 224, 232, 234, 235, 248, 257, 263, 265, 271, 277, 285, 292, 296, 298, 307, 309, 318, 335, 339, 372, 373, 374, 376, 377, 378, 379, 384, 387, 390, 392, 393, 394, 398, 401, 409, 413, 415, 429, 438, 439, 451, 460, 467, 468, 472, 473, 474, 475], "mainten": 2, "releas": [2, 6, 9, 11, 16, 17, 20, 21, 144, 154, 155, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466, 467], "compat": [2, 17, 99, 169, 170, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "recent": [2, 6, 9, 11, 21, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 348, 355, 356, 359, 363, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "numpi": [2, 16, 20, 21, 31, 32, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 466, 468], "25": [2, 17, 31, 32, 33, 107, 111, 144, 145, 154, 155, 156, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 337, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 458, 472], "930": 2, "get": [2, 3, 8, 17, 18, 20, 21, 107, 146, 147, 392, 408], "again": [2, 69, 70, 72, 74, 75, 77, 87, 89, 93, 99, 100, 101, 103, 104, 107, 146, 147, 156, 157, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 358], "925": 2, "discourag": 2, "stackoverflow": [2, 15, 20, 298, 299, 300], "876": 2, "875": [2, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "791": 2, "896": 2, "poor": [2, 17, 103, 469], "garbag": 2, "collect": [2, 11, 20, 144, 391, 398, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442, 446, 455, 465], "petsc4pi": [2, 11, 16, 17, 237, 465], "18": [2, 77, 154, 155, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 387, 432, 469, 472], "wa": [2, 4, 6, 8, 10, 12, 16, 17, 21, 60, 77, 145, 146, 147, 149, 150, 168, 169, 233, 245, 289, 374, 376, 378, 387, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465], "memori": [2, 6, 32, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "leak": 2, "term": [2, 15, 17, 20, 21, 31, 32, 33, 34, 36, 46, 47, 48, 56, 57, 65, 71, 75, 101, 102, 107, 123, 124, 125, 146, 147, 149, 150, 154, 155, 157, 161, 168, 169, 171, 176, 177, 180, 466, 469, 470, 471], "justerrorvector": [2, 20, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "isn": [2, 11, 20, 466], "strictli": 2, "exampl": [2, 3, 6, 8, 10, 11, 13, 15, 16, 17, 19, 20, 21, 171, 374, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 453, 467, 468, 469, 476], "contribut": [2, 4, 17, 21, 71, 175, 176, 177, 344, 353, 358], "jon83carvalho": 2, "clarifi": 2, "mani": [2, 7, 8, 9, 11, 17, 19, 21, 74, 75, 77, 107, 146, 147, 157, 168, 169, 171, 374, 465, 470, 475], "point": [2, 7, 8, 10, 17, 21, 34, 68, 69, 70, 72, 77, 85, 89, 104, 107, 124, 140, 144, 146, 147, 154, 155, 157, 169, 203, 220, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "migrat": [2, 3, 7], "continu": [2, 8, 9, 11, 15, 16, 17, 20, 65, 72, 85, 101, 104, 107, 169, 289, 465, 466, 467, 468], "integr": [2, 7, 9, 11, 17, 20, 21, 146, 147, 336, 378, 387, 465, 466, 467, 468], "updat": [2, 4, 8, 11, 16, 20, 36, 77, 107, 123, 127, 128, 130, 161, 281, 376, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 466], "wheel": 2, "distribut": [2, 11, 12, 15, 17, 19, 21, 72, 104, 401, 409, 413, 415, 417, 429, 436, 453, 465], "substanti": [2, 6], "refactor": [2, 4, 20, 203, 466], "matric": [2, 17, 20, 21, 171, 177, 232, 248, 249, 468], "more": [2, 3, 6, 7, 9, 10, 11, 16, 17, 20, 21, 31, 33, 34, 46, 47, 48, 56, 57, 69, 70, 71, 77, 101, 103, 111, 123, 125, 130, 146, 147, 157, 161, 168, 169, 170, 202, 203, 233, 239, 240, 241, 242, 243, 244, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 333, 334, 344, 358, 378, 387, 393, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442, 443, 444, 458, 466, 468, 475], "consist": [2, 7, 8, 11, 16, 103, 122, 203, 468, 470], "across": [2, 311, 448, 468], "863": 2, "refin": [2, 8, 203], "851": 2, "debug": [2, 17, 20, 21, 374], "848": 2, "contact": [2, 7, 14, 15, 20, 168, 466, 472], "inform": [2, 11, 16, 17, 139, 154, 155, 168, 233, 239, 240, 241, 242, 243, 244, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 391, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465], "singl": [2, 8, 10, 17, 19, 21, 31, 32, 33, 34, 71, 72, 98, 102, 104, 146, 147, 157, 161, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 245, 335, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 455], "page": [2, 11, 13, 17, 336], "847": 2, "set": [2, 4, 8, 13, 15, 16, 17, 19, 20, 21, 32, 65, 68, 69, 70, 72, 77, 79, 96, 104, 107, 111, 112, 114, 116, 117, 124, 125, 127, 128, 139, 145, 146, 147, 149, 150, 157, 158, 169, 170, 171, 180, 188, 203, 207, 230, 232, 245, 305, 332, 339, 376, 377, 378, 387, 388, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 466, 468, 470, 472, 475], "822": 2, "replac": [2, 17, 77, 107, 157, 169, 170, 171, 203, 392, 396, 458], "deprec": [2, 3, 8, 17, 20, 127, 128, 383, 397, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "type": [2, 7, 8, 11, 15, 17, 18, 21, 46, 47, 48, 56, 57, 77, 123, 124, 125, 130, 139, 149, 157, 168, 176, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 383, 387, 388, 391, 392, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 465], "798": 2, "py3k": [2, 465], "797": 2, "7": [2, 6, 11, 15, 17, 31, 34, 69, 70, 89, 98, 99, 100, 103, 107, 124, 125, 130, 140, 146, 147, 149, 161, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 358, 378, 387, 392, 396, 397, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 472], "conda": [2, 17, 20, 391, 465, 466, 467], "795": 2, "stop": [2, 16, 375], "divid": [2, 17, 20, 228, 378, 387, 392, 433, 448, 468, 470], "zero": [2, 8, 17, 64, 65, 77, 78, 79, 114, 117, 123, 157, 158, 161, 232, 239, 245, 344, 358, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 443, 444], "warn": [2, 8, 16, 17, 99, 169, 305, 376, 377, 383], "lu": [2, 6, 16, 243, 248, 253, 271, 282, 296, 468], "790": 2, "introduc": [2, 21, 60, 64, 99, 100, 107, 144, 154, 155, 169, 170], "sharedtemporaryfil": [2, 20, 378, 394], "bi": 2, "769": 2, "rais": [2, 10, 11, 101, 188, 203, 374, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "importerror": [2, 46, 47, 56, 57, 69, 70, 75, 77, 144, 146, 147, 154, 155, 157, 168], "768": 2, "disabl": 2, "tvtk": [2, 10, 17, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 374], "prerequisit": [2, 9, 11, 16, 17], "aren": 2, "met": [2, 16], "764": 2, "tabul": 2, "depend": [2, 6, 9, 11, 17, 19, 20, 21, 69, 70, 77, 103, 107, 124, 146, 147, 157, 169, 176, 203, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 437, 465, 466, 468, 471, 475], "763": 2, "749": 2, "stoke": [2, 107], "caviti": [2, 107], "non": [2, 8, 11, 12, 16, 17, 31, 32, 33, 34, 36, 47, 57, 69, 70, 77, 87, 89, 90, 123, 144, 146, 147, 154, 155, 161, 207, 208, 209, 278, 279, 281, 282, 318, 325, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 388, 415, 468], "newtonian": 2, "748": 2, "721": 2, "862": 2, "could": [2, 6, 8, 15, 17, 69, 70, 104, 146, 147, 156, 161, 168, 169, 408], "load": [2, 89, 93, 388, 465], "qt": [2, 387], "plugin": 2, "xcb": 2, "858": 2, "856": 2, "facevari": [2, 17, 20, 64, 77, 98, 99, 100, 101, 103, 107, 169, 173, 175, 176, 177, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 363, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 432, 433, 436, 448, 449, 458, 460, 462, 463, 464, 466, 468], "accumul": [2, 123, 375], "properli": [2, 8, 11, 17, 161, 169, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "parallel": [2, 4, 10, 11, 16, 20, 171, 202, 203, 237, 248, 249, 310, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 380, 465, 466], "850": 2, "switch": [2, 6, 107, 171, 465], "849": 2, "py27": 2, "fail": [2, 10, 16, 17, 168, 378, 387, 408], "841": 2, "matplotlib2dview": [2, 20, 444, 449], "accept": [2, 8, 9, 11, 16, 169, 344, 347, 350, 351, 352, 353, 357, 358, 366, 368, 387], "color": [2, 10, 154, 155, 439, 440, 441, 443, 444, 445, 446, 448], "map": [2, 17, 150, 203, 374], "string": [2, 16, 203, 374, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 476], "836": 2, "coupl": [2, 7, 8, 14, 15, 20, 21, 32, 79, 96, 107, 144, 145, 146, 147, 150, 154, 155, 161, 171, 336, 466, 468, 470], "high": [2, 4, 20, 23, 107, 394, 465, 466], "order": [2, 3, 5, 8, 9, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 69, 70, 71, 77, 81, 87, 107, 116, 124, 130, 144, 146, 147, 157, 161, 168, 169, 175, 176, 177, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 344, 350, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 443, 444, 469, 470, 476], "diffus": [2, 4, 14, 15, 17, 19, 20, 31, 33, 34, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 96, 101, 103, 104, 107, 122, 124, 125, 130, 140, 144, 146, 147, 154, 155, 156, 157, 168, 171, 336, 344, 347, 350, 351, 352, 353, 357, 358, 366, 368, 466, 469, 470, 471], "incompat": [2, 11, 168, 169, 170, 378, 387], "833": 2, "tool": [2, 3, 11, 14, 17, 20, 21, 31, 32, 33, 34, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 74, 75, 77, 78, 79, 89, 99, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 171, 203, 368, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 465, 468], "dump": [2, 8, 20, 149, 404], "undocu": 2, "alwai": [2, 7, 8, 9, 11, 15, 17, 31, 32, 33, 34, 77, 173, 202, 246, 247, 254, 256, 280, 284, 287, 290, 301, 303, 304, 305, 330, 331, 334, 347, 357, 365, 366, 376, 392, 422, 429, 437, 441, 459, 468, 475], "gzip": [2, 388], "828": [2, 6], "colorbar": [2, 20, 107, 127, 154, 155, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449], "true": [2, 8, 17, 21, 31, 32, 60, 64, 65, 68, 71, 77, 89, 98, 101, 116, 123, 125, 130, 140, 144, 146, 147, 154, 155, 156, 157, 161, 162, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 377, 378, 382, 387, 388, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442, 444, 445, 446, 448, 449], "longer": [2, 6, 9, 11, 18, 21, 77, 157, 168, 169, 335, 465], "flow": [2, 8, 17, 20, 157, 161, 318, 325, 336, 469, 472], "826": 2, "gmsh": [2, 4, 10, 20, 68, 69, 70, 93, 123, 125, 130, 170, 203, 374, 465, 466], "818": 2, "gridnd": 2, "mesh": [2, 4, 8, 10, 11, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 90, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 122, 123, 124, 125, 127, 128, 130, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 176, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 388, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 466, 468, 472], "cartesian": [2, 144, 154, 155, 202, 228, 401, 409, 413, 415, 436, 470], "811": [2, 387], "In": [2, 3, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 68, 69, 70, 71, 74, 75, 77, 87, 96, 99, 107, 123, 144, 145, 146, 147, 149, 150, 154, 155, 157, 161, 168, 374, 408, 429, 468, 469, 473, 474, 475, 477], "9": [2, 6, 8, 9, 11, 14, 69, 70, 77, 78, 79, 89, 99, 101, 124, 125, 130, 144, 145, 146, 147, 154, 155, 161, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 337, 378, 387, 392, 396, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 439, 444, 445, 446, 451, 452, 472], "__repr__": [2, 20, 173, 174, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 310, 311, 312, 313, 314, 315, 316, 317, 331, 332, 333, 334, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 380, 381, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438], "throw": [2, 8, 69, 70, 376], "except": [2, 10, 34, 46, 47, 56, 57, 69, 70, 75, 77, 124, 144, 146, 147, 154, 155, 157, 188, 203, 207, 232, 233, 305, 339, 374, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 475], "ab": [2, 36, 68, 77, 89, 107, 112, 116, 146, 147, 157, 161, 162, 203, 344, 358, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "801": 2, "circleci": [2, 465], "36": 2, "serial": [2, 10, 11, 16, 17, 202, 203, 220, 374, 378], "extrem": [2, 17, 169, 305], "slow": [2, 8, 11, 17, 31, 32, 33, 34, 146, 147, 169, 471], "800": [2, 124, 144], "conda2_env": 2, "realli": [2, 8, 11, 19, 337], "end": [2, 3, 7, 17, 36, 46, 48, 53, 56, 57, 68, 71, 72, 77, 101, 103, 104, 123, 124, 125, 130, 144, 146, 147, 149, 150, 154, 155, 156, 157, 168, 374, 388, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 471, 476], "796": 2, "phase": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 31, 32, 36, 96, 98, 100, 101, 103, 161, 169, 171, 469, 472], "polyxt": [2, 7, 8, 20], "freez": [2, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "792": 2, "circlequad": [2, 20], "781": 2, "matplolibview": 2, "ax": [2, 8, 20, 49, 54, 127, 144, 145, 154, 155, 260, 392, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 455], "properti": [2, 4, 12, 16, 21, 31, 32, 123, 124, 125, 127, 128, 130, 154, 155, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "778": 2, "binder": [2, 20, 466], "762": 2, "equat": [2, 14, 16, 20, 21, 31, 32, 33, 34, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 116, 117, 123, 124, 125, 130, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 168, 170, 171, 175, 176, 177, 202, 203, 271, 278, 279, 281, 282, 283, 296, 333, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 465, 466, 470, 471], "websit": [2, 9, 11], "right": [2, 8, 16, 17, 20, 31, 32, 33, 34, 36, 46, 47, 48, 53, 56, 57, 64, 65, 68, 72, 77, 78, 79, 81, 96, 102, 104, 107, 111, 114, 123, 124, 125, 144, 145, 146, 147, 150, 154, 155, 156, 157, 161, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 284, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 466, 469, 470], "742": 2, "No": [2, 11, 77, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 465], "variabl": [2, 4, 6, 7, 11, 16, 20, 21, 32, 36, 46, 47, 48, 53, 56, 57, 60, 69, 70, 77, 78, 79, 81, 85, 88, 89, 93, 99, 107, 111, 112, 114, 116, 117, 124, 127, 128, 144, 145, 146, 147, 149, 150, 154, 155, 157, 161, 168, 169, 170, 174, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469, 470], "mag": [2, 20, 149, 150, 154, 155, 161, 162, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "735": 2, "pip": [2, 17, 20, 465], "734": 2, "residu": [2, 8, 20, 77, 101, 107, 146, 147, 157, 161, 162, 233, 239, 245, 247, 273, 275, 279, 280, 283, 284, 289, 290, 302, 305, 308, 313, 314, 315, 317, 331, 333, 334, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "688": [2, 472], "need": [2, 3, 8, 9, 10, 11, 17, 19, 21, 31, 32, 33, 34, 48, 71, 77, 100, 107, 124, 144, 146, 147, 154, 155, 157, 161, 168, 169, 170, 180, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 236, 237, 310, 311, 339, 380, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 453, 472, 475, 476], "circl": [2, 7, 8, 17, 20, 34, 70, 140, 149, 150, 154, 155, 203, 408, 428], "viewer": [2, 11, 17, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 125, 127, 128, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 401, 409, 413, 415, 436, 465, 466, 467], "676": 2, "default": [2, 6, 11, 13, 19, 20, 22, 60, 64, 77, 78, 79, 123, 124, 127, 128, 139, 146, 149, 154, 155, 168, 169, 202, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 378, 383, 387, 391, 392, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 466, 476], "flux": [2, 8, 20, 31, 33, 34, 64, 77, 107, 144, 146, 147, 154, 155, 157, 161, 466, 468], "condit": [2, 10, 16, 20, 21, 31, 32, 36, 46, 47, 48, 53, 56, 57, 64, 65, 69, 70, 71, 74, 77, 78, 79, 81, 85, 100, 107, 116, 117, 124, 127, 128, 146, 147, 149, 150, 157, 161, 168, 169, 170, 172, 173, 175, 176, 177, 178, 203, 233, 289, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 394, 408, 466, 469, 470], "explicitli": [2, 8, 16, 74, 77, 104, 144, 146, 147, 154, 155, 157, 168, 392], "609": 2, "clearli": [2, 8, 21, 146, 147], "400": [2, 6, 98, 102, 103, 146, 147, 149, 156, 157], "globalvalu": [2, 17, 20, 31, 107, 157, 344, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 432, 433, 436], "method": [2, 6, 8, 10, 16, 17, 19, 20, 21, 71, 77, 107, 117, 139, 146, 147, 157, 161, 168, 169, 170, 171, 233, 245, 278, 279, 281, 282, 283, 289, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 466, 469, 470, 472, 475, 476], "assort": 2, "convect": [2, 15, 17, 20, 96, 146, 147, 156, 168, 171, 318, 325, 336, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 363, 366, 368, 370, 371, 432, 466, 469, 470, 471], "boundari": [2, 20, 21, 36, 46, 47, 48, 53, 56, 57, 64, 65, 69, 70, 71, 74, 77, 78, 79, 81, 85, 101, 103, 107, 116, 117, 122, 123, 124, 125, 127, 128, 130, 146, 147, 149, 150, 156, 157, 161, 168, 169, 170, 172, 173, 175, 176, 177, 178, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 466, 470], "spheric": [2, 202, 221, 222], "There": [2, 11, 13, 17, 123, 146, 147, 157, 169, 408], "known": [2, 7, 8, 17, 21, 31, 32, 144, 146, 147, 154, 155, 408, 468, 470], "vtk": [2, 18, 438, 453, 460, 462, 463, 464], "bitrot": 2, "ha": [2, 6, 7, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 33, 34, 47, 57, 60, 69, 70, 71, 72, 77, 85, 100, 101, 102, 103, 104, 107, 123, 124, 125, 127, 139, 149, 150, 156, 157, 169, 170, 171, 177, 245, 305, 376, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 440, 441, 442, 443, 444, 445, 446, 448, 449, 465, 468], "start": [2, 9, 17, 20, 31, 32, 33, 34, 101, 103, 107, 144, 145, 146, 147, 154, 155, 156, 158, 169, 228, 374, 396, 453], "demis": 2, "also": [2, 3, 4, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 69, 70, 71, 77, 78, 79, 107, 123, 125, 127, 128, 130, 146, 147, 161, 169, 245, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 383, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469], "nonuniformgrid1d": [2, 20, 198, 202, 213, 221], "figur": [2, 6, 17, 127, 144, 154, 155, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 468], "out": [2, 11, 12, 17, 64, 144, 146, 154, 155, 161, 228, 245, 260, 289, 374, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468], "747": 2, "spherical1d": 2, "uniform": [2, 72, 77, 98, 99, 100, 102, 103, 104, 144, 146, 147, 149, 154, 155, 156, 388, 401, 409, 413, 415, 436], "nonuniform": [2, 472], "732": 2, "klkuhlm": 2, "neumann": [2, 20, 78, 79, 175, 466], "bc": [2, 36, 81], "constraint": [2, 11, 17, 20, 65, 124, 156, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "719": 2, "atism": 2, "vertex": [2, 20, 87, 199, 203, 209, 211, 214, 220, 228, 466, 470], "index": [2, 8, 11, 146, 147, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465], "invers": [2, 378, 387, 413], "716": 2, "726": 2, "mayavicli": [2, 20, 34, 140, 451], "663": 2, "datamin": [2, 31, 32, 33, 34, 36, 40, 68, 69, 70, 77, 78, 79, 85, 98, 99, 100, 101, 103, 111, 112, 114, 116, 117, 124, 127, 128, 144, 145, 146, 147, 149, 150, 154, 155, 156, 158, 169, 401, 409, 413, 415, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "datamax": [2, 31, 32, 33, 34, 36, 40, 68, 69, 70, 77, 78, 79, 85, 98, 99, 100, 101, 103, 111, 112, 114, 116, 117, 124, 127, 128, 144, 145, 146, 147, 149, 150, 154, 155, 156, 158, 169, 401, 409, 413, 415, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "argument": [2, 8, 16, 107, 123, 125, 127, 128, 130, 139, 169, 170, 273, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 475, 476], "ignor": [2, 17, 146, 147, 156, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 243, 282, 316, 335, 344, 393], "662": 2, "scale": [2, 16, 17, 21, 99, 101, 107, 127, 146, 147, 229, 233, 413, 440, 441, 442, 443, 444, 445, 446, 448, 449], "arg": [2, 157, 171, 198, 199, 200, 201, 203, 213, 214, 215, 220, 221, 222, 335, 374, 382, 383, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 440, 441, 443, 445, 446, 448, 449, 453], "primarili": [2, 7, 17, 77, 377, 468], "711": 2, "broken": [2, 9, 11, 16, 21, 124], "plm_rsh_agent": 2, "error": [2, 11, 12, 16, 17, 20, 21, 36, 69, 70, 77, 87, 89, 90, 102, 107, 168, 203, 240, 241, 242, 243, 244, 246, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 281, 282, 293, 294, 295, 296, 297, 303, 304, 316, 332, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466, 468], "710": 2, "708": 2, "703": [2, 472], "fortran": [2, 6, 21, 144, 145, 149, 150, 465], "arrai": [2, 6, 8, 17, 21, 36, 49, 68, 111, 116, 124, 146, 147, 154, 155, 162, 171, 335, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465], "support": [2, 4, 8, 11, 16, 17, 18, 20, 161, 168, 169, 203, 239, 247, 260, 261, 271, 279, 280, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 317, 331, 332, 333, 334, 376, 387, 398, 438, 466, 468, 476], "solv": [2, 6, 14, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 87, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 168, 169, 170, 232, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 465, 466, 468, 469, 470], "701": 2, "while": [2, 4, 6, 8, 16, 17, 21, 31, 32, 33, 34, 60, 64, 68, 71, 77, 101, 124, 146, 147, 154, 155, 157, 161, 162, 245, 378, 387, 468, 471], "700": 2, "print": [2, 15, 16, 17, 20, 21, 31, 32, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 101, 103, 104, 107, 112, 114, 116, 117, 124, 145, 146, 147, 149, 150, 156, 157, 161, 162, 168, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 374, 378, 382, 387, 388, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "statement": [2, 168], "processor": [2, 10, 17, 98, 378, 394, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 465], "write": [2, 8, 20, 21, 69, 70, 71, 77, 107, 124, 130, 146, 147, 149, 161, 168, 169, 203, 378, 388, 394, 404], "timetest": 2, "forg": [2, 11, 17, 20, 466], "upload": [2, 20, 466], "option": [2, 6, 8, 10, 16, 17, 20, 22, 127, 128, 171, 239, 240, 241, 242, 244, 246, 247, 258, 259, 262, 266, 267, 268, 269, 270, 272, 273, 274, 279, 280, 283, 284, 290, 305, 313, 314, 315, 317, 331, 332, 333, 334, 374, 376, 378, 383, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 466, 476], "fipy_display_matrix": [2, 17], "legaci": [2, 9, 11, 17, 20, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 466], "matplotlib": [2, 8, 11, 17, 20, 127, 154, 155, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 465, 466], "built": [2, 9, 11, 21, 111, 124, 139, 145, 149, 150, 154, 155, 207, 208, 209], "symlog": 2, "clean": [2, 203, 374], "benchmark": [2, 20], "8": [2, 6, 10, 11, 16, 34, 69, 70, 77, 85, 89, 107, 124, 125, 130, 140, 144, 146, 147, 156, 157, 161, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 368, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 472], "699": [2, 472], "stipul": 2, "forc": [2, 16, 17], "miniconda": 2, "url": [2, 472], "_cellvolumeaveragevari": 2, "class": [2, 4, 8, 10, 16, 17, 21, 81, 98, 99, 100, 101, 102, 103, 104, 107, 127, 128, 144, 154, 155, 168, 169, 170, 173, 174, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 375, 376, 377, 378, 380, 381, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 475, 476], "express": [2, 6, 8, 11, 12, 13, 17, 21, 32, 36, 98, 107, 144, 146, 147, 154, 155, 157, 161, 203, 339, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468], "bad": [2, 3], "call": [2, 15, 16, 17, 21, 77, 124, 161, 168, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 246, 331, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 475, 476], "stack": [2, 11], "make": [2, 6, 7, 10, 11, 13, 16, 17, 20, 21, 31, 33, 34, 36, 68, 96, 103, 107, 146, 147, 154, 155, 156, 157, 161, 168, 169, 170, 203, 233, 353, 377, 378, 387, 404, 408, 412, 415, 417, 422, 428, 431, 432, 433, 437, 465, 466, 467, 468, 475], "698": 2, "nick": [2, 470], "croft": [2, 470, 472], "thesi": [2, 470, 472], "681": 2, "header": 2, "footer": 2, "680": 2, "nixpkg": [2, 11, 13], "661": 2, "recip": [2, 11, 13, 337, 472], "658": 2, "692": 2, "copi": [2, 3, 7, 9, 11, 12, 17, 20, 77, 98, 99, 100, 101, 102, 103, 104, 161, 162, 311, 374, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465], "script": [2, 7, 15, 17, 20, 23, 31, 32, 69, 70, 77, 111, 112, 116, 117, 124, 130, 156, 161, 168, 169, 170, 203, 373, 376, 451, 452, 453, 465, 466, 475], "command": [2, 7, 8, 9, 11, 13, 15, 16, 20, 77, 111, 116, 117, 123, 124, 125, 130, 139, 157, 171, 376, 377, 393, 453, 466], "line": [2, 8, 10, 11, 15, 16, 20, 21, 34, 69, 70, 75, 77, 85, 89, 123, 124, 125, 130, 139, 140, 144, 157, 171, 203, 228, 376, 377, 392, 393, 438, 442, 443, 444, 448, 453, 466, 468], "669": 2, "input": [2, 7, 8, 15, 16, 19, 20, 21, 32, 40, 41, 60, 65, 69, 70, 72, 74, 75, 77, 78, 79, 85, 87, 88, 89, 93, 104, 123, 124, 125, 130, 146, 147, 157, 161, 162, 168, 378, 387, 392], "deadlock": 2, "643": 2, "bring": 2, "from": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 122, 123, 124, 125, 127, 128, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 246, 289, 298, 299, 300, 311, 318, 320, 331, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 375, 376, 378, 387, 388, 391, 392, 393, 394, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 451, 452, 458, 466, 468, 471, 472, 475, 476], "same": [2, 8, 16, 17, 19, 32, 71, 77, 85, 89, 93, 99, 100, 101, 102, 103, 124, 125, 146, 147, 149, 156, 157, 168, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 376, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 458, 468], "sourc": [2, 7, 9, 11, 14, 15, 17, 18, 20, 32, 53, 54, 64, 68, 71, 96, 101, 102, 107, 124, 144, 146, 147, 149, 150, 154, 155, 156, 157, 169, 171, 364, 365, 429, 453, 465, 466, 469, 470], "translat": [2, 6, 21, 146, 147, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "pya": [2, 17], "woodscn": [2, 17], "thing": [2, 3, 8, 10, 11, 16, 17, 168, 169, 233, 468, 475, 476], "spell": [2, 17], "657": 2, "window": [2, 11, 17, 19, 127, 128, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 458, 459, 460, 462, 463, 464, 465], "648": 2, "sphinx": [2, 17, 465], "647": 2, "645": 2, "gmshmesh": [2, 20], "644": 2, "xfong": 2, "655": 2, "mayavi": [2, 8, 11, 17, 20, 123, 128, 130, 438, 451, 452, 453, 465, 466], "wont": 2, "hendrik410": 2, "646": 2, "branch": [2, 20, 144, 154, 155, 466], "601": 2, "content": [2, 203, 458, 473, 474, 477], "rst": 2, "recurs": [2, 16, 468], "mess": 2, "597": 2, "compress": [2, 11, 388, 472], "archiv": [2, 9, 11, 15, 17, 20], "557": 2, "facegradaverag": [2, 20, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "stupid": 2, "552": 2, "458": 2, "wrong": [2, 8, 169], "preced": [2, 16, 17], "lx": [2, 71, 74, 85, 88, 89, 93, 114, 116, 127, 128, 150, 161, 162, 169, 202, 387], "dx": [2, 17, 31, 32, 33, 36, 39, 40, 48, 49, 51, 53, 54, 60, 62, 63, 64, 65, 72, 74, 75, 77, 78, 79, 81, 85, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 128, 139, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 348, 355, 356, 358, 359, 363, 370, 371, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 439, 444, 445, 446, 448, 449, 451, 452, 458], "nonuniformgrid": 2, "457": 2, "special": [2, 12, 17, 21, 46, 47, 56, 57, 69, 70, 74, 75, 77, 144, 146, 147, 154, 155, 364, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 475, 476], "includ": [2, 4, 7, 11, 12, 13, 15, 16, 17, 19, 65, 107, 123, 144, 146, 147, 154, 155, 156, 169, 170, 171, 203, 458, 468, 469, 475], "432": 2, "340": 2, "packag": [2, 8, 10, 16, 17, 18, 20, 21, 23, 69, 70, 127, 128, 144, 154, 155, 246, 331, 332, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 391, 397, 408, 441, 451, 452, 465, 466, 467, 477], "just": [2, 7, 8, 16, 17, 21, 75, 77, 146, 147, 156, 157, 233, 376, 378, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 443, 444, 470], "master": [2, 9, 11, 13, 20, 466], "predominantli": 2, "devop": 2, "focu": [2, 156], "been": [2, 6, 7, 8, 11, 13, 15, 17, 21, 60, 72, 77, 117, 123, 124, 125, 130, 139, 156, 168, 169, 170, 171, 203, 376, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468], "easier": [2, 8, 21, 161, 168, 169, 170, 203], "It": [2, 3, 6, 8, 11, 16, 17, 18, 19, 31, 32, 46, 47, 56, 57, 71, 77, 90, 107, 124, 125, 146, 147, 157, 168, 169, 177, 203, 228, 245, 246, 331, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 453, 458, 465], "possibl": [2, 8, 10, 16, 17, 21, 71, 77, 99, 146, 147, 157, 203, 245, 273, 332, 374, 376, 378, 387, 439, 448, 469], "minim": [2, 3, 6, 8, 279, 318, 325, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "base": [2, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 77, 107, 123, 124, 125, 127, 128, 130, 139, 145, 157, 171, 173, 174, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 377, 378, 380, 381, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 466, 468, 472, 476], "maco": [2, 98, 465], "travisci": [2, 465], "appveyor": [2, 465], "badg": 2, "636": 2, "robin": [2, 7, 20, 466], "615": 2, "issue555": 2, "inclus": [2, 17, 436], "licens": [2, 11, 21], "613": [2, 472], "607": 2, "600": [2, 415], "explain": [2, 7, 8, 11, 17, 124], "where": [2, 10, 15, 17, 19, 20, 21, 31, 32, 33, 34, 36, 60, 64, 68, 72, 75, 77, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 123, 124, 125, 127, 128, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 168, 169, 173, 174, 175, 176, 177, 335, 344, 348, 353, 355, 356, 359, 361, 363, 368, 370, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466, 468, 469, 471], "596": 2, "correct": [2, 8, 10, 17, 36, 72, 77, 100, 102, 104, 107, 149, 150, 154, 155, 161, 203, 387, 388, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 439, 460, 468], "en_u": [2, 17], "dictionari": [2, 17, 374], "594": 2, "smoothedaggregationsolv": 2, "593": 2, "585": 2, "tarbal": 2, "582": 2, "navier": [2, 107], "viscou": [2, 107], "limit": [2, 8, 12, 16, 17, 77, 107, 127, 128, 144, 146, 147, 154, 155, 157, 161, 169, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "580": 2, "stokescav": [2, 7, 8, 20], "579": 2, "rowin": 2, "inlin": [2, 4, 6, 8, 11, 17, 20, 171, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465], "578": 2, "577": 2, "epetra": [2, 310, 311], "vector": [2, 8, 20, 32, 69, 70, 71, 107, 168, 169, 176, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392, 408, 449, 466, 468], "numarrai": [2, 465], "574": 2, "codaci": 2, "572": 2, "pytrilino": [2, 16, 17, 465, 468], "unavail": [2, 11, 13, 46, 47, 56, 57, 157, 397], "570": 2, "shwina": 2, "569": 2, "gpu": [2, 16, 465], "via": [2, 8, 11, 14, 17, 122, 468], "pyamgx": [2, 17, 20, 36, 465, 466], "567": 2, "dedic": 2, "public": [2, 8, 12, 18, 20, 21, 387, 465, 466, 467, 472], "domain": [2, 17, 21, 31, 32, 36, 68, 69, 70, 72, 75, 77, 78, 85, 98, 99, 100, 104, 107, 117, 124, 144, 145, 146, 147, 149, 150, 154, 155, 157, 158, 161, 187, 202, 203, 318, 319, 321, 323, 324, 448, 468, 470], "556": 2, "550": 2, "546": 2, "ensur": [2, 77, 378, 382, 387], "dtype": 2, "float": [2, 10, 21, 47, 57, 68, 127, 128, 169, 173, 175, 176, 177, 202, 228, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "matrix": [2, 6, 8, 11, 16, 17, 20, 21, 68, 71, 77, 107, 144, 146, 147, 154, 155, 157, 161, 162, 169, 176, 232, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 289, 290, 293, 294, 295, 296, 297, 298, 300, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 465, 468, 469], "multipli": [2, 20, 21, 233, 339, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 378, 387], "544": 2, "revert": [2, 203], "issue534": 2, "physic": [2, 8, 14, 19, 21, 71, 99, 124, 157, 161, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 469, 471, 472], "field": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 36, 65, 71, 77, 96, 100, 101, 102, 103, 107, 124, 125, 130, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 169, 171, 344, 378, 387, 392, 404, 448, 469, 472], "mishandl": 2, "compound": 2, "unit": [2, 12, 20, 21, 99, 107, 114, 124, 125, 130, 146, 147, 373, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "536": 2, "532": 2, "race": [2, 394], "524": 2, "max": [2, 4, 16, 20, 31, 68, 71, 89, 101, 107, 124, 140, 161, 162, 169, 311, 344, 358, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448], "min": [2, 20, 31, 32, 33, 34, 36, 101, 116, 140, 161, 162, 169, 311, 344, 358, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448], "global": [2, 14, 17, 21, 374], "520": 2, "gitter": 2, "chat": 2, "516": 2, "badger": 2, "489": 2, "631": 2, "628": 2, "627": 2, "omp_num_thread": [2, 17], "625": [2, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "import": [2, 4, 8, 10, 16, 17, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 128, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 311, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 375, 378, 387, 388, 391, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 458, 475], "623": 2, "621": 2, "plot": [2, 17, 18, 20, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 123, 124, 125, 127, 128, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 401, 409, 413, 415, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 466], "617": 2, "pick": [2, 11], "1st": 2, "valu": [2, 6, 7, 8, 10, 19, 20, 21, 31, 32, 36, 39, 40, 49, 51, 54, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 123, 124, 125, 127, 128, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 173, 174, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 240, 241, 242, 244, 246, 280, 305, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 378, 387, 392, 393, 398, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 466, 468, 471, 476], "1d": [2, 18, 36, 46, 47, 48, 53, 56, 57, 74, 75, 77, 81, 87, 88, 89, 90, 93, 98, 99, 101, 102, 103, 104, 127, 128, 139, 146, 147, 156, 157, 162, 168, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 408, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465], "cellvari": [2, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 203, 213, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392, 401, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 458, 459, 460, 462, 463, 464, 466], "611": 2, "coeffici": [2, 4, 17, 20, 32, 36, 46, 47, 48, 56, 57, 64, 68, 74, 77, 88, 96, 98, 102, 107, 123, 124, 125, 130, 144, 145, 146, 147, 154, 155, 157, 168, 176, 177, 278, 279, 281, 282, 283, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 432, 466, 468, 469, 471], "cannot": [2, 6, 8, 9, 11, 16, 17, 21, 32, 71, 107, 146, 169, 188, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 339, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 465, 468], "610": 2, "anisotropi": [2, 6, 7, 8, 17, 19, 20, 145, 154, 155], "contour": [2, 18, 125, 127, 128, 144, 443, 444, 446, 465], "displai": [2, 17, 18, 20, 21, 36, 69, 70, 77, 90, 101, 103, 123, 124, 125, 127, 128, 130, 144, 154, 155, 382, 383, 392, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465], "legend": [2, 17, 439, 442], "608": 2, "var": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 128, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "object": [2, 4, 6, 8, 14, 16, 17, 20, 65, 69, 70, 77, 89, 111, 112, 116, 117, 122, 124, 127, 128, 139, 144, 154, 155, 157, 158, 168, 169, 171, 173, 174, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 233, 239, 247, 256, 258, 259, 260, 261, 262, 266, 267, 271, 276, 278, 279, 280, 281, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 311, 313, 314, 315, 317, 331, 332, 333, 334, 338, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 377, 378, 380, 387, 388, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 466, 468, 475], "callabl": 2, "603": 2, "basic": [2, 8, 11, 16, 17, 19, 21, 139, 203, 393], "602": 2, "592": 2, "590": 2, "pyamgsolv": 2, "584": 2, "anim": [2, 127, 128], "jupyt": [2, 11], "notebook": [2, 11], "566": 2, "565": 2, "empti": [2, 154, 155, 374], "env": [2, 11, 391], "564": 2, "board": 2, "561": 2, "cast": [2, 8, 378, 387, 468, 472], "data": [2, 16, 18, 20, 21, 36, 124, 127, 128, 145, 149, 150, 171, 203, 387, 388, 391, 392, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 466, 475], "int64": 2, "int32": 2, "accord": [2, 157], "rule": [2, 34, 140, 146, 147], "safe": [2, 64, 376], "555": 2, "551": 2, "spew": 2, "545": 2, "543": 2, "integ": [2, 77, 169, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "539": 2, "explicit": [2, 8, 11, 17, 20, 32, 71, 77, 124, 145, 146, 147, 150, 157, 161, 169, 170, 339, 348, 355, 356, 359, 363, 364, 370, 371, 468, 471], "mixedel": [2, 20], "538": 2, "534": 2, "physicalfield": [2, 20, 99, 101, 378, 437], "533": 2, "531": 2, "drop_tol": 2, "spars": [2, 11, 16, 157, 171, 179, 232, 248, 249, 271, 296, 298, 299, 300, 465, 468], "linalg": [2, 16, 271, 296, 298, 299, 300], "splu": [2, 271, 296], "gone": 2, "530": 2, "instruct": [2, 7, 9, 11, 17, 475, 476], "528": 2, "525": [2, 100], "guyer": [2, 4, 14, 96, 472], "osx": 2, "513": 2, "give": [2, 8, 11, 16, 17, 21, 101, 103, 130, 156, 157, 203, 344, 374, 408], "510": 2, "weav": [2, 8, 11, 17, 21, 465], "509": 2, "unabl": 2, "506": 2, "spatial": [2, 8, 20, 31, 33, 34, 77, 107, 466], "vari": [2, 8, 20, 21, 69, 70, 77, 85, 149, 448, 466], "anisotrop": [2, 4, 19, 20, 68, 144, 154, 155, 466], "488": 2, "break": [2, 10, 17, 31, 101, 161, 162], "gmshgrid": 2, "435": 2, "fatal": 2, "spmatrix": 2, "h": [2, 14, 17, 154, 155, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 469, 472], "found": [2, 7, 9, 11, 16, 17, 21, 46, 47, 48, 56, 57, 77, 107, 125, 144, 146, 147, 154, 155, 157, 168, 169, 170, 233, 465, 473, 474, 475, 477], "434": 2, "ez_setup": 2, "502": 2, "gmane": [2, 3, 8], "defunct": [2, 3, 465], "recvobj": 2, "allgath": [2, 20, 311], "sendobj": [2, 311], "492": 2, "restor": [2, 16], "trail": 2, "whitespac": 2, "expect": [2, 7, 8, 17, 74, 75, 77, 146, 147, 157, 392, 468], "485": 2, "pep": [2, 10, 465], "440": 2, "483": 2, "provid": [2, 3, 6, 8, 9, 11, 12, 15, 16, 17, 19, 21, 85, 98, 99, 100, 124, 171, 203, 246, 331, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 394, 458, 465, 468, 475, 476], "_facetocelldistanceratio": [2, 17], "why": [2, 16, 17, 20, 233, 374, 466], "scalar": [2, 16, 17, 169, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 289, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "481": 2, "strip": 2, "white": 2, "space": [2, 21, 47, 57, 77, 125, 130, 140, 146, 147, 157, 169, 201, 202, 231, 415, 469], "eof": 2, "r": [2, 14, 19, 31, 32, 33, 34, 39, 40, 46, 47, 56, 57, 65, 68, 77, 107, 124, 125, 127, 130, 140, 144, 146, 147, 154, 155, 156, 161, 162, 203, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 451, 452, 472], "479": 2, "uniformgrid3d": [2, 202], "_celltocellid": 2, "concaten": [2, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "478": 2, "pkgw": 2, "incorrect": [2, 77, 339, 392], "axi": [2, 8, 19, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 114, 168, 169, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442], "477": 2, "472": 2, "471": 2, "sort": 2, "entri": [2, 17, 175, 176, 387], "469": 2, "syntax": [2, 11, 15, 17, 21, 146, 147, 168, 169, 170], "466": 2, "465": 2, "implement": [2, 6, 11, 14, 15, 16, 17, 20, 107, 130, 145, 146, 147, 171, 175, 176, 177, 188, 203, 207, 223, 232, 305, 332, 339, 376, 434, 438, 450, 454, 456, 461, 466, 467], "cahnhilliard": [2, 6, 7, 8, 17, 20], "mesh2dcoupl": [2, 7, 8, 17, 20], "463": [2, 14], "typeset": 2, "analyt": [2, 8, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 64, 65, 68, 69, 70, 72, 74, 75, 77, 81, 101, 102, 103, 104, 157, 168, 368], "solut": [2, 6, 8, 15, 16, 17, 21, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 116, 117, 144, 145, 146, 147, 149, 150, 154, 155, 157, 168, 169, 171, 177, 233, 239, 247, 279, 280, 283, 284, 289, 290, 305, 313, 314, 315, 317, 331, 333, 334, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 465, 468, 470, 471], "460": 2, "pdflatex": 2, "head": [2, 6], "459": [2, 387], "purg": 2, "gist": 2, "456": [2, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371], "duplic": [2, 3, 374, 378, 387, 404, 408, 412, 417, 422, 428, 431, 432, 433, 437], "ufunc": [2, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "454": 2, "452": 2, "getter": [2, 170], "setter": [2, 170], "450": 2, "448": 2, "ipython": [2, 17, 465], "447": 2, "proper": [2, 107, 203], "446": 2, "robust": [2, 232], "distutil": [2, 397], "strictvers": 2, "442": 2, "compar": [2, 6, 11, 17, 36, 68, 77, 125, 144, 145, 149, 150, 157, 203, 368, 378, 387, 392, 401, 409, 413, 415], "tupl": [2, 8, 98, 99, 100, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 388, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 468], "441": 2, "two": [2, 8, 10, 11, 16, 17, 19, 21, 31, 32, 71, 78, 79, 98, 99, 100, 101, 103, 107, 116, 144, 146, 147, 149, 150, 154, 155, 156, 161, 168, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 392, 408, 432, 468, 472, 475], "439": 2, "alfrenardi": 2, "issue426": 2, "typo": 2, "431": 2, "raybsmith": 2, "429": 2, "matplotlibview": [2, 8, 20, 154, 155], "428": 2, "period": [2, 85, 150, 213, 214, 215], "3d": [2, 18, 33, 101, 140, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 465], "424": 2, "419": 2, "498": 2, "nonlinear": [2, 8], "496": 2, "linearbicgstabsolv": [2, 20], "take": [2, 6, 16, 17, 20, 21, 74, 77, 101, 114, 144, 146, 147, 154, 155, 156, 157, 161, 169, 170, 199, 203, 209, 211, 214, 220, 228, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466], "494": 2, "493": 2, "review": [2, 14, 20, 466, 472], "io": [2, 11, 13, 16, 378, 394, 465], "access": [2, 17, 19, 21, 144, 154, 155, 169, 378, 394, 475], "leav": [2, 11, 19, 77, 107, 146, 147], "comment": [2, 11, 17, 21], "491": 2, "mpi4pi": [2, 11, 16, 17, 311, 465], "484": 2, "482": 2, "compliant": 2, "476": 2, "setuptool": 2, "suit": [2, 3, 11, 16, 17, 124, 171, 239, 247, 260, 261, 271, 279, 280, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 317, 331, 333, 334, 372, 465, 468], "475": 2, "grid3d": [2, 20, 33, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 451, 452], "470": 2, "mesh3d": [2, 20], "celltocellid": 2, "467": 2, "sequenc": [2, 21, 378, 387, 392], "462": 2, "incorrectli": 2, "455": 2, "445": 2, "dendriteview": [2, 144], "put": [2, 17, 20, 31, 33, 34, 169, 378, 387, 392, 396, 466], "over": [2, 10, 17, 21, 31, 32, 33, 34, 36, 60, 77, 85, 98, 107, 117, 144, 146, 147, 156, 157, 169, 170, 281, 283, 392, 429, 443, 444, 468, 470, 471], "bar": [2, 154, 155, 156, 161, 376, 387, 439, 440, 441, 443, 444, 445, 446], "443": 2, "api": [2, 8, 16], "nice": [2, 443, 444, 465], "438": 2, "437": 2, "mislead": 2, "433": 2, "430": 2, "427": 2, "425": [2, 154, 155], "warren": [2, 4, 14, 96, 144, 145, 149, 150, 154, 155, 472], "421": 2, "matplotlib2dgridview": [2, 20, 144, 154, 155], "function": [2, 8, 10, 11, 17, 19, 21, 31, 32, 36, 69, 70, 77, 96, 100, 111, 112, 117, 122, 124, 125, 130, 146, 147, 149, 156, 157, 161, 169, 170, 171, 180, 199, 202, 203, 209, 211, 214, 220, 228, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 382, 383, 387, 388, 391, 392, 393, 394, 396, 408, 429, 438, 439, 453, 460, 468, 469, 470, 475], "416": 2, "reflect": [2, 378, 387, 404, 408, 412, 417, 422, 428, 431, 432, 433, 437], "415": 2, "matplotlibgrid2dview": 2, "414": 2, "periodicgrid3d": [2, 20], "413": 2, "remind": 2, "user": [2, 3, 8, 9, 11, 13, 15, 16, 17, 19, 21, 31, 32, 33, 34, 77, 144, 154, 155, 157, 168, 169, 170, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 433, 436, 437, 471], "differ": [2, 8, 9, 11, 16, 17, 19, 21, 31, 32, 33, 34, 69, 70, 74, 77, 88, 89, 90, 93, 96, 98, 99, 100, 103, 123, 125, 130, 146, 147, 149, 150, 157, 158, 168, 169, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 339, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 448, 455, 468, 470, 472], "conserv": [2, 8, 17, 20, 31, 32, 71, 77, 124, 144, 146, 147, 154, 155, 161, 429, 433, 466, 470], "412": 2, "pickl": [2, 8, 149, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 236, 237, 238, 305, 310, 311, 312, 339, 380, 381, 388, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438], "commun": [2, 3, 15, 16, 17, 21, 68, 112, 114, 116, 117, 124, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 236, 237, 310, 311, 378, 380, 388, 394, 408], "unnecessari": 2, "grid": [2, 17, 77, 107, 146, 147, 150, 157, 198, 199, 200, 201, 202, 210, 211, 213, 214, 215, 220, 221, 222, 230, 231, 432, 448, 465, 470], "408": 2, "407": 2, "strang": 2, "loop": [2, 34, 69, 70, 74, 77, 78, 79, 89, 107, 124, 140, 156, 203], "reshap": [2, 20, 144, 154, 155, 378, 387, 392], "404": 2, "never": [2, 9, 11, 157, 475], "401": 2, "sweep": [2, 16, 17, 20, 64, 68, 71, 77, 101, 102, 107, 146, 147, 157, 161, 162, 169, 170, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 466], "instead": [2, 3, 8, 9, 11, 17, 19, 21, 77, 107, 123, 146, 147, 150, 157, 168, 169, 170, 335, 338, 383, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 475], "295": 2, "must": [2, 6, 10, 16, 17, 21, 31, 32, 48, 72, 77, 99, 102, 104, 107, 144, 146, 147, 149, 150, 154, 155, 157, 168, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 339, 348, 355, 356, 359, 363, 370, 371, 376, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 443, 444, 448, 458, 468, 471, 476], "zizou": 2, "signific": [2, 6, 9, 11, 16, 171], "level": [2, 4, 15, 16, 17, 20, 23, 111, 112, 114, 116, 117, 171, 245, 318, 323, 324, 325, 326, 327, 328, 329, 394, 408, 443, 444, 465, 466, 472], "handl": [2, 11, 21, 46, 47, 48, 56, 57, 146, 147, 168, 203], "lsmlib": [2, 10, 17, 20, 408, 466], "scikit": [2, 17, 20, 408, 466], "fmm": [2, 17, 20, 408, 466], "librari": [2, 11, 16, 17, 21, 22, 46, 47, 56, 57, 69, 70, 75, 77, 146, 147, 157, 393, 465, 468], "magnitud": [2, 17, 31, 32, 77, 96, 344, 358, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 449], "faster": [2, 6, 17, 21, 157, 471], "than": [2, 3, 6, 8, 10, 11, 15, 16, 17, 21, 62, 63, 77, 125, 146, 147, 149, 157, 168, 169, 170, 203, 245, 289, 344, 358, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 443, 444, 468, 475], "prototyp": 2, "streamplot": [2, 448], "control": [2, 14, 19, 31, 32, 33, 34, 124, 125, 130, 139, 161, 336, 337, 448, 468], "git": [2, 20, 169, 170, 466, 467, 472], "much": [2, 3, 7, 8, 17, 21, 31, 32, 77, 146, 147, 157, 168, 169, 233, 475], "particip": 2, "398": [2, 472], "home": [2, 22], "redirect": [2, 8], "397": 2, "sphinxcontrib": [2, 17], "bibtex": [2, 17], "396": 2, "googl": [2, 3, 16, 465], "395": 2, "ubuntu": 2, "393": 2, "cylindricalnonuniformgrid2d": [2, 20, 202], "exteriorfac": [2, 17, 20, 69, 70, 93, 107, 161, 162, 169, 200, 213, 214, 215, 222, 230], "392": 2, "exit_nist": 2, "cgi": 2, "391": 2, "p\u00e9clet": [2, 48, 60, 168, 169], "inequ": [2, 471], "sign": [2, 3, 20, 169, 378, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "388": 2, "64": 2, "int": [2, 111, 114, 124, 139, 149, 161, 177, 199, 202, 203, 209, 211, 214, 220, 228, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 339, 378, 392, 394, 404, 412, 417, 422, 428, 429, 431, 437, 443, 444, 449], "384": 2, "382": 2, "381": 2, "377": 2, "vanleerconvectionterm": [2, 20, 161, 162, 468, 471], "minmod": 2, "slope": 2, "376": 2, "committicketupdat": 2, "375": [2, 100, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 472], "_formatinteg": 2, "373": 2, "372": 2, "cylindr": [2, 46, 47, 56, 57, 198, 199, 200, 201, 202], "371": 2, "binari": [2, 6, 7, 9, 10, 11, 14, 20, 21, 103, 147, 156, 180, 203, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 472], "370": 2, "368": 2, "well": [2, 3, 8, 9, 11, 15, 17, 21, 31, 32, 96, 146, 147, 156, 157, 168, 169, 171, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 469], "367": 2, "promot": 2, "366": 2, "unop": [2, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "365": 2, "renam": [2, 168, 169], "instanc": [2, 7, 17, 48, 169, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 460], "364": 2, "factori": [2, 77, 156, 168, 202, 438, 439, 460], "360": 2, "css": 2, "356": 2, "353": 2, "ohloh": 2, "repo": 2, "352": 2, "getvers": 2, "350": 2, "element": [2, 6, 15, 36, 69, 70, 75, 96, 122, 139, 203, 207, 208, 209, 336, 344, 366, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 468, 470, 472], "347": 2, "activ": [2, 9, 11, 17, 21, 391], "frame": [2, 8, 451, 452], "front": [2, 144, 154, 155, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 433], "339": 2, "loki": 2, "337": 2, "interact": [2, 3, 7, 11, 15, 17, 19, 21, 36, 46, 47, 48, 53, 56, 57, 62, 72, 74, 77, 81, 98, 99, 100, 101, 102, 103, 104, 124, 145, 146, 147, 149, 150, 156, 157, 168, 378, 387, 457], "between": [2, 11, 17, 20, 21, 31, 32, 77, 96, 98, 123, 125, 144, 146, 147, 150, 154, 155, 157, 161, 168, 169, 202, 220, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 387, 392, 408, 428, 465, 466, 468, 471], "336": 2, "clash": 2, "334": 2, "citat": [2, 17], "go": [2, 21, 98, 99, 100, 144, 145, 146, 147, 149, 150, 154, 155], "doi": [2, 14, 472], "333": 2, "seem": [2, 16, 17, 168, 448, 475], "331": 2, "330": 2, "facevalu": [2, 20, 146, 147, 156, 161, 162, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "facecent": [2, 17, 69, 70, 77, 78, 79, 93, 107, 146, 147, 156, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "329": 2, "background": [2, 8, 20, 21, 203, 466, 467], "326": 2, "gmsh2d": [2, 17, 20, 68, 69, 70, 89, 122, 170, 203], "323": 2, "getfacecent": [2, 169], "return": [2, 17, 32, 69, 70, 77, 78, 79, 98, 99, 100, 101, 102, 103, 104, 116, 146, 147, 149, 154, 155, 156, 157, 161, 162, 168, 169, 173, 174, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 289, 290, 293, 294, 295, 296, 297, 302, 303, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317, 331, 332, 333, 334, 335, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 380, 381, 383, 387, 388, 391, 392, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 453, 460], "319": 2, "transientterm": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 60, 68, 69, 70, 71, 74, 75, 77, 78, 79, 85, 98, 99, 100, 101, 102, 103, 111, 112, 114, 116, 117, 124, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 169, 170, 339, 348, 355, 356, 359, 363, 370, 371, 468], "dt": [2, 8, 17, 31, 32, 33, 34, 36, 39, 40, 60, 68, 69, 70, 71, 74, 75, 77, 78, 79, 85, 98, 99, 100, 101, 102, 103, 111, 112, 114, 124, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 170, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 413], "318": 2, "311": 2, "305": 2, "mpirun": [2, 17], "np": [2, 17], "wd": 2, "hang": 2, "sandbox": 2, "buildbot": [2, 4, 465], "297": 2, "gnuplot": 2, "291": [2, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371], "efficiency_test": 2, "choke": 2, "liquidvapor2d": [2, 20], "289": [2, 472], "diffusionterm": [2, 8, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 71, 72, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 168, 169, 344, 347, 348, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 370, 371, 468], "_test": 2, "287": 2, "275": 2, "274": 2, "norm2": 2, "272": 2, "269": 2, "gridxd": 2, "255": 2, "5": [2, 6, 8, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 54, 64, 68, 69, 70, 71, 72, 77, 85, 89, 101, 102, 103, 104, 107, 112, 114, 116, 117, 124, 125, 130, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 171, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 332, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 446, 448, 449, 451, 452, 458, 468, 471, 472], "mask": [2, 8, 17, 116, 169, 173, 175, 176, 177, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "253": 2, "promin": 2, "245": [2, 130], "_binaryterm": 2, "228": 2, "attempt": [2, 11, 17, 18, 21, 77, 168, 171, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 451, 452], "mpi": [2, 16, 20, 202, 236, 237, 310, 311, 378, 380, 382, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 465, 466], "225": 2, "mostli": [2, 202, 203], "209": [2, 107], "rhie": [2, 107], "chow": [2, 107], "180": [2, 154, 155], "arithmet": [2, 8, 21, 150, 154, 155, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 465], "face": [2, 8, 17, 21, 31, 33, 34, 36, 65, 69, 70, 77, 81, 107, 139, 146, 147, 149, 150, 154, 155, 161, 168, 169, 173, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 449, 468], "cell": [2, 6, 8, 14, 17, 19, 20, 21, 31, 33, 34, 47, 57, 64, 68, 69, 70, 77, 78, 79, 107, 125, 130, 139, 146, 147, 161, 169, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 446, 448, 449, 458, 466, 470, 472], "distanc": [2, 17, 111, 112, 117, 124, 161, 408, 468], "calcul": [2, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 33, 34, 48, 69, 70, 77, 85, 107, 117, 124, 146, 147, 161, 168, 169, 171, 207, 208, 209, 233, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "128": 2, "123": [2, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 392], "numerix": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 74, 75, 77, 78, 79, 89, 99, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 468], "dot": [2, 17, 20, 68, 101, 102, 103, 107, 123, 124, 125, 145, 169, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "tensor": [2, 20, 88, 144, 154, 155, 466], "103": 2, "subscrib": [2, 3], "_markstal": 2, "attributeerror": [2, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "61": 2, "implicitdiffusionterm": [2, 20, 168, 169, 177, 468], "simpl": [2, 7, 8, 17, 19, 20, 21, 31, 32, 69, 70, 77, 98, 101, 102, 104, 107, 125, 146, 147, 149, 150, 156, 344, 358, 387, 408, 432, 433, 453, 470], "mesh1d": [2, 7, 8, 15, 17, 20, 49, 54, 58, 59, 63, 75, 87, 88, 89, 93, 99, 100, 103, 146, 147, 210, 468], "346": 2, "text": [2, 7, 8, 15, 17, 21, 32, 36, 46, 48, 53, 56, 57, 72, 77, 81, 96, 98, 102, 103, 104, 114, 124, 127, 128, 146, 147, 149, 150, 154, 155, 156, 157, 168, 175, 176, 177, 233, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 394, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469, 471], "trunk": 2, "342": 2, "transient": [2, 15, 17, 20, 69, 70, 74, 75, 77, 78, 79, 96, 145, 156, 157, 171, 466, 469, 470], "implicit": [2, 8, 11, 17, 32, 77, 78, 79, 81, 145, 146, 147, 149, 150, 156, 157, 168, 339, 361, 364, 365, 468], "338": 2, "svntogit": 2, "bump": [2, 14], "increas": [2, 8, 16, 21, 31, 32, 33, 34, 60, 71, 77, 161, 203, 233, 245, 443, 444, 468, 471], "capabl": [2, 6, 8, 11, 16, 17, 18, 21, 236, 237, 310, 311, 380, 468], "eas": 2, "few": [2, 17, 19, 21, 72, 123, 408, 473, 474, 475, 477], "exist": [2, 3, 9, 10, 11, 21, 124, 130, 144, 154, 155, 168, 169, 171, 203, 374, 378, 387, 428, 465, 469, 475], "A": [2, 8, 9, 11, 12, 14, 16, 17, 18, 21, 31, 32, 64, 68, 74, 85, 98, 102, 104, 107, 124, 125, 127, 128, 130, 139, 144, 145, 146, 147, 149, 150, 154, 155, 157, 162, 169, 170, 171, 188, 203, 233, 240, 241, 242, 243, 244, 246, 289, 335, 336, 344, 368, 374, 377, 378, 387, 388, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 472], "mechan": [2, 8, 14, 17, 21, 123, 130, 149, 465, 472], "specifi": [2, 5, 10, 17, 19, 75, 77, 169, 170, 175, 176, 177, 202, 203, 283, 339, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 465, 468, 475, 476], "most": [2, 6, 7, 8, 9, 11, 16, 17, 18, 21, 46, 47, 48, 56, 57, 68, 77, 123, 168, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 348, 355, 356, 359, 363, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 465, 468, 475], "partit": [2, 4, 17, 169, 203], "pyamg": [2, 17, 20, 465, 466], "pervas": [2, 4, 10], "full": [2, 4, 11, 21, 96, 125, 156, 168, 171, 475], "namespac": [2, 17, 169, 170], "update2_0to3_0": [2, 7, 20], "detail": [2, 8, 11, 15, 16, 17, 21, 46, 47, 48, 56, 57, 69, 70, 107, 146, 147, 149, 150, 154, 155, 168, 260, 332, 348, 355, 356, 359, 363, 370, 374, 393], "contain": [2, 7, 8, 11, 21, 22, 103, 107, 124, 158, 169, 170, 207, 208, 209, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 473, 474, 477], "timestep": [2, 20, 77, 81, 101, 144, 146, 147, 154, 155, 157, 161, 162, 168, 169, 170, 336, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 415, 466], "brought": 2, "unavoid": 2, "guidanc": [2, 8], "332": 2, "x86_64": 2, "324": 2, "constrain": [2, 17, 20, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 88, 89, 93, 101, 104, 107, 124, 156, 161, 162, 170, 174, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438], "implicitsourceterm": [2, 17, 20, 31, 32, 39, 40, 64, 65, 101, 102, 103, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 169, 368, 468], "317": [2, 14], "gmshimport": [2, 10], "due": [2, 6, 8, 16, 64, 69, 70, 125, 144, 146, 147, 154, 155, 161, 245, 374, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468], "share": [2, 19, 378, 394], "316": 2, "313": 2, "307": 2, "306": [2, 472], "302": 2, "301": 2, "pycomm": 2, "debian": 2, "300": [2, 107, 413], "mesh2d": [2, 6, 20, 33, 34, 199, 203, 211, 214, 220, 228], "299": 2, "298": [2, 101, 124, 125, 130], "consumpt": [2, 123, 125], "growth": [2, 6, 19, 21, 145, 154, 155, 472], "repeat": [2, 157], "especi": [2, 19, 21, 471], "294": 2, "293": 2, "sphere": [2, 7, 8, 20], "segfault": 2, "292": 2, "290": 2, "improv": [2, 4, 6, 11, 16, 17, 71, 107, 157, 168, 170, 392, 465, 468, 471], "inconsequenti": 2, "288": 2, "themselv": 2, "286": 2, "285": 2, "284": 2, "transpos": [2, 68], "281": 2, "nthorderdiffusionterm": 2, "280": 2, "convectionterm": [2, 8, 17, 60, 65, 146, 161, 162, 168, 169], "277": 2, "step": [2, 6, 8, 11, 13, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 69, 70, 71, 74, 75, 77, 78, 79, 100, 101, 102, 111, 112, 114, 123, 124, 125, 130, 144, 145, 146, 147, 149, 150, 157, 161, 162, 168, 169, 203, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 335, 337, 338, 368, 408, 415, 468], "273": 2, "diffusiontermnocorrect": [2, 20, 350], "270": [2, 154, 155], "too": [2, 8, 11, 16, 17, 31, 33, 34, 233, 289], "267": [2, 472], "reduc": [2, 6, 21, 77, 102, 146, 147, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468, 470], "time": [2, 6, 8, 9, 11, 15, 17, 19, 21, 22, 31, 32, 33, 34, 68, 71, 74, 75, 77, 78, 79, 98, 102, 111, 112, 123, 124, 125, 130, 144, 145, 146, 147, 149, 150, 154, 155, 157, 161, 162, 169, 176, 199, 203, 209, 211, 214, 220, 228, 335, 338, 368, 415, 438, 468, 469, 471], "chemotaxi": [2, 20], "264": 2, "input2d": [2, 20], "261": 2, "260": 2, "259": 2, "shorthand": [2, 475], "cellcent": [2, 8, 20, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 72, 74, 75, 77, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 111, 112, 114, 116, 117, 124, 127, 128, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452], "etc": [2, 169, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "258": [2, 472], "gmshexport": 2, "252": 2, "benni": [2, 107], "interpol": [2, 31, 33, 34, 107, 125, 146, 147, 157, 161, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 448, 468, 470], "patch": [2, 3, 8, 78, 79, 448], "250": [2, 124, 125, 130], "tex": 2, "quaternari": [2, 7, 20, 103], "247": 2, "var1": [2, 17, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "var0": [2, 17, 458], "sensibli": 2, "243": [2, 388], "reconstrain": 2, "242": 2, "240": 2, "profil": [2, 39, 72, 74, 75, 77, 104], "merg": [2, 9, 11, 20, 374, 466], "237": 2, "236": 2, "mix": [2, 207, 208, 209, 339, 465], "235": 2, "propag": 2, "231": [2, 336], "factorymesh": [2, 20], "keyword": [2, 8, 125, 127, 128, 130, 374, 376, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "223": [2, 439], "218": 2, "absenc": [2, 16], "enthought": [2, 10, 18, 465], "216": 2, "fresh": [2, 9, 11, 17], "213": 2, "206": 2, "gnuplot1d": 2, "205": 2, "normal": [2, 17, 124, 214, 215, 280, 284, 335, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 448, 468], "203": 2, "help": [2, 3, 7, 8, 11, 16, 17, 168, 169, 170, 171, 374, 453], "202": 2, "manipul": [2, 7, 169, 475], "lead": [2, 17, 123, 144, 154, 155, 468, 471], "201": [2, 336], "veloc": [2, 8, 14, 65, 107, 111, 112, 114, 124, 146, 147, 157, 161, 468], "faq": [2, 3, 8, 169], "200": [2, 60, 72, 77, 101, 104, 114, 125, 127, 154, 155], "195": 2, "multipl": [2, 6, 8, 10, 11, 17, 21, 69, 70, 77, 104, 156, 177, 387, 438, 465, 468], "result": [2, 6, 7, 8, 10, 12, 16, 17, 18, 31, 32, 33, 34, 36, 46, 47, 48, 51, 53, 56, 57, 58, 62, 65, 69, 70, 72, 74, 75, 77, 78, 79, 81, 85, 89, 93, 98, 99, 100, 101, 103, 104, 107, 111, 112, 116, 117, 123, 124, 125, 130, 144, 146, 147, 154, 155, 157, 158, 161, 168, 169, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 245, 344, 368, 378, 387, 391, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 448, 465, 468, 471], "163": [2, 472], "infinit": [2, 8, 36, 72, 75, 77, 104, 157], "162": [2, 107], "ones": [2, 8, 11, 139, 154, 155, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "130": 2, "86": 2, "ly": [2, 114, 116, 127, 128, 169, 202], "lz": [2, 202], "77": [2, 6, 392], "hasold": [2, 8, 39, 40, 68, 71, 77, 101, 103, 111, 112, 114, 116, 117, 124, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 368, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "self": [2, 10, 11, 96, 98, 99, 100, 101, 102, 103, 104, 127, 128, 144, 154, 155, 173, 174, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 289, 290, 293, 294, 295, 296, 297, 302, 303, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317, 331, 332, 333, 334, 339, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 378, 380, 381, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 475, 476], "old": [2, 8, 17, 20, 32, 77, 144, 145, 146, 147, 149, 150, 154, 157, 161, 162, 169, 170, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 388, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "44": [2, 378, 387], "282": 2, "279": 2, "nummesh": [2, 170], "submodul": 2, "278": 2, "form": [2, 15, 16, 17, 20, 21, 31, 32, 33, 34, 36, 68, 71, 77, 85, 102, 107, 122, 125, 146, 147, 150, 156, 157, 161, 169, 170, 289, 350, 364, 378, 387, 466, 468, 469, 471, 475], "268": 2, "slave": 2, "262": 2, "256": 2, "grid1d": [2, 17, 20, 36, 39, 48, 51, 53, 60, 62, 64, 65, 71, 72, 74, 77, 81, 98, 99, 101, 102, 103, 104, 112, 117, 146, 147, 150, 156, 157, 161, 168, 169, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 388, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 451, 452, 458], "251": 2, "241": 2, "238": 2, "predict": [2, 14, 107, 146, 147, 471, 472], "233": 2, "treat": [2, 8, 21, 157, 455], "upwind": [2, 17, 344, 355, 358, 370, 471], "224": [2, 439], "align": [2, 8, 17, 36, 71, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "222": 2, "__add__": [2, 20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387], "221": [2, 439], "219": 2, "matforg": 2, "hammer": 2, "208": 2, "207": 2, "ndarrai": [2, 335, 392, 437], "196": 2, "won": [2, 9, 11, 17, 144, 154, 155, 476], "152": 2, "re": [2, 8, 11, 21, 64, 68, 77, 103, 104, 147, 156, 157, 337, 378, 387], "138": 2, "100": [2, 6, 10, 19, 31, 32, 33, 34, 36, 39, 40, 46, 47, 56, 57, 64, 71, 74, 75, 77, 101, 107, 127, 139, 140, 145, 146, 147, 149, 150, 154, 155, 161, 162, 378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 439, 442, 444, 445, 448, 449, 451, 452], "80": [2, 107], "idl": [2, 17], "46": [2, 472], "45": [2, 98, 99, 100, 124, 130, 378, 387, 458, 472], "slice": [2, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "produc": [2, 8, 17, 393, 417, 465], "effici": [2, 16, 17, 20, 21, 46, 47, 48, 56, 57, 168, 466, 467, 468], "diagnost": [2, 17], "232": 2, "becaus": [2, 8, 10, 11, 17, 21, 31, 32, 33, 34, 60, 72, 77, 103, 104, 107, 144, 146, 147, 150, 154, 155, 157, 161, 168, 169, 344, 374, 408], "sighup": 2, "230": 2, "226": 2, "backend": [2, 8], "flush_ev": 2, "217": 2, "unpickl": [2, 388], "191": 2, "spheredaemon": [2, 20, 34], "miss": [2, 10, 11], "187": 2, "garbl": 2, "complet": [2, 11, 16, 17, 20, 21, 125, 169, 170, 233, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 466, 468], "independ": [2, 8, 11, 17, 21, 146, 147, 161, 468], "199": 2, "dummi": [2, 17, 103], "notimplementederror": [2, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 339], "instanti": [2, 16, 17, 21, 63, 124, 168, 180, 339, 387, 401, 404, 408, 409, 413, 415, 417, 429, 433, 436], "abstract": [2, 8, 21, 168, 173, 246, 247, 254, 256, 280, 284, 287, 290, 301, 303, 304, 305, 330, 331, 334, 339, 347, 357, 365, 366, 422, 429, 441, 459, 475], "198": 2, "cylindricalgrid1d": [2, 20, 46, 47, 202], "197": 2, "tell": [2, 20, 31, 32, 33, 34, 124, 168, 466], "194": [2, 472], "larg": [2, 6, 8, 11, 16, 17, 21, 77, 122, 146, 147, 233, 289, 344, 374, 393, 415], "valueerror": [2, 8, 10, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "193": 2, "192": 2, "typeerror": [2, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 339, 378, 387], "small": [2, 8, 16, 31, 32, 77, 124, 130, 144, 145, 154, 155, 161, 233, 289, 378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "beli": 2, "advanc": [2, 8, 77], "did": [2, 144, 154, 155], "increment": [2, 168], "er": 2, "older": [2, 3, 7, 8], "simul": [2, 6, 11, 14, 17, 19, 31, 32, 33, 34, 85, 123, 124, 125, 130, 144, 149, 150, 154, 155, 171, 202, 203, 336, 415, 472], "entir": [2, 17, 34, 140, 144, 154, 155, 161], "avail": [2, 5, 9, 11, 12, 13, 16, 17, 18, 34, 69, 70, 75, 77, 124, 146, 147, 157, 171, 453, 465, 468, 471, 475], "our": [2, 3, 8, 9, 11, 16, 17, 77, 157, 168, 169, 170, 171], "itself": [2, 17, 168, 169, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "190": 2, "rang": [2, 8, 36, 39, 40, 68, 69, 70, 71, 74, 75, 77, 78, 79, 98, 99, 100, 101, 102, 103, 107, 111, 112, 114, 124, 127, 128, 144, 145, 146, 147, 149, 150, 156, 157, 158, 203, 311, 368, 412, 415, 431, 432, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 469], "182": 2, "binop": [2, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "2_0": [2, 169], "179": [2, 107], "easy_instal": 2, "177": 2, "169": 2, "webpag": 2, "internet": 2, "explor": [2, 11, 21], "156": 2, "153": [2, 14, 472], "math": [2, 3, 145], "direct": [2, 10, 12, 16, 17, 31, 32, 33, 34, 87, 169, 177, 201, 202, 203, 220, 228, 243, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 448, 465, 475], "symmetri": [2, 19, 20, 144, 154, 155, 201, 245], "getcel": [2, 169], "enforc": 2, "both": [2, 7, 8, 11, 13, 16, 17, 18, 21, 46, 47, 48, 56, 57, 75, 77, 103, 107, 125, 146, 147, 168, 169, 232, 245, 311, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 469], "clearer": [2, 8, 168, 169], "levelset": [2, 6, 7, 8, 20], "distancefunct": [2, 7, 20, 127, 128], "comparison": [2, 20, 107, 145, 146, 147, 466], "subtl": 2, "unlik": [2, 77, 168, 475], "affect": [2, 8, 17], "veri": [2, 6, 8, 9, 11, 16, 17, 21, 122, 146, 147, 154, 155, 156, 157, 169, 170, 289, 374, 408, 475], "188": 2, "smtpsenderrefus": 2, "553": 2, "trac": [2, 465], "matdl": 2, "osi": 2, "org": [2, 3, 8, 11, 16, 17, 69, 70, 248, 249, 393, 465, 472], "sender": 2, "address": [2, 3, 11, 21], "184": [2, 387], "exportasmesh": 2, "183": 2, "linearjorsolv": [2, 20], "__init__": [2, 10, 98, 99, 100, 101, 103, 104, 144, 154, 155, 476], "rather": [2, 8, 10, 17, 21, 62, 63, 77, 149, 157, 168, 169, 378, 387, 433, 468, 473, 474, 475, 477], "pysparsesolv": [2, 20, 280, 281, 282, 284, 285, 286, 287, 288], "181": 2, "151": [2, 472], "mayavi2": [2, 453], "13": [2, 6, 98, 144, 145, 150, 154, 155, 157, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 472], "176": 2, "win32": 2, "175": [2, 336], "offset": [2, 169, 378, 387, 415, 417, 436], "170": 2, "__invert__": [2, 20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "154": [2, 14], "update1_0to2_0": [2, 7, 20], "hold": [2, 12, 17, 77, 124, 174, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "rank": [2, 8, 20, 68, 107, 162, 169, 311, 348, 355, 356, 359, 363, 370, 371, 378, 382, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 448, 449, 458, 460, 466, 468], "simpler": [2, 21, 168], "determin": [2, 8, 21, 31, 32, 157, 161, 203, 335, 350, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 440, 441, 443, 444, 445, 446, 448, 449, 468, 469], "diagon": [2, 8, 17, 107, 157, 161, 169, 228, 232, 239, 298, 300], "hand": [2, 8, 21, 31, 32, 65, 77, 102, 169, 245, 284, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "side": [2, 17, 19, 65, 72, 77, 102, 104, 146, 147, 203, 245, 284, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "simplifi": [2, 10, 104, 146, 147, 156, 169, 170], "167": 2, "166": 2, "vectorcel": 2, "vectorfac": 2, "165": 2, "section": [2, 6, 8, 11, 12, 17, 69, 70, 77, 145, 161, 168, 337, 468], "149": 2, "143": 2, "141": 2, "toolset": 2, "140": [2, 472], "136": 2, "135": 2, "127": 2, "fragil": [2, 11], "54": [2, 378, 387], "161": 2, "160": 2, "157": 2, "temp": 2, "widow": 2, "155": 2, "appear": [2, 3, 8, 12, 15, 16, 17, 77, 123, 127, 128, 130, 157, 245, 289, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 468], "150": [2, 472], "pythonxi": 2, "148": 2, "147": 2, "cg": [2, 16, 244, 258, 278, 294, 297, 314, 317], "145": [2, 14, 472], "144": 2, "intermitt": 2, "142": [2, 378, 387], "139": 2, "bitten": 2, "137": [2, 14], "backport": 2, "manuscript": 2, "131": [2, 17], "extens": [2, 8, 11, 16, 124, 149, 171, 388, 404, 408, 465], "126": 2, "125": [2, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "emb": [2, 21], "obsolet": [2, 11, 335], "124": 2, "121": [2, 154, 155], "simpletrenchsystem": [2, 6, 20, 123, 124, 125], "120": [2, 436], "118": [2, 161, 162], "117": 2, "getfacesbottom": [2, 168], "getfacestop": [2, 168], "lack": [2, 16], "descript": [2, 125, 130, 203], "115": 2, "view": [2, 8, 11, 15, 17, 18, 34, 46, 47, 48, 53, 56, 57, 62, 72, 74, 77, 81, 104, 127, 139, 144, 149, 168, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465], "cahn": [2, 17, 19, 20, 31, 32, 33, 34, 36, 144, 154, 155, 157, 350, 468, 469, 472], "hilliard": [2, 17, 20, 31, 32, 33, 34, 36, 144, 154, 155, 350, 468, 469, 472], "113": [2, 472], "macbook": 2, "pro": [2, 9, 11, 472], "intel": 2, "112": 2, "111": [2, 101], "grid2d": [2, 20, 31, 32, 40, 58, 63, 75, 78, 79, 87, 88, 100, 107, 111, 114, 116, 122, 124, 127, 128, 139, 144, 145, 149, 154, 155, 158, 162, 168, 169, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 348, 355, 356, 358, 359, 363, 370, 371, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 444, 445, 446, 448, 449, 451, 452, 458], "110": 2, "numer": [2, 4, 6, 8, 10, 14, 16, 20, 36, 46, 47, 48, 56, 57, 71, 77, 145, 157, 161, 168, 169, 171, 233, 308, 336, 337, 348, 355, 356, 359, 363, 370, 378, 387, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 434, 436, 437, 450, 454, 461, 465, 466, 467, 468, 472], "dimensionless": [2, 72, 99, 104, 144, 154, 155, 378, 387], "elphf": [2, 20], "109": [2, 472], "doctest": [2, 7, 10, 15, 17, 21, 77, 171, 374], "__array__": [2, 20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "108": 2, "107": [2, 472], "106": [2, 14], "105": [2, 12], "useless": 2, "102": 2, "dict": [2, 127, 128, 273, 332, 374, 391, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465], "99": [2, 203, 378, 387], "97": 2, "nan": [2, 69, 70, 458], "correctli": [2, 32, 107, 344, 368], "96": [2, 107], "95": 2, "code": [2, 4, 6, 7, 9, 10, 11, 12, 17, 18, 20, 21, 65, 69, 70, 71, 77, 107, 112, 139, 144, 145, 146, 147, 149, 150, 158, 168, 246, 331, 376, 378, 387, 392, 448, 465, 466], "92": 2, "pygist": 2, "dead": 2, "offici": [2, 9, 11], "84": 2, "83": 2, "zerodivisionerror": 2, "cellterm": [2, 20, 365, 368], "getold": 2, "79": [2, 6, 14, 392], "67": [2, 387], "unstructur": [2, 18, 465, 468, 472], "43": [2, 6, 472], "tsvviewer": [2, 8, 20, 69, 70, 101], "shape": [2, 20, 21, 32, 144, 154, 155, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "34": [2, 387], "infin": [2, 8, 392], "122": [2, 154, 155], "119": 2, "116": 2, "104": 2, "matplotlibvectorview": [2, 20], "_plot": [2, 144, 154, 155], "101": 2, "autoscal": [2, 127, 128, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "93": 2, "91": [2, 472], "76": [2, 124, 130], "75": [2, 17, 378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 432, 433, 436, 458], "auto": [2, 440, 441, 443, 444, 445, 446, 448, 449], "docstr": [2, 374, 383], "74": [2, 14], "combin": [2, 8, 11, 15, 17, 21, 103, 161, 171, 378, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468, 469], "51": [2, 89, 472], "__pos__": 2, "50": [2, 14, 39, 40, 77, 85, 107, 144, 439, 444, 445, 448, 449, 451, 452], "39": [2, 146, 147], "72": [2, 458], "19": [2, 6, 77, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 387, 469, 472], "98": [2, 14], "case": [2, 6, 8, 10, 11, 13, 15, 17, 21, 39, 40, 46, 47, 48, 53, 56, 57, 60, 68, 71, 72, 74, 75, 77, 95, 103, 104, 124, 125, 136, 141, 144, 146, 147, 149, 150, 154, 155, 156, 157, 161, 163, 166, 168, 169, 170, 202, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 383, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 471, 473, 474, 475, 476, 477], "94": [2, 221], "90": [2, 77, 107, 154, 155, 439, 442, 451, 452], "87": [2, 6, 472], "length": [2, 10, 21, 69, 70, 77, 81, 145, 157, 202, 203, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 448, 449], "convert": [2, 8, 21, 144, 154, 155, 168, 378, 387, 392, 393, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448], "needless": 2, "rebuild": [2, 17], "66": 2, "guid": [2, 6, 16], "variou": [2, 9, 11, 17, 21, 96, 124, 471], "62": [2, 6, 125], "unrecogn": 2, "token": 2, "13c": 2, "55": [2, 101, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "intern": [2, 20, 21, 169, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466], "52": [2, 14, 472], "facevectorvari": 2, "48": 2, "inherit": [2, 10, 21, 169, 475], "hidden": [2, 21], "42": [2, 17, 146, 147], "model": [2, 4, 6, 7, 9, 11, 14, 15, 16, 19, 20, 21, 31, 32, 39, 40, 96, 103, 123, 124, 125, 127, 128, 130, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 171, 465, 466, 469, 472], "addoverfacesvari": [2, 20], "gross": 2, "41": [2, 458], "iter": [2, 6, 16, 20, 21, 36, 49, 51, 53, 54, 58, 63, 77, 78, 79, 98, 99, 100, 101, 103, 107, 144, 145, 149, 150, 154, 155, 156, 157, 168, 169, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 289, 290, 293, 294, 295, 296, 297, 302, 303, 304, 305, 308, 313, 314, 315, 316, 317, 331, 332, 333, 334, 335, 338, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 415, 465, 466, 468], "norm": [2, 16, 233, 245, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392, 448], "21": [2, 101, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 387, 469, 472], "dimens": [2, 11, 20, 21, 32, 48, 69, 70, 72, 77, 79, 99, 107, 112, 116, 117, 144, 146, 147, 149, 150, 154, 155, 156, 157, 169, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 392, 404, 408, 412, 415, 422, 428, 429, 431, 432, 437, 438, 439, 460, 468, 471], "wai": [2, 7, 11, 12, 17, 19, 20, 21, 36, 71, 77, 89, 93, 101, 102, 124, 139, 144, 145, 146, 147, 149, 150, 154, 155, 157, 169, 171, 212, 214, 215, 228, 344, 378, 387, 466, 468, 475], "significantli": [2, 6, 8, 11, 169], "cach": [2, 17, 20, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 437, 466], "intermedi": [2, 6, 8, 16, 31, 32, 107], "uniformgrid": [2, 20, 230, 231, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "geometr": [2, 31, 33, 34, 176, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 214, 215, 220, 221, 222, 228, 229, 230, 231], "fly": [2, 21], "present": [2, 6, 7, 8, 11, 17, 19, 20, 99, 123, 125, 146, 147, 392, 466, 467, 471], "made": [2, 8, 11, 12, 13, 15, 21, 107, 114, 157, 169, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 404, 408, 412, 417, 422, 428, 431, 432, 433, 437], "consider": [2, 3, 17, 168, 171], "construct": [2, 7, 16, 17, 21, 69, 70, 111, 112, 116, 117, 123, 125, 144, 145, 146, 147, 150, 154, 155, 156, 203, 344, 358, 376, 378, 387, 408, 465, 468], "execut": [2, 6, 9, 10, 11, 16, 17, 21, 22, 74, 111, 112, 117, 374, 375, 377, 391], "subclass": [2, 8, 34, 173, 246, 247, 254, 256, 280, 284, 287, 290, 301, 303, 304, 305, 330, 331, 334, 347, 357, 365, 366, 422, 429, 441, 459, 475], "sensibl": [2, 17], "answer": [2, 3, 20, 36, 75, 77, 111, 112, 114, 157, 344, 358, 401, 404, 408, 409, 413, 415, 417, 428, 429, 432, 433, 436, 466], "For": [2, 7, 8, 9, 11, 16, 17, 21, 31, 33, 34, 60, 69, 70, 77, 81, 96, 130, 139, 146, 147, 156, 157, 169, 171, 332, 344, 348, 355, 356, 359, 363, 370, 392, 415, 438, 448, 465, 468, 469, 470, 475], "vectorcellvari": [2, 169], "periodicgrid": 2, "howev": [2, 6, 8, 17, 77, 107, 468, 471], "rewritten": [2, 36, 161], "serv": [2, 7, 21, 203], "tutori": [2, 11, 13, 17, 124, 168, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 472], "sever": [2, 11, 15, 16, 17, 21, 102, 169, 170, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "elabor": [2, 8], "multicompon": [2, 98], "multidimension": 2, "superfil": [2, 14, 123, 124, 125, 130, 472], "better": [2, 3, 8, 17, 18, 21, 145, 146, 147, 156, 157, 168, 170, 408, 465, 469], "fluid": [2, 20, 21, 107, 318, 325, 336, 469, 470, 472], "classic": [2, 146, 147, 156, 161, 267, 318, 324, 327], "lid": [2, 107], "distinct": [2, 20, 21, 31, 32, 169, 466], "linear": [2, 8, 16, 17, 20, 21, 31, 32, 33, 34, 36, 77, 101, 102, 107, 125, 144, 146, 147, 149, 150, 154, 155, 157, 161, 169, 232, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 465, 466, 470], "explan": [2, 8, 17, 124, 130, 374, 383], "concept": [2, 17, 472, 475], "involv": [2, 6, 16, 20, 21, 77, 149, 150, 154, 155, 157, 289, 466, 469, 475], "frequent": [2, 6, 15, 16, 20, 146, 147, 157, 392, 465, 466, 467], "question": [2, 3, 15, 20, 103, 335, 466, 467], "multiview": [2, 20, 124, 144, 154, 155, 439], "group": [2, 3, 4, 8, 16], "togeth": [2, 8, 17, 122, 161, 374, 387, 455], "couldn": 2, "abbrevi": 2, "promis": 2, "actual": [2, 8, 16, 21, 77, 107, 157, 168, 232, 233, 332, 374, 433, 475], "fulli": [2, 17, 21, 77, 157, 161, 470], "qualifi": 2, "cv": [2, 348, 355, 356, 359, 363, 370, 371, 468], "subvers": 2, "sourceforg": [2, 8, 16, 18, 465], "materi": [2, 4, 14, 20, 21, 77, 96, 107, 123, 125, 130, 144, 154, 155, 171, 466, 467, 472], "digit": [2, 392], "pathwai": 2, "pde": [2, 8, 11, 14, 15, 21, 32, 144, 154, 155, 157, 169, 171, 469, 470], "subtract": [2, 6, 20, 102, 150, 168, 378, 387, 428], "job": [2, 10, 107], "suppli": [2, 8, 15, 16, 21, 146, 147, 168, 169, 203, 374, 378, 387, 417, 468, 475, 476], "fipy_view": [2, 17, 438], "them": [2, 3, 8, 10, 11, 13, 17, 21, 32, 71, 77, 90, 100, 102, 149, 168, 169, 170, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 375, 476], "choic": [2, 8, 16, 17, 18, 146, 147, 157, 161, 260], "noisevari": [2, 20, 401, 409, 413, 415, 436], "pyx": 2, "layout": 2, "getlaplacian": 2, "effect": [2, 3, 6, 17, 31, 32, 77, 144, 154, 155, 156, 157, 177, 368, 472], "getfacegrad": [2, 169], "getdiverg": 2, "which": [2, 3, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 21, 22, 72, 75, 77, 87, 101, 102, 104, 107, 124, 146, 147, 149, 157, 161, 168, 169, 176, 202, 260, 374, 378, 383, 387, 392, 393, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 448, 465, 468, 470, 475, 476], "deepli": 2, "nest": [2, 8, 245], "find": [2, 8, 9, 11, 16, 17, 77, 146, 147, 169, 170, 392, 438, 439, 460], "situat": 2, "earlier": [2, 11, 69, 70, 146, 147, 168, 392], "update0_1to1_0": [2, 7, 8, 20], "49": [2, 101], "47": [2, 336], "coeff": [2, 8, 17, 31, 32, 33, 34, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 98, 99, 100, 101, 102, 103, 104, 107, 125, 146, 147, 155, 156, 157, 161, 162, 168, 169, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 468], "40": [2, 36, 98, 99, 100, 125, 145, 150], "38": 2, "one": [2, 3, 8, 10, 11, 14, 16, 17, 19, 21, 48, 69, 70, 72, 77, 81, 98, 99, 100, 101, 102, 103, 104, 112, 117, 144, 146, 147, 150, 154, 155, 156, 157, 169, 173, 203, 246, 247, 248, 249, 254, 256, 280, 284, 287, 290, 301, 303, 304, 305, 330, 334, 347, 357, 364, 365, 366, 375, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 441, 442, 448, 458, 459, 465, 468, 473, 474, 475, 476, 477], "37": [2, 6], "electrochem": [2, 4, 6, 8, 14, 15, 20, 21, 96, 171, 472], "35": [2, 103, 107, 458], "33": [2, 146, 147, 157, 472], "32": [2, 17, 22, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 472], "conflict_handl": 2, "31": [2, 157, 387, 472], "notat": [2, 8, 17, 20, 107, 161, 465, 466, 475], "29": [2, 130, 472], "invok": [2, 7, 8, 15, 17, 21, 139, 233, 305, 475, 476], "26": [2, 107, 124, 130, 378, 387, 472], "extract": [2, 69, 70, 77, 145, 149, 150, 203, 391], "distancevari": [2, 20, 111, 112, 114, 116, 117, 124, 127, 128, 432, 433], "reconcil": 2, "crystal": [2, 14, 21, 469, 472], "surfact": [2, 20, 124, 125, 130, 433], "depositionratevar": 2, "extensionveloc": 2, "axisymmetr": 2, "2d": [2, 17, 18, 19, 56, 57, 58, 100, 102, 116, 127, 128, 140, 144, 145, 149, 154, 155, 162, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 408, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 468], "wizard": 2, "xp": 2, "other": [3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 31, 32, 77, 101, 124, 125, 146, 147, 156, 158, 169, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 266, 267, 268, 269, 270, 272, 274, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 375, 376, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 469], "encourag": 3, "follow": [3, 6, 7, 9, 10, 11, 15, 16, 17, 36, 65, 69, 70, 71, 96, 100, 104, 111, 112, 114, 116, 117, 123, 124, 125, 130, 139, 145, 149, 150, 154, 155, 158, 161, 168, 169, 170, 344, 368, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 469], "mode": [3, 11, 15, 203, 374, 378, 394], "monitor": 3, "post": [3, 8, 203, 465], "want": [3, 9, 11, 17, 19, 20, 69, 70, 77, 146, 147, 157, 466], "http": [3, 8, 9, 11, 13, 16, 17, 18, 34, 69, 70, 154, 155, 248, 249, 298, 299, 300, 332, 387, 393, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 465, 472], "catb": 3, "esr": 3, "smart": 3, "troubl": [3, 16], "abl": [3, 144, 203, 232], "offer": [3, 15, 16, 21], "reproduc": [3, 11, 13], "com": [3, 8, 9, 11, 13, 16, 17, 18, 34, 154, 155, 298, 299, 300, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 465, 472], "suitabl": [3, 17, 77, 168, 318, 325, 327, 378, 387, 465], "open": [3, 10, 11, 14, 17, 20, 107, 145, 149, 150, 203, 378, 394, 465, 466], "convers": [3, 16, 17, 21, 169, 378, 387], "troubleshoot": 3, "off": [3, 8, 107], "highlight": [3, 10, 107], "easi": [3, 16, 18, 31, 33, 34, 77, 465], "submiss": 3, "probabl": [3, 8, 10, 11, 17, 18, 64, 169, 401, 409, 413, 415, 465, 469, 475], "definit": [3, 10, 16, 32, 169, 245, 283, 289, 318, 327, 476], "back": [3, 9, 11, 17, 19, 21, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 428, 472], "forth": 3, "tend": [3, 21, 31, 32, 77], "delet": [3, 77, 203, 378, 394], "mean": [3, 17, 20, 21, 31, 32, 33, 34, 77, 240, 241, 242, 244, 246, 378, 387, 392, 409, 415, 448, 466], "d": [3, 14, 17, 31, 32, 33, 34, 36, 46, 47, 48, 53, 56, 57, 64, 69, 70, 74, 75, 77, 78, 79, 102, 114, 116, 124, 125, 130, 144, 145, 146, 147, 154, 155, 157, 158, 161, 168, 202, 344, 358, 374, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468, 472], "expend": 3, "effort": [3, 8, 15, 16, 17], "inferior": 3, "ve": [3, 77, 146, 147], "written": [3, 6, 7, 8, 10, 11, 17, 21, 71, 77, 107, 116, 144, 145, 146, 147, 149, 150, 156, 161, 168, 169, 170, 465, 468], "serious": 3, "subscript": 3, "email": 3, "mailto": 3, "simpli": [3, 8, 11, 16, 17, 77, 98, 99, 100, 146, 147, 161, 168, 475], "To": [3, 7, 8, 10, 11, 13, 17, 77, 107, 123, 124, 125, 130, 139, 144, 146, 147, 154, 155, 157, 161, 169, 468, 471], "unsubscrib": 3, "learn": [3, 9, 11, 17], "chang": [3, 10, 11, 17, 20, 21, 31, 32, 77, 123, 124, 125, 130, 146, 147, 168, 169, 170, 212, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442, 444, 445, 446, 448, 449, 453, 465, 466, 467], "host": 3, "sent": 3, "store": [3, 32, 124, 139, 149, 203, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 393, 465, 468], "histor": [3, 9, 11, 71], "dir": [3, 378, 394], "comp": [3, 8], "jon": 4, "member": [4, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "research": [4, 14, 21, 472], "staff": 4, "scienc": [4, 14, 17, 21, 77, 171], "engin": [4, 14, 171, 465], "divis": [4, 39, 40, 171, 392], "measur": [4, 6, 21, 77, 146, 147, 171], "laboratori": [4, 20, 171, 466, 467], "nation": [4, 5, 12, 21, 171], "institut": [4, 5, 12, 21, 171], "standard": [4, 5, 11, 12, 15, 16, 21, 69, 70, 96, 156, 161, 171, 228, 344, 376, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465], "technologi": [4, 5, 12, 21, 171], "comput": [4, 8, 11, 14, 16, 17, 19, 21, 90, 125, 130, 168, 171, 289, 465, 471, 472], "interest": [4, 8, 9, 11, 15, 21, 31, 32, 33, 34, 77, 98, 100, 102, 104, 140, 157, 203, 305, 468, 469], "orient": [4, 14, 19, 20, 68, 144, 149, 150, 154, 155, 171, 392, 439, 440, 441, 443, 445, 446, 466, 475], "design": [4, 6, 7, 8, 9, 11, 17, 20, 98, 99, 100, 466, 467], "electrochemistri": [4, 472], "daniel": [4, 472], "wheeler": [4, 14, 161, 472], "guest": 4, "finit": [4, 11, 14, 20, 21, 64, 77, 146, 147, 157, 171, 336, 465, 466, 470, 472], "volum": [4, 11, 14, 20, 21, 64, 107, 124, 125, 130, 139, 146, 147, 156, 161, 171, 203, 336, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 449, 466, 470, 472], "techniqu": [4, 8, 21, 145, 150, 470], "treatment": [4, 15, 17, 156, 171], "jim": 4, "leader": 4, "thermodynam": [4, 31, 32, 101, 103, 146, 147, 161], "kinet": [4, 8, 20, 157, 466, 467], "director": 4, "center": [4, 8, 14, 17, 20, 21, 31, 33, 34, 64, 68, 69, 70, 77, 101, 107, 127, 128, 144, 145, 154, 155, 161, 169, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 466, 470], "theoret": [4, 8, 20, 21, 171, 466, 467], "varieti": [4, 8, 9, 11, 17, 21, 146, 147, 171], "solidif": [4, 19, 144, 145, 149, 154, 155, 157, 472], "polycrystallin": [4, 15, 19, 171, 472], "solid": [4, 19, 101, 103, 144, 145, 146, 147, 149, 150, 154, 155, 156], "alex": 4, "mont": 4, "pyxview": [4, 465], "he": [4, 19], "student": 4, "montgomeri": 4, "blair": 4, "school": 4, "kati": 4, "travi": [4, 465], "optim": [4, 17, 21, 77, 146, 147, 157], "she": [4, 19], "surf": 4, "smith": 4, "colleg": 4, "gibianski": 4, "harvei": 4, "mudd": 4, "andrew": 4, "reev": 4, "sabbat": 4, "univers": [4, 14, 19, 469, 472], "main": [4, 9, 11, 16, 17, 20, 21, 149, 150, 154, 155, 248, 249, 377, 453, 468, 473, 474, 475, 477], "olivia": 4, "buzek": 4, "maryland": 4, "stile": 4, "jame": [4, 472], "beirn": 4, "greatli": [4, 6, 11, 16], "deploy": 4, "server": 4, "certain": [5, 7, 21, 203, 475, 476], "commerci": [5, 8, 11, 21], "firm": 5, "trade": 5, "identifi": [5, 17, 21], "procedur": [5, 21, 156], "adequ": [5, 16, 202, 203], "Such": 5, "identif": 5, "intend": [5, 15, 17, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232], "impli": [5, 12], "recommend": [5, 16, 17, 20, 169, 170, 387, 466, 468, 476], "endors": [5, 11], "nor": [5, 8], "relat": [5, 17, 21, 146, 147, 157, 408], "necessarili": [5, 11], "best": [5, 8, 11, 16, 17, 18, 157, 169, 260, 332], "purpos": [5, 8, 9, 11, 12, 46, 47, 56, 57, 202, 203, 468], "evalu": [6, 17, 21, 107, 146, 147, 149, 150, 154, 155, 157, 161, 344, 392, 398, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "program": [6, 20, 77, 168, 377, 465, 466, 470, 475], "greater": [6, 10, 203, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "intrins": [6, 16, 21, 146, 147, 150], "ineffici": [6, 21], "dure": [6, 11, 17, 21, 124, 472], "languag": [6, 11, 20, 156, 171, 465, 466, 475], "hous": 6, "grain": [6, 19, 149, 150, 154, 155], "subsequ": [6, 17, 19, 154, 155], "imping": [6, 7, 8, 19, 20, 154, 155], "mesh20x20": [6, 7, 8, 17, 20], "numberofel": [6, 124, 139, 149], "10000": [6, 49, 51, 53, 54, 58, 75, 98, 100, 103, 124, 144, 145, 156, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "numberofstep": [6, 123, 124, 125, 130, 149], "1000": [6, 31, 33, 34, 36, 49, 51, 53, 54, 60, 62, 63, 81, 99, 116, 156, 168, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 444, 445, 446, 451, 452], "ryo": [6, 145, 149, 150, 157, 472], "kobayashi": [6, 144, 145, 149, 150, 154, 155, 157, 472], "raw": [6, 149], "cpu": [6, 17], "10": [6, 14, 17, 20, 31, 32, 33, 36, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 71, 75, 77, 78, 79, 89, 101, 102, 107, 111, 112, 117, 123, 124, 125, 127, 130, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 318, 325, 326, 327, 328, 329, 331, 332, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 458, 466, 471, 472], "tabl": [6, 16, 107, 125, 130, 387], "second": [6, 8, 107, 122, 146, 147, 161, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 451, 452], "kilobyt": 6, "kib": 6, "30": [6, 17, 20, 96, 100, 101, 102, 103, 127, 146, 147, 156, 157, 378, 387, 413, 415, 466, 472], "0009": 6, "39316": 6, "772": 6, "0031": 6, "39664": 6, "1600": 6, "1": [6, 8, 10, 11, 14, 15, 16, 17, 18, 20, 21, 31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 123, 124, 125, 127, 128, 130, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 170, 171, 175, 177, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 248, 249, 281, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 376, 377, 378, 387, 392, 394, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 466, 468, 469, 471, 472], "4": [6, 8, 9, 11, 14, 15, 16, 17, 20, 21, 34, 36, 53, 60, 64, 68, 69, 70, 71, 77, 81, 89, 98, 100, 101, 102, 103, 107, 111, 114, 116, 124, 125, 127, 128, 130, 140, 144, 145, 146, 147, 154, 155, 156, 157, 158, 161, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 358, 374, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442, 444, 445, 446, 451, 452, 458, 466, 468, 472], "65": 6, "017": 6, "40656": 6, "1044": 6, "6400": 6, "3": [6, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 31, 34, 36, 46, 47, 56, 57, 60, 64, 65, 69, 70, 71, 74, 77, 81, 89, 98, 99, 100, 101, 103, 107, 111, 114, 116, 122, 124, 125, 127, 128, 130, 140, 146, 147, 149, 154, 155, 156, 157, 161, 162, 169, 170, 171, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 318, 323, 344, 358, 374, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 442, 451, 452, 458, 465, 466, 468, 469, 471, 472], "46124": 6, "1880": 6, "25600": 6, "60840": 6, "5188": 6, "102400": 6, "145820": 6, "18436": 6, "plain": [6, 17, 77, 124], "oper": [6, 9, 10, 11, 17, 21, 144, 149, 150, 154, 155, 169, 220, 245, 378, 380, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 468], "around": [6, 10, 21, 77, 122, 428, 468], "17": [6, 12, 20, 215, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 466, 470, 472], "slower": [6, 21, 169], "penalti": 6, "hope": [6, 169, 170], "futur": [6, 9, 11, 17, 145, 149, 150, 168, 465], "gain": [6, 17], "particular": [6, 7, 8, 9, 11, 12, 16, 17, 21, 72, 77, 168], "analysi": [6, 8, 17, 465, 472], "shown": [6, 7, 8, 19, 96, 146, 147, 157, 168], "As": [6, 7, 8, 10, 17, 21, 69, 70, 71, 77, 130, 146, 147, 156, 161, 168, 169, 171, 378, 387, 394, 476], "record": 6, "each": [6, 7, 8, 17, 21, 31, 33, 34, 46, 47, 48, 56, 57, 69, 70, 75, 77, 87, 90, 98, 99, 100, 125, 146, 147, 149, 156, 158, 168, 169, 212, 228, 311, 368, 374, 378, 382, 387, 392, 404, 412, 422, 428, 429, 431, 448, 458, 468, 470, 473, 474, 477], "approxim": [6, 8, 17, 75, 107, 156, 157, 468, 470], "maximum": [6, 10, 16, 36, 124, 146, 147, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 344, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "spike": 6, "hard": [6, 21, 144, 154, 155, 169, 465], "dynam": [6, 11, 22, 157, 470, 472], "alloc": [6, 21], "rough": [6, 146, 147], "exact": [6, 16, 77, 107, 145, 157, 233, 289, 471], "complex": [6, 16, 17, 21, 123, 130, 146, 147, 378, 387, 465, 469], "largest": [6, 77, 378, 387, 438], "mainli": [6, 21], "below": [6, 8, 11, 17, 107, 123, 130, 144, 154, 155, 168], "per": [6, 11, 17, 77, 146, 147, 157, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 451, 452], "multigrid": [6, 16, 273], "benefici": 6, "overhead": [6, 17], "cost": 6, "perform": [6, 8, 11, 17, 19, 21, 31, 32, 33, 34, 81, 146, 147, 157, 232, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 378, 387, 392, 465], "equival": [6, 15, 16, 17, 21, 77, 171, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 468, 470], "precondit": [6, 16, 17, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 272, 279, 280, 283, 284, 289, 290, 293, 294, 295, 297, 305, 313, 314, 315, 317, 331, 333, 334, 465], "enough": [6, 17, 144, 154, 155, 203], "speedup": [6, 17], "specif": [6, 8, 12, 16, 21, 32, 69, 70, 170, 171, 429, 438, 448, 465, 475], "someth": [7, 8, 15, 17, 19, 77, 124, 144, 154, 155, 169, 170, 387, 453, 458, 476], "least": [7, 8, 11, 17, 157, 170, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "four": [7, 17, 19, 101, 149, 156, 158, 228], "demonstr": [7, 17, 21, 23, 64, 69, 70, 78, 79, 96, 99, 111, 112, 116, 117, 123, 124, 125, 130, 139, 140, 149, 150, 468], "applic": [7, 9, 11, 16, 19, 21, 69, 70, 453, 465, 468, 470], "finish": [7, 39, 40, 65, 75, 89, 123, 124, 125, 130, 149, 157, 161, 162], "left": [7, 8, 15, 16, 17, 20, 31, 32, 33, 34, 36, 46, 47, 48, 53, 56, 57, 64, 65, 68, 72, 77, 78, 79, 81, 96, 102, 104, 107, 111, 114, 123, 124, 125, 139, 144, 145, 146, 147, 150, 154, 155, 156, 157, 158, 161, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 350, 358, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 442, 466, 469, 470], "shell": [7, 11, 13, 15, 17, 34, 140, 465], "At": [7, 11, 17, 21, 75, 124, 171], "enter": [7, 15], "queri": [7, 429], "session": [7, 14, 15, 17, 21], "directli": [7, 8, 11, 17, 19, 21, 69, 70, 77, 78, 79, 161, 168, 169, 170, 374, 475, 476], "block": [7, 15, 71, 77, 161, 248, 249, 273], "final": [7, 8, 72, 77, 101, 103, 104, 146, 147, 150, 161, 203, 368, 376], "importantli": 7, "emphasi": [7, 10], "comprehens": [7, 21], "framework": [7, 15, 21, 171, 475], "steadyst": [7, 15, 20, 74], "succinct": [7, 8, 11, 13], "prompt": [7, 15, 17, 77, 157, 171], "copy_script": [7, 77, 124], "addit": [7, 16, 17, 20, 71, 77, 125, 383, 387, 392, 465], "those": [7, 8, 9, 11, 17, 21, 77, 123, 124, 125, 130, 146, 147, 168, 465, 475, 476], "dozen": 7, "understand": [7, 8, 17, 125, 169], "illustr": [7, 8, 21, 77, 468], "electrostat": [7, 20, 96, 100, 101, 102, 103, 104], "nthorder": [7, 20], "input4thorder1d": [7, 20], "exponential1d": [7, 20, 51, 53, 54, 58, 59, 62, 63, 168], "exponential1dsourc": [7, 20], "allen": [7, 17, 144, 154, 155, 157], "binarycoupl": [7, 8, 17, 20], "mesh40x1": [7, 8, 20, 149], "polyxtalcoupl": [7, 17, 20], "advect": [7, 20, 64, 124, 146, 147, 344, 358], "spinod": [7, 19, 31, 32, 33, 34], "decomposit": [7, 19, 31, 32, 318, 319, 321, 323, 324, 468], "multi": [7, 465], "evolut": [7, 8, 21, 31, 32, 33, 34, 77, 123, 144, 147, 154, 155, 156, 469, 472], "reactivewet": [7, 20], "liquidvapor1d": [7, 20], "canon": [8, 31, 32, 33, 34, 146, 147, 156, 233, 392], "govern": [8, 12, 71, 77, 102, 123, 124, 125, 130, 144, 145, 146, 147, 154, 155, 161], "underbrac": [8, 96, 156, 469], "frac": [8, 17, 31, 32, 33, 34, 36, 46, 47, 48, 53, 56, 57, 64, 65, 68, 71, 72, 74, 77, 81, 96, 98, 102, 104, 107, 111, 112, 117, 123, 124, 125, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 168, 335, 344, 353, 358, 368, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 468, 469, 471], "partial": [8, 14, 16, 17, 20, 31, 32, 33, 34, 36, 64, 65, 68, 71, 74, 77, 81, 96, 98, 102, 111, 112, 117, 124, 144, 145, 146, 147, 150, 154, 155, 156, 157, 161, 171, 282, 339, 344, 358, 366, 368, 465, 466, 469, 470], "rho": [8, 20, 72, 77, 104, 156, 161, 162, 368, 466, 469, 470], "_": [8, 16, 17, 32, 68, 71, 77, 96, 107, 146, 147, 156, 157, 175, 176, 177, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 392, 394, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 469], "vphantom": [8, 96, 156, 469], "nabla": [8, 17, 20, 31, 32, 33, 34, 36, 46, 47, 48, 53, 56, 57, 71, 72, 74, 77, 96, 98, 102, 104, 107, 111, 112, 116, 124, 144, 145, 146, 147, 150, 154, 155, 156, 157, 168, 177, 344, 348, 350, 353, 355, 356, 358, 359, 363, 370, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 466, 469, 470], "cdot": [8, 17, 20, 31, 32, 33, 34, 36, 46, 47, 48, 53, 56, 57, 72, 74, 77, 96, 98, 104, 107, 111, 112, 124, 144, 145, 146, 147, 150, 154, 155, 156, 168, 175, 177, 348, 350, 353, 355, 356, 359, 363, 370, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466, 469, 470], "vec": [8, 16, 17, 20, 46, 47, 48, 49, 51, 53, 54, 56, 57, 77, 107, 111, 112, 146, 147, 157, 162, 168, 175, 233, 289, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466, 469, 470], "gamma_i": [8, 468, 469], "n": [8, 14, 17, 19, 72, 77, 96, 98, 99, 102, 104, 107, 111, 124, 125, 130, 139, 144, 145, 146, 147, 149, 154, 155, 156, 158, 175, 177, 202, 348, 355, 356, 359, 363, 370, 378, 387, 392, 396, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 443, 444, 468, 469, 472], "s_": [8, 157, 468, 469], "discuss": [8, 10, 11, 15, 20, 21, 32, 466, 471], "discret": [8, 17, 20, 77, 107, 144, 149, 150, 154, 155, 161, 202, 203, 339, 353, 355, 356, 359, 363, 370, 466, 470], "pose": [8, 71], "ratio": [8, 68, 125, 130, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 440, 441, 443, 444, 445, 446, 448, 449, 471], "along": [8, 11, 17, 21, 31, 32, 77, 130, 144, 154, 155, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "coordin": [8, 69, 70, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 214, 215, 220, 221, 222, 228, 229, 230, 231, 448, 458], "partial_x": 8, "notic": [8, 12, 15, 169, 475], "within": [8, 11, 13, 16, 17, 21, 68, 107, 161, 203, 212, 228, 233, 392, 468, 473, 474, 477], "first": [8, 11, 16, 17, 21, 36, 69, 70, 71, 72, 77, 102, 103, 104, 107, 111, 112, 122, 124, 145, 146, 147, 149, 157, 158, 161, 168, 169, 170, 199, 203, 211, 212, 214, 215, 220, 228, 231, 337, 344, 374, 378, 387, 388, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 438, 439, 460, 468, 476], "higher": [8, 16, 17, 20, 107, 146, 147, 161, 177, 202, 203, 344, 350, 469, 470, 471], "although": [8, 9, 11, 16, 17, 21, 31, 32, 77, 96, 100, 102, 145, 146, 147, 157, 168, 169, 408, 468, 469], "confus": [8, 465], "interpret": [8, 15, 17, 21, 239, 240, 241, 242, 243, 244, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 333, 334, 475, 476], "examin": [8, 21, 72, 104, 146, 147, 468], "short": [8, 124], "represent": [8, 20, 77, 123, 127, 128, 157, 188, 207, 208, 209, 210, 211, 212, 228, 229, 230, 231, 233, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "assum": [8, 15, 16, 107, 125, 144, 146, 147, 154, 155, 161, 378, 387, 392, 408, 468], "fourth": [8, 81], "isotrop": [8, 88], "nomin": 8, "anomal": 8, "equiv": [8, 17, 146, 147, 156, 157, 471], "conveni": [8, 377, 378, 387], "appli": [8, 14, 16, 20, 21, 64, 77, 78, 79, 107, 124, 146, 147, 157, 170, 173, 175, 176, 177, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 280, 281, 282, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 316, 332, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 466, 472], "rotat": [8, 34, 68, 140, 145], "realiz": [8, 168], "even": [8, 10, 16, 17, 20, 21, 31, 33, 34, 88, 102, 147, 156, 168, 177, 344, 358, 374, 466, 469], "though": [8, 88, 102, 147, 157], "superfici": 8, "resembl": [8, 71, 123, 130], "d_1": [8, 350], "d_2": [8, 350], "xi": [8, 96, 100, 101, 102, 103, 145, 156, 335], "third": [8, 11, 16, 19, 122, 378, 387, 465], "d2": [8, 350], "facegrad": [8, 17, 20, 64, 65, 71, 77, 81, 98, 99, 100, 101, 103, 144, 145, 146, 147, 149, 150, 154, 155, 156, 161, 162, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 448, 449, 468], "diverg": [8, 17, 20, 64, 71, 107, 145, 146, 147, 149, 150, 154, 233, 240, 241, 242, 244, 246, 308, 401, 409, 412, 413, 415, 429, 431, 432, 468], "grad": [8, 20, 69, 70, 101, 102, 103, 107, 149, 150, 154, 155, 161, 162, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 448, 449, 458], "arithmeticfacevalu": [8, 20, 31, 33, 34, 36, 107, 146, 147, 149, 150, 154, 155, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "rate": [8, 31, 32, 124, 125, 130, 144, 154, 155, 157, 401, 413], "rho_1": 8, "rho_2": 8, "manner": [8, 17, 21, 149, 150, 156, 161, 468], "rho1": 8, "rho2": 8, "perspect": 8, "might": [8, 19, 21, 146, 147, 468], "mobil": [8, 96, 101, 102, 103, 146, 147, 156, 415], "counter": [8, 96, 156], "eq": [8, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 74, 77, 78, 79, 81, 85, 102, 146, 147, 155, 157, 161, 168, 169, 368], "d1": [8, 350], "With": [8, 21, 77, 144, 146, 147, 154, 155, 169, 448, 475], "advent": 8, "gamma_1": [8, 20, 466, 469, 470], "gamma_0": 8, "diffterm": [8, 168, 169], "gamma0": [8, 17], "converg": [8, 17, 20, 71, 77, 146, 147, 149, 157, 239, 240, 241, 242, 243, 244, 245, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 289, 290, 293, 294, 295, 296, 297, 302, 303, 304, 305, 308, 313, 314, 315, 316, 317, 331, 333, 334, 368, 466], "plan": 8, "restart": [8, 149], "stage": [8, 9, 11, 14, 21, 77, 415, 472], "ll": [8, 11, 17, 77, 102, 125, 130, 144, 146, 147, 154, 155, 156, 157, 169, 170], "howtowriteascript": [8, 20], "On": [8, 11, 21, 22, 146, 147, 157, 468], "littl": [8, 21, 146, 147, 169, 475], "anyth": [8, 17, 21, 31, 32, 33, 34, 239, 438], "besid": 8, "anoth": [8, 11, 13, 21, 69, 70, 77, 101, 122, 146, 147, 150, 157, 344, 358, 364, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 475], "piec": [8, 17, 21], "softwar": [8, 11, 12, 16, 19, 21, 123, 130, 465], "qualiti": [8, 18, 337, 465], "graph": [8, 90], "multiscal": 8, "ascii": 8, "tab": [8, 11, 69, 70, 458], "separ": [8, 11, 15, 17, 21, 22, 31, 32, 69, 70, 71, 98, 99, 100, 101, 102, 103, 156, 157, 161, 378, 387, 392, 451, 452, 458, 468], "button": 8, "myimag": 8, "ext": [8, 124, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "ep": [8, 149, 150, 154, 155], "jpg": 8, "joint": 8, "photograph": 8, "expert": 8, "png": [8, 17], "portabl": [8, 16, 465], "network": 8, "graphic": [8, 17, 19], "chosen": [8, 17, 21, 101, 103, 443, 444, 449, 471], "yet": [8, 149, 465], "knowledg": [8, 17, 21, 475], "agg": 8, "cairo": 8, "net": [8, 16, 18, 465], "facil": [8, 99, 146, 147, 465], "previou": [8, 17, 32, 77, 144, 146, 147, 154, 155, 157, 168, 378, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "stitch": 8, "free": [8, 12, 18, 19, 21, 31, 32, 36, 96, 146, 147, 156, 157, 161, 162, 169, 170, 465, 472], "sharewar": 8, "adapt": [8, 16, 21, 144, 154, 155, 273, 298, 299, 300, 336, 337, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 465], "utilitarian": [8, 144, 154, 155], "let": [8, 17, 77, 107, 144, 146, 147, 154, 155, 157, 168, 368], "minimum": [8, 11, 17, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 437, 448], "tri": [8, 17, 77, 443, 444, 458], "plotter": 8, "common": [8, 17, 18, 21, 123, 157, 188, 465, 468, 475], "often": [8, 11, 17, 77, 124, 144, 154, 155, 415, 469], "supplement": 8, "underli": [8, 71, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "come": [8, 11, 17, 19, 21, 169, 387], "closest": [8, 392, 408], "overrid": [8, 16, 17, 376, 453], "wan": 8, "heavi": [8, 17], "lift": 8, "custom": [8, 17, 21, 34, 144, 171, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "differenti": [8, 14, 16, 171, 339, 366, 465, 470], "benefit": [8, 17, 21, 31, 33, 34, 46, 47, 48, 56, 57, 157, 168], "repetit": 8, "achiev": [8, 11, 17, 77, 81, 98, 100, 161, 233, 471], "similar": [8, 77], "three": [8, 10, 11, 17, 19, 21, 99, 100, 103, 125, 158, 161, 169, 203, 472], "layer": [8, 122, 123, 124, 125, 130, 199, 203, 209, 211, 214, 220, 228], "lowest": 8, "spend": [8, 171], "think": [8, 10, 17, 21, 146, 147], "practic": [8, 10, 11, 17, 20, 71, 146, 147, 157, 169, 465, 466, 467, 475], "exactli": [8, 15, 17, 64, 146, 147, 157, 378, 387], "thu": [8, 21, 48, 77, 123, 125, 150, 157, 376, 468, 471], "emploi": [8, 11, 16, 17, 157, 470], "until": [8, 17, 21, 77, 335], "satisfactorili": [8, 72], "choos": [8, 11, 16, 17, 68, 77, 146, 147, 157, 443, 444], "toler": [8, 9, 11, 16, 17, 36, 51, 53, 54, 58, 63, 77, 98, 99, 101, 146, 147, 149, 156, 161, 162, 168, 233, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 378, 387, 392], "desir": [8, 9, 11, 21, 146, 147, 156, 157, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 440, 441, 443, 444, 445, 446, 448, 449], "mysolv": 8, "linearpcgsolv": [8, 20, 146, 168, 169, 344], "1234": 8, "5e": [8, 32, 124, 144, 145, 146, 147, 154, 155, 157, 161, 162, 401, 409, 413, 415], "favor": 8, "role": [8, 21], "middl": [8, 146, 147, 203], "concentr": [8, 49, 51, 54, 58, 59, 62, 63, 71, 72, 74, 75, 96, 98, 99, 100, 101, 103, 104, 124, 125, 130, 146, 147, 156, 168, 433, 469], "temperatur": [8, 14, 77, 124, 125, 130, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 415, 469], "thermal": [8, 19, 77, 144, 154, 155, 415], "perfect": 8, "good": [8, 56, 57, 77, 107, 157, 470], "elaps": [8, 31, 32, 33, 34, 101, 154, 155, 157], "despit": [8, 17], "evolv": [8, 10], "quasi": 8, "static": [8, 180, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "steadi": [8, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 69, 70, 72, 77, 78, 79, 81, 88, 102, 157, 168], "distinguish": [8, 17], "cycl": [8, 21, 465], "modifi": [8, 11, 12, 13, 15, 21, 130, 161, 256, 475], "myvar": 8, "updateold": [8, 20, 39, 40, 68, 71, 77, 99, 101, 103, 111, 112, 114, 124, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 368, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "repeatedli": [8, 77, 78, 79, 171, 335], "stabl": [8, 9, 11, 21, 77, 146, 147, 157, 471], "truli": 8, "desiredresidu": 8, "outermost": 8, "goal": [8, 21], "studi": [8, 14, 21, 96, 104], "moreov": [8, 17, 19], "equilibrium": [8, 36, 72, 74, 75, 77, 98, 99, 100, 101, 102, 103, 104, 146, 147, 156, 157, 161, 168], "fundament": [8, 21, 387], "becom": [8, 11, 17, 85, 98, 99, 100, 125, 144, 154, 155, 161, 408, 468, 469], "either": [8, 9, 11, 12, 16, 17, 21, 71, 77, 140, 146, 147, 157, 169, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 408, 415, 438, 468, 475, 476], "unstabl": [8, 85, 144, 154, 155], "inaccur": [8, 468], "stabil": [8, 9, 11, 71, 77, 157, 273, 313, 468], "accuraci": [8, 16, 17, 39, 40, 68, 77, 124, 344, 408], "distinctli": 8, "said": 8, "blow": 8, "radic": 8, "perfectli": [8, 77, 168], "disagre": 8, "smaller": [8, 146, 147], "larger": [8, 77, 157, 415, 432, 468], "interv": 8, "234e": 8, "elapsedtim": 8, "totalelapsedtim": 8, "somefunctionofvariablesandtim": 8, "myvar1": 8, "myvar2": 8, "notabl": 8, "interfaci": [8, 102, 157], "gradual": 8, "down": [8, 16, 17, 31, 32, 77, 157, 233], "describ": [8, 17, 21, 31, 32, 49, 51, 54, 58, 59, 62, 63, 69, 70, 77, 103, 107, 125, 144, 154, 155, 157, 161, 378, 394, 468, 470, 473, 474, 476, 477], "substitut": [8, 17, 96, 98, 99, 100, 101, 102, 103, 104, 107, 156, 161, 438], "undesir": 8, "consequ": [8, 11, 107], "averag": [8, 77, 85, 107, 146, 147, 156, 161, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "f": [8, 17, 31, 32, 33, 34, 36, 77, 124, 125, 130, 144, 146, 147, 149, 156, 157, 161, 162, 336, 348, 355, 356, 359, 363, 370, 378, 387, 388, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "neq": [8, 96, 98, 156], "smoothli": 8, "dramat": [8, 71, 77], "sharp": [8, 31, 32, 101, 103, 146, 147, 156], "drop": [8, 11, 13, 17, 77, 107, 203], "harmon": [8, 16, 31, 33, 34, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "experi": [8, 14, 16, 17, 124, 472], "excess": [8, 471], "vice": 8, "versa": 8, "ma": [8, 392], "maerror": 8, "locat": [8, 17, 22, 203, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468, 473, 474, 477], "pm": [8, 154, 155], "infti": [8, 16, 17, 102, 123, 124, 125, 130, 335, 392, 401, 413, 471], "repair": 8, "catalog": 8, "kei": [8, 60, 65, 72, 85, 101, 104], "flag": [8, 11, 16, 20, 144, 145, 154, 155, 245, 374, 466], "mailinglist": 8, "mailman": 8, "fn": [8, 335, 475], "dev": [8, 465], "2005": [8, 14, 20, 336, 466], "june": [8, 14], "003010": 8, "23": [8, 17, 20, 96, 156, 387, 392, 466, 472], "neither": [8, 378, 387], "sloppi": 8, "thread": [8, 20, 466], "scientif": [8, 11, 14, 16, 18, 21, 465, 472], "4349": 8, "experienc": 8, "upgrad": [8, 11], "brows": [9, 11, 17], "through": [9, 11, 17, 19, 69, 70, 77, 146, 147, 149, 157, 168, 283, 332, 415], "download": [9, 11, 20, 466], "Be": [9, 11, 16, 17, 169], "pre": [9, 20, 107, 466], "scm": [9, 11, 472], "latest": [9, 11, 17], "subject": [9, 11, 12, 17, 71, 168, 378, 387, 392], "behav": [9, 11, 77, 177], "degre": [9, 11, 17, 107, 145, 146, 147], "indic": [9, 11, 15, 16, 17, 169, 170, 378, 387, 392, 396, 468], "decid": [9, 11], "risk": [9, 11, 387], "track": [9, 11, 21], "clone": [9, 11], "shift": [9, 11, 39, 40, 146, 147, 396], "past": [9, 11], "263": [9, 11, 16, 20, 466], "gcc1eb816c": [9, 11, 16, 20, 466], "x_y_z": [9, 11], "retain": [9, 11, 17, 77, 146, 147], "guarante": [9, 11, 387, 471], "kept": [9, 11], "synchron": [9, 11], "altogeth": [9, 11, 77], "who": [9, 11, 21], "wide": [9, 11, 16, 18, 465, 469], "onlin": [9, 11, 17], "book": [9, 11, 472], "cours": [10, 17, 122, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "strai": 10, "peril": 10, "forbidden": 10, "greatest": 10, "extent": [10, 12], "had": [10, 77, 157, 168, 169], "great": [10, 19, 146, 147, 169], "knew": [10, 21], "rectangl": 10, "blob": [10, 11, 13, 16, 154, 155], "def": [10, 98, 99, 100, 101, 102, 103, 104, 116, 144, 146, 147, 149, 154, 155, 156, 157, 161, 162, 169], "width": [10, 154, 155, 448, 468], "height": [10, 114, 146, 147, 157], "black": [10, 168], "red": 10, "strong": 10, "sorri": 10, "lose": 10, "mixedcas": 10, "lowercas": 10, "lower_case_with_underscor": 10, "deviat": [10, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 471], "unsur": 10, "anybodi": 10, "willing": 10, "seen": [10, 77, 146, 147], "unittest": [10, 21, 376, 377], "heavili": [10, 453], "care": [10, 15, 17, 77, 157, 168], "taken": [10, 15, 21, 74, 75, 77, 144, 154, 155, 387, 393], "defin": [10, 21, 46, 47, 48, 53, 56, 57, 64, 69, 70, 77, 101, 123, 124, 144, 146, 147, 149, 150, 154, 155, 161, 168, 203, 213, 392, 401, 404, 408, 409, 412, 413, 415, 422, 428, 429, 431, 436, 448, 468, 471, 475, 476], "parallel_2": 10, "processor_0": [10, 374], "id": [10, 17, 20, 36, 127, 169, 392, 396, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 440, 441, 442, 443, 444, 445, 446, 448, 449, 472], "processor_0_of_2": [10, 374], "processor_1_of_2": [10, 374], "processor_0_of_3": [10, 374], "processor_1_of_3": [10, 374], "processor_2_of_3": [10, 374], "register_skipp": [10, 20, 374], "pertain": 10, "reli": [11, 69, 70, 448, 468, 475], "parti": [11, 19, 465], "begin": [11, 15, 17, 21, 36, 46, 48, 53, 56, 57, 68, 71, 72, 77, 103, 104, 124, 125, 130, 144, 146, 147, 149, 150, 154, 155, 156, 157, 168, 203, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 471, 476], "By": [11, 17, 107, 157, 374, 408], "select": [11, 20, 21, 202, 203, 336, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 392, 467, 471], "webspac": 11, "infer": 11, "drawn": 11, "referenc": 11, "concur": 11, "fact": [11, 77, 168, 169, 374, 408], "rudimentari": [11, 18, 107, 338], "introduct": [11, 20, 467, 470, 472], "expedi": [11, 21], "manag": [11, 13, 17, 465], "virtual": [11, 20, 466, 467], "keep": [11, 31, 32, 33, 34, 124, 145], "suffici": [11, 146, 147, 169, 170, 378, 388, 394], "privileg": 11, "channel": [11, 17], "dai": [11, 21], "micromamba": 11, "popul": 11, "anaconda": 11, "merit": 11, "relationship": [11, 21, 90, 157], "myfipyenv": 11, "awar": [11, 16, 17], "restrict": [11, 16, 17, 174, 387, 468], "unpredict": 11, "later": [11, 17, 19, 100, 149, 404], "unfortun": [11, 21, 169, 393], "prove": [11, 21], "Then": 11, "mymergedenviron": 11, "lockfil": [11, 20, 466, 467], "pin": 11, "safest": 11, "obviat": 11, "flexibl": [11, 273, 465], "highest": 11, "mpich": 11, "traitsui": 11, "bit": [11, 69, 70, 146, 147, 157], "rot": 11, "One": [11, 17, 77, 85, 98, 100, 139, 146, 147, 157, 161, 168, 448, 468], "vtkviewer": [11, 20], "henc": [11, 146, 147, 157], "batteri": [11, 21], "bare": 11, "quit": [11, 469], "mamba": 11, "speed": [11, 107], "pretti": 11, "visual": [11, 18, 453, 465], "fewer": [11, 157], "amongst": 11, "freeli": [11, 15, 21, 171], "mind": [11, 17], "preserv": [11, 111, 112, 392], "courag": 11, "impati": 11, "quickli": [11, 18, 125, 212, 465], "formal": 11, "confid": [11, 107], "requisit": 11, "alter": [11, 17, 21], "admin": 11, "termin": [11, 16, 17, 77, 123, 124, 125, 130, 157], "15": [11, 14, 20, 36, 51, 53, 54, 58, 63, 64, 77, 101, 103, 146, 147, 149, 154, 155, 156, 157, 168, 215, 258, 259, 262, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 458, 466, 470, 472], "copyright": [11, 12], "credit": 11, "geuz": [11, 465], "creation": [11, 69, 70, 168, 475], "irregular": [11, 69, 70, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439], "analyz": [11, 69, 70], "judici": [11, 17], "compon": [11, 19, 31, 32, 71, 72, 98, 99, 100, 101, 102, 103, 104, 146, 147, 156, 161, 472], "fast": [11, 16, 21, 408, 472], "march": [11, 14, 408, 472], "ktchu": 11, "serendipityresearch": 11, "surfac": [11, 17, 19, 34, 69, 70, 89, 125, 140, 144, 154, 155, 157, 203, 468], "curv": [11, 157], "addition": [11, 19, 107], "pylsmlib": 11, "tree": [11, 438, 439, 460], "violat": 11, "tamper": 11, "util": [11, 20, 145, 149, 150, 203, 335, 338, 378, 396, 465], "stow": 11, "virtualenv": 11, "buildout": 11, "cd": [11, 387], "power": [11, 13, 17, 21, 156, 171, 363, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 471, 475], "unix": [11, 13, 17], "reliabl": [11, 13, 169], "blog": [11, 13], "hpc": [11, 13], "team": [11, 13], "gricad": [11, 13], "tuto": [11, 13], "2017": [11, 13, 16, 20, 466], "07": [11, 13, 387], "04": [11, 13, 20, 466, 472], "my": [11, 13, 17, 20, 169, 466], "md": [11, 13], "pure": [11, 13, 17, 71, 96, 146, 147, 156], "nativebuildinput": [11, 13], "know": [11, 13, 17, 21, 102, 168, 169], "toolz": [11, 13], "persist": [11, 13, 19, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "employe": 12, "agenc": 12, "feder": [12, 21], "pursuant": 12, "protect": 12, "foreign": 12, "permiss": 12, "countri": 12, "deriv": [12, 15, 17, 31, 32, 33, 34, 65, 71, 77, 146, 147, 156, 161, 177, 336, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468, 469, 470, 471, 475, 476], "fee": 12, "herebi": 12, "grant": [12, 19], "exclus": [12, 17], "basi": [12, 472], "disclaim": 12, "warranti": 12, "THE": 12, "AS": 12, "OF": 12, "kind": 12, "OR": 12, "statutori": 12, "BUT": 12, "NOT": 12, "TO": 12, "THAT": 12, "WILL": 12, "conform": 12, "merchant": 12, "fit": [12, 21, 157], "FOR": 12, "AND": [12, 392], "freedom": 12, "infring": 12, "BE": 12, "IN": 12, "NO": 12, "event": [12, 146, 147, 429], "shall": 12, "liabl": 12, "damag": 12, "indirect": 12, "consequenti": 12, "aris": 12, "connect": [12, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "WITH": 12, "contract": 12, "tort": 12, "otherwis": [12, 16, 85, 127, 128, 144, 154, 155, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "injuri": 12, "sustain": 12, "BY": 12, "person": 12, "loss": [12, 16, 233, 308], "aros": 12, "hereund": 12, "cite": 14, "j": [14, 21, 72, 77, 96, 98, 101, 102, 104, 123, 124, 125, 130, 146, 147, 149, 150, 154, 155, 156, 157, 158, 175, 336, 378, 387, 392, 472], "11": [14, 17, 20, 68, 69, 70, 89, 101, 107, 116, 127, 128, 161, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 392, 466, 472], "pp": [14, 344], "2009": [14, 20, 466, 472], "1109": 14, "mcse": 14, "w": [14, 102, 125, 130, 146, 147, 150, 154, 155, 157, 203, 378, 387, 394, 472], "boetting": [14, 96, 472], "earli": [14, 21, 75, 472], "reactiv": [14, 15, 20, 171, 472], "wet": [14, 15, 20, 149, 150, 171, 472], "82": [14, 161, 162, 472], "051601": [14, 472], "2010": [14, 20, 466, 472], "1103": [14, 472], "physrev": [14, 472], "mohanti": 14, "sohn": 14, "gradient": [14, 20, 31, 32, 39, 78, 79, 96, 102, 107, 144, 146, 147, 149, 150, 154, 155, 157, 161, 240, 241, 273, 278, 283, 313, 344, 358, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 466, 468], "journal": [14, 336, 472], "034912": 14, "1063": [14, 472], "3190607": 14, "pusztai": 14, "l": [14, 16, 17, 36, 39, 40, 48, 49, 51, 53, 54, 58, 59, 60, 62, 63, 65, 72, 75, 77, 78, 79, 81, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 116, 117, 125, 130, 146, 147, 149, 156, 157, 158, 161, 168, 202, 335, 336, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 472], "k": [14, 17, 21, 77, 96, 98, 101, 124, 125, 130, 146, 147, 156, 157, 289, 368, 387, 439, 442, 444, 445, 446, 448, 449, 451, 452, 472], "\u00f6": [14, 469], "rnyei": 14, "gr": 14, "\u00e1": 14, "sy": [14, 374, 392, 401, 409, 413, 415], "approach": [14, 16, 19, 20, 77, 146, 147, 157, 171, 203, 466, 468, 469], "heterogen": 14, "nucleat": [14, 31, 32], "alloi": [14, 31, 32, 146, 147, 472], "014204": 14, "physrevb": 14, "p": [14, 16, 17, 64, 96, 101, 102, 107, 146, 147, 150, 154, 155, 156, 157, 161, 336, 368, 378, 387, 465, 468, 471, 472], "moffat": [14, 472], "kim": [14, 472], "josel": [14, 472], "curvatur": [14, 124, 125, 472], "enhanc": [14, 465, 472], "adsorb": [14, 125, 472], "coverag": [14, 123, 124, 125, 130, 472], "bottom": [14, 78, 79, 107, 154, 155, 158, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "damascen": 14, "electrochimica": 14, "acta": [14, 472], "53": 14, "2007": [14, 16, 20, 466], "1016": [14, 472], "electacta": 14, "03": [14, 20, 69, 75, 442, 451, 452, 466, 472], "025": [14, 88, 89, 102, 103, 144, 154, 155, 157], "campbel": 14, "mcfadden": [14, 96, 472], "kirkendal": [14, 472], "displac": [14, 157, 199, 203, 209, 211, 214, 220, 228, 387], "dimension": [14, 19, 77, 78, 99, 150, 157, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 311, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 472], "proceed": [14, 382], "royal": 14, "societi": [14, 472], "mathemat": [14, 17, 437, 465, 468, 472], "2088": 14, "3347": 14, "3373": 14, "1098": 14, "rspa": 14, "1904": 14, "cickovski": 14, "ara": 14, "swat": 14, "merk": 14, "glimm": 14, "hentschel": 14, "alber": 14, "glazier": 14, "newman": 14, "izaguirr": 14, "gene": 14, "organ": 14, "multicellular": 14, "60": [14, 101, 102, 103, 125, 157, 378, 387], "saylor": [14, 472], "theori": 14, "letter": [14, 472], "035703": 14, "physrevlett": [14, 472], "mazur": 14, "soil": 14, "solar": [14, 472], "radiat": 14, "de": 14, "physiqu": 14, "iv": 14, "franc": 14, "320": 14, "2006": [14, 20, 466, 472], "1051": 14, "jp4": 14, "2006137061": 14, "electrodeposit": [14, 15, 130, 156, 171, 472], "c127": [14, 472], "c132": [14, 472], "1149": [14, 472], "2165580": [14, 472], "gold": [14, 20, 472], "submicromet": [14, 472], "trench": [14, 20, 122, 123, 124, 125, 130, 472], "c11": [14, 472], "c18": [14, 472], "2128765": [14, 472], "were": [14, 17, 21, 374, 392], "honor": 14, "invit": 14, "deliv": 14, "keynot": 14, "confer": 14, "caltech": 14, "august": [14, 16], "talk": 14, "georg": 14, "mason": 14, "depart": 14, "octob": [14, 16], "devic": 14, "radiolog": 14, "health": 14, "food": 14, "drug": [14, 15, 171, 472], "ge": [14, 114, 344], "siam": 14, "tm": [14, 39, 40, 157], "annual": [14, 472], "meet": [14, 124], "februari": 14, "educ": 14, "luncheon": 14, "roundtabl": 14, "transform": [14, 15, 96, 146, 147, 156, 157, 171, 468], "microstructologi": 14, "iii": [14, 203, 472], "birmingham": 14, "al": [14, 149, 150, 154, 155, 161], "2004": [14, 20, 101, 466, 472], "mr": 14, "fall": [14, 107], "novemb": 14, "arbitrari": [15, 17, 19, 98, 99, 100, 169, 171, 260, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 469], "ellipt": [15, 171], "hyperbol": [15, 157, 171, 378, 387], "parabol": [15, 171], "dendrit": [15, 19, 21, 144, 145, 154, 155, 171, 472], "elut": [15, 171, 472], "stent": [15, 171], "photovolta": [15, 171], "redistribut": 15, "bear": 15, "welcom": [15, 21], "collabor": [15, 19], "project": [15, 18, 69, 70, 465], "driven": 15, "editor": 15, "tcsh": 15, "bash": 15, "throughout": [15, 124, 145], "keyboard": 15, "denot": [15, 96, 107, 149, 161, 468], "12": [15, 17, 20, 21, 77, 101, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 437, 466, 472], "twelv": 15, "primari": [15, 21], "secondari": 15, "remain": [15, 17, 34, 77, 101, 103, 107, 140, 145, 146, 147, 156, 169, 170, 392, 471], "margin": [15, 17], "sensit": 15, "indent": 15, "posix": 15, "seriou": [15, 16, 32, 111, 112], "less": [16, 77, 146, 147, 245, 289, 344, 358, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468], "popular": [16, 470], "hardwar": 16, "trivial": [16, 32, 344, 358], "defaultsolv": [16, 20, 33, 34, 36, 232], "lineargmressolv": [16, 20, 31, 60], "fipy_solv": [16, 17], "linearlusolv": [16, 20, 31, 36, 60, 99, 101, 147, 168, 358], "regardless": [16, 144, 154, 155, 202], "mc": [16, 146, 147, 465], "anl": [16, 465], "toolkit": [16, 465], "structur": [16, 18, 20, 77, 465, 466, 468, 472], "routin": [16, 157, 171, 245, 465], "scalabl": [16, 465], "precodition": 16, "pctype": 16, "precon": [16, 31, 33, 34, 98, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 282, 283, 284, 285, 286, 288, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 333, 334], "declar": [16, 33, 34, 77, 107, 146, 147, 415, 475], "storag": [16, 144, 154, 155, 203, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 465, 468], "precondition": [16, 17, 20, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 274, 278, 279, 280, 281, 282, 283, 284, 289, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 465], "factor": [16, 17, 32, 107, 146, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 245, 271, 282, 289, 296, 387, 448, 468], "archaic": [16, 465], "krylov": [16, 245, 246], "conjunct": [16, 17, 21, 177], "readthedoc": [16, 465], "nvidia": [16, 465], "amgx": [16, 266, 267, 268, 269, 270, 272, 274, 465], "sandia": [16, 332, 465], "difficult": [16, 18, 77, 169, 171, 465], "alongsid": 16, "compil": [16, 17, 21, 465], "suppress": [16, 392], "commonli": [16, 169], "encount": [16, 393], "gen_prolong": 16, "eigen": 16, "aztec": [16, 318, 329, 332], "az_loss": 16, "precis": [16, 233, 308, 378, 387, 392], "difficulti": 16, "usual": [16, 21, 157, 161, 168, 212, 214, 215, 228, 245, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392], "az_ill_cond": 16, "gmre": [16, 233, 242, 259, 270, 279, 295, 315], "hessenberg": [16, 233], "ill": [16, 233, 289], "accur": [16, 31, 33, 34, 77, 111, 157, 344], "az_breakdown": 16, "breakdown": [16, 233, 245], "reach": [16, 17, 21, 74, 75, 125, 146, 147, 157, 245, 289], "endeavor": [16, 17], "behavior": [16, 17, 20, 21, 125, 170, 392, 466, 475, 476], "criterion": [16, 17, 20, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 289, 290, 293, 294, 295, 296, 297, 302, 303, 304, 305, 308, 313, 314, 315, 316, 317, 331, 332, 333, 334], "column": [16, 17, 69, 70], "detect": 16, "unscal": [16, 17, 233, 239, 240, 241, 242, 243, 244, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 333, 334], "mathsf": [16, 144, 154, 155, 157, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "_2": [16, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 392], "az_nosc": 16, "rh": [16, 17, 36, 107, 176, 239, 240, 241, 242, 243, 244, 246, 247, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 333, 334, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "ksp_norm_unprecondit": 16, "pcg": [16, 262, 272, 283], "qmre": 16, "az_rh": 16, "az_anorm": 16, "relative_ini_cor": 16, "bicgstab": [16, 293], "minr": 16, "az_r0": 16, "_1": [16, 335, 392], "az_sol": 16, "ksp_norm_precondit": 16, "natur": [16, 17, 71, 125, 169, 239, 240, 241, 242, 244, 246, 247, 279, 280, 283, 284, 290, 305, 313, 314, 315, 317, 331, 333, 334, 378, 387, 468], "sqrt": [16, 20, 36, 40, 64, 68, 69, 70, 74, 75, 77, 102, 111, 114, 116, 124, 139, 140, 149, 157, 203, 344, 358, 368, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "ksp_norm_natur": 16, "ksp_norm_default": 16, "top": [16, 78, 79, 124, 127, 128, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 408, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "prior": [16, 335], "row": 16, "happen": [16, 21, 77], "ksptype": 16, "discern": 16, "burn": 16, "bowl": 16, "chicken": 16, "entrail": 16, "sai": 16, "weird": [16, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "paramet": [16, 17, 20, 21, 31, 32, 39, 40, 69, 70, 75, 77, 101, 103, 107, 111, 112, 116, 117, 123, 124, 125, 127, 128, 130, 145, 146, 147, 149, 150, 157, 161, 168, 173, 175, 176, 177, 199, 202, 203, 209, 211, 214, 220, 228, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 378, 383, 387, 388, 391, 392, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464, 469, 471, 475, 476], "succ": 16, "captur": 16, "amgx_solve_success": 16, "az_norm": 16, "iterationconverg": [16, 20, 233, 245], "ksp_converged_it": 16, "absolutetoleranceconverg": [16, 20, 233, 245, 289], "ksp_converged_atol": 16, "rhszeroconverg": [16, 20, 233, 289], "mathbf": [16, 289], "relativetoleranceconverg": [16, 20, 233, 245, 289], "ksp_converged_rtol": 16, "happybreakdownconverg": [16, 20, 233, 245], "wors": [16, 17, 233], "ksp_converged_happy_breakdown": 16, "lossofaccuracyconverg": [16, 20, 233, 308], "round": [16, 378, 387], "iteratingconverg": [16, 20, 233, 245], "progress": [16, 36, 233, 415], "ksp_converged_iter": 16, "breakdowndiverg": [16, 20, 233, 245, 275, 302, 308], "illeg": [16, 378, 387], "ksp_diverged_breakdown": 16, "amgx_solve_fail": 16, "iterationdiverg": [16, 20, 233, 245, 275, 289, 302, 308], "ksp_diverged_it": 16, "amgx_solve_diverg": 16, "az_maxit": 16, "preconditioningdiverg": [16, 20, 233, 245, 289], "ksp_diverged_pc_fail": 16, "illconditionedpreconditionerdiverg": [16, 20, 233, 245], "inner": [16, 34, 77, 140, 203, 289], "posit": [16, 17, 69, 70, 77, 114, 117, 124, 169, 245, 283, 289, 318, 327, 417, 442, 443, 444, 471], "ksp_diverged_indefinite_pc": 16, "illconditioneddiverg": [16, 20, 233, 245, 289, 308], "ksp_diverged_indefinite_mat": 16, "stagnateddiverg": [16, 20, 233, 289], "stagnat": [16, 233, 289], "outofrangediverg": [16, 20, 233, 245, 289], "quantiti": [16, 21, 69, 70, 96, 99, 123, 157, 289, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 469], "becam": [16, 233, 245, 289], "ksp_diverged_nanorinf": 16, "nulldiverg": [16, 20, 233, 245], "ksp_diverged_nul": 16, "tolerancediverg": [16, 20, 233, 245], "divtol": [16, 245], "ksp_diverged_dtol": 16, "ksp": [16, 245], "sec": 16, "convergencetest": 16, "amgx_refer": 16, "2d1d5b042a09e131ffe191726aa6829b33590970": 16, "_isolv": 16, "l30": 16, "aztecoo": [16, 331], "az_conv": 16, "sand": 16, "sand2004": 16, "3796": 16, "aztecoouserguid": 16, "ksp_diverged_breakdown_bicg": 16, "ksp_diverged_nonsymmetr": 16, "sens": 17, "strongli": [17, 168], "proce": [17, 32, 69, 70, 77, 78, 79, 146, 147, 157, 161], "assumpt": [17, 125, 146, 147], "seri": 17, "familiar": 17, "yourself": [17, 475, 476], "excel": 17, "dive": [17, 472], "Into": [17, 472], "deeper": [17, 408], "insight": 17, "getlogg": 17, "consol": 17, "streamhandl": 17, "setlevel": 17, "info": [17, 391], "addhandl": 17, "verbos": [17, 374, 376, 377], "save": [17, 20, 124, 127, 128, 149, 388, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 465, 466], "logfil": 17, "filehandl": 17, "filter": [17, 169, 305], "addfilt": 17, "fipy_log_config": 17, "mpilog": 17, "mpiscatteredfilehandl": 17, "filepattern": 17, "mpirank": 17, "d_of_": 17, "mpisiz": 17, "uniqu": [17, 21], "egg_info": 17, "investig": [17, 90], "tracker": 17, "dashboard": 17, "core": [17, 21], "insensit": 17, "myfipyscript": 17, "someflag": 17, "lazili": [17, 437], "recalcul": [17, 117, 161, 162, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 437], "skfmm": 17, "compos": [17, 21, 146, 147, 475], "fipy_inlin": 17, "fipy_inline_com": 17, "context": [17, 188, 203, 207, 232, 305, 339, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438], "json": [17, 465], "config": [17, 376], "dictconfig": 17, "fipy_verbose_solv": 17, "lineargeneralsolv": [17, 20], "fipy_default_criterion": 17, "admittedli": 17, "circular": [17, 68, 69, 70, 111, 144, 145, 149, 154, 155, 344], "fipy_include_numerix_al": [17, 170], "fipy_cach": 17, "petsc_opt": 17, "tri2d": [17, 20, 75, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 229, 230, 231, 439, 446, 448, 449, 451, 452], "skewedgrid2d": [17, 20, 87, 90], "advis": 17, "myscript": [17, 124, 305], "slurm": 17, "task": [17, 21], "manufactur": 17, "hire": 17, "bigger": 17, "versu": 17, "style": [17, 448], "observ": [17, 145], "exhibit": [17, 96, 415, 469], "law": [17, 21, 146, 147, 161, 363, 471], "slab": 17, "compact": 17, "carri": 17, "fairli": [17, 144, 149, 150, 154, 155], "lag": 17, "discrep": 17, "obviou": [17, 146, 157], "20": [17, 20, 21, 31, 32, 68, 78, 79, 88, 89, 93, 100, 101, 130, 144, 145, 147, 154, 155, 158, 161, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 408, 437, 466, 469, 472], "modest": 17, "caveat": 17, "architectur": [17, 465], "easiest": 17, "confirm": [17, 77, 101, 103, 149, 156, 232], "half": [17, 149, 170], "look": [17, 20, 77, 146, 147, 466], "69815": 17, "freed": 17, "69814": 17, "69813": 17, "essenti": [17, 46, 47, 48, 56, 57, 77, 124, 146, 147, 168, 378, 387, 392, 468, 470], "sub": [17, 228, 468, 473, 474, 477], "somewhat": [17, 21, 31, 33, 34, 344, 358], "xterm": 17, "ipdb": 17, "spawn": 17, "intent": 17, "node": [17, 203], "cluster": 17, "child": 17, "compet": [17, 31, 32, 146, 147], "ghost": [17, 203], "exchang": [17, 124, 125, 130], "gil": 17, "bind": [17, 455, 465, 475], "parent": 17, "suffer": 17, "launch": [17, 77], "minut": [17, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "unrestrict": [17, 21], "degrad": 17, "conceiv": 17, "unfett": 17, "slot": 17, "msg03393": 17, "notfun": 17, "polygon": 17, "wrapper": [17, 203, 236, 237, 271, 278, 279, 280, 282, 283, 284, 285, 286, 288, 296, 298, 299, 300, 310, 311, 380, 388, 393, 465], "gmsh3d": [17, 20, 170, 203], "geometri": [17, 21, 69, 70, 123, 124, 125, 130, 140, 168, 176, 187, 203, 213, 229, 230, 404, 408, 412, 422, 428, 429, 431], "geo": [17, 203], "msh": [17, 68, 203], "occur": [17, 34, 149, 157, 161, 168, 233, 308, 378, 387, 408], "whenev": [17, 305, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "compromis": [17, 77], "highli": [17, 21, 318, 325], "orthogon": [17, 21, 87, 89, 90, 228, 245, 468], "tighter": 17, "tempor": 17, "eqn0": [17, 71], "eqn1": [17, 71], "coupledeqn": [17, 161, 162], "quadrant": [17, 158], "act": [17, 21], "term00": 17, "term01": 17, "source0": 17, "term10": 17, "term11": 17, "source1": 17, "ttfamili": 17, "hline": [17, 125, 130], "decis": 17, "regard": 17, "upper": [17, 438, 442], "revers": [17, 49, 54, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "decompos": [17, 31, 33, 34, 71], "2nd": [17, 32, 337, 350, 472], "pair": [17, 71, 96, 392], "4th": [17, 350], "phi": [17, 20, 21, 31, 32, 33, 34, 36, 46, 47, 48, 53, 56, 57, 65, 68, 69, 70, 72, 74, 75, 77, 78, 79, 81, 96, 100, 101, 102, 103, 104, 111, 112, 114, 116, 117, 124, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 168, 169, 176, 177, 344, 348, 350, 353, 355, 356, 358, 359, 361, 363, 364, 365, 368, 370, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 466, 469, 470], "kappa_c": [17, 146, 147], "kappa_": [17, 96, 102, 146, 147, 156, 157], "mu": [17, 107, 149, 150, 154, 155, 156, 161, 162, 387, 409, 415], "hat": [17, 48, 77, 124, 175, 177, 412, 431, 432, 468], "qquad": [17, 36, 64, 96, 102, 146, 147, 156, 344], "facestop": [17, 20, 49, 54, 78, 79, 107, 124, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "fixedvalu": [17, 20, 168, 169, 170, 177], "facenorm": [17, 213, 214, 215], "exterior": [17, 65, 69, 70, 77, 139, 203], "firstli": [17, 69, 70, 111, 112, 116, 117, 139, 161, 408], "diffcoeff": [17, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 168, 169], "convcoeff": [17, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 168, 169], "extra": [17, 273, 374], "eqn": [17, 39, 40, 68, 71, 75], "diffusioncoeff": [17, 36, 39, 40, 64, 74, 124, 149, 150, 168], "exteriorflux": 17, "fixedflux": [17, 20, 168, 170, 177], "unless": [17, 19, 31, 32, 33, 34, 202, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 378, 394], "xy": [17, 212, 344], "quad": [17, 81, 157], "elsewher": 17, "repres": [17, 20, 21, 31, 32, 46, 47, 56, 57, 65, 71, 74, 77, 98, 100, 101, 102, 103, 117, 124, 125, 144, 145, 154, 155, 157, 168, 176, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 348, 350, 361, 368, 387, 401, 404, 409, 413, 415, 436, 442, 446, 466, 468, 469], "portion": [17, 21], "s_r": 17, "int_v": [17, 348, 353, 355, 356, 359, 361, 363, 368, 370, 468], "dv": [17, 146, 147, 161, 348, 353, 355, 356, 359, 361, 363, 368, 370, 468], "int_": [17, 146, 147, 468], "notin": 17, "setvalu": [17, 20, 21, 31, 33, 34, 64, 69, 70, 72, 77, 81, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 128, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452], "powerlawconvectionterm": [17, 20, 46, 47, 48, 56, 57, 60, 62, 63, 64, 65, 98, 99, 100, 101, 103, 146, 155, 156, 168, 169, 344, 347, 348, 355, 356, 357, 358, 359, 361, 364, 365, 368, 370, 371, 468], "onto": [17, 31, 33, 34, 169], "interven": [17, 77], "neighbor": [17, 344, 408, 468, 471], "phi_f": [17, 348, 355, 356, 359, 363, 370, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "approx": [17, 146, 147, 157, 412, 431, 432], "phi_p": [17, 344, 348, 353, 355, 356, 358, 359, 361, 363, 368, 370, 468, 471], "pf": [17, 101], "_f": [17, 107, 161, 348, 355, 356, 359, 363, 370, 412, 431, 432, 468], "adjoin": 17, "g_f": 17, "b_f": 17, "turn": [17, 168], "gamma": [17, 68, 130, 149, 150, 154, 155, 169, 353, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468, 469], "sum_f": [17, 107, 353, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 468], "gamma_f": [17, 353, 468], "a_f": [17, 107, 161, 162, 348, 353, 355, 356, 359, 363, 370, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 468], "sum_": [17, 72, 96, 98, 102, 104, 125, 156, 348, 355, 356, 359, 363, 370, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "modif": 17, "dpf": 17, "celldistancevector": 17, "robincoeff": 17, "similarli": [17, 125], "heat": [17, 77, 144, 146, 147, 154, 155, 157, 472], "t_": 17, "largevalu": 17, "domin": 17, "typic": [17, 107, 146, 147, 350], "boolean": [17, 157, 378, 387], "noth": [17, 98, 99, 100, 140, 374], "believ": [17, 168], "intuit": 17, "pathologi": 17, "attent": [17, 203], "implicitli": [17, 157, 161], "nx": [17, 31, 32, 33, 36, 39, 40, 48, 49, 51, 53, 54, 58, 59, 60, 62, 63, 64, 65, 71, 72, 74, 75, 77, 78, 79, 81, 85, 88, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 127, 128, 139, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 388, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 458], "rvert_": [17, 77, 157], "facesright": [17, 20, 36, 46, 47, 48, 51, 53, 56, 57, 58, 59, 60, 62, 63, 64, 65, 71, 75, 77, 78, 79, 81, 88, 89, 101, 107, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "1e": [17, 33, 34, 36, 39, 40, 46, 47, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 71, 77, 78, 79, 81, 85, 98, 99, 100, 101, 102, 103, 114, 124, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 169, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 344, 358, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "unexpect": [17, 374], "everywher": [17, 100, 102, 124, 149, 150, 157], "januari": [17, 101], "2020": [17, 20, 466], "pledg": 17, "priorit": 17, "rapidli": [17, 21], "impract": 17, "hopefulli": 17, "latexpdf": 17, "plu": [17, 77, 468], "v7": 17, "bibliograph": 17, "numpydoc": 17, "embed": [17, 19, 21, 140], "imagemagick": 17, "siunit": 17, "sty": 17, "texliv": 17, "pyspel": 17, "hunspel": 17, "libreoffic": 17, "wget": 17, "aff": 17, "cgit": 17, "freedesktop": 17, "en": [17, 465], "a4473e06b56bfe35187e302754f6baaa8d75e54f": 17, "dic": 17, "far": [18, 77, 101, 103, 124, 125, 130, 156, 408], "vkml": 19, "aspect": [19, 107, 125, 130, 150, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 440, 441, 443, 444, 445, 446, 448, 449], "semin": 19, "michael": 19, "water": 19, "prof": 19, "edwin": 19, "garcia": 19, "purdu": 19, "coarsen": 19, "random": [19, 31, 32, 33, 34, 87, 144, 154, 155, 161, 162, 220, 401, 409, 413, 415, 429, 436], "crystallograph": 19, "nuclei": [19, 154, 155], "radiu": [19, 34, 69, 70, 111, 140, 144, 145, 154, 155, 203], "size": [19, 20, 32, 75, 101, 124, 125, 130, 161, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 394, 417, 448, 468], "homogen": [19, 31, 32], "dispers": 19, "wall": [19, 107], "seed": [19, 144, 145, 154, 155, 161, 162, 401, 409, 413, 415, 429], "fold": 19, "undercool": [19, 144, 154, 155, 157], "liquid": [19, 101, 103, 144, 145, 146, 147, 149, 154, 155, 156, 161], "strength": [19, 468, 471], "tension": 19, "segreg": [19, 31, 32, 72, 101, 103, 104, 156], "chemic": [19, 96, 146, 147, 156, 161, 469, 472], "john": [19, 472], "browser": 19, "assess": 19, "potenti": [19, 72, 96, 100, 101, 102, 103, 104, 146, 147, 156, 161, 162, 469], "word": [19, 123, 124, 125, 130, 157], "michigan": 19, "boston": 19, "japan": 19, "england": 19, "wherev": 19, "cowork": 19, "planet": 19, "him": 19, "temporari": [19, 378, 388, 394, 396], "travel": 19, "privat": [19, 374], "publicli": 19, "peopl": 19, "world": 19, "regist": 19, "registr": 19, "nanohub": 19, "overview": [20, 21, 374, 466, 467], "client": [20, 466], "submit": [20, 466], "feedstock": [20, 466], "announc": [20, 466], "absolute_toler": [20, 240, 241, 242, 244, 246, 260, 261, 271, 293, 294, 295, 296, 297, 303, 304, 466], "divergence_toler": [20, 240, 241, 242, 244, 246, 466], "openmp": [20, 465, 466], "v": [20, 34, 71, 107, 123, 124, 125, 127, 130, 146, 147, 156, 157, 161, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 442, 458, 466, 472], "dirichlet": [20, 78, 79, 176, 466], "outlet": [20, 466], "inlet": [20, 466], "partial_i": [20, 68, 161, 466], "gamma_": [20, 68, 466], "ij": [20, 68, 466], "partial_j": [20, 68, 161, 466], "imag": [20, 123, 125, 127, 128, 130, 154, 155, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464, 466], "screen": [20, 123, 125, 130, 392], "movi": [20, 466], "oh": [20, 169, 466], "anymor": [20, 466], "here": [20, 21, 39, 40, 49, 54, 77, 107, 123, 125, 145, 149, 150, 169, 170, 203, 344, 358, 392, 408, 466, 471], "fvm": [20, 21, 466, 470], "cc": [20, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 116, 168, 466, 470], "vc": [20, 466, 470], "scheme": [20, 46, 47, 48, 56, 57, 77, 111, 112, 154, 155, 157, 161, 348, 355, 356, 359, 363, 370, 408, 466, 468, 470], "2022": [20, 466], "06": [20, 387, 466], "08": [20, 68, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 466], "01": [20, 31, 32, 33, 34, 71, 72, 75, 98, 101, 102, 103, 104, 114, 149, 150, 154, 155, 156, 161, 162, 203, 336, 378, 387, 401, 436, 439, 444, 445, 448, 449, 451, 452, 466], "02": [20, 144, 145, 149, 150, 154, 155, 203, 466, 472], "14": [20, 161, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 458, 466, 468, 470, 472], "2019": [20, 466], "28": [20, 39, 125, 146, 147, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 387, 466, 472], "22": [20, 96, 156, 466, 472], "2016": [20, 466], "24": [20, 77, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 466, 472], "2015": [20, 466], "2013": [20, 466], "09": [20, 387, 466, 472], "2012": [20, 162, 466], "16": [20, 161, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 337, 466, 470, 472], "2011": [20, 161, 466, 472], "05": [20, 69, 70, 101, 144, 154, 155, 161, 162, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 458, 466], "2008": [20, 466], "glossari": [20, 466, 467], "subpackag": [20, 473, 477], "method1": [20, 475, 476], "method2": [20, 475, 476], "doctest_raw_input": [20, 171], "boundarycondit": [20, 21, 36, 81, 168, 169, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 412, 422, 432, 437], "nthorderboundarycondit": [20, 36, 81], "offsetsparsematrix": 20, "petscmatrix": 20, "pysparsematrix": 20, "scipymatrix": 20, "sparsematrix": [20, 180, 256, 344, 358], "trilinosmatrix": 20, "abstractmesh": [20, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "vtkcelldataset": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "vtkfacedataset": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "__div__": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387], "__getstate__": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 236, 237, 238, 310, 311, 312, 380, 381, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__radd__": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387], "__sub__": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387], "__truediv__": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387], "aspect2d": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "cellfaceid": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "facesback": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "facesbottom": [20, 49, 54, 78, 79, 107, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "facesdown": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "facesfront": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "facesleft": [20, 36, 46, 47, 48, 51, 53, 56, 57, 58, 59, 60, 62, 63, 64, 65, 71, 72, 74, 75, 77, 78, 79, 81, 88, 89, 101, 104, 107, 139, 162, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "facesup": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "meshadditionerror": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "__cause__": [20, 188, 203, 207, 232, 305, 339, 438], "__context__": [20, 188, 203, 207, 232, 305, 339, 438], "__delattr__": [20, 188, 203, 207, 232, 305, 339, 438], "__getattribute__": [20, 188, 203, 207, 232, 305, 339, 438], "__reduce__": [20, 188, 203, 207, 232, 305, 339, 438], "__setattr__": [20, 188, 203, 207, 232, 305, 339, 438], "__str__": [20, 188, 203, 207, 232, 233, 245, 275, 289, 302, 305, 308, 339, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438], "add_not": [20, 188, 203, 207, 232, 305, 339, 438], "with_traceback": [20, 188, 203, 207, 232, 305, 339, 438], "builder": [20, 210], "abstractgridbuild": 20, "grid1dbuild": [20, 210], "grid2dbuild": 20, "grid3dbuild": 20, "periodicgrid1dbuild": 20, "utilityclass": 20, "cylindricalgrid2d": [20, 56, 57, 202], "cylindricalnonuniformgrid1d": [20, 202], "__mul__": [20, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 378, 387], "__rmul__": [20, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 378, 387], "extrud": [20, 34, 140, 199, 203, 209, 211, 214, 220, 228], "cylindricaluniformgrid1d": [20, 202], "cylindricaluniformgrid2d": [20, 202], "sphericalgrid1d": [20, 202], "gmsh2din3dspac": [20, 34, 140, 170, 203], "gmshexcept": [20, 203], "gmshfile": [20, 203], "gmshgrid2d": [20, 203], "gmshgrid3d": [20, 93, 203], "mshfile": [20, 203], "makemapvari": [20, 203], "meshexporterror": [20, 203], "posfil": [20, 203], "gmshversion": [20, 203], "openmshfil": [20, 203], "openposfil": [20, 203], "nonuniformgrid2d": [20, 199, 202, 203, 209, 214, 220, 228], "nonuniformgrid3d": [20, 202], "periodicgrid1d": [20, 85], "periodicgrid2d": 20, "periodicgrid2dleftright": [20, 214], "periodicgrid2dtopbottom": [20, 214], "periodicgrid3dfrontback": [20, 215], "periodicgrid3dleftright": [20, 215], "periodicgrid3dleftrightfrontback": [20, 215], "periodicgrid3dleftrighttopbottom": [20, 215], "periodicgrid3dtopbottom": [20, 215], "periodicgrid3dtopbottomfrontback": [20, 215], "abstractrepresent": [20, 188, 229], "gridrepresent": [20, 210, 211, 212, 228, 230, 231], "meshrepresent": [20, 207, 208, 209], "physicalshap": [20, 220, 228], "sphericalnonuniformgrid1d": [20, 202], "sphericaluniformgrid1d": [20, 202], "topologi": [20, 187, 188, 207, 208, 209, 210, 211, 212, 228, 229, 230, 231, 468, 472], "abstracttopologi": [20, 188, 229], "gridtopologi": [20, 210, 211, 212, 230, 231], "meshtopologi": [20, 207, 208, 209, 228], "uniformgrid1d": [20, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 231, 348, 355, 356, 359, 363, 370, 371], "uniformgrid2d": [20, 201, 202, 348, 355, 356, 359, 363, 370, 371], "defaultasymmetricsolv": [20, 49, 51, 53, 54, 58, 63, 98, 146, 156, 232], "dummysolv": [20, 157, 232, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "generalsolv": [20, 81, 124, 149, 150, 232], "serialsolvererror": [20, 232], "convergencebas": [20, 233], "tolerance_scal": [20, 233], "status_cod": [20, 233], "status_nam": [20, 233], "actual_cod": [20, 233, 245, 275, 289, 302, 308], "comm": 20, "parallelpetsccommwrapp": 20, "petsccommwrapp": [20, 236, 238], "serialpetsccommwrapp": 20, "default_iter": [20, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334], "default_precondition": [20, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334], "default_toler": [20, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334], "legacy_toler": [20, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 316, 317, 331, 332, 333, 334], "linearbicgsolv": 20, "linearcgssolv": [20, 60], "petscconverg": 20, "ksp_absolutetoleranceconverg": [20, 245], "ksp_breakdownbicgdiverg": [20, 245], "ksp_breakdowndiverg": [20, 245], "ksp_happybreakdownconverg": [20, 245], "ksp_indefinitematrixdiverg": [20, 245], "ksp_indefinitepreconditionerdiverg": [20, 245], "ksp_iteratingconverg": [20, 245], "ksp_iterationconverg": [20, 245], "ksp_iterationdiverg": [20, 245], "ksp_nanorinfdiverg": [20, 245], "ksp_nonsymmetricdiverg": [20, 245], "ksp_normalabsolutetoleranceconverg": [20, 245], "ksp_normalrelativetoleranceconverg": [20, 245], "ksp_nulldiverg": [20, 245], "ksp_preconditioningdiverg": [20, 245], "ksp_relativetoleranceconverg": [20, 245], "ksp_tolerancediverg": [20, 245], "petsckrylovsolv": [20, 240, 241, 242, 244], "petscsolv": [20, 239, 243, 246, 248, 249, 250, 251, 252, 253, 254, 255], "defaultprecondition": [20, 240, 241, 242, 244, 246, 248], "icprecondition": [20, 248, 318], "iluprecondition": [20, 248, 273, 298, 318], "jacobiprecondition": [20, 31, 248, 268, 269, 270, 272, 273, 279, 285, 298, 313, 318, 331], "luprecondition": [20, 248], "ssorprecondition": [20, 248, 283, 285], "petscprecondition": [20, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 255], "matrixmodifyingprecondition": [20, 256, 287, 301], "solvermodifyingprecondition": [20, 254, 256, 273, 330], "smoothedaggregationprecondition": [20, 258, 259, 262], "aggregationamgsolv": 20, "default_smooth": [20, 266, 267, 268, 269, 270, 272, 274], "classicalamgsolv": 20, "linearfgmressolv": 20, "amgprecondition": [20, 273], "aggregationamgprecondition": [20, 273], "bicgstabprecondition": [20, 273], "cgprecondition": [20, 273], "diluprecondition": [20, 273], "fgmresprecondition": [20, 273], "gaussseidelprecondition": [20, 273], "polynomialprecondition": [20, 273], "pyamgxprecondition": [20, 266, 267, 268, 269, 270, 272, 273, 274], "pyamgxsolv": [20, 266, 267, 268, 269, 270, 272, 273], "pyamgxconverg": 20, "pyamgx_breakdowndiverg": [20, 275], "pyamgx_converg": [20, 275], "pyamgx_iterationdiverg": [20, 275], "smoother": [20, 266, 267, 268, 269, 270, 272, 274, 318, 329, 332], "linearinitialsolv": [20, 279], "linearrhssolv": [20, 278, 283], "pysparseprecondition": [20, 278, 285, 286, 288], "pysparseconverg": 20, "pysparse_absolutetoleranceconverg": [20, 289], "pysparse_illconditioneddiverg": [20, 289], "pysparse_illconditionedpreconditionerdiverg": [20, 289], "pysparse_iterationdiverg": [20, 289], "pysparse_nonposdefpreconditioningdiverg": [20, 289], "pysparse_outofrangediverg": [20, 289], "pysparse_rhszeroconverg": [20, 289], "pysparse_relativetoleranceconverg": [20, 289], "pysparse_stagnateddiverg": [20, 289], "pysparsematrixsolv": [20, 290], "scipyprecondition": [20, 264, 298, 299, 300], "scipyconverg": 20, "scipy_breakdowndiverg": [20, 302], "scipy_converg": [20, 302], "scipy_iterationdiverg": [20, 302], "scipykrylovsolv": [20, 293, 294, 295, 297], "scipysolv": [20, 260, 264, 271, 296, 298, 299, 300, 301, 303], "breakdownwarn": [20, 305], "illconditionedpreconditionerwarn": [20, 305], "illegalinputorbreakdownwarn": [20, 305], "lossofprecisionwarn": [20, 305], "matrixillconditionedwarn": [20, 305], "maximumiterationwarn": [20, 305], "normalconverg": [20, 305], "parameterwarn": [20, 305], "preconditionernotpositivedefinitewarn": [20, 305], "preconditionerwarn": [20, 305], "scalarquantityoutofrangewarn": [20, 305], "solverconvergencewarn": [20, 305], "stagnatedsolverwarn": [20, 305], "aztecconverg": 20, "az_breakdowndiverg": [20, 308], "az_illconditioneddiverg": [20, 308], "az_iterationdiverg": [20, 308], "az_lossofaccuracyconverg": [20, 308], "az_normalconverg": [20, 308], "az_parameterdiverg": [20, 308], "epetracommwrapp": [20, 311, 312], "parallelepetracommwrapp": 20, "maxal": [20, 311], "minal": [20, 311], "serialepetracommwrapp": 20, "domdecompprecondition": [20, 318, 321], "multilevelddmlprecondition": [20, 318], "multilevelddprecondition": [20, 314, 315, 317, 318], "multilevelnssaprecondition": [20, 318], "multilevelsaprecondition": [20, 318], "multilevelsgsprecondition": [20, 314, 317, 318], "multilevelsolversmootherprecondition": [20, 318], "multilevelprecondition": [20, 318, 323, 324, 325, 327, 328, 329], "trilinosprecondition": [20, 318, 319, 320, 322, 326], "trilinosaztecoosolv": [20, 313, 314, 315, 317], "trilinosmltest": 20, "trilinosnonlinearsolv": 20, "trilinossolv": [20, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "stepper": 20, "l1error": [20, 335], "l2error": [20, 335], "linferror": [20, 335], "sweepmonoton": [20, 335], "pidstepp": 20, "pseudorkqsstepp": 20, "abstractbaseclasserror": [20, 339], "explicitvariableerror": [20, 339], "incorrectsolutionvari": [20, 339], "solutionvariablenumbererror": [20, 339], "solutionvariablerequirederror": [20, 339], "termmultiplyerror": [20, 339], "transienttermerror": [20, 339, 348, 355, 356, 359, 363, 370, 371], "vectorcoefferror": [20, 339, 348, 355, 356, 359, 363, 370, 371], "abstractbinaryterm": 20, "abstractconvectionterm": 20, "abstractdiffusionterm": 20, "abstractupwindconvectionterm": 20, "advectionterm": [20, 111, 112, 114, 116, 117, 124], "rhsvector": [20, 107, 335, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "__eq__": [20, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__hash__": [20, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__neg__": [20, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 378, 387], "cachematrix": [20, 107, 161, 162, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "cacherhsvector": [20, 107, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "justresidualvector": [20, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "residualvectorandnorm": [20, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "asymmetricconvectionterm": 20, "binaryterm": 20, "centraldiffconvectionterm": 20, "centraldifferenceconvectionterm": [20, 161, 162, 348, 468], "coupledbinaryterm": 20, "diffusiontermcorrect": [20, 68], "explicitdiffusionterm": [20, 74, 75, 77, 145, 149, 150, 468], "explicitsourceterm": 20, "explicitupwindconvectionterm": [20, 348, 356, 359, 363, 370, 371, 468], "exponentialconvectionterm": [20, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 168, 468], "faceterm": 20, "firstorderadvectionterm": [20, 111, 112, 114, 116, 117, 344], "hybridconvectionterm": [20, 468], "nondiffusionterm": 20, "residualterm": 20, "sourceterm": [20, 361, 364], "unaryterm": 20, "upwindconvectionterm": [20, 468], "testfipi": 20, "doctestplu": 20, "execbutnotest": [20, 374], "report_skip": [20, 374], "testmod": [20, 374], "lateimporttest": 20, "deprecationerroringtestprogram": [20, 376], "finalize_opt": [20, 376], "initialize_opt": [20, 376], "testprogram": [20, 376], "serialcomm": [20, 68, 112, 114, 116, 117, 124, 202, 203, 378, 408], "parallelcomm": [20, 202, 203, 378, 394], "__abs__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__array_wrap__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__bool__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__float__": [20, 378, 387], "__ge__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__getitem__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__gt__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__le__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__lt__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__mod__": [20, 378, 387], "__ne__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__nonzero__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__pow__": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__setitem__": [20, 378, 387], "allclos": [20, 32, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 139, 145, 146, 147, 149, 150, 156, 157, 158, 161, 168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 358, 368, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "allequ": [20, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "arcco": [20, 378, 387], "arccosh": [20, 378, 387], "arcsin": [20, 69, 70, 378, 387], "arctan": [20, 144, 145, 154, 155, 378, 387], "arctan2": [20, 144, 145, 154, 155, 378, 387], "arctanh": [20, 378, 387], "ceil": [20, 378, 387], "conjug": [20, 78, 79, 241, 273, 278, 283, 378, 387, 468], "converttounit": [20, 378, 387], "co": [20, 39, 68, 69, 70, 127, 378, 387, 439, 442, 451, 452], "cosh": [20, 101, 378, 387], "floor": [20, 378, 387], "getsctyp": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "inbaseunit": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "indimensionless": [20, 378, 387], "inradian": [20, 378, 387], "insiunit": [20, 378, 387], "inunitsof": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "itemset": [20, 378, 387], "log10": [20, 378, 387], "numericvalu": [20, 378, 387], "sin": [20, 68, 77, 127, 169, 378, 387, 439, 442, 444, 445, 446, 448, 449, 451, 452, 468], "sinh": [20, 378, 387], "sum": [20, 68, 202, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "tan": [20, 144, 145, 154, 155, 378, 387, 392], "tanh": [20, 102, 157, 378, 387], "tostr": [20, 378, 387, 392], "commwrapp": [20, 202, 203, 237, 310, 378, 381, 388, 394], "dummycomm": [20, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 214, 215, 221, 222, 230, 231, 378, 388, 394], "decor": 20, "dictwithdefault": 20, "numberdict": 20, "physicalunit": [20, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__rdiv__": [20, 387], "__rtruediv__": [20, 387], "conversionfactorto": [20, 387], "conversiontupleto": [20, 387], "isangl": [20, 387], "iscompat": [20, 387], "isdimensionless": [20, 387], "isdimensionlessorangl": [20, 387], "isinverseangl": [20, 387], "setnam": [20, 387], "conda_info": [20, 391], "package_info": [20, 391], "platform_info": [20, 391], "l1norm": [20, 335, 392], "l2norm": [20, 392], "linfnorm": [20, 392], "getshap": [20, 392], "getunit": [20, 392], "isclos": [20, 392], "nearest": [20, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "sqrtdot": [20, 392], "parser": [20, 124, 139, 149], "pars": [20, 124, 139, 149, 203, 393, 453], "sharedtempfil": 20, "prune": [20, 396], "putadd": [20, 396], "arithmeticcelltofacevari": 20, "betanoisevari": 20, "__and__": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__call__": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__new__": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__or__": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__setstate__": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "cellvolumeaverag": [20, 39, 40, 68, 146, 147, 161, 162, 203, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "constraintmask": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "gaussgrad": [20, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "harmonicfacevalu": [20, 98, 99, 100, 101, 103, 146, 147, 156, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "leastsquaresgrad": [20, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "minmodfacevalu": [20, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "rdot": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "scrambl": [20, 401, 409, 413, 415, 429, 436], "std": [20, 203, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "binaryoperatorvari": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "celltofacevari": 20, "constant": [20, 31, 32, 47, 53, 54, 57, 65, 77, 100, 124, 125, 130, 146, 147, 156, 169, 201, 231, 374, 387, 392, 468], "coupledcellvari": 20, "calcdistancefunct": [20, 112, 114, 116, 117, 124, 127, 128, 408], "cellinterfacearea": [20, 408], "extendvari": [20, 124, 408], "exponentialnoisevari": 20, "facegradcontributionsvari": 20, "facegradvari": [20, 107], "gammanoisevari": 20, "gausscellgradvari": 20, "gaussiannoisevari": [20, 31, 32, 33, 34], "harmoniccelltofacevari": 20, "histogramvari": [20, 401, 409, 413, 415, 436], "interfaceareavari": 20, "interfaceflagvari": 20, "leastsquarescellgradvari": 20, "levelsetdiffusionvari": 20, "meshvari": [20, 169, 203, 348, 355, 356, 359, 363, 370, 371, 392, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 440, 448, 449, 458, 460, 462, 463, 464], "minmodcelltofacevari": 20, "modcellgradvari": 20, "modcelltofacevari": 20, "modfacegradvari": 20, "modphysicalfield": 20, "modularvari": [20, 149, 150, 154, 155], "facegradnomod": [20, 149, 150, 154, 155, 428], "operatorvari": 20, "scharfettergummelfacevari": 20, "surfactantconvectionvari": 20, "surfactantvari": [20, 124], "interfacevar": [20, 124, 433], "unaryoperatorvari": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "uniformnoisevari": 20, "dummyview": [20, 438], "plotmesh": [20, 69, 70, 127, 128, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "setlimit": [20, 127, 128, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "meshdimensionerror": [20, 438], "abstractmatplotlib2dview": [20, 443, 444, 445, 446, 448, 449], "cmap": [20, 127, 144, 154, 155, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449], "fig": [20, 127, 154, 155, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449], "abstractmatplotlibview": [20, 127, 440, 442], "matplotlib1dview": 20, "matplotlib2dcontourview": 20, "matplotlib2dgridcontourview": 20, "matplotlibsparsematrixview": 20, "matplotlibstreamview": 20, "kwarg": [20, 198, 199, 200, 201, 213, 214, 215, 220, 221, 222, 233, 245, 266, 267, 268, 269, 270, 272, 273, 274, 275, 289, 302, 308, 335, 383, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 448, 453], "mayaviview": 20, "fp": [20, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 442, 444, 445, 446, 448, 449, 451, 452], "mayavidaemon": [20, 34, 451, 452], "parse_command_lin": [20, 453], "setup_sourc": [20, 453], "update_pipelin": [20, 453], "view_data": [20, 453], "testinteract": 20, "abstractview": [20, 128, 438, 441, 451, 452, 455, 458, 459, 464], "vtkcellview": [20, 460], "vtkfaceview": [20, 460], "tanh1d": 20, "cylindricalmesh1d": 20, "cylindricalmesh1dnonuniform": 20, "exponential1dback": 20, "exponential2d": 20, "cylindricalmesh2d": 20, "cylindricalmesh2dnonuniform": 20, "peclet": 20, "powerlaw1d": 20, "mesh20x20coupl": 20, "inputperiod": 20, "gmshinput": 20, "isotropi": 20, "modifiedmeshinput": 20, "orthoerror": 20, "mesh50x50": 20, "othermesh": 20, "prism": [20, 212], "mesh1ddimension": 20, "phasediffus": 20, "poisson": [20, 72, 96, 101], "adsorbingsurfactantequ": [20, 124], "gapfilldistancevari": 20, "gapfillmesh": 20, "matplotlibsurfactantview": [20, 124], "mayavisurfactantview": [20, 124], "metaliondiffusionequ": [20, 124], "surfactantbulkdiffusionequ": [20, 124], "trenchmesh": 20, "gmshrefin": 20, "inputgrid2d": 20, "anisotropyold": 20, "missorient": 20, "riemann": 20, "customiz": 21, "poli": 21, "deposit": [21, 124, 125, 130], "unusu": 21, "philosophi": 21, "algorithm": [21, 107, 158, 337, 472], "deform": 21, "tractabl": 21, "li": [21, 472], "encapsul": [21, 130, 188, 236, 237, 310, 311, 380, 468, 475], "tight": 21, "extend": [21, 146, 147, 408, 472], "reus": [21, 149], "overridden": [21, 376], "categori": [21, 228], "lower": [21, 146, 147, 412, 431, 432, 438], "aim": [21, 468], "tier": 21, "reassur": 21, "breakag": 21, "aid": 21, "dissemin": 21, "year": [21, 169, 170, 336], "movement": [21, 157], "matter": [21, 31, 32], "furthermor": 21, "broadli": 21, "lump": 21, "human": [21, 378, 387], "readabl": [21, 170, 378, 387, 404, 412, 422, 428, 429, 431, 437], "provok": 21, "real": [21, 144, 154, 155, 392], "low": [21, 468, 471], "closer": 21, "programm": 21, "awai": [21, 107, 408], "extern": 21, "acol": 21, "brow": 21, "malloc": 21, "sizeof": 21, "bcol": 21, "arow": 21, "worri": [21, 169], "needn": 21, "paramount": 21, "concern": [21, 305], "scenario": 21, "draft": 21, "hundr": 21, "recompil": 21, "relink": 21, "eventu": [21, 123, 130, 145], "imposs": 21, "rememb": [21, 415], "scientist": [21, 171, 465], "begun": 21, "expertis": 21, "spent": 21, "contrast": [21, 31, 32], "tcl": 21, "java": 21, "rubi": 21, "vener": 21, "immedi": [21, 125], "someon": 21, "fledg": 21, "ground": 21, "runtim": 21, "unquestion": 21, "proport": [21, 124, 144, 154, 155, 336], "month": 21, "diagnos": 21, "critic": [21, 31, 32], "palat": 21, "acknowledg": 21, "remark": [21, 469], "usabl": 21, "mathematician": 21, "scientificpython": [21, 387, 465], "easili": [21, 77, 103, 156, 465], "blitz": 21, "pyrex": [21, 465], "brief": [21, 374], "terminologi": 21, "assign": [21, 77, 376, 378, 387, 476], "lazi": [21, 398], "elimin": [21, 71, 77, 161], "entiti": 21, "beyond": 21, "bound": [21, 169], "vertic": [21, 69, 70, 107, 199, 202, 207, 208, 209, 211, 212, 214, 215, 220, 228, 231, 392, 439, 443, 444, 445, 446, 468], "_sparsematrix": [21, 335, 447], "invert": 21, "fashion": 21, "footnot": [21, 146, 147], "neglect": [21, 146, 147], "byte": 21, "prefix": [22, 77, 378, 387, 394], "ld_library_path": 22, "colon": 22, "search": [22, 169, 438, 439, 460], "elf": 22, "dyld_library_path": 22, "linker": 22, "phenomenon": [31, 32, 34], "spontan": [31, 32, 157], "mixtur": [31, 32, 77], "region": [31, 32, 117, 122, 124, 144, 145, 149, 154, 155, 157, 158, 443, 444], "spin": [31, 32], "barrierless": [31, 32], "fluctuat": [31, 32, 33, 34, 144, 154, 155], "grow": [31, 32, 144, 154, 155], "exce": [31, 32], "surviv": [31, 32], "ginsberg": [31, 32, 144, 154, 155], "landau": [31, 32, 144, 154, 155], "hohenberg": [31, 32, 144, 154, 155], "halperin": [31, 32, 144, 154, 155], "epsilon": [31, 32, 33, 34, 36, 72, 96, 102, 104, 149, 150, 154, 155, 161, 162], "possibli": [31, 32, 380, 438], "composit": [31, 32, 122, 146, 147], "doubl": [31, 32, 96, 156, 157], "energi": [31, 32, 36, 96, 102, 146, 147, 156, 157, 161, 162, 318, 325, 472], "penal": [31, 32], "abrupt": [31, 32], "smooth": [31, 32, 124, 127, 128, 144, 154, 155, 318, 324, 325, 327, 328], "transit": [31, 32, 122, 472], "weight": [31, 32, 146, 147, 149, 175, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 449, 468, 470], "augment": [31, 32, 392], "__name__": [31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 374, 401, 409, 413, 415, 436], "__main__": [31, 32, 33, 34, 36, 39, 40, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 72, 74, 75, 77, 78, 79, 81, 85, 88, 89, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 117, 124, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 161, 162, 168, 374, 376, 377, 401, 409, 413, 415, 436], "ny": [31, 32, 33, 40, 49, 54, 58, 59, 75, 78, 79, 88, 93, 100, 107, 111, 114, 116, 124, 127, 128, 139, 144, 145, 149, 154, 155, 158, 162, 168, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 348, 355, 356, 358, 359, 363, 370, 371, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 444, 445, 446, 448, 449, 451, 452, 458], "500": [31, 81, 101, 144, 145, 449], "els": [31, 32, 33, 34, 36, 39, 40, 64, 75, 81, 100, 101, 107, 124, 144, 146, 147, 154, 155, 157, 161, 162, 374, 453], "dy": [31, 32, 33, 40, 49, 54, 75, 78, 79, 93, 100, 107, 111, 114, 116, 124, 127, 128, 139, 144, 145, 149, 154, 155, 158, 162, 169, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 348, 355, 356, 358, 359, 363, 370, 371, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 439, 444, 445, 446, 448, 449, 451, 452, 458], "varianc": [31, 32, 33, 34, 415], "__mainy__": 31, "microstructur": [31, 32, 33, 34, 472], "exponenti": [31, 32, 33, 34, 123, 356, 387, 409, 471], "dexp": [31, 32, 33, 34, 36], "durat": [31, 32, 33, 34], "exp": [31, 32, 33, 34, 36, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 124, 125, 146, 147, 149, 150, 154, 155, 168, 169, 170, 409, 413, 415, 471], "__mainys__": 31, "elif": 31, "formul": [32, 71, 471], "enorm": [32, 77], "amount": [32, 220], "psi": [32, 72, 104, 144, 145, 154, 155, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "nois": [32, 144, 154, 155, 161, 401, 409, 413, 415, 429, 436], "taylor": [32, 157, 472], "expans": [32, 157], "phi_": [32, 157, 344, 368, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "dfdphi": 32, "dfdphi_": 32, "d2fdphi2": 32, "eq1": [32, 71], "eq2": 32, "eq3": 32, "press": [32, 60, 65, 69, 70, 72, 77, 78, 79, 85, 101, 104, 146, 147, 157, 161, 472], "elementshap": [32, 71, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "v0": [32, 71, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "impcoeff": 32, "cube": 33, "nz": [33, 56, 57, 93, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 451, 452, 465], "dz": [33, 56, 57, 93, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 451, 452], "vesicl": 34, "youtub": 34, "watch": 34, "kdsfp67_zse": 34, "cellsiz": [34, 69, 70, 89, 124, 125, 130, 140, 203], "t1": [34, 140], "pi": [34, 39, 68, 140, 144, 145, 149, 150, 154, 155, 378, 387, 408, 415, 428, 439, 442, 451, 452], "duplicata": [34, 140], "t2": [34, 140], "t3": [34, 140], "t4": [34, 140], "t5": [34, 140], "t6": [34, 140], "t7": [34, 140], "outer": [34, 140, 146, 147, 203], "overlap": [34, 188, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 468], "extrudefunc": [34, 140, 199, 203, 209, 211, 214, 220, 228], "lambda": [34, 140, 199, 203, 209, 211, 214, 220, 228], "daemon_fil": [34, 451, 452], "xmin": [34, 107, 127, 128, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "zmax": [34, 127, 128, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "asq": 36, "facevar": 36, "freeenergydoublederiv": 36, "diffterm2": 36, "diffterm4": 36, "eqch": 36, "solver_suit": [36, 81], "builtin": [36, 39, 40, 60, 68, 69, 70, 71, 74, 75, 77, 78, 79, 98, 99, 100, 101, 102, 103, 107, 111, 112, 114, 124, 127, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 203, 311, 368, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 444, 445, 446, 448, 449, 451, 452], "maxarg": 36, "argmax": 36, "atol": [36, 39, 40, 46, 47, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 72, 74, 75, 77, 78, 79, 88, 89, 93, 98, 99, 100, 101, 102, 103, 104, 111, 114, 146, 147, 149, 156, 157, 158, 168, 233, 344, 358, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__future__": [39, 40], "param": [39, 40], "kmvar": [39, 40], "km": [39, 40, 378, 387], "kcvar": [39, 40], "kc": [39, 40], "tmvar": [39, 40], "tcvar": [39, 40], "tc": [39, 40], "p3var": [39, 40], "p3": [39, 40], "p2var": [39, 40], "p2": [39, 40], "rvar": [39, 40], "pn": [39, 40], "kmsccoeff": [39, 40], "chik": [39, 40], "kmspcoeff": [39, 40], "lambdak": [39, 40], "kappak": [39, 40], "kmeq": [39, 40], "tmsccoeff": [39, 40], "chit": [39, 40], "tmspcoeff": [39, 40], "lambdat": [39, 40], "zetat": [39, 40], "tmeq": [39, 40], "tcsccoeff": [39, 40], "tcspcoeff": [39, 40], "lambdatstar": [39, 40], "tceq": [39, 40], "pip2pitp": [39, 40], "kappam": [39, 40], "kappac": [39, 40], "zetapitp": [39, 40], "p3spcoeff": [39, 40], "lambda3": [39, 40], "zeta3t": [39, 40], "p3sccoeff": [39, 40], "chi3": [39, 40], "kappa3": [39, 40], "zeta3pitp": [39, 40], "zeta3": [39, 40], "p3eq": [39, 40], "p2sccoeff": [39, 40], "sccoeff": [39, 40], "chi2": [39, 40], "p2spcoeff": [39, 40], "lambda2": [39, 40], "zeta2t": [39, 40], "p2eq": [39, 40], "kcsccoeff": [39, 40], "alphakstar": [39, 40], "kcspcoeff": [39, 40], "lambdakstar": [39, 40], "kappakstar": [39, 40], "kceq": [39, 40], "pnview": [39, 40], "kmview": [39, 40], "tmview": [39, 40], "naem": [39, 40], "kmviewer": [39, 40], "stimulu": 39, "pnviewer": 40, "tmviewer": 40, "annulu": [46, 47, 56, 57], "r0": [46, 47, 56, 57], "r1": [46, 47, 56, 57, 114], "nr": [46, 47, 56, 57, 202], "dr": [46, 47, 56, 57, 202], "valueleft": [46, 47, 48, 51, 53, 56, 57, 58, 59, 60, 62, 63, 74, 75, 77, 85, 88, 89, 93, 168], "valueright": [46, 47, 48, 51, 53, 56, 57, 58, 59, 60, 62, 63, 75, 77, 85, 88, 89, 93, 168], "impos": [46, 47, 48, 53, 56, 57, 81, 111, 168, 173, 175, 176, 177, 344], "r_0": [46, 47, 56, 57], "r_1": [46, 47, 56, 57], "drawback": [46, 47, 48, 56, 57, 168], "ei": [46, 47, 56, 57], "expi": [46, 47, 56, 57], "aa": [46, 47, 53, 54, 56, 57, 116, 344], "bb": [46, 47, 53, 54, 56, 57, 116], "analyticalarrai": [46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 74, 88, 89, 93, 102, 104, 157, 168], "rratio": [47, 57], "arang": [47, 57, 101, 114, 154, 155, 344, 358, 396, 401, 408, 409, 413, 415, 442, 448, 449, 451, 452], "imath": 48, "u_x": [48, 53, 162, 168], "dd": [48, 49, 51, 53, 54, 58, 59, 60, 62, 63, 168], "valuebottom": [49, 54], "valuetop": [49, 54], "rtol": [49, 51, 53, 58, 59, 60, 62, 63, 64, 72, 77, 81, 85, 98, 99, 100, 101, 102, 103, 104, 124, 149, 156, 157, 168, 233, 245, 289, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "s_0": [53, 157, 468], "sourcecoeff": [53, 54, 149, 150], "s_c": 54, "pseudo": [56, 57], "allcloselist": 60, "str": [60, 101, 127, 128, 188, 203, 207, 232, 233, 245, 275, 289, 302, 305, 308, 339, 374, 378, 383, 387, 388, 391, 392, 393, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 458, 459, 460, 462, 463, 464], "1e4": 60, "arg0": 60, "arg1": [60, 475, 476], "append": [60, 171, 203, 388, 393], "2000": [63, 149, 168, 258, 259, 262], "4d": 64, "precaut": 64, "convectioncoeff": [64, 98, 99, 100, 101, 103, 156, 168], "canalyt": 64, "c_": [64, 72, 96, 102, 104, 124, 130, 146, 147, 156], "restol": 64, "anstol": 64, "alpha": [65, 77, 124, 130, 144, 145, 149, 150, 154, 155, 169, 401, 413], "outflow": 65, "artifici": 65, "unitari": 65, "5000": [65, 449], "phi0": [65, 368], "fake": 65, "pmatrix": 68, "theta": [68, 123, 124, 130, 144, 145, 149, 150, 154, 155, 468], "q": [68, 125, 154, 155, 158, 298, 299, 300, 472], "00": 68, "mass": [68, 107, 146, 147, 161], "previous": [68, 123, 125, 130, 161, 203, 408], "splitext": [68, 145, 149, 150], "__file__": [68, 124, 145, 149, 150], "argmin": [68, 114], "rotationmatrix": 68, "gamma_prim": 68, "001": [68, 101, 387], "cellvolum": [68, 107, 139, 198, 203, 221, 415], "00025": 68, "triangl": [69, 228], "edg": [69, 70, 107], "plane": [69, 70, 89, 203], "timestepdur": [69, 70, 74, 75, 77, 78, 79, 111, 112, 114, 145, 149, 150], "mytsv": [69, 70], "tsv": [69, 70, 101, 438], "variable_grad_x": [69, 70], "variable_grad_i": [69, 70], "975559734792414": [69, 70], "0755414402612554": [69, 70], "964844363287199": [69, 70], "229687917881182": [69, 70], "00757854476106331": [69, 70], "0442864953037566": [69, 70], "79191893162384": [69, 70], "0375859836421991": [69, 70], "773936613923853": [69, 70], "205560697612547": [69, 70], "0246775505084069": [69, 70], "771959648896982": [69, 70], "020853932412869": [69, 70], "723540342405813": [69, 70], "182589694334729": [69, 70], "223345558247991": [69, 70], "807931073108895": [69, 70], "203035857140125": [69, 70], "777466238738658": [69, 70], "0401235242511506": [69, 70], "00726763301939488": [69, 70], "775978916110686": [69, 70], "00412895434496877": [69, 70], "650055516507232": [69, 70], "183112882869288": [69, 70], "0220279064527904": [69, 70], "187563765977912": [69, 70], "012771874945585": [69, 70], "35707168379437": [69, 70], "056072788439713": [69, 70], "111223320911545": [69, 70], "679586798311355": [69, 70], "0911595298310758": [69, 70], "613455176718145": [69, 70], "0256182541329463": [69, 70], "78996770899909": [69, 70], "0173672729866294": [69, 70], "693887874335319": [69, 70], "00671109050419": [69, 70], "127611490372511": [69, 70], "703545986179876": [69, 70], "435813500559859": [69, 70], "635004192597412": [69, 70], "896203033957194": [69, 70], "00855563518923689": [69, 70], "888641841567831": [69, 70], "408558914368324": [69, 70], "877939107374768": [69, 70], "32195762184087": [69, 70], "22696791637322": [69, 70], "38212257821916": [69, 70], "51732949653553": [69, 70], "292889724306196": [69, 70], "854466141879776": [69, 70], "199715815696975": [69, 70], "359068256998365": [69, 70], "757882581524374": [69, 70], "323541041763627": [69, 70], "870534227755687": [69, 70], "0792631912863636": [69, 70], "459673905457569": [69, 70], "701526587772079": [69, 70], "417577664032421": [69, 70], "725460726303266": [69, 70], "119132299176163": [69, 70], "338256179134518": [69, 70], "523565732643067": [69, 70], "254030052182524": [69, 70], "923505840608445": [69, 70], "192224240688976": [69, 70], "87498754712638": [69, 70], "174119064688993": [69, 70], "836057900916614": [69, 70], "11590500805745": [69, 70], "211010116496191": [69, 70], "484106960369249": [69, 70], "0705987421869745": [69, 70], "319827850867342": [69, 70], "867894407968447": [69, 70], "051246727010685": [69, 70], "0221203060940465": [69, 70], "216026820080053": [69, 70], "0152729438559779": [69, 70], "341246696530392": [69, 70], "0538476142281317": [69, 70], "complic": [69, 70, 130], "horizont": [69, 70, 199, 202, 211, 214, 215, 220, 228, 231, 392], "phianalyt": [69, 70, 77], "x0": [69, 70, 146, 147], "erf": [69, 70, 74, 75, 77], "ticket": [69, 70, 344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 388], "325": [69, 70], "7e": [69, 70, 77, 111, 146, 147, 157], "equal": [69, 70, 139, 146, 147, 156, 161, 228, 378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 468, 470], "quadrangl": 70, "recombin": 70, "035": 70, "biharmon": 71, "wave": 71, "v_0": 71, "v_1": 71, "cross": [71, 408], "v1": [71, 116, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "eq0": 71, "vi": 71, "res0": 71, "res1": 71, "1e100": 71, "uncoupl": 71, "advantag": [71, 146, 147, 156, 169, 171, 468, 475], "simultan": [71, 144, 147, 154, 155, 455], "dictat": 71, "speci": [71, 96, 98, 101, 102, 103, 104, 124, 146, 147, 156, 469], "obvious": 71, "permitt": [72, 101, 104], "c_j": [72, 96, 98, 102, 104, 156], "th": [72, 98, 104], "valenc": [72, 96, 98, 99, 100, 101, 103, 104], "z_j": [72, 96, 104], "z_": [72, 96, 104], "electron": [72, 96, 101, 104, 156], "charg": [72, 96, 101, 104, 124, 125, 130], "densiti": [72, 77, 104, 123, 124, 125, 130, 146, 147, 156, 161, 162, 203, 433, 448, 472], "admit": [72, 104], "2x": [72, 104], "2e": [72, 74, 77, 98, 103, 104, 146, 147, 157], "next": [72, 77, 101, 104, 392], "le": [72, 77, 103, 104, 114, 124, 150, 154, 155, 156, 157, 158, 344, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "verifi": [72, 98, 99, 100, 102, 104, 146, 147, 161, 368], "attain": [72, 102, 104, 161], "initialvalu": 74, "epsi": 74, "squar": [75, 78, 107, 157, 158, 203, 241, 278, 378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "triangular": [75, 89, 93, 228], "gridmesh": 75, "trimesh": [75, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "othergridmesh": 75, "bigmesh": 75, "semi": [75, 77, 149, 150, 156, 157, 203], "late": [75, 376], "straight": [75, 77], "varanalyt": 75, "assembl": [77, 157, 168], "uniti": [77, 470], "somefac": 77, "ever": [77, 169, 476], "differenc": [77, 348, 401, 404, 408, 409, 413, 415, 417, 429, 433, 436, 471], "phi_new": 77, "phi_old": 77, "eqx": 77, "delta": [77, 96, 102, 125, 130, 144, 146, 147, 154, 155, 157, 161, 368, 415, 468], "accomplish": 77, "tester": 77, "eqi": 77, "rerun": [77, 100], "crank": [77, 468], "nicholson": 77, "eqcn": 77, "drive": 77, "3e": [77, 101, 103, 124, 144, 145, 154, 155, 156, 161, 162], "omit": [77, 125, 157, 476], "del": [77, 127, 128, 412, 422, 431, 432, 437], "faceconstraint": 77, "lie": [77, 458, 468], "n_i": 77, "satisfi": [77, 107, 233, 408, 470, 471], "satisfactori": 77, "fluxright": 77, "9l": 77, "And": [77, 101, 107, 378, 387], "transfer": [77, 124, 125, 130, 472], "_p": [77, 107, 344, 358, 468], "capac": 77, "phit": 77, "phif": 77, "relev": [77, 203], "alpha_fals": 77, "eqf": 77, "eqt": 77, "forward": 77, "told": [77, 168], "d_0": 77, "d0": 77, "exit": [77, 376, 377], "criteria": [77, 245, 289], "balanc": 77, "art": [77, 472], "pitfal": 77, "dissip": [77, 161], "uniformli": 77, "vmatrix": 77, "1em": 77, "ddot": 77, "vdot": 77, "legitim": 77, "1e6": [77, 124], "myexampl": 77, "valuetopleft": [78, 79], "valuebottomright": [78, 79], "corner": [78, 79, 100, 107, 149, 203, 228], "facestopleft": [78, 79], "facesbottomright": [78, 79], "alpha_1": 81, "alpha_2": 81, "alpha_3": 81, "alpha_4": 81, "alpha1": 81, "alpha2": 81, "alpha3": 81, "alpha4": 81, "initialarrai": [85, 111, 169], "interior": [87, 145], "errorvar": 89, "nonorthovar": 89, "_nonorthogon": 89, "errorview": 89, "noview": 89, "rm": 90, "xface": 93, "000000000000001": 93, "027": 93, "paper": 96, "m_": [96, 102, 146, 147, 156, 157], "overbrac": [96, 156], "mu_j": [96, 156], "circ": [96, 102, 156], "w_j": [96, 156], "dielectr": 96, "ldot": [96, 156, 468], "d_": [96, 98, 107, 124, 130, 146, 147, 156, 344, 353, 358, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "substack": [96, 98, 156], "c_k": [96, 98, 156], "c_i": [96, 98, 125, 156], "c_n": [96, 156], "mu_": [96, 102], "jn": [96, 102], "w_": [96, 102], "electromigr": [96, 100, 101, 103], "electrod": [96, 102, 124], "electrolyt": [96, 102, 123, 124, 125], "barrier": [96, 98, 99, 100, 101, 102, 103, 104, 146, 147, 156, 157, 378, 394], "solvent": [96, 98, 99, 100, 101, 102, 103, 156], "total": [96, 156, 228, 378, 387, 392], "unresolv": 96, "stiff": 96, "intract": 96, "jj": 98, "summat": [98, 468], "exclud": [98, 144], "ternari": [98, 99, 100, 103], "componentvari": [98, 99, 100, 101, 102, 103, 104], "standardpotenti": [98, 99, 100, 101, 102, 103, 104, 156], "__class__": [98, 99, 100, 101, 102, 103, 104], "cn": [98, 99, 100, 102, 103, 156], "c1": [98, 99, 100, 103, 156, 412, 422, 431, 432, 437], "c2": [98, 99, 100, 103, 156], "interstiti": [98, 99, 100, 101, 102, 103, 104, 156], "regim": [98, 99, 100, 102], "cj": [98, 99, 100, 101, 103, 104, 156], "cksum": [98, 99, 100, 101, 103, 156], "ckfacesum": [98, 99, 100, 101, 103], "ck": [98, 99, 100, 101, 103, 156], "3200": 98, "h82b89f7_0": 98, "ceas": 98, "ok": [98, 337], "tsupport": 99, "incomplet": [99, 248, 250, 318, 320], "tit": 99, "mm": [99, 116, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "mol": [99, 101, 125, 130, 146, 147, 156, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "pprime": [100, 101, 103, 146, 147, 156], "gprime": [100, 101, 103, 146, 147, 156], "counterdiffus": [100, 101, 103, 156], "phasetransform": [100, 101, 103, 156], "tol": 100, "input1dphasebinari": 101, "elphf0214": 101, "rt": 101, "nav": [101, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "kb": [101, 387], "molarvolum": [101, 124, 125, 130], "80000006366754e": 101, "faradai": [101, 124, 125, 130], "nm": 101, "1200": 101, "gradientenergi": [101, 102, 103, 156], "6e": [101, 124], "h2o": 101, "cnstandardpotenti": 101, "34139": 101, "7265625": 101, "cnbarrier": 101, "6e5": 101, "cnvalenc": 101, "so4": 101, "24276": 101, "6640625": 101, "000010414586295976": 101, "cu": 101, "7231": 101, "81396484375": 101, "5553718417909": 101, "33225": 101, "9453125": 101, "110723815414": 101, "78": 101, "eps0": [101, 387], "permittivityprim": [101, 102, 103], "rich": [101, 103, 156], "000111111503177394": 101, "249944439430068": 101, "249999982581341": 101, "input1d": 101, "setscal": 101, "enthalpi": [101, 102, 103, 146, 147, 156, 157], "mxi": [101, 102, 103, 169], "dmxidxi": [101, 102, 103], "s1": [101, 102, 103, 146, 147, 156, 157, 169], "s0": [101, 102, 103, 146, 147, 156, 157, 169], "phaseview": [101, 145, 149, 150], "concview": 101, "ylog": [101, 442], "potentialview": 101, "residualview": 101, "maxerror": 101, "safeti": [101, 337], "errcon": [101, 337], "89e": 101, "desiredtimestep": 101, "thistimestep": 101, "raw_input": [101, 171], "succeed": 101, "floatingpointerror": 101, "underflow": 101, "rearrang": [102, 169], "mu_n": [102, 156], "w_n": [102, 156], "inf": [102, 245], "equilibr": [102, 157], "thick": [102, 157], "2w_n": 102, "makeequ": 103, "c_1": 103, "recreat": 103, "c3": 103, "reiniti": [103, 124], "c_2": 103, "c_3": 103, "malengi": 107, "bm": 107, "cage": 107, "ugent": 107, "rework": 107, "colloc": 107, "pressur": [107, 161, 472], "viscos": [107, 161, 162], "momentum": [107, 161], "ferzig": [107, 472], "peric": 107, "rossow": [107, 472], "extrapol": 107, "dolfyn": 107, "frequenc": 107, "band": [107, 468], "ident": [107, 145, 146, 147, 387, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "dl": [107, 111, 146, 147, 149, 387], "relax": [107, 157, 161, 162, 281, 283, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "pressurerelax": 107, "velocityrelax": 107, "pressurecorrect": 107, "xveloc": 107, "yveloc": 107, "decoupl": [107, 161], "xvelocityeq": 107, "yvelocityeq": 107, "guess": 107, "ast": 107, "That": 107, "a_p": [107, 468], "a_a": [107, 471], "_a": [107, 468], "v_p": [107, 361, 368, 401, 404, 408, 409, 412, 413, 415, 417, 428, 429, 431, 432, 433, 436, 468], "somehow": 107, "ap": [107, 344, 353, 358, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "_facearea": [107, 161, 162], "_celldist": [107, 161, 162, 213, 214, 215], "pressurecorrectioneq": 107, "stagger": 107, "coloc": 107, "oscil": 107, "diamond": 107, "_l": 107, "_r": 107, "mathrm": 107, "avg": 107, "adjac": [107, 161, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 468], "expand": [107, 146, 147], "arriv": 107, "formula": [107, 344, 358, 378, 387], "unphys": 107, "_facegradvari": 107, "contrvolum": 107, "slip": 107, "xmax": [107, 127, 128, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "ymin": [107, 127, 128, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "ymax": [107, 127, 128, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "underrelax": [107, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "star": 107, "xre": 107, "xmat": 107, "yre": 107, "asarrai": [107, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "takediagon": [107, 161, 162], "presgrad": 107, "facepresgrad": 107, "790867927": 107, "265072740929": 107, "150290488304": 107, "cfl": [111, 114, 124, 146, 147, 161, 162], "distancetotravel": 111, "adveqn": [111, 112, 114], "distancetravel": [111, 112], "1001": 111, "02e": 111, "interfaceposit": 112, "advectionequ": [112, 124], "l_y": 114, "l_x": [114, 150], "r2": 114, "len": [114, 127, 128, 139, 198, 210, 221, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "logical_and": 114, "ravel": 114, "distancemov": 114, "m1": [116, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "evalcel": 116, "phix": 116, "phii": 116, "sqr": [116, 124], "v2": [116, 392, 408, 428], "v3": [116, 392], "v4": 116, "v5": 116, "trialvalu": 116, "succinctli": 117, "neg": [117, 124, 157, 245, 378, 387, 392, 432, 468], "glue": 122, "fine": 122, "area": [122, 161, 175, 433, 449, 468, 470], "ceac": [123, 130], "roughli": [123, 125, 130, 161], "publish": [123, 125, 130], "27": [123, 387, 472], "rungold": 123, "displayview": [123, 125, 130], "fals": [123, 125, 127, 128, 130, 157, 203, 332, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 376, 377, 378, 387, 388, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 440, 441, 442, 448, 449, 471], "realist": [123, 130, 471], "depth": [123, 124, 125, 130, 202], "metal": [123, 124, 130], "ion": [123, 124, 125, 130, 154, 155, 439], "catalyst": [123, 124, 125, 130], "c_m": [123, 124, 125, 130, 156], "b_0": [123, 124, 130], "b_1": [123, 124, 130], "buri": 123, "k_c": 123, "consumptionrateconst": 123, "slight": 123, "taper": 123, "taperangl": 123, "Their": 124, "faradaysconst": [124, 125, 130], "6e4": 124, "gasconst": [124, 125, 130, 161, 162], "314": [124, 125, 130, 146, 147, 156, 161, 162], "transfercoeffici": [124, 130], "rateconstant0": [124, 130], "rateconstant3": [124, 130], "245e": 124, "catalystdiffus": [124, 125, 130], "sitedens": [124, 125, 130], "8e": 124, "cupric": 124, "metaldiffusioncoeffici": 124, "overpotenti": [124, 125, 130], "bulkmetalconcentr": 124, "catalystconcentr": [124, 130], "catalystcoverag": [124, 130], "flat": [124, 149, 378, 387], "copper": [124, 125], "currentdensity0": [124, 130], "currentdensity1": [124, 130], "cflnumber": 124, "numberofcellsinnarrowband": 124, "cellsbelowtrench": 124, "trenchdepth": [124, 125, 130], "aspectratio": [124, 125, 130], "trenchspac": [124, 125, 130], "boundarylayerdepth": [124, 125, 130], "hydrodynam": 124, "intention": [124, 130], "po": [124, 203], "ycell": 124, "xcell": 124, "buildmetaliondiffusionequ": 124, "narrowbandwidth": 124, "distancevar": [124, 127, 128, 432, 433], "bottomheight": 124, "trenchheight": 124, "trenchwidth": 124, "sidewidth": 124, "mark": [124, 472], "influenc": 124, "catalystvar": 124, "bulkcatalystvar": 124, "metalvar": 124, "depositionratevari": 124, "omega": [124, 125, 130], "molar": [124, 125, 130, 146, 147, 156], "i_0": [124, 125, 130], "eta": [124, 125, 130, 415], "ga": [124, 125, 130, 146, 147, 156], "empir": 124, "expoconst": 124, "tmp": [124, 378, 394, 408], "exchangecurrentdens": 124, "expo": [124, 149, 150, 154, 155], "currentdens": 124, "v_": [124, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "extensionequ": 124, "spread": [124, 157], "extensionvelocityvari": 124, "k_0": [124, 130], "k_3": [124, 130], "surfactantequ": 124, "surfactantvar": [124, 127, 128], "bulkvar": 124, "rateconst": 124, "d_m": [124, 130], "metalequ": 124, "ionvar": 124, "depositionr": 124, "metalionmolarvolum": 124, "jump": 124, "langmuir": 124, "adsorpt": [124, 125], "abil": 124, "buildsurfactantbulkdiffusionequ": 124, "bulkcatalystequ": 124, "zoomfactor": [124, 127, 128], "levelsetupdatefrequ": 124, "distanceequ": 124, "whole": [124, 378, 387], "filepath": 124, "join": [124, 468], "split": 124, "savetxt": 124, "loadtxt": [124, 145, 149, 150], "acceler": [125, 472], "runlevel": 125, "25e": 125, "suppressor": 125, "absorb": 125, "unoccupi": 125, "cover": 125, "affin": 125, "preferenti": 125, "i_j": 125, "theta_j": 125, "alpha_j": 125, "vacant": 125, "substrat": 125, "theta_": 125, "kappa": [125, 146, 147, 157, 468], "theta_l": 125, "k_l": 125, "c_l": [125, 146, 147], "theta_a": 125, "k_a": 125, "c_a": 125, "theta_v": 125, "i_l": 125, "i_": 125, "rise": 125, "k_": 125, "a0": 125, "alpha_k": 125, "b_d": 125, "b_a": 125, "v_d": 125, "b_b": 125, "symbol": [125, 130], "mbox": [125, 130], "tabular": [125, 130], "rllr": [125, 130], "multicolumn": [125, 130], "i_a": 125, "texttt": [125, 130], "i0acceler": 125, "i0level": 125, "alpha_a": 125, "alphaacceler": 125, "alpha_": 125, "alphalevel": 125, "ionconcentr": 125, "d_i": 125, "iondiffus": 125, "acceleratorcoverag": 125, "acceleratorconcentr": 125, "d_a": 125, "gamma_a": 125, "kaccelerator0": 125, "alphaadsorpt": 125, "bd": 125, "levelsetvalu": [127, 128], "kwlimit": [127, 128, 144, 154, 155, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "_promptforopinion": [127, 128, 439, 442, 444, 445, 446, 448, 449, 451, 452], "bool": [127, 128, 173, 175, 176, 177, 203, 332, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 378, 388, 392, 394, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449], "zmin": [127, 128, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 455, 458, 459, 460, 462, 463, 464], "colormap": [127, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449], "logarithm": [127, 378, 387, 440, 441, 442, 443, 444, 445, 446, 448, 449], "runsimpletrenchsystem": 130, "schemat": 130, "metalconcentr": 130, "metaldiffus": 130, "getcellvolum": 139, "vol": [139, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "numberofcel": [139, 145, 161, 162, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 388], "insid": [140, 203, 245], "cool": [144, 154, 155], "melt": [144, 146, 147, 154, 155, 157], "supercool": [144, 154, 155], "circumst": [144, 154, 155, 161, 476], "pattern": [144, 154, 155], "lobkovski": [144, 145, 150, 154, 155, 472], "carter": [144, 145, 150, 154, 155, 472], "crystallin": [144, 154, 155], "regular": [144, 146, 147, 154, 155], "latent": [144, 146, 147, 154, 155, 157], "d_t": [144, 145, 154, 155], "heateq": [144, 154, 155], "tau_": [144, 145, 150, 154, 155], "kappa_1": [144, 145, 154, 155], "kappa_2": [144, 145, 154, 155], "beta": [144, 145, 149, 150, 154, 155, 157, 169, 401, 413], "015": [144, 145, 149, 150, 154, 155], "phisq": [144, 145, 154, 155], "dbetadpsi": [144, 154, 155], "ddia": [144, 154, 155], "doff": [144, 154, 155], "i0": [144, 154, 155], "i1": [144, 154, 155], "tau": [144, 145], "kappa1": [144, 145, 154, 155], "kappa2": [144, 145, 154, 155], "phaseeq": [144, 145, 146, 147, 149, 150, 154, 155], "solidifi": [144, 145, 146, 147, 154, 155], "quench": [144, 146, 147, 154, 155, 157], "induc": [144, 146, 147, 154, 155], "granular": [144, 154, 155], "strive": [144, 154, 155, 168], "pylab": 144, "cm": [144, 146, 147, 154, 155, 157, 378, 387, 439, 440, 441, 443, 444, 445, 446], "hot": [144, 154, 155], "arm": [144, 154, 155], "fastest": [144, 154, 155], "steepest": [144, 154, 155], "lucid": 144, "seedcent": 145, "initialtemperatur": 145, "beta_": 145, "phi_i": [145, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "phi_x": [145, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "xi_x": 145, "xi_i": 145, "tempdiffusioncoeff": 145, "mvar": 145, "phasei": 145, "phasex": 145, "betapsi": 145, "dxi": 145, "nineti": 145, "anisotropysourc": 145, "temperatureeq": 145, "temperatureview": 145, "text_to_native_str": [145, 149, 150], "testdata": [145, 149, 150], "straightforward": [146, 147], "helmholtz": [146, 147, 157], "mathcal": [146, 147], "m_c": [146, 147], "f_a": [146, 147], "w_a": [146, 147], "f_b": [146, 147], "ln": [146, 147, 156, 161], "omega_": [146, 147], "omega_l": [146, 147], "calphad": [146, 147], "w_b": [146, 147], "yield": [146, 147, 161], "ideal": [146, 147], "l_a": [146, 147, 344], "t_m": [146, 147, 157], "likewis": [146, 147, 378, 387], "la": [146, 147], "2350": [146, 147, 157], "lb": [146, 147, 378, 387], "1728": [146, 147, 157], "tma": [146, 147], "tmb": [146, 147], "1358": [146, 147], "enthalpya": [146, 147], "enthalpyb": [146, 147], "nonumb": [146, 147, 156, 468], "l_b": [146, 147], "v_m": [146, 147], "mu_b": [146, 147], "mu_a": [146, 147], "vm": [146, 147], "deltaa": [146, 147], "deltab": [146, 147], "sigmaa": [146, 147], "sigmab": [146, 147], "9e": [146, 147], "betaa": [146, 147], "betab": [146, 147], "kappaa": [146, 147], "kappab": [146, 147], "wb": [146, 147, 387], "mphi": [146, 147, 156, 157], "dmphidphi": [146, 147, 156, 157], "deltachempot": [146, 147], "chempota": [146, 147], "chempotb": [146, 147], "fick": [146, 147], "phasetransformationveloc": [146, 147], "diffusioneq": [146, 147], "deduc": [146, 147], "liquidu": [146, 147, 156], "solidu": [146, 147, 156], "cl": [146, 147, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "fraction": [146, 147, 154, 155, 281], "lever": [146, 147], "cavg": [146, 147], "algebra": [146, 147, 157, 318, 323, 465, 472], "reveal": [146, 147], "unchang": [146, 147, 168, 378, 387], "root": [146, 147, 378, 387, 392, 401, 409, 413, 415], "luck": [146, 147, 408], "jacobian": [146, 147, 333], "equilibriumjacobian": [146, 147], "fsolv": [146, 147], "csroot": [146, 147], "clroot": [146, 147], "func": [146, 147, 383], "fprime": [146, 147], "uncondition": [146, 147], "e5": [146, 147], "asymmetr": [146, 232], "therefor": [146, 471], "phaser": 146, "diffr": 146, "stationari": [146, 147], "overal": [146, 147], "ten": [146, 147], "idea": [146, 147, 475], "neglig": [146, 147], "centi": [146, 147], "meter": [146, 147], "d_c": 147, "dc": 147, "dphi": 147, "initialr": 147, "principl": 147, "phasetransientcoeff": [149, 150], "thetasmallvalu": [149, 150, 154, 155], "1e5": [149, 150, 154, 155], "1e3": [149, 150, 154, 155], "thetatransientcoeff": [149, 150], "008": [149, 150, 154, 155], "held": [149, 150, 161, 433], "isotherm": [149, 150, 472], "randomli": [149, 449], "0001": [149, 154, 155], "thetavalu": 149, "segment": [149, 228], "buildphaseequ": 149, "mphivar": [149, 150], "thetamag": [149, 150, 154, 155], "implicitsourc": [149, 150], "et": [149, 150, 154, 155, 161, 472], "modular": [149, 150, 154, 155, 428], "buildthetaequ": 149, "phasemod": [149, 150, 154, 155], "phasemodsq": [149, 150], "pfunc": [149, 150, 154, 155], "phasefac": [149, 150], "phasesq": [149, 150], "gradmag": [149, 150], "igamma": [149, 150, 154, 155], "thetagraddiff": [149, 150], "thetaeq": [149, 150, 154, 155], "meaning": [149, 169], "thetaprod": 149, "thetaproductview": [149, 150], "disk": [149, 404], "recal": 149, "newphas": 149, "newtheta": 149, "newthetaeq": 149, "newphaseeq": 149, "m_1": 150, "confin": 150, "angl": [150, 378, 387], "halv": 150, "t_0": [154, 155], "tau_phas": [154, 155], "tau_theta": [154, 155], "beta_theta": [154, 155], "gradmagtheta": [154, 155], "v_theta": [154, 155], "d_theta": [154, 155], "numse": [154, 155], "12345": [154, 155, 392], "cx": [154, 155], "cy": [154, 155], "orientationview": [154, 155], "room": [154, 155], "stolen": [154, 155], "make_ax": [154, 155], "ec1cd2567521c105a451ce15e06de10715f8b54d": [154, 155], "lib": [154, 155], "l838": [154, 155], "pb": [154, 155], "get_posit": [154, 155], "frozen": [154, 155], "pad": [154, 155], "x1": [154, 155], "pb1": [154, 155], "pbx": [154, 155], "pbcb": [154, 155], "splitx": [154, 155], "panchor": [154, 155], "set_posit": [154, 155], "set_anchor": [154, 155], "gnomon": [154, 155], "get_figur": [154, 155], "add_ax": [154, 155], "85": [154, 155], "polar": [154, 155], "set_thetagrid": [154, 155], "set_theta_zero_loc": [154, 155], "set_theta_direct": [154, 155], "set_rgrid": [154, 155], "radii": [154, 155], "_orientation_and_phase_to_rgb": [154, 155], "set_facecolor": [154, 155], "set_edgecolor": [154, 155], "_reshap": [154, 155], "staticmethod": [154, 155], "hsv": [154, 155], "hsv_to_rgb": [154, 155], "_data": [154, 155], "rgb": [154, 155], "hue": [154, 155], "set_data": [154, 155], "pyplot": [154, 155, 439], "figaspect": [154, 155, 440, 441, 443, 444, 445, 446, 448, 449], "figsiz": [154, 155], "timer": [154, 155], "3f": [154, 155], "fontsiz": [154, 155], "add_subplot": [154, 155], "total_tim": [154, 155], "save_interv": [154, 155], "002": [154, 155, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "save_at": [154, 155], "set_text": [154, 155], "c_0": 156, "c0": [156, 431], "circ_j": 156, "tilt": 156, "_0": 156, "f_j": 156, "sl": 156, "circ_n": 156, "cook": 156, "rhol": 156, "arrang": [156, 161, 162], "d_j": 156, "l_v": 157, "0025": 157, "lv": 157, "atom": 157, "simplest": 157, "surpris": 157, "inspect": 157, "uninterest": 157, "resolut": 157, "reintroduc": 157, "exploit": [157, 465], "s_1": [157, 468], "advic": 157, "tangent": [157, 378, 387, 392], "appreci": [157, 169, 170], "focus": 157, "recast": 157, "redeclar": 157, "nickel": 157, "sigma": [157, 415], "viewer2": [157, 439], "redefin": 157, "quintic": 157, "polynomi": [157, 273], "chose": 157, "agreement": 157, "tanhresidu": 157, "leastsq": 157, "v_fit": 157, "d_fit": 157, "msg": 157, "symmetr": [158, 232, 245, 278, 279, 281, 282, 283, 318, 325, 327, 328], "quadrilater": 158, "mirror": 158, "testresult": 158, "bottomright": 158, "topleft": 158, "topright": 158, "vapor": 161, "van": [161, 472], "der": 161, "waal": 161, "molarweight": [161, 162], "ee": [161, 162], "455971": [161, 162], "650": [161, 162], "vbar": [161, 162], "liquiddens": [161, 162], "7354": [161, 162], "3402662299995": [161, 162], "vapordens": [161, 162], "855803327810008": [161, 162], "u_j": 161, "u_i": [161, 162], "u_iu_j": 161, "nu": 161, "nc": [161, 162], "densityprevi": [161, 162], "velocityprevi": 161, "potentialnc": [161, 162], "freeenergi": [161, 162], "u_": 161, "d_f": [161, 468, 471], "overlin": 161, "partial_": 161, "overbar": 161, "matrixdiagon": [161, 162], "correctioncoeff": [161, 162], "masseqn": [161, 162], "lh": 161, "momentumeqn": 161, "superscript": [161, 468], "potentialderiv": [161, 162], "potentialnceqn": [161, 162], "quirk": 161, "amplitud": [161, 415], "totalstep": [161, 162], "1e10": 161, "elegantli": 161, "initialresidu": [161, 162], "previousresidu": [161, 162], "5e9": 161, "velocityx": 162, "velocityi": 162, "velocityvector": 162, "velocityxprevi": 162, "velocityyprevi": 162, "matxx": 162, "matyi": 162, "matxi": 162, "matyx": 162, "momentumxeqn": 162, "momentumyeqn": 162, "totalsweep": 162, "stress": [168, 469], "slightli": [168, 408], "inconveni": [168, 169, 170], "walk": 168, "getfacesleft": 168, "getfacesright": 168, "steadyconvectiondiffusionscequ": 168, "stdyconvdiffscequ": 168, "traceback": [168, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 348, 355, 356, 359, 363, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "convectionschem": 168, "nameerror": 168, "getcellcent": [168, 169, 170], "grid2dgistview": 168, "thrown": 168, "biggest": 168, "assembli": 168, "took": 168, "gistview": 168, "gist1dview": 168, "hesit": [168, 169, 170], "agre": [169, 170], "assur": [169, 170], "casual": [169, 170], "superced": [169, 170], "1_2": 169, "summar": [169, 170], "tip": [169, 170], "seemingli": [169, 408], "almost": [169, 468], "blindli": 169, "worth": 169, "reorient": 169, "deltax": 169, "deltai": 169, "vectorfacevari": 169, "vectorfield": 169, "hackish": 169, "_take": 169, "quietli": 169, "getexteriorfac": 169, "getcent": 169, "getarithmeticfacevalu": 169, "convolut": 169, "cellfilt": 169, "positivecel": 169, "getfac": 169, "deprecationwarn": [169, 170, 376, 383], "indefinit": [169, 170, 245], "breviti": 169, "feel": [169, 170], "whichev": [169, 170], "comfort": [169, 170], "clariti": 169, "trump": 169, "orthodoxi": 169, "temptat": 169, "2_1": 170, "3_0": 170, "reconsid": 170, "gmshimporter2d": 170, "gmshimporter3d": 170, "gmshimporter2din3dspac": 170, "fv": [171, 348, 355, 356, 359, 363, 370, 371, 470], "msed": 171, "mml": 171, "ubiquit": 171, "proprietari": 171, "expens": 171, "savvi": 171, "repr": [173, 174, 175, 176, 177, 188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 310, 311, 312, 313, 314, 315, 316, 317, 331, 332, 333, 334, 339, 366, 380, 381, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438], "mathtt": [176, 335, 392], "g_": 176, "odd": 177, "numberofvari": 180, "numberofequ": 180, "equationindex": 180, "varindex": 180, "_representationclass": [188, 207, 208, 209, 210, 211, 212, 228, 229, 230, 231], "_abstractrepresent": [188, 229], "_topologyclass": [188, 207, 208, 209, 210, 211, 212, 228, 229, 230, 231], "_abstracttopologi": [188, 229], "among": 188, "dataset": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 438], "basemesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "translatedmesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "addedmesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "provis": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "consolid": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "triaddedmesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "83333333": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "16666667": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "66666667": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "33333333": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "threedbasemesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "threedsecondmesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "threedaddedmesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "invalidmesh": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "match": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 392], "helper": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 236, 237, 238, 305, 310, 311, 312, 339, 380, 381, 438, 453], "unsupport": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "operand": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 378, 387], "nonzero": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231], "attribut": [188, 198, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 228, 229, 230, 231, 232, 378, 388, 394], "delattr": [188, 203, 207, 232, 305, 339, 438], "getattr": [188, 203, 207, 232, 305, 339, 438], "setattr": [188, 203, 207, 232, 305, 339, 438], "tb": [188, 203, 207, 232, 305, 339, 438], "__traceback__": [188, 203, 207, 232, 305, 339, 438], "indexerror": [198, 210, 221, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 438], "dilat": [198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228], "dilatedmesh": [198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228], "mismatch": [198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "broadcast": [198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 228, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "rectangular": [199, 201, 211, 212, 214, 215, 231], "radial": [201, 202], "axial": 201, "lr": 202, "count": [202, 374, 392, 393], "coorddimens": 203, "nproc": [203, 378, 388, 394], "squaredcircl": 203, "compass": 203, "label": [203, 382], "north": 203, "west": 203, "nw": 203, "parametr": 203, "physicalcel": 203, "physicalfac": 203, "bkg": 203, "monoton": 203, "trisquar": 203, "std1": 203, "std2": 203, "ii": [203, 472], "characterist": [203, 470], "topolog": 203, "fileistemporari": 203, "gmshoutput": 203, "respons": 203, "constructor": 203, "multilin": 203, "todo": 203, "truncat": [203, 438], "cellstovertic": 203, "recov": 203, "vertexcoord": [203, 207, 208, 209], "cellstovertid": 203, "cellstofac": 203, "isol": 203, "nodespath": 203, "elemspath": 203, "namesfil": 203, "physicalnam": 203, "facestovertexid": 203, "cellstofaceid": 203, "cellglobalidmap": 203, "ghostcellglobalidmap": 203, "trust": [203, 475], "retriev": [203, 475], "facevertexid": [207, 208, 209], "_meshrepresent": [207, 208, 209], "_meshtopologi": 207, "_mesh1dtopologi": 208, "_mesh2dtopologi": [209, 228], "_builderclass": 210, "_nonuniformgrid1dbuild": 210, "_grid1drepresent": [210, 230], "_grid1dtopologi": [210, 230], "_grid2drepresent": [211, 228, 231], "_grid2dtopologi": [211, 231], "_grid3drepresent": 212, "_grid3dtopologi": 212, "xz": 212, "yz": 212, "subcategori": 212, "facecellid": [213, 214, 215], "fill": [213, 214, 215, 248, 249], "999": 213, "_celltocelldist": [213, 214, 215], "_cellvertexid": [213, 214, 215], "_baseperiodicgrid2d": 214, "_baseperiodicgrid3d": 215, "rand": 220, "skew": 220, "hereaft": 228, "wrap": [229, 428], "calc": 230, "machineri": 232, "broke": 233, "exceed": 233, "invalid": 233, "petsc4py_comm": 237, "comm_world": 237, "intoler": 239, "Not": [239, 245, 247, 260, 261, 271, 279, 280, 283, 284, 290, 293, 294, 295, 296, 297, 303, 304, 305, 313, 314, 315, 317, 331, 333, 334, 337, 378, 387, 428], "biconjug": [240, 273, 278, 313], "unprecondit": [240, 241, 242, 244, 246], "alia": [240, 241, 242, 244, 246, 268, 269, 270, 272, 279, 283, 313, 314, 315, 317, 331, 360, 377], "abstol": [245, 289], "eigenvalu": 245, "kspcg": 245, "kspgetconvergedreason": 245, "kspsolv": 245, "ksppreonli": 245, "kspconvergedskip": 245, "ran": [245, 289], "kspminr": 245, "kspcr": 245, "pivot": [245, 282], "subprecondition": 245, "pcfieldsplit": 245, "decreas": [245, 289, 335], "pcilu": [248, 249], "pcicc": [248, 249], "jacobi": [248, 249, 252, 266, 267, 268, 269, 270, 273, 279, 281, 283, 285, 286, 298, 300, 318, 322], "pcbjacobi": [248, 249], "manualpag": [248, 249], "pc": [248, 249], "pccreat": [248, 249], "choleski": [248, 250, 318, 320], "ilu": [248, 251, 273, 298, 299, 318, 321], "ssor": [248, 255, 283, 285, 288], "smoothed_aggregation_solv": 264, "aggreg": [266, 273, 318, 324, 325, 327], "amg": [266, 267], "pbicgstab": 268, "fgmre": 269, "dilu": 273, "mimum": 273, "gauss": [273, 318, 328, 415], "seidel": [273, 318, 328], "smoother_typ": 276, "variant": 278, "bicg": 278, "itsolv": [278, 279, 283], "superlu": 282, "spilu": [298, 299], "46876951": [298, 299, 300], "2019542": [298, 299, 300], "spsolv": [298, 300], "unsatisfactori": 305, "wignor": 305, "abort": 305, "werror": 305, "relr": 305, "linearxsolv": 305, "obj": [311, 476], "m4count": 311, "mpi4py_comm": 311, "get_rank": 311, "get_siz": 311, "assert": 311, "ameso": 316, "klu": 316, "ifpack": [318, 320], "multilevel": [318, 323, 326, 327, 328, 329], "nearli": [318, 327], "mloption": 332, "testunsupport": 332, "ml": [332, 387], "setparameterlist": 332, "printingopt": 333, "solveropt": 333, "linearsolveropt": 333, "linesearchopt": 333, "directionopt": 333, "newtonopt": 333, "steppyngstoun": [335, 338], "vardata": [336, 337, 338], "075": 336, "pid": 336, "articl": 336, "pidpap": 336, "author": 336, "valli": 336, "carei": 336, "coutinho": 336, "strategi": 336, "incompress": [336, 472], "reaction": 336, "meth": [336, 475], "pgrow": 337, "pshrink": 337, "000189": 337, "rkq": 337, "rung": 337, "kutta": 337, "incorpor": 344, "u_p": [344, 358], "sum_a": [344, 358], "phi_a": [344, 348, 353, 355, 356, 358, 359, 363, 370, 468], "l_p": 344, "foral": 344, "_matrixclass": [344, 358], "_buildmatrix": [344, 358], "stand": [344, 358], "harpsichord": [344, 358], "sing": [344, 358], "vel": [344, 358], "quadrat": 344, "__advectionterm": 344, "spot": 344, "123105625618": 344, "0201715476598": 344, "hash": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "__nondiffusionterm": [344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371], "negat": [344, 347, 348, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371], "__unaryterm": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371], "getrhsvector": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "residualfn": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "sovler": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "l2": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "cacheresidu": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "cacheerror": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "residualvector": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "errorvector": [344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371], "_nondiffusionterm": [347, 357, 358], "_abstractconvectionterm": [348, 355, 356, 359, 363, 370, 371], "simeq": [348, 353, 355, 356, 359, 361, 363, 368, 370, 468], "alpha_f": [348, 355, 356, 359, 363, 370, 468, 471], "central": [348, 471], "vcv": [348, 355, 356, 359, 363, 370, 371], "vfv": [348, 355, 356, 359, 363, 370, 371], "__convectionterm": [348, 355, 356, 359, 363, 370, 371], "_arithmeticcelltofacevari": [348, 355, 356, 359, 363, 370, 371], "m2": [348, 355, 356, 359, 363, 370, 371], "cv2": [348, 355, 356, 359, 363, 370, 371], "vcv2": [348, 355, 356, 359, 363, 370, 371], "vfv2": [348, 355, 356, 359, 363, 370, 371], "_abstractdiffusionterm": [351, 352, 353], "_abstractupwindconvectionterm": [355, 370], "_asymmetricconvectionterm": [356, 359, 363], "hybrid": [359, 471], "s_p": 361, "proportion": 361, "_explicitsourceterm": 364, "newton": 364, "rho_": [368, 468], "phi_0": 368, "relaxationfactor": 368, "skipwarn": 374, "glob": 374, "optionflag": 374, "extraglob": 374, "raise_on_error": 374, "exclude_empti": 374, "_selectivedoctestpars": 374, "reachabl": 374, "__doc__": 374, "__test__": 374, "__dict__": 374, "slate": 374, "stuff": 374, "iff": 374, "argv": [374, 376, 377, 453], "summari": 374, "dont_accept_true_for_1": 374, "dont_accept_blanklin": 374, "normalize_whitespac": 374, "ellipsi": 374, "ignore_exception_detail": 374, "report_udiff": 374, "report_cdiff": 374, "report_ndiff": 374, "report_only_first_failur": 374, "postmortem": 374, "defaulttest": [376, 377], "testrunn": [376, 377], "testload": [376, 377], "loader": [376, 377], "failfast": [376, 377], "catchbreak": [376, 377], "buffer": [376, 377, 378, 394], "tb_local": [376, 377], "inabl": 376, "kw": 376, "ie": 376, "foo": 376, "bunch": 376, "konrad": [378, 387], "hinsen": [378, 387], "physicalquant": [378, 387], "angular": [378, 387], "radian": [378, 387], "deg": [378, 387], "03490659": [378, 387], "05235988": [378, 387], "06981317": [378, 387], "08726646": [378, 387], "003": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "004": [378, 387], "005": [378, 387], "arr": [378, 387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "isinst": [378, 387, 392], "facilit": [378, 387], "inch": [378, 387], "034907": [378, 387], "ft": [378, 387], "remaind": [378, 387], "hz": [378, 387], "ev": [378, 387], "8288": [378, 387], "cosin": [378, 387], "57079632679": [378, 387], "rad": [378, 387, 408], "31695789692": [378, 387], "sine": [378, 387], "arctang": [378, 387], "785398": [378, 387], "380506": [378, 387], "549306144334": [378, 387], "smallest": [378, 387], "3j": [378, 387], "ohm": [378, 387], "adjust": [378, 387, 428], "hartre": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "kcal": [378, 387], "1694": [378, 387], "27557621": [378, 387], "sctype": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "obj2sctyp": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "si": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "7088849": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "01085": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "kg": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "degc": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "degf": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "314159": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "59": [378, 387, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "302585": [378, 387], "0254": [378, 387], "opposit": [378, 387, 392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "typecod": [378, 387], "0762": [378, 387], "0508": [378, 387], "expon": [378, 387, 469], "761594155956": [378, 387], "max_line_width": [378, 387, 392], "suppress_smal": [378, 387, 392], "14159": [378, 387], "encod": [378, 394], "newlin": [378, 394], "suffix": [378, 394], "namedtemporaryfil": [378, 394], "tmpfile": [378, 394], "procid": [378, 388, 394], "seek": [378, 394], "mkstemp": [378, 394], "duck": [378, 388, 394], "tempfil": [378, 388, 394], "stall": 382, "old_nam": 383, "new_nam": 383, "old_func": 383, "dirac": [387, 465], "cnr": [387, 465], "orlean": [387, 465], "fr": [387, 465], "2002": [387, 472], "codata": 387, "british": 387, "appendix": 387, "sr": 387, "da": 387, "bq": 387, "gy": 387, "lm": 387, "pa": 387, "sv": 387, "60217653e": 387, "acr": 387, "4046": 387, "8564224": 387, "amu": 387, "6605402e": 387, "ang": 387, "atm": 387, "101325": 387, "100000": 387, "bohr": 387, "291772081145378e": 387, "btui": 387, "1055": 387, "05585262": 387, "299792458": 387, "cal": 387, "cali": 387, "1868": 387, "0000000000000003e": 387, "cup": 387, "00023658825600000004": 387, "86400": 387, "017453292519943295": 387, "5555555555555556": 387, "degr": 387, "00010000000000000003": 387, "dyn": 387, "85418781762039e": 387, "erg": 387, "floz": 387, "9573532000000005e": 387, "3048": 387, "galuk": 387, "004546090000000002": 387, "galu": 387, "0037854120960000006": 387, "gn": 387, "80665": 387, "grav": 387, "6742e": 387, "3600": 387, "35974417680088e": 387, "hbar": 387, "0545716823644548e": 387, "hpel": 387, "746": 387, "hplanck": 387, "6260693e": 387, "hpuk": 387, "745": 387, "025400000000000002": 387, "invcm": 387, "9864456023253395e": 387, "3806505e": 387, "4184": 387, "kcali": 387, "4186": 387, "ken": 387, "0010000000000000002": 387, "45359237": 387, "lyr": 387, "9460730472580800": 387, "me": 387, "1093826e": 387, "mi": 387, "1609": 387, "344": 387, "0000000000000002e": 387, "mp": 387, "67262171e": 387, "mu0": 387, "2566370614359173e": 387, "0221415e": 387, "nmi": 387, "1852": 387, "oz": 387, "028349523125": 387, "6894": 387, "75729316836": 387, "pt": 387, "0004731765120000001": 387, "0009463530240000002": 387, "tbsp": 387, "4786766000000002e": 387, "ton": 387, "907": 387, "18474": 387, "torr": 387, "133": [387, 472], "32236842105263": 387, "tsp": 387, "9289220000000005e": 387, "wk": 387, "604800": 387, "yd": 387, "9144000000000001": 387, "yr": 387, "31536000": 387, "yrjul": 387, "31557600": 387, "yrsid": 387, "31558152": 387, "959999997": 387, "array_lik": [387, 392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 443, 444, 448], "nine": 387, "_findunit": 387, "555556": 387, "meterpersecond": 387, "fileobject": 388, "mesh_unmangl": 388, "cpickl": 388, "decompress": 388, "improp": 388, "taxicab": 392, "manhattan": 392, "_j": 392, "euclidean": 392, "underset": 392, "logic": [392, 401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "flatten": 392, "a1": 392, "a2": 392, "_variableclass": 392, "max_mem": 392, "100000000": 392, "m0": [392, 401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "maskvalu": 392, "999999": 392, "masked_valu": 392, "mayb": 392, "3x3": 392, "fill_valu": 392, "array_output": 392, "textual": 392, "bracket": 392, "subset": [392, 470], "rightmost": 392, "estat": 392, "2345": 392, "23345": 392, "123456": 392, "charact": 392, "output_line_width": 392, "decim": 392, "float_output_precis": 392, "float_output_suppress_smal": 392, "unus": 392, "optpars": 393, "store_tru": 393, "store_fals": 393, "store_const": 393, "callback": 393, "argpars": 393, "absent": [393, 396], "fear": 394, "inexplic": 396, "additionvector": 396, "thought": [396, 470], "shim": 397, "kwd": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "int_0": [401, 413], "sake": [401, 409, 413, 415], "determinist": [401, 409, 413, 415], "histogram": [401, 409, 413, 415, 417, 436], "gaussian": [401, 409, 413, 415], "betadist": 401, "histoplot": [401, 409, 413, 415, 436], "stderr": [401, 409, 413], "fab": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "truth": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "ambigu": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "nearestcellid": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "ncell": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "npoint": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "whose": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437, 476], "sliceabl": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "1000000000000000000": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "phi_1": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "phi_2": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "f2": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "interiorfac": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "opshap": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "operatorclass": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "otim": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "461538461538": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "phi1": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "phi2": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436], "var2": [401, 404, 408, 409, 413, 415, 417, 428, 429, 433, 436, 458], "mpitutori": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "allreduc": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436], "assertionerror": [401, 404, 408, 409, 413, 415, 417, 429, 433, 436], "longhand": [401, 404, 408, 409, 412, 413, 415, 417, 422, 428, 429, 431, 432, 433, 436, 437], "unpickledvar": 404, "dim": [404, 412, 422, 428, 429, 431], "_calctrialvalu": 408, "patholog": 408, "vbl": 408, "vbr": 408, "vml": 408, "crossprod": 408, "dsq": 408, "vmr": 408, "extensionvari": 408, "extensionvar": 408, "tmp1": 408, "tmp2": 408, "9544": 408, "5456": 408, "perpendicular": 408, "30473785": 408, "49923009": 408, "35355339": 408, "45118446": 408, "97140452": 408, "76215286": 408, "33721352": 408, "trial": 408, "didn": 408, "58578644": 408, "08578644": 408, "85136395": 408, "29289322": 408, "54389939": 408, "49547948": 408, "3rd": 408, "7th": 408, "15th": 408, "chanc": 408, "circumfer": 408, "57984690073": 408, "expdist": 409, "gammadist": 413, "langl": 415, "rangl": 415, "uncorrel": 415, "k_b": 415, "sigmasqrd": 415, "kboltzmann": 415, "sampl": 417, "bin": 417, "get_se": 429, "_celltofacevari": 431, "conservativesurfactantequ": 432, "numberoffac": 432, "volumetr": 433, "mole": 433, "941": 433, "_interfacesurfactantvari": 433, "some1dvar": 438, "plt": 439, "ax1": 439, "subplot": 439, "ax2": 439, "ax3": 439, "mesh1": 439, "xvar": [439, 442, 451, 452], "viewer1": 439, "mesh2": 439, "xyvar": [439, 444, 445, 446, 448, 449, 451, 452], "mesh3": 439, "viewer3": 439, "orrd": 439, "kval": [439, 442, 444, 445, 446, 448, 449, 451, 452], "jet": [439, 440, 441, 443, 444, 445, 446], "xlog": 442, "ocean": [442, 444, 445, 446, 448, 449], "synonym": [442, 468], "line2d": 442, "draw": [443, 444], "1002": [444, 445, 446, 451, 452], "polycollect": 446, "sparsiti": [447, 449], "linewidth": 448, "arrows": 448, "arrowstyl": 448, "minlength": 448, "stream": 448, "griddata": 448, "convex": 448, "hull": 448, "concav": 448, "cla": 448, "overlaid": 448, "arrow": [448, 449], "goe": [448, 449], "streamlin": 448, "30x30": 448, "linearli": [448, 468], "travers": 448, "density_x": 448, "density_i": 448, "lumin": 448, "stretch": 448, "fancyarrowpatch": 448, "quiver": 449, "xyzvar": [451, 452], "poll": 453, "poll_fil": 453, "Or": 453, "reader": 453, "fname": 453, "subview": 455, "866": 458, "stdout": 458, "var_gauss_grad_x": 458, "var_gauss_grad_i": 458, "33333333333333": 458, "wikipedia": 465, "wiki": 465, "continuous_integr": 465, "eponym": 465, "cad": 465, "javascript": 465, "appl": 465, "predecessor": 465, "ye": 465, "forum": 465, "pydata": 465, "cosc": 465, "canterburi": 465, "ac": [465, 472], "greg": [465, 472], "ew": 465, "slowli": 465, "3000": 465, "plone": 465, "pocoo": 465, "microsoft": 465, "polyhedr": 468, "surround": 468, "conjunction": 468, "omega_a": 468, "omega_1": 468, "omega_2": 468, "omega_3": 468, "omega_4": 468, "theorem": 468, "specificconvectionterm": 468, "estim": 468, "increasingli": 468, "gamma1": 468, "nicolson": 468, "reinforc": 468, "gamma_2": [468, 469], "gamma2": 468, "a_": 468, "b_p": 468, "rho_p": 468, "f_f": [468, 471], "biolog": 469, "inde": 469, "proven": 469, "variat": 469, "ph": 469, "lambda_i": 469, "react": [469, 472], "divers": 469, "electr": 469, "heart": 469, "tissu": 469, "schr": 469, "dinger": 469, "unknown": 469, "fickian": 469, "gamma_3": 469, "spectral": 469, "chapter": [470, 473, 474, 477], "phd": [470, 472], "patankar": [470, 472], "versteeg": [470, 472], "malalasekera": [470, 472], "fem": 470, "fdm": 470, "analog": 470, "\u00e9": 471, "clet": 471, "p_f": 471, "smear": 471, "rightarrow": 471, "overcom": 471, "inaccuraci": 471, "beckermann": 472, "karma": 472, "1146": 472, "annurev": 472, "matsci": 472, "101901": 472, "155803": 472, "chen": 472, "mdoel": 472, "112001": 472, "132041": 472, "contemporari": 472, "david": 472, "jonathan": 472, "coat": 472, "biomaterialia": 472, "604": 472, "jan": 472, "actbio": 472, "019": 472, "william": 472, "nov": 472, "hangart": 472, "hamadani": 472, "xu": 472, "interdigit": 472, "thin": 472, "film": 472, "heterojunct": 472, "073514": 472, "3561487": 472, "huber": 472, "superconform": 472, "submicron": 472, "016102": 472, "2001": 472, "sethian": 472, "cambridg": 472, "1996": 472, "scott": 472, "chacon": 472, "apress": 472, "guido": 472, "rossum": 472, "tut": 472, "pilgrim": 472, "isbn": 472, "1590593561": 472, "diveintopython": 472, "ref": 472, "alexand": 472, "craig": 472, "materialia": 472, "6035": 472, "6058": 472, "2003": 472, "s1359": 472, "6454": 472, "00388": 472, "swirl": 472, "turbul": 472, "greenwich": 472, "1998": 472, "gala": 472, "gre": 472, "uk": 472, "eprint": 472, "6371": 472, "franci": 472, "1980": 472, "longman": 472, "technic": 472, "1995": 472, "mattiussi": 472, "309": 472, "1997": 472, "epfl": 472, "ch": 472, "jcp1997": 472, "nterfaci": 472, "1958": 472, "hermodynam": 472, "1121": 472, "1124": 472, "1959": 472, "ucleat": 472, "elder": 472, "thornton": 472, "hoyt": 472, "philosoph": 472, "magagazin": 472, "164": 472, "1080": 472, "14786435": 472, "506427": 472, "quilibrium": 472, "69": 472, "021603": 472, "arxiv": 472, "cond": 472, "mat": 472, "0308173": 472, "inet": 472, "021604": 472, "0308179": 472, "saul": 472, "teukolski": 472, "vetterl": 472, "brian": 472, "flanneri": 472, "1999": 472, "peri": 472, "\u0107": 472, "springer": 472, "blend": 472, "185": 472, "s0021": 472, "9991": 472, "00059": 472, "c302": 472, "c310": 472, "1562598": 472, "mcf": 472, "adden": 472, "7424": 472, "7439": 472, "1992": 472, "microsegreg": 472, "metallurgica": 472, "689": 472, "ward": 472, "inst": 472, "winter2004": 472, "if12": 472, "pg46": 472, "capit": 475, "resid": 475, "oop": 475, "arg2": [475, 476], "unfamiliar": 475, "reorder": 475, "latter": 475, "famili": 475, "descend": 475, "myobjectderivedfrombas": [475, 476], "arg3": 476, "__": 476, "somethingels": 476, "val1": 476, "val2": 476, "wherea": 476}, "objects": {"": [[23, 0, 0, "-", "examples"], [171, 0, 0, "-", "fipy"], [473, 0, 0, "-", "package"], [17, 7, 1, "cmdoption-cache", "--cache"], [22, 7, 1, "cmdoption-home", "--home"], [17, 7, 1, "cmdoption-inline", "--inline"], [17, 7, 1, "cmdoption-lsmlib", "--lsmlib"], [17, 7, 1, "cmdoption-no-cache", "--no-cache"], [17, 7, 1, "cmdoption-no-pysparse", "--no-pysparse"], [22, 7, 1, "cmdoption-prefix", "--prefix"], [17, 7, 1, "cmdoption-pyamg", "--pyamg"], [17, 7, 1, "cmdoption-pyamgx", "--pyamgx"], [17, 7, 1, "cmdoption-pysparse", "--pysparse"], [17, 7, 1, "cmdoption-scipy", "--scipy"], [17, 7, 1, "cmdoption-skfmm", "--skfmm"], [17, 7, 1, "cmdoption-trilinos", "--trilinos"], [22, 8, 1, "-", "DYLD_LIBRARY_PATH"], [17, 8, 1, "-", "FIPY_CACHE"], [17, 8, 1, "-", "FIPY_DEFAULT_CRITERION"], [17, 8, 1, "-", "FIPY_DISPLAY_MATRIX"], [17, 8, 1, "-", "FIPY_INCLUDE_NUMERIX_ALL"], [17, 8, 1, "-", "FIPY_INLINE"], [17, 8, 1, "-", "FIPY_INLINE_COMMENT"], [17, 8, 1, "-", "FIPY_LOG_CONFIG"], [17, 8, 1, "-", "FIPY_SOLVERS"], [17, 8, 1, "-", "FIPY_VERBOSE_SOLVER"], [17, 8, 1, "-", "FIPY_VIEWER"], [22, 8, 1, "-", "LD_LIBRARY_PATH"], [17, 8, 1, "-", "PETSC_OPTIONS"]], "examples": [[24, 0, 0, "-", "benchmarking"], [30, 0, 0, "-", "cahnHilliard"], [38, 0, 0, "-", "chemotaxis"], [43, 0, 0, "-", "convection"], [67, 0, 0, "-", "diffusion"], [96, 0, 0, "-", "elphf"], [106, 0, 0, "-", "flow"], [109, 0, 0, "-", "levelSet"], [137, 0, 0, "-", "meshing"], [142, 0, 0, "-", "parallel"], [143, 0, 0, "-", "phase"], [160, 0, 0, "-", "reactiveWetting"], [164, 0, 0, "-", "riemann"], [166, 0, 0, "-", "test"], [167, 0, 0, "-", "updating"]], "examples.benchmarking": [[25, 0, 0, "-", "benchmarker"], [26, 0, 0, "-", "size"], [27, 0, 0, "-", "steps"], [28, 0, 0, "-", "utils"], [29, 0, 0, "-", "versions"]], "examples.cahnHilliard": [[31, 0, 0, "-", "mesh2D"], [32, 0, 0, "-", "mesh2DCoupled"], [33, 0, 0, "-", "mesh3D"], [34, 0, 0, "-", "sphere"], [35, 0, 0, "-", "sphereDaemon"], [36, 0, 0, "-", "tanh1D"], [37, 0, 0, "-", "test"]], "examples.chemotaxis": [[39, 0, 0, "-", "input"], [40, 0, 0, "-", "input2D"], [41, 0, 0, "-", "parameters"], [42, 0, 0, "-", "test"]], "examples.convection": [[44, 0, 0, "-", "advection"], [45, 0, 0, "-", "exponential1D"], [50, 0, 0, "-", "exponential1DBack"], [52, 0, 0, "-", "exponential1DSource"], [55, 0, 0, "-", "exponential2D"], [60, 0, 0, "-", "peclet"], [61, 0, 0, "-", "powerLaw1D"], [64, 0, 0, "-", "robin"], [65, 0, 0, "-", "source"], [66, 0, 0, "-", "test"]], "examples.convection.exponential1D": [[46, 0, 0, "-", "cylindricalMesh1D"], [47, 0, 0, "-", "cylindricalMesh1DNonUniform"], [48, 0, 0, "-", "mesh1D"], [49, 0, 0, "-", "tri2D"]], "examples.convection.exponential1DBack": [[51, 0, 0, "-", "mesh1D"]], "examples.convection.exponential1DSource": [[53, 0, 0, "-", "mesh1D"], [54, 0, 0, "-", "tri2D"]], "examples.convection.exponential2D": [[56, 0, 0, "-", "cylindricalMesh2D"], [57, 0, 0, "-", "cylindricalMesh2DNonUniform"], [58, 0, 0, "-", "mesh2D"], [59, 0, 0, "-", "tri2D"]], "examples.convection.powerLaw1D": [[62, 0, 0, "-", "mesh1D"], [63, 0, 0, "-", "tri2D"]], "examples.diffusion": [[68, 0, 0, "-", "anisotropy"], [69, 0, 0, "-", "circle"], [70, 0, 0, "-", "circleQuad"], [71, 0, 0, "-", "coupled"], [72, 0, 0, "-", "electrostatics"], [73, 0, 0, "-", "explicit"], [77, 0, 0, "-", "mesh1D"], [78, 0, 0, "-", "mesh20x20"], [79, 0, 0, "-", "mesh20x20Coupled"], [80, 0, 0, "-", "nthOrder"], [83, 0, 0, "-", "steadyState"], [95, 0, 0, "-", "test"]], "examples.diffusion.explicit": [[74, 0, 0, "-", "mesh1D"], [75, 0, 0, "-", "mixedelement"], [76, 0, 0, "-", "test"]], "examples.diffusion.nthOrder": [[81, 0, 0, "-", "input4thOrder1D"], [82, 0, 0, "-", "test"]], "examples.diffusion.steadyState": [[84, 0, 0, "-", "mesh1D"], [86, 0, 0, "-", "mesh20x20"], [91, 0, 0, "-", "mesh50x50"], [92, 0, 0, "-", "otherMeshes"], [94, 0, 0, "-", "test"]], "examples.diffusion.steadyState.mesh1D": [[85, 0, 0, "-", "inputPeriodic"]], "examples.diffusion.steadyState.mesh20x20": [[87, 0, 0, "-", "gmshinput"], [88, 0, 0, "-", "isotropy"], [89, 0, 0, "-", "modifiedMeshInput"], [90, 0, 0, "-", "orthoerror"]], "examples.diffusion.steadyState.otherMeshes": [[93, 0, 0, "-", "prism"]], "examples.elphf": [[97, 0, 0, "-", "diffusion"], [101, 0, 0, "-", "input"], [102, 0, 0, "-", "phase"], [103, 0, 0, "-", "phaseDiffusion"], [104, 0, 0, "-", "poisson"], [105, 0, 0, "-", "test"]], "examples.elphf.diffusion": [[98, 0, 0, "-", "mesh1D"], [99, 0, 0, "-", "mesh1Ddimensional"], [100, 0, 0, "-", "mesh2D"]], "examples.flow": [[107, 0, 0, "-", "stokesCavity"], [108, 0, 0, "-", "test"]], "examples.levelSet": [[110, 0, 0, "-", "advection"], [115, 0, 0, "-", "distanceFunction"], [119, 0, 0, "-", "electroChem"], [134, 0, 0, "-", "surfactant"], [136, 0, 0, "-", "test"]], "examples.levelSet.advection": [[111, 0, 0, "-", "circle"], [112, 0, 0, "-", "mesh1D"], [113, 0, 0, "-", "test"], [114, 0, 0, "-", "trench"]], "examples.levelSet.distanceFunction": [[116, 0, 0, "-", "circle"], [117, 0, 0, "-", "mesh1D"], [118, 0, 0, "-", "test"]], "examples.levelSet.electroChem": [[120, 0, 0, "-", "adsorbingSurfactantEquation"], [121, 0, 0, "-", "gapFillDistanceVariable"], [122, 0, 0, "-", "gapFillMesh"], [123, 0, 0, "-", "gold"], [124, 0, 0, "-", "howToWriteAScript"], [125, 0, 0, "-", "leveler"], [126, 0, 0, "-", "lines"], [127, 0, 0, "-", "matplotlibSurfactantViewer"], [128, 0, 0, "-", "mayaviSurfactantViewer"], [129, 0, 0, "-", "metalIonDiffusionEquation"], [130, 0, 0, "-", "simpleTrenchSystem"], [131, 0, 0, "-", "surfactantBulkDiffusionEquation"], [132, 0, 0, "-", "test"], [133, 0, 0, "-", "trenchMesh"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[127, 1, 1, "", "MatplotlibSurfactantViewer"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer": [[127, 2, 1, "", "axes"], [127, 2, 1, "", "cmap"], [127, 2, 1, "", "colorbar"], [127, 2, 1, "", "fig"], [127, 2, 1, "", "id"], [127, 2, 1, "", "log"], [127, 3, 1, "", "plot"], [127, 3, 1, "", "plotMesh"], [127, 3, 1, "", "setLimits"], [127, 2, 1, "", "title"], [127, 2, 1, "", "vars"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[128, 1, 1, "", "MayaviSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer": [[128, 3, 1, "", "plotMesh"], [128, 3, 1, "", "setLimits"], [128, 2, 1, "", "title"], [128, 2, 1, "", "vars"]], "examples.levelSet.surfactant": [[135, 0, 0, "-", "test"]], "examples.meshing": [[138, 0, 0, "-", "gmshRefinement"], [139, 0, 0, "-", "inputGrid2D"], [140, 0, 0, "-", "sphere"], [141, 0, 0, "-", "test"]], "examples.phase": [[144, 0, 0, "-", "anisotropy"], [145, 0, 0, "-", "anisotropyOLD"], [146, 0, 0, "-", "binary"], [147, 0, 0, "-", "binaryCoupled"], [148, 0, 0, "-", "impingement"], [152, 0, 0, "-", "missOrientation"], [154, 0, 0, "-", "polyxtal"], [155, 0, 0, "-", "polyxtalCoupled"], [156, 0, 0, "-", "quaternary"], [157, 0, 0, "-", "simple"], [158, 0, 0, "-", "symmetry"], [159, 0, 0, "-", "test"]], "examples.phase.impingement": [[149, 0, 0, "-", "mesh20x20"], [150, 0, 0, "-", "mesh40x1"], [151, 0, 0, "-", "test"]], "examples.phase.missOrientation": [[153, 0, 0, "-", "test"]], "examples.reactiveWetting": [[161, 0, 0, "-", "liquidVapor1D"], [162, 0, 0, "-", "liquidVapor2D"], [163, 0, 0, "-", "test"]], "examples.riemann": [[165, 0, 0, "-", "test"]], "examples.updating": [[168, 0, 0, "-", "update0_1to1_0"], [169, 0, 0, "-", "update1_0to2_0"], [170, 0, 0, "-", "update2_0to3_0"]], "fipy": [[172, 0, 0, "-", "boundaryConditions"], [171, 4, 1, "", "doctest_raw_input"], [179, 0, 0, "-", "matrices"], [187, 0, 0, "-", "meshes"], [232, 0, 0, "-", "solvers"], [335, 0, 0, "-", "steppers"], [339, 0, 0, "-", "terms"], [171, 4, 1, "", "test"], [372, 0, 0, "-", "testFiPy"], [373, 0, 0, "-", "tests"], [378, 0, 0, "-", "tools"], [398, 0, 0, "-", "variables"], [438, 0, 0, "-", "viewers"]], "fipy.boundaryConditions": [[173, 0, 0, "-", "boundaryCondition"], [174, 0, 0, "-", "constraint"], [175, 0, 0, "-", "fixedFlux"], [176, 0, 0, "-", "fixedValue"], [177, 0, 0, "-", "nthOrderBoundaryCondition"], [178, 0, 0, "-", "test"]], "fipy.boundaryConditions.boundaryCondition": [[173, 1, 1, "", "BoundaryCondition"]], "fipy.boundaryConditions.boundaryCondition.BoundaryCondition": [[173, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.constraint": [[174, 1, 1, "", "Constraint"]], "fipy.boundaryConditions.constraint.Constraint": [[174, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedFlux": [[175, 1, 1, "", "FixedFlux"]], "fipy.boundaryConditions.fixedFlux.FixedFlux": [[175, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedValue": [[176, 1, 1, "", "FixedValue"]], "fipy.boundaryConditions.fixedValue.FixedValue": [[176, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[177, 1, 1, "", "NthOrderBoundaryCondition"]], "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition": [[177, 3, 1, "", "__repr__"]], "fipy.matrices": [[180, 0, 0, "-", "offsetSparseMatrix"], [181, 0, 0, "-", "petscMatrix"], [182, 0, 0, "-", "pysparseMatrix"], [183, 0, 0, "-", "scipyMatrix"], [184, 0, 0, "-", "sparseMatrix"], [185, 0, 0, "-", "test"], [186, 0, 0, "-", "trilinosMatrix"]], "fipy.matrices.offsetSparseMatrix": [[180, 4, 1, "", "OffsetSparseMatrix"]], "fipy.meshes": [[188, 0, 0, "-", "abstractMesh"], [189, 0, 0, "-", "builders"], [196, 0, 0, "-", "cylindricalGrid1D"], [197, 0, 0, "-", "cylindricalGrid2D"], [198, 0, 0, "-", "cylindricalNonUniformGrid1D"], [199, 0, 0, "-", "cylindricalNonUniformGrid2D"], [200, 0, 0, "-", "cylindricalUniformGrid1D"], [201, 0, 0, "-", "cylindricalUniformGrid2D"], [202, 0, 0, "-", "factoryMeshes"], [203, 0, 0, "-", "gmshMesh"], [204, 0, 0, "-", "grid1D"], [205, 0, 0, "-", "grid2D"], [206, 0, 0, "-", "grid3D"], [207, 0, 0, "-", "mesh"], [208, 0, 0, "-", "mesh1D"], [209, 0, 0, "-", "mesh2D"], [210, 0, 0, "-", "nonUniformGrid1D"], [211, 0, 0, "-", "nonUniformGrid2D"], [212, 0, 0, "-", "nonUniformGrid3D"], [213, 0, 0, "-", "periodicGrid1D"], [214, 0, 0, "-", "periodicGrid2D"], [215, 0, 0, "-", "periodicGrid3D"], [216, 0, 0, "-", "representations"], [220, 0, 0, "-", "skewedGrid2D"], [221, 0, 0, "-", "sphericalNonUniformGrid1D"], [222, 0, 0, "-", "sphericalUniformGrid1D"], [223, 0, 0, "-", "test"], [224, 0, 0, "-", "topologies"], [228, 0, 0, "-", "tri2D"], [229, 0, 0, "-", "uniformGrid"], [230, 0, 0, "-", "uniformGrid1D"], [231, 0, 0, "-", "uniformGrid2D"]], "fipy.meshes.abstractMesh": [[188, 1, 1, "", "AbstractMesh"], [188, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.abstractMesh.AbstractMesh": [[188, 2, 1, "", "VTKCellDataSet"], [188, 2, 1, "", "VTKFaceDataSet"], [188, 3, 1, "", "__add__"], [188, 3, 1, "", "__div__"], [188, 3, 1, "", "__getstate__"], [188, 3, 1, "", "__radd__"], [188, 3, 1, "", "__repr__"], [188, 3, 1, "", "__sub__"], [188, 3, 1, "", "__truediv__"], [188, 2, 1, "", "aspect2D"], [188, 2, 1, "", "cellCenters"], [188, 2, 1, "", "cellFaceIDs"], [188, 2, 1, "", "facesBack"], [188, 2, 1, "", "facesBottom"], [188, 2, 1, "", "facesDown"], [188, 2, 1, "", "facesFront"], [188, 2, 1, "", "facesLeft"], [188, 2, 1, "", "facesRight"], [188, 2, 1, "", "facesTop"], [188, 2, 1, "", "facesUp"], [188, 2, 1, "", "x"], [188, 2, 1, "", "y"], [188, 2, 1, "", "z"]], "fipy.meshes.abstractMesh.MeshAdditionError": [[188, 6, 1, "", "__cause__"], [188, 6, 1, "", "__context__"], [188, 3, 1, "", "__delattr__"], [188, 3, 1, "", "__getattribute__"], [188, 3, 1, "", "__reduce__"], [188, 3, 1, "", "__repr__"], [188, 3, 1, "", "__setattr__"], [188, 3, 1, "", "__str__"], [188, 3, 1, "", "add_note"], [188, 3, 1, "", "with_traceback"]], "fipy.meshes.builders": [[190, 0, 0, "-", "abstractGridBuilder"], [191, 0, 0, "-", "grid1DBuilder"], [192, 0, 0, "-", "grid2DBuilder"], [193, 0, 0, "-", "grid3DBuilder"], [194, 0, 0, "-", "periodicGrid1DBuilder"], [195, 0, 0, "-", "utilityClasses"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[198, 1, 1, "", "CylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D": [[198, 2, 1, "", "VTKCellDataSet"], [198, 2, 1, "", "VTKFaceDataSet"], [198, 3, 1, "", "__add__"], [198, 3, 1, "", "__div__"], [198, 3, 1, "", "__getstate__"], [198, 3, 1, "", "__mul__"], [198, 3, 1, "", "__radd__"], [198, 3, 1, "", "__repr__"], [198, 3, 1, "", "__rmul__"], [198, 3, 1, "", "__sub__"], [198, 3, 1, "", "__truediv__"], [198, 2, 1, "", "aspect2D"], [198, 2, 1, "", "cellCenters"], [198, 2, 1, "", "cellFaceIDs"], [198, 2, 1, "", "facesBack"], [198, 2, 1, "", "facesBottom"], [198, 2, 1, "", "facesDown"], [198, 2, 1, "", "facesFront"], [198, 2, 1, "", "facesLeft"], [198, 2, 1, "", "facesRight"], [198, 2, 1, "", "facesTop"], [198, 2, 1, "", "facesUp"], [198, 2, 1, "", "x"], [198, 2, 1, "", "y"], [198, 2, 1, "", "z"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[199, 1, 1, "", "CylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D": [[199, 2, 1, "", "VTKCellDataSet"], [199, 2, 1, "", "VTKFaceDataSet"], [199, 3, 1, "", "__add__"], [199, 3, 1, "", "__div__"], [199, 3, 1, "", "__getstate__"], [199, 3, 1, "", "__mul__"], [199, 3, 1, "", "__radd__"], [199, 3, 1, "", "__repr__"], [199, 3, 1, "", "__rmul__"], [199, 3, 1, "", "__sub__"], [199, 3, 1, "", "__truediv__"], [199, 2, 1, "", "aspect2D"], [199, 2, 1, "", "cellCenters"], [199, 2, 1, "", "cellFaceIDs"], [199, 3, 1, "", "extrude"], [199, 2, 1, "", "facesBack"], [199, 2, 1, "", "facesBottom"], [199, 2, 1, "", "facesDown"], [199, 2, 1, "", "facesFront"], [199, 2, 1, "", "facesLeft"], [199, 2, 1, "", "facesRight"], [199, 2, 1, "", "facesTop"], [199, 2, 1, "", "facesUp"], [199, 2, 1, "", "x"], [199, 2, 1, "", "y"], [199, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid1D": [[200, 1, 1, "", "CylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D": [[200, 2, 1, "", "VTKCellDataSet"], [200, 2, 1, "", "VTKFaceDataSet"], [200, 3, 1, "", "__add__"], [200, 3, 1, "", "__div__"], [200, 3, 1, "", "__getstate__"], [200, 3, 1, "", "__radd__"], [200, 3, 1, "", "__repr__"], [200, 3, 1, "", "__sub__"], [200, 3, 1, "", "__truediv__"], [200, 2, 1, "", "aspect2D"], [200, 2, 1, "", "cellCenters"], [200, 2, 1, "", "cellFaceIDs"], [200, 2, 1, "", "exteriorFaces"], [200, 2, 1, "", "facesBack"], [200, 2, 1, "", "facesBottom"], [200, 2, 1, "", "facesDown"], [200, 2, 1, "", "facesFront"], [200, 2, 1, "", "facesLeft"], [200, 2, 1, "", "facesRight"], [200, 2, 1, "", "facesTop"], [200, 2, 1, "", "facesUp"], [200, 2, 1, "", "x"], [200, 2, 1, "", "y"], [200, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid2D": [[201, 1, 1, "", "CylindricalUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D": [[201, 2, 1, "", "VTKCellDataSet"], [201, 2, 1, "", "VTKFaceDataSet"], [201, 3, 1, "", "__add__"], [201, 3, 1, "", "__div__"], [201, 3, 1, "", "__getstate__"], [201, 3, 1, "", "__radd__"], [201, 3, 1, "", "__repr__"], [201, 3, 1, "", "__sub__"], [201, 3, 1, "", "__truediv__"], [201, 2, 1, "", "aspect2D"], [201, 2, 1, "", "cellCenters"], [201, 2, 1, "", "cellFaceIDs"], [201, 2, 1, "", "facesBack"], [201, 2, 1, "", "facesBottom"], [201, 2, 1, "", "facesDown"], [201, 2, 1, "", "facesFront"], [201, 2, 1, "", "facesLeft"], [201, 2, 1, "", "facesRight"], [201, 2, 1, "", "facesTop"], [201, 2, 1, "", "facesUp"], [201, 2, 1, "", "x"], [201, 2, 1, "", "y"], [201, 2, 1, "", "z"]], "fipy.meshes.factoryMeshes": [[202, 4, 1, "", "CylindricalGrid1D"], [202, 4, 1, "", "CylindricalGrid2D"], [202, 4, 1, "", "Grid1D"], [202, 4, 1, "", "Grid2D"], [202, 4, 1, "", "Grid3D"], [202, 4, 1, "", "SphericalGrid1D"]], "fipy.meshes.gmshMesh": [[203, 1, 1, "", "Gmsh2D"], [203, 1, 1, "", "Gmsh2DIn3DSpace"], [203, 1, 1, "", "Gmsh3D"], [203, 5, 1, "", "GmshException"], [203, 1, 1, "", "GmshFile"], [203, 1, 1, "", "GmshGrid2D"], [203, 1, 1, "", "GmshGrid3D"], [203, 1, 1, "", "MSHFile"], [203, 5, 1, "", "MeshExportError"], [203, 1, 1, "", "POSFile"], [203, 4, 1, "", "gmshVersion"], [203, 4, 1, "", "openMSHFile"], [203, 4, 1, "", "openPOSFile"]], "fipy.meshes.gmshMesh.Gmsh2D": [[203, 2, 1, "", "VTKCellDataSet"], [203, 2, 1, "", "VTKFaceDataSet"], [203, 3, 1, "", "__add__"], [203, 3, 1, "", "__div__"], [203, 3, 1, "", "__getstate__"], [203, 3, 1, "", "__mul__"], [203, 3, 1, "", "__radd__"], [203, 3, 1, "", "__repr__"], [203, 3, 1, "", "__rmul__"], [203, 3, 1, "", "__sub__"], [203, 3, 1, "", "__truediv__"], [203, 2, 1, "", "aspect2D"], [203, 2, 1, "", "cellCenters"], [203, 2, 1, "", "cellFaceIDs"], [203, 3, 1, "", "extrude"], [203, 2, 1, "", "facesBack"], [203, 2, 1, "", "facesBottom"], [203, 2, 1, "", "facesDown"], [203, 2, 1, "", "facesFront"], [203, 2, 1, "", "facesLeft"], [203, 2, 1, "", "facesRight"], [203, 2, 1, "", "facesTop"], [203, 2, 1, "", "facesUp"], [203, 2, 1, "", "x"], [203, 2, 1, "", "y"], [203, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace": [[203, 2, 1, "", "VTKCellDataSet"], [203, 2, 1, "", "VTKFaceDataSet"], [203, 3, 1, "", "__add__"], [203, 3, 1, "", "__div__"], [203, 3, 1, "", "__getstate__"], [203, 3, 1, "", "__mul__"], [203, 3, 1, "", "__radd__"], [203, 3, 1, "", "__repr__"], [203, 3, 1, "", "__rmul__"], [203, 3, 1, "", "__sub__"], [203, 3, 1, "", "__truediv__"], [203, 2, 1, "", "aspect2D"], [203, 2, 1, "", "cellCenters"], [203, 2, 1, "", "cellFaceIDs"], [203, 3, 1, "", "extrude"], [203, 2, 1, "", "facesBack"], [203, 2, 1, "", "facesBottom"], [203, 2, 1, "", "facesDown"], [203, 2, 1, "", "facesFront"], [203, 2, 1, "", "facesLeft"], [203, 2, 1, "", "facesRight"], [203, 2, 1, "", "facesTop"], [203, 2, 1, "", "facesUp"], [203, 2, 1, "", "x"], [203, 2, 1, "", "y"], [203, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh3D": [[203, 2, 1, "", "VTKCellDataSet"], [203, 2, 1, "", "VTKFaceDataSet"], [203, 3, 1, "", "__add__"], [203, 3, 1, "", "__div__"], [203, 3, 1, "", "__getstate__"], [203, 3, 1, "", "__mul__"], [203, 3, 1, "", "__radd__"], [203, 3, 1, "", "__repr__"], [203, 3, 1, "", "__rmul__"], [203, 3, 1, "", "__sub__"], [203, 3, 1, "", "__truediv__"], [203, 2, 1, "", "aspect2D"], [203, 2, 1, "", "cellCenters"], [203, 2, 1, "", "cellFaceIDs"], [203, 2, 1, "", "facesBack"], [203, 2, 1, "", "facesBottom"], [203, 2, 1, "", "facesDown"], [203, 2, 1, "", "facesFront"], [203, 2, 1, "", "facesLeft"], [203, 2, 1, "", "facesRight"], [203, 2, 1, "", "facesTop"], [203, 2, 1, "", "facesUp"], [203, 2, 1, "", "x"], [203, 2, 1, "", "y"], [203, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshException": [[203, 6, 1, "", "__cause__"], [203, 6, 1, "", "__context__"], [203, 3, 1, "", "__delattr__"], [203, 3, 1, "", "__getattribute__"], [203, 3, 1, "", "__reduce__"], [203, 3, 1, "", "__repr__"], [203, 3, 1, "", "__setattr__"], [203, 3, 1, "", "__str__"], [203, 3, 1, "", "add_note"], [203, 3, 1, "", "with_traceback"]], "fipy.meshes.gmshMesh.GmshGrid2D": [[203, 2, 1, "", "VTKCellDataSet"], [203, 2, 1, "", "VTKFaceDataSet"], [203, 3, 1, "", "__add__"], [203, 3, 1, "", "__div__"], [203, 3, 1, "", "__getstate__"], [203, 3, 1, "", "__mul__"], [203, 3, 1, "", "__radd__"], [203, 3, 1, "", "__repr__"], [203, 3, 1, "", "__rmul__"], [203, 3, 1, "", "__sub__"], [203, 3, 1, "", "__truediv__"], [203, 2, 1, "", "aspect2D"], [203, 2, 1, "", "cellCenters"], [203, 2, 1, "", "cellFaceIDs"], [203, 3, 1, "", "extrude"], [203, 2, 1, "", "facesBack"], [203, 2, 1, "", "facesBottom"], [203, 2, 1, "", "facesDown"], [203, 2, 1, "", "facesFront"], [203, 2, 1, "", "facesLeft"], [203, 2, 1, "", "facesRight"], [203, 2, 1, "", "facesTop"], [203, 2, 1, "", "facesUp"], [203, 2, 1, "", "x"], [203, 2, 1, "", "y"], [203, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid3D": [[203, 2, 1, "", "VTKCellDataSet"], [203, 2, 1, "", "VTKFaceDataSet"], [203, 3, 1, "", "__add__"], [203, 3, 1, "", "__div__"], [203, 3, 1, "", "__getstate__"], [203, 3, 1, "", "__mul__"], [203, 3, 1, "", "__radd__"], [203, 3, 1, "", "__repr__"], [203, 3, 1, "", "__rmul__"], [203, 3, 1, "", "__sub__"], [203, 3, 1, "", "__truediv__"], [203, 2, 1, "", "aspect2D"], [203, 2, 1, "", "cellCenters"], [203, 2, 1, "", "cellFaceIDs"], [203, 2, 1, "", "facesBack"], [203, 2, 1, "", "facesBottom"], [203, 2, 1, "", "facesDown"], [203, 2, 1, "", "facesFront"], [203, 2, 1, "", "facesLeft"], [203, 2, 1, "", "facesRight"], [203, 2, 1, "", "facesTop"], [203, 2, 1, "", "facesUp"], [203, 2, 1, "", "x"], [203, 2, 1, "", "y"], [203, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.MSHFile": [[203, 3, 1, "", "makeMapVariables"], [203, 3, 1, "", "read"]], "fipy.meshes.gmshMesh.MeshExportError": [[203, 6, 1, "", "__cause__"], [203, 6, 1, "", "__context__"], [203, 3, 1, "", "__delattr__"], [203, 3, 1, "", "__getattribute__"], [203, 3, 1, "", "__reduce__"], [203, 3, 1, "", "__repr__"], [203, 3, 1, "", "__setattr__"], [203, 3, 1, "", "__str__"], [203, 3, 1, "", "add_note"], [203, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh": [[207, 1, 1, "", "Mesh"], [207, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.mesh.Mesh": [[207, 2, 1, "", "VTKCellDataSet"], [207, 2, 1, "", "VTKFaceDataSet"], [207, 3, 1, "", "__add__"], [207, 3, 1, "", "__div__"], [207, 3, 1, "", "__getstate__"], [207, 3, 1, "", "__mul__"], [207, 3, 1, "", "__radd__"], [207, 3, 1, "", "__repr__"], [207, 3, 1, "", "__rmul__"], [207, 3, 1, "", "__sub__"], [207, 3, 1, "", "__truediv__"], [207, 2, 1, "", "aspect2D"], [207, 2, 1, "", "cellCenters"], [207, 2, 1, "", "cellFaceIDs"], [207, 2, 1, "", "facesBack"], [207, 2, 1, "", "facesBottom"], [207, 2, 1, "", "facesDown"], [207, 2, 1, "", "facesFront"], [207, 2, 1, "", "facesLeft"], [207, 2, 1, "", "facesRight"], [207, 2, 1, "", "facesTop"], [207, 2, 1, "", "facesUp"], [207, 2, 1, "", "x"], [207, 2, 1, "", "y"], [207, 2, 1, "", "z"]], "fipy.meshes.mesh.MeshAdditionError": [[207, 6, 1, "", "__cause__"], [207, 6, 1, "", "__context__"], [207, 3, 1, "", "__delattr__"], [207, 3, 1, "", "__getattribute__"], [207, 3, 1, "", "__reduce__"], [207, 3, 1, "", "__repr__"], [207, 3, 1, "", "__setattr__"], [207, 3, 1, "", "__str__"], [207, 3, 1, "", "add_note"], [207, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh1D": [[208, 1, 1, "", "Mesh1D"]], "fipy.meshes.mesh1D.Mesh1D": [[208, 2, 1, "", "VTKCellDataSet"], [208, 2, 1, "", "VTKFaceDataSet"], [208, 3, 1, "", "__add__"], [208, 3, 1, "", "__div__"], [208, 3, 1, "", "__getstate__"], [208, 3, 1, "", "__mul__"], [208, 3, 1, "", "__radd__"], [208, 3, 1, "", "__repr__"], [208, 3, 1, "", "__rmul__"], [208, 3, 1, "", "__sub__"], [208, 3, 1, "", "__truediv__"], [208, 2, 1, "", "aspect2D"], [208, 2, 1, "", "cellCenters"], [208, 2, 1, "", "cellFaceIDs"], [208, 2, 1, "", "facesBack"], [208, 2, 1, "", "facesBottom"], [208, 2, 1, "", "facesDown"], [208, 2, 1, "", "facesFront"], [208, 2, 1, "", "facesLeft"], [208, 2, 1, "", "facesRight"], [208, 2, 1, "", "facesTop"], [208, 2, 1, "", "facesUp"], [208, 2, 1, "", "x"], [208, 2, 1, "", "y"], [208, 2, 1, "", "z"]], "fipy.meshes.mesh2D": [[209, 1, 1, "", "Mesh2D"]], "fipy.meshes.mesh2D.Mesh2D": [[209, 2, 1, "", "VTKCellDataSet"], [209, 2, 1, "", "VTKFaceDataSet"], [209, 3, 1, "", "__add__"], [209, 3, 1, "", "__div__"], [209, 3, 1, "", "__getstate__"], [209, 3, 1, "", "__mul__"], [209, 3, 1, "", "__radd__"], [209, 3, 1, "", "__repr__"], [209, 3, 1, "", "__rmul__"], [209, 3, 1, "", "__sub__"], [209, 3, 1, "", "__truediv__"], [209, 2, 1, "", "aspect2D"], [209, 2, 1, "", "cellCenters"], [209, 2, 1, "", "cellFaceIDs"], [209, 3, 1, "", "extrude"], [209, 2, 1, "", "facesBack"], [209, 2, 1, "", "facesBottom"], [209, 2, 1, "", "facesDown"], [209, 2, 1, "", "facesFront"], [209, 2, 1, "", "facesLeft"], [209, 2, 1, "", "facesRight"], [209, 2, 1, "", "facesTop"], [209, 2, 1, "", "facesUp"], [209, 2, 1, "", "x"], [209, 2, 1, "", "y"], [209, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid1D": [[210, 1, 1, "", "NonUniformGrid1D"]], "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D": [[210, 2, 1, "", "VTKCellDataSet"], [210, 2, 1, "", "VTKFaceDataSet"], [210, 3, 1, "", "__add__"], [210, 3, 1, "", "__div__"], [210, 3, 1, "", "__getstate__"], [210, 3, 1, "", "__mul__"], [210, 3, 1, "", "__radd__"], [210, 3, 1, "", "__repr__"], [210, 3, 1, "", "__rmul__"], [210, 3, 1, "", "__sub__"], [210, 3, 1, "", "__truediv__"], [210, 2, 1, "", "aspect2D"], [210, 2, 1, "", "cellCenters"], [210, 2, 1, "", "cellFaceIDs"], [210, 2, 1, "", "facesBack"], [210, 2, 1, "", "facesBottom"], [210, 2, 1, "", "facesDown"], [210, 2, 1, "", "facesFront"], [210, 2, 1, "", "facesLeft"], [210, 2, 1, "", "facesRight"], [210, 2, 1, "", "facesTop"], [210, 2, 1, "", "facesUp"], [210, 2, 1, "", "x"], [210, 2, 1, "", "y"], [210, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid2D": [[211, 1, 1, "", "NonUniformGrid2D"]], "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D": [[211, 2, 1, "", "VTKCellDataSet"], [211, 2, 1, "", "VTKFaceDataSet"], [211, 3, 1, "", "__add__"], [211, 3, 1, "", "__div__"], [211, 3, 1, "", "__getstate__"], [211, 3, 1, "", "__mul__"], [211, 3, 1, "", "__radd__"], [211, 3, 1, "", "__repr__"], [211, 3, 1, "", "__rmul__"], [211, 3, 1, "", "__sub__"], [211, 3, 1, "", "__truediv__"], [211, 2, 1, "", "aspect2D"], [211, 2, 1, "", "cellCenters"], [211, 2, 1, "", "cellFaceIDs"], [211, 3, 1, "", "extrude"], [211, 2, 1, "", "facesBack"], [211, 2, 1, "", "facesBottom"], [211, 2, 1, "", "facesDown"], [211, 2, 1, "", "facesFront"], [211, 2, 1, "", "facesLeft"], [211, 2, 1, "", "facesRight"], [211, 2, 1, "", "facesTop"], [211, 2, 1, "", "facesUp"], [211, 2, 1, "", "x"], [211, 2, 1, "", "y"], [211, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid3D": [[212, 1, 1, "", "NonUniformGrid3D"]], "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D": [[212, 2, 1, "", "VTKCellDataSet"], [212, 2, 1, "", "VTKFaceDataSet"], [212, 3, 1, "", "__add__"], [212, 3, 1, "", "__div__"], [212, 3, 1, "", "__getstate__"], [212, 3, 1, "", "__mul__"], [212, 3, 1, "", "__radd__"], [212, 3, 1, "", "__repr__"], [212, 3, 1, "", "__rmul__"], [212, 3, 1, "", "__sub__"], [212, 3, 1, "", "__truediv__"], [212, 2, 1, "", "aspect2D"], [212, 2, 1, "", "cellCenters"], [212, 2, 1, "", "cellFaceIDs"], [212, 2, 1, "", "facesBack"], [212, 2, 1, "", "facesBottom"], [212, 2, 1, "", "facesDown"], [212, 2, 1, "", "facesFront"], [212, 2, 1, "", "facesLeft"], [212, 2, 1, "", "facesRight"], [212, 2, 1, "", "facesTop"], [212, 2, 1, "", "facesUp"], [212, 2, 1, "", "x"], [212, 2, 1, "", "y"], [212, 2, 1, "", "z"]], "fipy.meshes.periodicGrid1D": [[213, 1, 1, "", "PeriodicGrid1D"]], "fipy.meshes.periodicGrid1D.PeriodicGrid1D": [[213, 2, 1, "", "VTKCellDataSet"], [213, 2, 1, "", "VTKFaceDataSet"], [213, 3, 1, "", "__add__"], [213, 3, 1, "", "__div__"], [213, 3, 1, "", "__getstate__"], [213, 3, 1, "", "__mul__"], [213, 3, 1, "", "__radd__"], [213, 3, 1, "", "__repr__"], [213, 3, 1, "", "__rmul__"], [213, 3, 1, "", "__sub__"], [213, 3, 1, "", "__truediv__"], [213, 2, 1, "", "aspect2D"], [213, 2, 1, "", "cellCenters"], [213, 2, 1, "", "cellFaceIDs"], [213, 2, 1, "", "facesBack"], [213, 2, 1, "", "facesBottom"], [213, 2, 1, "", "facesDown"], [213, 2, 1, "", "facesFront"], [213, 2, 1, "", "facesLeft"], [213, 2, 1, "", "facesRight"], [213, 2, 1, "", "facesTop"], [213, 2, 1, "", "facesUp"], [213, 2, 1, "", "x"], [213, 2, 1, "", "y"], [213, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D": [[214, 1, 1, "", "PeriodicGrid2D"], [214, 1, 1, "", "PeriodicGrid2DLeftRight"], [214, 1, 1, "", "PeriodicGrid2DTopBottom"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2D": [[214, 2, 1, "", "VTKCellDataSet"], [214, 2, 1, "", "VTKFaceDataSet"], [214, 3, 1, "", "__add__"], [214, 3, 1, "", "__div__"], [214, 3, 1, "", "__getstate__"], [214, 3, 1, "", "__mul__"], [214, 3, 1, "", "__radd__"], [214, 3, 1, "", "__repr__"], [214, 3, 1, "", "__rmul__"], [214, 3, 1, "", "__sub__"], [214, 3, 1, "", "__truediv__"], [214, 2, 1, "", "aspect2D"], [214, 2, 1, "", "cellCenters"], [214, 2, 1, "", "cellFaceIDs"], [214, 3, 1, "", "extrude"], [214, 2, 1, "", "facesBack"], [214, 2, 1, "", "facesBottom"], [214, 2, 1, "", "facesDown"], [214, 2, 1, "", "facesFront"], [214, 2, 1, "", "facesLeft"], [214, 2, 1, "", "facesRight"], [214, 2, 1, "", "facesTop"], [214, 2, 1, "", "facesUp"], [214, 2, 1, "", "x"], [214, 2, 1, "", "y"], [214, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight": [[214, 2, 1, "", "VTKCellDataSet"], [214, 2, 1, "", "VTKFaceDataSet"], [214, 3, 1, "", "__add__"], [214, 3, 1, "", "__div__"], [214, 3, 1, "", "__getstate__"], [214, 3, 1, "", "__mul__"], [214, 3, 1, "", "__radd__"], [214, 3, 1, "", "__repr__"], [214, 3, 1, "", "__rmul__"], [214, 3, 1, "", "__sub__"], [214, 3, 1, "", "__truediv__"], [214, 2, 1, "", "aspect2D"], [214, 2, 1, "", "cellCenters"], [214, 2, 1, "", "cellFaceIDs"], [214, 3, 1, "", "extrude"], [214, 2, 1, "", "facesBack"], [214, 2, 1, "", "facesBottom"], [214, 2, 1, "", "facesDown"], [214, 2, 1, "", "facesFront"], [214, 2, 1, "", "facesLeft"], [214, 2, 1, "", "facesRight"], [214, 2, 1, "", "facesTop"], [214, 2, 1, "", "facesUp"], [214, 2, 1, "", "x"], [214, 2, 1, "", "y"], [214, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom": [[214, 2, 1, "", "VTKCellDataSet"], [214, 2, 1, "", "VTKFaceDataSet"], [214, 3, 1, "", "__add__"], [214, 3, 1, "", "__div__"], [214, 3, 1, "", "__getstate__"], [214, 3, 1, "", "__mul__"], [214, 3, 1, "", "__radd__"], [214, 3, 1, "", "__repr__"], [214, 3, 1, "", "__rmul__"], [214, 3, 1, "", "__sub__"], [214, 3, 1, "", "__truediv__"], [214, 2, 1, "", "aspect2D"], [214, 2, 1, "", "cellCenters"], [214, 2, 1, "", "cellFaceIDs"], [214, 3, 1, "", "extrude"], [214, 2, 1, "", "facesBack"], [214, 2, 1, "", "facesBottom"], [214, 2, 1, "", "facesDown"], [214, 2, 1, "", "facesFront"], [214, 2, 1, "", "facesLeft"], [214, 2, 1, "", "facesRight"], [214, 2, 1, "", "facesTop"], [214, 2, 1, "", "facesUp"], [214, 2, 1, "", "x"], [214, 2, 1, "", "y"], [214, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D": [[215, 1, 1, "", "PeriodicGrid3D"], [215, 1, 1, "", "PeriodicGrid3DFrontBack"], [215, 1, 1, "", "PeriodicGrid3DLeftRight"], [215, 1, 1, "", "PeriodicGrid3DLeftRightFrontBack"], [215, 1, 1, "", "PeriodicGrid3DLeftRightTopBottom"], [215, 1, 1, "", "PeriodicGrid3DTopBottom"], [215, 1, 1, "", "PeriodicGrid3DTopBottomFrontBack"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3D": [[215, 2, 1, "", "VTKCellDataSet"], [215, 2, 1, "", "VTKFaceDataSet"], [215, 3, 1, "", "__add__"], [215, 3, 1, "", "__div__"], [215, 3, 1, "", "__getstate__"], [215, 3, 1, "", "__mul__"], [215, 3, 1, "", "__radd__"], [215, 3, 1, "", "__repr__"], [215, 3, 1, "", "__rmul__"], [215, 3, 1, "", "__sub__"], [215, 3, 1, "", "__truediv__"], [215, 2, 1, "", "aspect2D"], [215, 2, 1, "", "cellCenters"], [215, 2, 1, "", "cellFaceIDs"], [215, 2, 1, "", "facesBack"], [215, 2, 1, "", "facesBottom"], [215, 2, 1, "", "facesDown"], [215, 2, 1, "", "facesFront"], [215, 2, 1, "", "facesLeft"], [215, 2, 1, "", "facesRight"], [215, 2, 1, "", "facesTop"], [215, 2, 1, "", "facesUp"], [215, 2, 1, "", "x"], [215, 2, 1, "", "y"], [215, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack": [[215, 2, 1, "", "VTKCellDataSet"], [215, 2, 1, "", "VTKFaceDataSet"], [215, 3, 1, "", "__add__"], [215, 3, 1, "", "__div__"], [215, 3, 1, "", "__getstate__"], [215, 3, 1, "", "__mul__"], [215, 3, 1, "", "__radd__"], [215, 3, 1, "", "__repr__"], [215, 3, 1, "", "__rmul__"], [215, 3, 1, "", "__sub__"], [215, 3, 1, "", "__truediv__"], [215, 2, 1, "", "aspect2D"], [215, 2, 1, "", "cellCenters"], [215, 2, 1, "", "cellFaceIDs"], [215, 2, 1, "", "facesBack"], [215, 2, 1, "", "facesBottom"], [215, 2, 1, "", "facesDown"], [215, 2, 1, "", "facesFront"], [215, 2, 1, "", "facesLeft"], [215, 2, 1, "", "facesRight"], [215, 2, 1, "", "facesTop"], [215, 2, 1, "", "facesUp"], [215, 2, 1, "", "x"], [215, 2, 1, "", "y"], [215, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight": [[215, 2, 1, "", "VTKCellDataSet"], [215, 2, 1, "", "VTKFaceDataSet"], [215, 3, 1, "", "__add__"], [215, 3, 1, "", "__div__"], [215, 3, 1, "", "__getstate__"], [215, 3, 1, "", "__mul__"], [215, 3, 1, "", "__radd__"], [215, 3, 1, "", "__repr__"], [215, 3, 1, "", "__rmul__"], [215, 3, 1, "", "__sub__"], [215, 3, 1, "", "__truediv__"], [215, 2, 1, "", "aspect2D"], [215, 2, 1, "", "cellCenters"], [215, 2, 1, "", "cellFaceIDs"], [215, 2, 1, "", "facesBack"], [215, 2, 1, "", "facesBottom"], [215, 2, 1, "", "facesDown"], [215, 2, 1, "", "facesFront"], [215, 2, 1, "", "facesLeft"], [215, 2, 1, "", "facesRight"], [215, 2, 1, "", "facesTop"], [215, 2, 1, "", "facesUp"], [215, 2, 1, "", "x"], [215, 2, 1, "", "y"], [215, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack": [[215, 2, 1, "", "VTKCellDataSet"], [215, 2, 1, "", "VTKFaceDataSet"], [215, 3, 1, "", "__add__"], [215, 3, 1, "", "__div__"], [215, 3, 1, "", "__getstate__"], [215, 3, 1, "", "__mul__"], [215, 3, 1, "", "__radd__"], [215, 3, 1, "", "__repr__"], [215, 3, 1, "", "__rmul__"], [215, 3, 1, "", "__sub__"], [215, 3, 1, "", "__truediv__"], [215, 2, 1, "", "aspect2D"], [215, 2, 1, "", "cellCenters"], [215, 2, 1, "", "cellFaceIDs"], [215, 2, 1, "", "facesBack"], [215, 2, 1, "", "facesBottom"], [215, 2, 1, "", "facesDown"], [215, 2, 1, "", "facesFront"], [215, 2, 1, "", "facesLeft"], [215, 2, 1, "", "facesRight"], [215, 2, 1, "", "facesTop"], [215, 2, 1, "", "facesUp"], [215, 2, 1, "", "x"], [215, 2, 1, "", "y"], [215, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom": [[215, 2, 1, "", "VTKCellDataSet"], [215, 2, 1, "", "VTKFaceDataSet"], [215, 3, 1, "", "__add__"], [215, 3, 1, "", "__div__"], [215, 3, 1, "", "__getstate__"], [215, 3, 1, "", "__mul__"], [215, 3, 1, "", "__radd__"], [215, 3, 1, "", "__repr__"], [215, 3, 1, "", "__rmul__"], [215, 3, 1, "", "__sub__"], [215, 3, 1, "", "__truediv__"], [215, 2, 1, "", "aspect2D"], [215, 2, 1, "", "cellCenters"], [215, 2, 1, "", "cellFaceIDs"], [215, 2, 1, "", "facesBack"], [215, 2, 1, "", "facesBottom"], [215, 2, 1, "", "facesDown"], [215, 2, 1, "", "facesFront"], [215, 2, 1, "", "facesLeft"], [215, 2, 1, "", "facesRight"], [215, 2, 1, "", "facesTop"], [215, 2, 1, "", "facesUp"], [215, 2, 1, "", "x"], [215, 2, 1, "", "y"], [215, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom": [[215, 2, 1, "", "VTKCellDataSet"], [215, 2, 1, "", "VTKFaceDataSet"], [215, 3, 1, "", "__add__"], [215, 3, 1, "", "__div__"], [215, 3, 1, "", "__getstate__"], [215, 3, 1, "", "__mul__"], [215, 3, 1, "", "__radd__"], [215, 3, 1, "", "__repr__"], [215, 3, 1, "", "__rmul__"], [215, 3, 1, "", "__sub__"], [215, 3, 1, "", "__truediv__"], [215, 2, 1, "", "aspect2D"], [215, 2, 1, "", "cellCenters"], [215, 2, 1, "", "cellFaceIDs"], [215, 2, 1, "", "facesBack"], [215, 2, 1, "", "facesBottom"], [215, 2, 1, "", "facesDown"], [215, 2, 1, "", "facesFront"], [215, 2, 1, "", "facesLeft"], [215, 2, 1, "", "facesRight"], [215, 2, 1, "", "facesTop"], [215, 2, 1, "", "facesUp"], [215, 2, 1, "", "x"], [215, 2, 1, "", "y"], [215, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack": [[215, 2, 1, "", "VTKCellDataSet"], [215, 2, 1, "", "VTKFaceDataSet"], [215, 3, 1, "", "__add__"], [215, 3, 1, "", "__div__"], [215, 3, 1, "", "__getstate__"], [215, 3, 1, "", "__mul__"], [215, 3, 1, "", "__radd__"], [215, 3, 1, "", "__repr__"], [215, 3, 1, "", "__rmul__"], [215, 3, 1, "", "__sub__"], [215, 3, 1, "", "__truediv__"], [215, 2, 1, "", "aspect2D"], [215, 2, 1, "", "cellCenters"], [215, 2, 1, "", "cellFaceIDs"], [215, 2, 1, "", "facesBack"], [215, 2, 1, "", "facesBottom"], [215, 2, 1, "", "facesDown"], [215, 2, 1, "", "facesFront"], [215, 2, 1, "", "facesLeft"], [215, 2, 1, "", "facesRight"], [215, 2, 1, "", "facesTop"], [215, 2, 1, "", "facesUp"], [215, 2, 1, "", "x"], [215, 2, 1, "", "y"], [215, 2, 1, "", "z"]], "fipy.meshes.representations": [[217, 0, 0, "-", "abstractRepresentation"], [218, 0, 0, "-", "gridRepresentation"], [219, 0, 0, "-", "meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[220, 1, 1, "", "SkewedGrid2D"]], "fipy.meshes.skewedGrid2D.SkewedGrid2D": [[220, 2, 1, "", "VTKCellDataSet"], [220, 2, 1, "", "VTKFaceDataSet"], [220, 3, 1, "", "__add__"], [220, 3, 1, "", "__div__"], [220, 3, 1, "", "__getstate__"], [220, 3, 1, "", "__mul__"], [220, 3, 1, "", "__radd__"], [220, 3, 1, "", "__repr__"], [220, 3, 1, "", "__rmul__"], [220, 3, 1, "", "__sub__"], [220, 3, 1, "", "__truediv__"], [220, 2, 1, "", "aspect2D"], [220, 2, 1, "", "cellCenters"], [220, 2, 1, "", "cellFaceIDs"], [220, 3, 1, "", "extrude"], [220, 2, 1, "", "facesBack"], [220, 2, 1, "", "facesBottom"], [220, 2, 1, "", "facesDown"], [220, 2, 1, "", "facesFront"], [220, 2, 1, "", "facesLeft"], [220, 2, 1, "", "facesRight"], [220, 2, 1, "", "facesTop"], [220, 2, 1, "", "facesUp"], [220, 2, 1, "", "physicalShape"], [220, 2, 1, "", "x"], [220, 2, 1, "", "y"], [220, 2, 1, "", "z"]], "fipy.meshes.sphericalNonUniformGrid1D": [[221, 1, 1, "", "SphericalNonUniformGrid1D"]], "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.sphericalUniformGrid1D": [[222, 1, 1, "", "SphericalUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 2, 1, "", "exteriorFaces"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.topologies": [[225, 0, 0, "-", "abstractTopology"], [226, 0, 0, "-", "gridTopology"], [227, 0, 0, "-", "meshTopology"]], "fipy.meshes.tri2D": [[228, 1, 1, "", "Tri2D"]], "fipy.meshes.tri2D.Tri2D": [[228, 2, 1, "", "VTKCellDataSet"], [228, 2, 1, "", "VTKFaceDataSet"], [228, 3, 1, "", "__add__"], [228, 3, 1, "", "__div__"], [228, 3, 1, "", "__getstate__"], [228, 3, 1, "", "__mul__"], [228, 3, 1, "", "__radd__"], [228, 3, 1, "", "__repr__"], [228, 3, 1, "", "__rmul__"], [228, 3, 1, "", "__sub__"], [228, 3, 1, "", "__truediv__"], [228, 2, 1, "", "aspect2D"], [228, 2, 1, "", "cellCenters"], [228, 2, 1, "", "cellFaceIDs"], [228, 3, 1, "", "extrude"], [228, 2, 1, "", "facesBack"], [228, 2, 1, "", "facesBottom"], [228, 2, 1, "", "facesDown"], [228, 2, 1, "", "facesFront"], [228, 2, 1, "", "facesLeft"], [228, 2, 1, "", "facesRight"], [228, 2, 1, "", "facesTop"], [228, 2, 1, "", "facesUp"], [228, 2, 1, "", "physicalShape"], [228, 2, 1, "", "x"], [228, 2, 1, "", "y"], [228, 2, 1, "", "z"]], "fipy.meshes.uniformGrid": [[229, 1, 1, "", "UniformGrid"]], "fipy.meshes.uniformGrid.UniformGrid": [[229, 2, 1, "", "VTKCellDataSet"], [229, 2, 1, "", "VTKFaceDataSet"], [229, 3, 1, "", "__add__"], [229, 3, 1, "", "__div__"], [229, 3, 1, "", "__getstate__"], [229, 3, 1, "", "__radd__"], [229, 3, 1, "", "__repr__"], [229, 3, 1, "", "__sub__"], [229, 3, 1, "", "__truediv__"], [229, 2, 1, "", "aspect2D"], [229, 2, 1, "", "cellCenters"], [229, 2, 1, "", "cellFaceIDs"], [229, 2, 1, "", "facesBack"], [229, 2, 1, "", "facesBottom"], [229, 2, 1, "", "facesDown"], [229, 2, 1, "", "facesFront"], [229, 2, 1, "", "facesLeft"], [229, 2, 1, "", "facesRight"], [229, 2, 1, "", "facesTop"], [229, 2, 1, "", "facesUp"], [229, 2, 1, "", "x"], [229, 2, 1, "", "y"], [229, 2, 1, "", "z"]], "fipy.meshes.uniformGrid1D": [[230, 1, 1, "", "UniformGrid1D"]], "fipy.meshes.uniformGrid1D.UniformGrid1D": [[230, 2, 1, "", "VTKCellDataSet"], [230, 2, 1, "", "VTKFaceDataSet"], [230, 3, 1, "", "__add__"], [230, 3, 1, "", "__div__"], [230, 3, 1, "", "__getstate__"], [230, 3, 1, "", "__radd__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__sub__"], [230, 3, 1, "", "__truediv__"], [230, 2, 1, "", "aspect2D"], [230, 2, 1, "", "cellCenters"], [230, 2, 1, "", "cellFaceIDs"], [230, 2, 1, "", "exteriorFaces"], [230, 2, 1, "", "facesBack"], [230, 2, 1, "", "facesBottom"], [230, 2, 1, "", "facesDown"], [230, 2, 1, "", "facesFront"], [230, 2, 1, "", "facesLeft"], [230, 2, 1, "", "facesRight"], [230, 2, 1, "", "facesTop"], [230, 2, 1, "", "facesUp"], [230, 2, 1, "", "x"], [230, 2, 1, "", "y"], [230, 2, 1, "", "z"]], "fipy.meshes.uniformGrid2D": [[231, 1, 1, "", "UniformGrid2D"]], "fipy.meshes.uniformGrid2D.UniformGrid2D": [[231, 2, 1, "", "VTKCellDataSet"], [231, 2, 1, "", "VTKFaceDataSet"], [231, 3, 1, "", "__add__"], [231, 3, 1, "", "__div__"], [231, 3, 1, "", "__getstate__"], [231, 3, 1, "", "__radd__"], [231, 3, 1, "", "__repr__"], [231, 3, 1, "", "__sub__"], [231, 3, 1, "", "__truediv__"], [231, 2, 1, "", "aspect2D"], [231, 2, 1, "", "cellCenters"], [231, 2, 1, "", "cellFaceIDs"], [231, 2, 1, "", "facesBack"], [231, 2, 1, "", "facesBottom"], [231, 2, 1, "", "facesDown"], [231, 2, 1, "", "facesFront"], [231, 2, 1, "", "facesLeft"], [231, 2, 1, "", "facesRight"], [231, 2, 1, "", "facesTop"], [231, 2, 1, "", "facesUp"], [231, 2, 1, "", "x"], [231, 2, 1, "", "y"], [231, 2, 1, "", "z"]], "fipy.solvers": [[232, 6, 1, "", "DefaultAsymmetricSolver"], [232, 6, 1, "", "DefaultSolver"], [232, 6, 1, "", "DummySolver"], [232, 6, 1, "", "GeneralSolver"], [232, 5, 1, "", "SerialSolverError"], [233, 0, 0, "-", "convergence"], [234, 0, 0, "-", "petsc"], [256, 0, 0, "-", "preconditioner"], [257, 0, 0, "-", "pyAMG"], [265, 0, 0, "-", "pyamgx"], [277, 0, 0, "-", "pysparse"], [291, 0, 0, "-", "pysparseMatrixSolver"], [292, 0, 0, "-", "scipy"], [305, 0, 0, "-", "solver"], [306, 0, 0, "-", "test"], [307, 0, 0, "-", "trilinos"]], "fipy.solvers.SerialSolverError": [[232, 6, 1, "", "__cause__"], [232, 6, 1, "", "__context__"], [232, 3, 1, "", "__delattr__"], [232, 3, 1, "", "__getattribute__"], [232, 3, 1, "", "__reduce__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__setattr__"], [232, 3, 1, "", "__str__"], [232, 3, 1, "", "add_note"], [232, 3, 1, "", "with_traceback"]], "fipy.solvers.convergence": [[233, 1, 1, "", "AbsoluteToleranceConvergence"], [233, 1, 1, "", "BreakdownDivergence"], [233, 1, 1, "", "Convergence"], [233, 1, 1, "", "ConvergenceBase"], [233, 1, 1, "", "Divergence"], [233, 1, 1, "", "HappyBreakdownConvergence"], [233, 1, 1, "", "IllConditionedDivergence"], [233, 1, 1, "", "IllConditionedPreconditionerDivergence"], [233, 1, 1, "", "IteratingConvergence"], [233, 1, 1, "", "IterationConvergence"], [233, 1, 1, "", "IterationDivergence"], [233, 1, 1, "", "LossOfAccuracyConvergence"], [233, 1, 1, "", "NullDivergence"], [233, 1, 1, "", "OutOfRangeDivergence"], [233, 1, 1, "", "PreconditioningDivergence"], [233, 1, 1, "", "RHSZeroConvergence"], [233, 1, 1, "", "RelativeToleranceConvergence"], [233, 1, 1, "", "StagnatedDivergence"], [233, 1, 1, "", "ToleranceDivergence"]], "fipy.solvers.convergence.AbsoluteToleranceConvergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.BreakdownDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.Convergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ConvergenceBase": [[233, 3, 1, "", "__str__"], [233, 6, 1, "", "actual_code"], [233, 6, 1, "", "criterion"], [233, 6, 1, "", "iterations"], [233, 6, 1, "", "residual"], [233, 6, 1, "", "solver"], [233, 6, 1, "", "status_code"], [233, 6, 1, "", "status_name"], [233, 6, 1, "", "tolerance_scale"]], "fipy.solvers.convergence.Divergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.HappyBreakdownConvergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedPreconditionerDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IteratingConvergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationConvergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.LossOfAccuracyConvergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.NullDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.OutOfRangeDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.PreconditioningDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RHSZeroConvergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RelativeToleranceConvergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.StagnatedDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ToleranceDivergence": [[233, 3, 1, "", "__str__"]], "fipy.solvers.petsc": [[235, 0, 0, "-", "comms"], [239, 0, 0, "-", "dummySolver"], [240, 0, 0, "-", "linearBicgSolver"], [241, 0, 0, "-", "linearCGSSolver"], [242, 0, 0, "-", "linearGMRESSolver"], [243, 0, 0, "-", "linearLUSolver"], [244, 0, 0, "-", "linearPCGSolver"], [245, 0, 0, "-", "petscConvergence"], [246, 0, 0, "-", "petscKrylovSolver"], [247, 0, 0, "-", "petscSolver"], [248, 0, 0, "-", "preconditioners"]], "fipy.solvers.petsc.comms": [[236, 0, 0, "-", "parallelPETScCommWrapper"], [237, 0, 0, "-", "petscCommWrapper"], [238, 0, 0, "-", "serialPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[236, 1, 1, "", "ParallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper": [[236, 3, 1, "", "__getstate__"], [236, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[237, 1, 1, "", "PETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper": [[237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[238, 1, 1, "", "SerialPETScCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper": [[238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.dummySolver": [[239, 1, 1, "", "DummySolver"]], "fipy.solvers.petsc.dummySolver.DummySolver": [[239, 6, 1, "", "DEFAULT_ITERATIONS"], [239, 6, 1, "", "DEFAULT_PRECONDITIONER"], [239, 6, 1, "", "DEFAULT_TOLERANCE"], [239, 6, 1, "", "LEGACY_TOLERANCE"], [239, 3, 1, "", "__repr__"], [239, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearBicgSolver": [[240, 1, 1, "", "LinearBicgSolver"]], "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver": [[240, 6, 1, "", "DEFAULT_ITERATIONS"], [240, 6, 1, "", "DEFAULT_PRECONDITIONER"], [240, 6, 1, "", "DEFAULT_TOLERANCE"], [240, 6, 1, "", "LEGACY_TOLERANCE"], [240, 3, 1, "", "__repr__"], [240, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearCGSSolver": [[241, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver": [[241, 6, 1, "", "DEFAULT_ITERATIONS"], [241, 6, 1, "", "DEFAULT_PRECONDITIONER"], [241, 6, 1, "", "DEFAULT_TOLERANCE"], [241, 6, 1, "", "LEGACY_TOLERANCE"], [241, 3, 1, "", "__repr__"], [241, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearGMRESSolver": [[242, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver": [[242, 6, 1, "", "DEFAULT_ITERATIONS"], [242, 6, 1, "", "DEFAULT_PRECONDITIONER"], [242, 6, 1, "", "DEFAULT_TOLERANCE"], [242, 6, 1, "", "LEGACY_TOLERANCE"], [242, 3, 1, "", "__repr__"], [242, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearLUSolver": [[243, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.petsc.linearLUSolver.LinearLUSolver": [[243, 6, 1, "", "DEFAULT_ITERATIONS"], [243, 6, 1, "", "DEFAULT_PRECONDITIONER"], [243, 6, 1, "", "DEFAULT_TOLERANCE"], [243, 6, 1, "", "LEGACY_TOLERANCE"], [243, 3, 1, "", "__repr__"], [243, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearPCGSolver": [[244, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver": [[244, 6, 1, "", "DEFAULT_ITERATIONS"], [244, 6, 1, "", "DEFAULT_PRECONDITIONER"], [244, 6, 1, "", "DEFAULT_TOLERANCE"], [244, 6, 1, "", "LEGACY_TOLERANCE"], [244, 3, 1, "", "__repr__"], [244, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscConvergence": [[245, 1, 1, "", "KSP_AbsoluteToleranceConvergence"], [245, 1, 1, "", "KSP_BreakdownBICGDivergence"], [245, 1, 1, "", "KSP_BreakdownDivergence"], [245, 1, 1, "", "KSP_HappyBreakdownConvergence"], [245, 1, 1, "", "KSP_IndefiniteMatrixDivergence"], [245, 1, 1, "", "KSP_IndefinitePreconditionerDivergence"], [245, 1, 1, "", "KSP_IteratingConvergence"], [245, 1, 1, "", "KSP_IterationConvergence"], [245, 1, 1, "", "KSP_IterationDivergence"], [245, 1, 1, "", "KSP_NanOrInfDivergence"], [245, 1, 1, "", "KSP_NonSymmetricDivergence"], [245, 1, 1, "", "KSP_NormalAbsoluteToleranceConvergence"], [245, 1, 1, "", "KSP_NormalRelativeToleranceConvergence"], [245, 1, 1, "", "KSP_NullDivergence"], [245, 1, 1, "", "KSP_PreconditioningDivergence"], [245, 1, 1, "", "KSP_RelativeToleranceConvergence"], [245, 1, 1, "", "KSP_ToleranceDivergence"]], "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence": [[245, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscKrylovSolver": [[246, 1, 1, "", "PETScKrylovSolver"]], "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver": [[246, 6, 1, "", "DEFAULT_ITERATIONS"], [246, 6, 1, "", "DEFAULT_PRECONDITIONER"], [246, 6, 1, "", "DEFAULT_TOLERANCE"], [246, 6, 1, "", "LEGACY_TOLERANCE"], [246, 3, 1, "", "__repr__"], [246, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscSolver": [[247, 1, 1, "", "PETScSolver"]], "fipy.solvers.petsc.petscSolver.PETScSolver": [[247, 6, 1, "", "DEFAULT_ITERATIONS"], [247, 6, 1, "", "DEFAULT_PRECONDITIONER"], [247, 6, 1, "", "DEFAULT_TOLERANCE"], [247, 6, 1, "", "LEGACY_TOLERANCE"], [247, 3, 1, "", "__repr__"], [247, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.preconditioners": [[248, 1, 1, "", "DefaultPreconditioner"], [248, 1, 1, "", "ICPreconditioner"], [248, 1, 1, "", "ILUPreconditioner"], [248, 1, 1, "", "JacobiPreconditioner"], [248, 1, 1, "", "LUPreconditioner"], [248, 1, 1, "", "SSORPreconditioner"], [249, 0, 0, "-", "defaultPreconditioner"], [250, 0, 0, "-", "icPreconditioner"], [251, 0, 0, "-", "iluPreconditioner"], [252, 0, 0, "-", "jacobiPreconditioner"], [253, 0, 0, "-", "luPreconditioner"], [254, 0, 0, "-", "petscPreconditioner"], [255, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[249, 1, 1, "", "DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[250, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[251, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[252, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[253, 1, 1, "", "LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[254, 1, 1, "", "PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[255, 1, 1, "", "SSORPreconditioner"]], "fipy.solvers.preconditioner": [[256, 1, 1, "", "MatrixModifyingPreconditioner"], [256, 1, 1, "", "Preconditioner"], [256, 1, 1, "", "SolverModifyingPreconditioner"]], "fipy.solvers.pyAMG": [[258, 0, 0, "-", "linearCGSSolver"], [259, 0, 0, "-", "linearGMRESSolver"], [260, 0, 0, "-", "linearGeneralSolver"], [261, 0, 0, "-", "linearLUSolver"], [262, 0, 0, "-", "linearPCGSolver"], [263, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyAMG.linearCGSSolver": [[258, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver": [[258, 6, 1, "", "DEFAULT_ITERATIONS"], [258, 6, 1, "", "DEFAULT_PRECONDITIONER"], [258, 6, 1, "", "DEFAULT_TOLERANCE"], [258, 6, 1, "", "LEGACY_TOLERANCE"], [258, 3, 1, "", "__repr__"], [258, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[259, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver": [[259, 6, 1, "", "DEFAULT_ITERATIONS"], [259, 6, 1, "", "DEFAULT_PRECONDITIONER"], [259, 6, 1, "", "DEFAULT_TOLERANCE"], [259, 6, 1, "", "LEGACY_TOLERANCE"], [259, 3, 1, "", "__repr__"], [259, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[260, 1, 1, "", "LinearGeneralSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver": [[260, 6, 1, "", "DEFAULT_ITERATIONS"], [260, 6, 1, "", "DEFAULT_PRECONDITIONER"], [260, 6, 1, "", "DEFAULT_TOLERANCE"], [260, 6, 1, "", "LEGACY_TOLERANCE"], [260, 3, 1, "", "__repr__"], [260, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearLUSolver": [[261, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver": [[261, 6, 1, "", "DEFAULT_ITERATIONS"], [261, 6, 1, "", "DEFAULT_PRECONDITIONER"], [261, 6, 1, "", "DEFAULT_TOLERANCE"], [261, 6, 1, "", "LEGACY_TOLERANCE"], [261, 3, 1, "", "__repr__"], [261, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearPCGSolver": [[262, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver": [[262, 6, 1, "", "DEFAULT_ITERATIONS"], [262, 6, 1, "", "DEFAULT_PRECONDITIONER"], [262, 6, 1, "", "DEFAULT_TOLERANCE"], [262, 6, 1, "", "LEGACY_TOLERANCE"], [262, 3, 1, "", "__repr__"], [262, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.preconditioners": [[264, 0, 0, "-", "smoothedAggregationPreconditioner"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[264, 1, 1, "", "SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[266, 0, 0, "-", "aggregationAMGSolver"], [267, 0, 0, "-", "classicalAMGSolver"], [268, 0, 0, "-", "linearBiCGStabSolver"], [269, 0, 0, "-", "linearFGMRESSolver"], [270, 0, 0, "-", "linearGMRESSolver"], [271, 0, 0, "-", "linearLUSolver"], [272, 0, 0, "-", "linearPCGSolver"], [273, 0, 0, "-", "preconditioners"], [274, 0, 0, "-", "pyAMGXSolver"], [275, 0, 0, "-", "pyamgxConvergence"], [276, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[266, 1, 1, "", "AggregationAMGSolver"]], "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver": [[266, 6, 1, "", "DEFAULT_ITERATIONS"], [266, 6, 1, "", "DEFAULT_PRECONDITIONER"], [266, 6, 1, "", "DEFAULT_SMOOTHER"], [266, 6, 1, "", "DEFAULT_TOLERANCE"], [266, 6, 1, "", "LEGACY_TOLERANCE"], [266, 3, 1, "", "__repr__"], [266, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[267, 1, 1, "", "ClassicalAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver": [[267, 6, 1, "", "DEFAULT_ITERATIONS"], [267, 6, 1, "", "DEFAULT_PRECONDITIONER"], [267, 6, 1, "", "DEFAULT_SMOOTHER"], [267, 6, 1, "", "DEFAULT_TOLERANCE"], [267, 6, 1, "", "LEGACY_TOLERANCE"], [267, 3, 1, "", "__repr__"], [267, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[268, 1, 1, "", "LinearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver": [[268, 6, 1, "", "DEFAULT_ITERATIONS"], [268, 6, 1, "", "DEFAULT_PRECONDITIONER"], [268, 6, 1, "", "DEFAULT_SMOOTHER"], [268, 6, 1, "", "DEFAULT_TOLERANCE"], [268, 6, 1, "", "LEGACY_TOLERANCE"], [268, 3, 1, "", "__repr__"], [268, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[269, 1, 1, "", "LinearFGMRESSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver": [[269, 6, 1, "", "DEFAULT_ITERATIONS"], [269, 6, 1, "", "DEFAULT_PRECONDITIONER"], [269, 6, 1, "", "DEFAULT_SMOOTHER"], [269, 6, 1, "", "DEFAULT_TOLERANCE"], [269, 6, 1, "", "LEGACY_TOLERANCE"], [269, 3, 1, "", "__repr__"], [269, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[270, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver": [[270, 6, 1, "", "DEFAULT_ITERATIONS"], [270, 6, 1, "", "DEFAULT_PRECONDITIONER"], [270, 6, 1, "", "DEFAULT_SMOOTHER"], [270, 6, 1, "", "DEFAULT_TOLERANCE"], [270, 6, 1, "", "LEGACY_TOLERANCE"], [270, 3, 1, "", "__repr__"], [270, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearLUSolver": [[271, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver": [[271, 6, 1, "", "DEFAULT_ITERATIONS"], [271, 6, 1, "", "DEFAULT_PRECONDITIONER"], [271, 6, 1, "", "DEFAULT_TOLERANCE"], [271, 6, 1, "", "LEGACY_TOLERANCE"], [271, 3, 1, "", "__repr__"], [271, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearPCGSolver": [[272, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver": [[272, 6, 1, "", "DEFAULT_ITERATIONS"], [272, 6, 1, "", "DEFAULT_PRECONDITIONER"], [272, 6, 1, "", "DEFAULT_SMOOTHER"], [272, 6, 1, "", "DEFAULT_TOLERANCE"], [272, 6, 1, "", "LEGACY_TOLERANCE"], [272, 3, 1, "", "__repr__"], [272, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.preconditioners": [[273, 1, 1, "", "AMGPreconditioner"], [273, 1, 1, "", "AggregationAMGPreconditioner"], [273, 1, 1, "", "BiCGStabPreconditioner"], [273, 1, 1, "", "CGPreconditioner"], [273, 1, 1, "", "DILUPreconditioner"], [273, 1, 1, "", "FGMRESPreconditioner"], [273, 1, 1, "", "GaussSeidelPreconditioner"], [273, 1, 1, "", "ILUPreconditioner"], [273, 1, 1, "", "JacobiPreconditioner"], [273, 1, 1, "", "PolynomialPreconditioner"], [273, 1, 1, "", "PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[274, 1, 1, "", "PyAMGXSolver"]], "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver": [[274, 6, 1, "", "DEFAULT_ITERATIONS"], [274, 6, 1, "", "DEFAULT_PRECONDITIONER"], [274, 6, 1, "", "DEFAULT_SMOOTHER"], [274, 6, 1, "", "DEFAULT_TOLERANCE"], [274, 6, 1, "", "LEGACY_TOLERANCE"], [274, 3, 1, "", "__repr__"], [274, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[275, 1, 1, "", "pyamgx_BreakdownDivergence"], [275, 1, 1, "", "pyamgx_Convergence"], [275, 1, 1, "", "pyamgx_IterationDivergence"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence": [[275, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence": [[275, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence": [[275, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.smoothers": [[276, 1, 1, "", "Smoother"]], "fipy.solvers.pysparse": [[278, 0, 0, "-", "linearCGSSolver"], [279, 0, 0, "-", "linearGMRESSolver"], [280, 0, 0, "-", "linearInitialSolver"], [281, 0, 0, "-", "linearJORSolver"], [282, 0, 0, "-", "linearLUSolver"], [283, 0, 0, "-", "linearPCGSolver"], [284, 0, 0, "-", "linearRHSSolver"], [285, 0, 0, "-", "preconditioners"], [289, 0, 0, "-", "pysparseConvergence"], [290, 0, 0, "-", "pysparseSolver"]], "fipy.solvers.pysparse.linearCGSSolver": [[278, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver": [[278, 6, 1, "", "DEFAULT_ITERATIONS"], [278, 6, 1, "", "DEFAULT_PRECONDITIONER"], [278, 6, 1, "", "DEFAULT_TOLERANCE"], [278, 6, 1, "", "LEGACY_TOLERANCE"], [278, 3, 1, "", "__repr__"], [278, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearGMRESSolver": [[279, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver": [[279, 6, 1, "", "DEFAULT_ITERATIONS"], [279, 6, 1, "", "DEFAULT_PRECONDITIONER"], [279, 6, 1, "", "DEFAULT_TOLERANCE"], [279, 6, 1, "", "LEGACY_TOLERANCE"], [279, 3, 1, "", "__repr__"], [279, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearInitialSolver": [[280, 1, 1, "", "LinearInitialSolver"]], "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver": [[280, 6, 1, "", "DEFAULT_ITERATIONS"], [280, 6, 1, "", "DEFAULT_PRECONDITIONER"], [280, 6, 1, "", "DEFAULT_TOLERANCE"], [280, 6, 1, "", "LEGACY_TOLERANCE"], [280, 3, 1, "", "__repr__"], [280, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearJORSolver": [[281, 1, 1, "", "LinearJORSolver"]], "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver": [[281, 6, 1, "", "DEFAULT_ITERATIONS"], [281, 6, 1, "", "DEFAULT_PRECONDITIONER"], [281, 6, 1, "", "DEFAULT_TOLERANCE"], [281, 6, 1, "", "LEGACY_TOLERANCE"], [281, 3, 1, "", "__repr__"], [281, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearLUSolver": [[282, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver": [[282, 6, 1, "", "DEFAULT_ITERATIONS"], [282, 6, 1, "", "DEFAULT_PRECONDITIONER"], [282, 6, 1, "", "DEFAULT_TOLERANCE"], [282, 6, 1, "", "LEGACY_TOLERANCE"], [282, 3, 1, "", "__repr__"], [282, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearPCGSolver": [[283, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver": [[283, 6, 1, "", "DEFAULT_ITERATIONS"], [283, 6, 1, "", "DEFAULT_PRECONDITIONER"], [283, 6, 1, "", "DEFAULT_TOLERANCE"], [283, 6, 1, "", "LEGACY_TOLERANCE"], [283, 3, 1, "", "__repr__"], [283, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearRHSSolver": [[284, 1, 1, "", "LinearRHSSolver"]], "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver": [[284, 6, 1, "", "DEFAULT_ITERATIONS"], [284, 6, 1, "", "DEFAULT_PRECONDITIONER"], [284, 6, 1, "", "DEFAULT_TOLERANCE"], [284, 6, 1, "", "LEGACY_TOLERANCE"], [284, 3, 1, "", "__repr__"], [284, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.preconditioners": [[285, 1, 1, "", "JacobiPreconditioner"], [285, 1, 1, "", "SSORPreconditioner"], [286, 0, 0, "-", "jacobiPreconditioner"], [287, 0, 0, "-", "pysparsePreconditioner"], [288, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[286, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner": [[287, 1, 1, "", "PysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[288, 1, 1, "", "SSORPreconditioner"]], "fipy.solvers.pysparse.pysparseConvergence": [[289, 1, 1, "", "Pysparse_AbsoluteToleranceConvergence"], [289, 1, 1, "", "Pysparse_IllConditionedDivergence"], [289, 1, 1, "", "Pysparse_IllConditionedPreconditionerDivergence"], [289, 1, 1, "", "Pysparse_IterationDivergence"], [289, 1, 1, "", "Pysparse_NonPosDefPreconditioningDivergence"], [289, 1, 1, "", "Pysparse_OutOfRangeDivergence"], [289, 1, 1, "", "Pysparse_RHSZeroConvergence"], [289, 1, 1, "", "Pysparse_RelativeToleranceConvergence"], [289, 1, 1, "", "Pysparse_StagnatedDivergence"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence": [[289, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseSolver": [[290, 1, 1, "", "PysparseSolver"]], "fipy.solvers.pysparse.pysparseSolver.PysparseSolver": [[290, 6, 1, "", "DEFAULT_ITERATIONS"], [290, 6, 1, "", "DEFAULT_PRECONDITIONER"], [290, 6, 1, "", "DEFAULT_TOLERANCE"], [290, 6, 1, "", "LEGACY_TOLERANCE"], [290, 3, 1, "", "__repr__"], [290, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy": [[293, 0, 0, "-", "linearBicgstabSolver"], [294, 0, 0, "-", "linearCGSSolver"], [295, 0, 0, "-", "linearGMRESSolver"], [296, 0, 0, "-", "linearLUSolver"], [297, 0, 0, "-", "linearPCGSolver"], [298, 0, 0, "-", "preconditioners"], [302, 0, 0, "-", "scipyConvergence"], [303, 0, 0, "-", "scipyKrylovSolver"], [304, 0, 0, "-", "scipySolver"]], "fipy.solvers.scipy.linearBicgstabSolver": [[293, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver": [[293, 6, 1, "", "DEFAULT_ITERATIONS"], [293, 6, 1, "", "DEFAULT_PRECONDITIONER"], [293, 6, 1, "", "DEFAULT_TOLERANCE"], [293, 6, 1, "", "LEGACY_TOLERANCE"], [293, 3, 1, "", "__repr__"], [293, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearCGSSolver": [[294, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver": [[294, 6, 1, "", "DEFAULT_ITERATIONS"], [294, 6, 1, "", "DEFAULT_PRECONDITIONER"], [294, 6, 1, "", "DEFAULT_TOLERANCE"], [294, 6, 1, "", "LEGACY_TOLERANCE"], [294, 3, 1, "", "__repr__"], [294, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearGMRESSolver": [[295, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver": [[295, 6, 1, "", "DEFAULT_ITERATIONS"], [295, 6, 1, "", "DEFAULT_PRECONDITIONER"], [295, 6, 1, "", "DEFAULT_TOLERANCE"], [295, 6, 1, "", "LEGACY_TOLERANCE"], [295, 3, 1, "", "__repr__"], [295, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearLUSolver": [[296, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.scipy.linearLUSolver.LinearLUSolver": [[296, 6, 1, "", "DEFAULT_ITERATIONS"], [296, 6, 1, "", "DEFAULT_PRECONDITIONER"], [296, 6, 1, "", "DEFAULT_TOLERANCE"], [296, 6, 1, "", "LEGACY_TOLERANCE"], [296, 3, 1, "", "__repr__"], [296, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearPCGSolver": [[297, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver": [[297, 6, 1, "", "DEFAULT_ITERATIONS"], [297, 6, 1, "", "DEFAULT_PRECONDITIONER"], [297, 6, 1, "", "DEFAULT_TOLERANCE"], [297, 6, 1, "", "LEGACY_TOLERANCE"], [297, 3, 1, "", "__repr__"], [297, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.preconditioners": [[298, 1, 1, "", "ILUPreconditioner"], [298, 1, 1, "", "JacobiPreconditioner"], [299, 0, 0, "-", "iluPreconditioner"], [300, 0, 0, "-", "jacobiPreconditioner"], [301, 0, 0, "-", "scipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[299, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[300, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[301, 1, 1, "", "ScipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[302, 1, 1, "", "SciPy_BreakdownDivergence"], [302, 1, 1, "", "SciPy_Convergence"], [302, 1, 1, "", "SciPy_IterationDivergence"]], "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence": [[302, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence": [[302, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence": [[302, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyKrylovSolver": [[303, 1, 1, "", "ScipyKrylovSolver"]], "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver": [[303, 6, 1, "", "DEFAULT_ITERATIONS"], [303, 6, 1, "", "DEFAULT_PRECONDITIONER"], [303, 6, 1, "", "DEFAULT_TOLERANCE"], [303, 6, 1, "", "LEGACY_TOLERANCE"], [303, 3, 1, "", "__repr__"], [303, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.scipySolver": [[304, 1, 1, "", "ScipySolver"]], "fipy.solvers.scipy.scipySolver.ScipySolver": [[304, 6, 1, "", "DEFAULT_ITERATIONS"], [304, 6, 1, "", "DEFAULT_PRECONDITIONER"], [304, 6, 1, "", "DEFAULT_TOLERANCE"], [304, 6, 1, "", "LEGACY_TOLERANCE"], [304, 3, 1, "", "__repr__"], [304, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver": [[305, 5, 1, "", "BreakdownWarning"], [305, 5, 1, "", "IllConditionedPreconditionerWarning"], [305, 5, 1, "", "IllegalInputOrBreakdownWarning"], [305, 5, 1, "", "LossOfPrecisionWarning"], [305, 5, 1, "", "MatrixIllConditionedWarning"], [305, 5, 1, "", "MaximumIterationWarning"], [305, 5, 1, "", "NormalConvergence"], [305, 5, 1, "", "ParameterWarning"], [305, 5, 1, "", "PreconditionerNotPositiveDefiniteWarning"], [305, 5, 1, "", "PreconditionerWarning"], [305, 5, 1, "", "ScalarQuantityOutOfRangeWarning"], [305, 1, 1, "", "Solver"], [305, 5, 1, "", "SolverConvergenceWarning"], [305, 5, 1, "", "StagnatedSolverWarning"]], "fipy.solvers.solver.BreakdownWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllConditionedPreconditionerWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllegalInputOrBreakdownWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.LossOfPrecisionWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MatrixIllConditionedWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MaximumIterationWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.NormalConvergence": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ParameterWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.Solver": [[305, 6, 1, "", "DEFAULT_ITERATIONS"], [305, 6, 1, "", "DEFAULT_PRECONDITIONER"], [305, 6, 1, "", "DEFAULT_TOLERANCE"], [305, 6, 1, "", "LEGACY_TOLERANCE"], [305, 3, 1, "", "__repr__"], [305, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver.SolverConvergenceWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.StagnatedSolverWarning": [[305, 6, 1, "", "__cause__"], [305, 6, 1, "", "__context__"], [305, 3, 1, "", "__delattr__"], [305, 3, 1, "", "__getattribute__"], [305, 3, 1, "", "__reduce__"], [305, 3, 1, "", "__repr__"], [305, 3, 1, "", "__setattr__"], [305, 3, 1, "", "__str__"], [305, 3, 1, "", "add_note"], [305, 3, 1, "", "with_traceback"]], "fipy.solvers.trilinos": [[308, 0, 0, "-", "aztecConvergence"], [309, 0, 0, "-", "comms"], [313, 0, 0, "-", "linearBicgstabSolver"], [314, 0, 0, "-", "linearCGSSolver"], [315, 0, 0, "-", "linearGMRESSolver"], [316, 0, 0, "-", "linearLUSolver"], [317, 0, 0, "-", "linearPCGSolver"], [318, 0, 0, "-", "preconditioners"], [331, 0, 0, "-", "trilinosAztecOOSolver"], [332, 0, 0, "-", "trilinosMLTest"], [333, 0, 0, "-", "trilinosNonlinearSolver"], [334, 0, 0, "-", "trilinosSolver"]], "fipy.solvers.trilinos.aztecConvergence": [[308, 1, 1, "", "AZ_BreakdownDivergence"], [308, 1, 1, "", "AZ_IllConditionedDivergence"], [308, 1, 1, "", "AZ_IterationDivergence"], [308, 1, 1, "", "AZ_LossOfAccuracyConvergence"], [308, 1, 1, "", "AZ_NormalConvergence"], [308, 1, 1, "", "AZ_ParameterDivergence"]], "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.comms": [[310, 0, 0, "-", "epetraCommWrapper"], [311, 0, 0, "-", "parallelEpetraCommWrapper"], [312, 0, 0, "-", "serialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[310, 1, 1, "", "EpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper": [[310, 3, 1, "", "__getstate__"], [310, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[311, 1, 1, "", "ParallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper": [[311, 3, 1, "", "MaxAll"], [311, 3, 1, "", "MinAll"], [311, 3, 1, "", "__getstate__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "allgather"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[312, 1, 1, "", "SerialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper": [[312, 3, 1, "", "__getstate__"], [312, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[313, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver": [[313, 6, 1, "", "DEFAULT_ITERATIONS"], [313, 6, 1, "", "DEFAULT_PRECONDITIONER"], [313, 6, 1, "", "DEFAULT_TOLERANCE"], [313, 6, 1, "", "LEGACY_TOLERANCE"], [313, 3, 1, "", "__repr__"], [313, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearCGSSolver": [[314, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver": [[314, 6, 1, "", "DEFAULT_ITERATIONS"], [314, 6, 1, "", "DEFAULT_PRECONDITIONER"], [314, 6, 1, "", "DEFAULT_TOLERANCE"], [314, 6, 1, "", "LEGACY_TOLERANCE"], [314, 3, 1, "", "__repr__"], [314, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearGMRESSolver": [[315, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver": [[315, 6, 1, "", "DEFAULT_ITERATIONS"], [315, 6, 1, "", "DEFAULT_PRECONDITIONER"], [315, 6, 1, "", "DEFAULT_TOLERANCE"], [315, 6, 1, "", "LEGACY_TOLERANCE"], [315, 3, 1, "", "__repr__"], [315, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearLUSolver": [[316, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver": [[316, 6, 1, "", "DEFAULT_ITERATIONS"], [316, 6, 1, "", "DEFAULT_PRECONDITIONER"], [316, 6, 1, "", "DEFAULT_TOLERANCE"], [316, 6, 1, "", "LEGACY_TOLERANCE"], [316, 3, 1, "", "__repr__"], [316, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearPCGSolver": [[317, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver": [[317, 6, 1, "", "DEFAULT_ITERATIONS"], [317, 6, 1, "", "DEFAULT_PRECONDITIONER"], [317, 6, 1, "", "DEFAULT_TOLERANCE"], [317, 6, 1, "", "LEGACY_TOLERANCE"], [317, 3, 1, "", "__repr__"], [317, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.preconditioners": [[318, 1, 1, "", "DomDecompPreconditioner"], [318, 1, 1, "", "ICPreconditioner"], [318, 1, 1, "", "ILUPreconditioner"], [318, 1, 1, "", "JacobiPreconditioner"], [318, 1, 1, "", "MultilevelDDMLPreconditioner"], [318, 1, 1, "", "MultilevelDDPreconditioner"], [318, 1, 1, "", "MultilevelNSSAPreconditioner"], [318, 1, 1, "", "MultilevelSAPreconditioner"], [318, 1, 1, "", "MultilevelSGSPreconditioner"], [318, 1, 1, "", "MultilevelSolverSmootherPreconditioner"], [319, 0, 0, "-", "domDecompPreconditioner"], [320, 0, 0, "-", "icPreconditioner"], [321, 0, 0, "-", "iluPreconditioner"], [322, 0, 0, "-", "jacobiPreconditioner"], [323, 0, 0, "-", "multilevelDDMLPreconditioner"], [324, 0, 0, "-", "multilevelDDPreconditioner"], [325, 0, 0, "-", "multilevelNSSAPreconditioner"], [326, 0, 0, "-", "multilevelPreconditioner"], [327, 0, 0, "-", "multilevelSAPreconditioner"], [328, 0, 0, "-", "multilevelSGSPreconditioner"], [329, 0, 0, "-", "multilevelSolverSmootherPreconditioner"], [330, 0, 0, "-", "trilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[319, 1, 1, "", "DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[320, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[321, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[322, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[323, 1, 1, "", "MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[324, 1, 1, "", "MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[325, 1, 1, "", "MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[326, 1, 1, "", "MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[327, 1, 1, "", "MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[328, 1, 1, "", "MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[329, 1, 1, "", "MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[330, 1, 1, "", "TrilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[331, 1, 1, "", "TrilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver": [[331, 6, 1, "", "DEFAULT_ITERATIONS"], [331, 6, 1, "", "DEFAULT_PRECONDITIONER"], [331, 6, 1, "", "DEFAULT_TOLERANCE"], [331, 6, 1, "", "LEGACY_TOLERANCE"], [331, 3, 1, "", "__repr__"], [331, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosMLTest": [[332, 1, 1, "", "TrilinosMLTest"]], "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest": [[332, 6, 1, "", "DEFAULT_ITERATIONS"], [332, 6, 1, "", "DEFAULT_PRECONDITIONER"], [332, 6, 1, "", "DEFAULT_TOLERANCE"], [332, 6, 1, "", "LEGACY_TOLERANCE"], [332, 3, 1, "", "__repr__"], [332, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[333, 1, 1, "", "TrilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver": [[333, 6, 1, "", "DEFAULT_ITERATIONS"], [333, 6, 1, "", "DEFAULT_PRECONDITIONER"], [333, 6, 1, "", "DEFAULT_TOLERANCE"], [333, 6, 1, "", "LEGACY_TOLERANCE"], [333, 3, 1, "", "__repr__"], [333, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosSolver": [[334, 1, 1, "", "TrilinosSolver"]], "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver": [[334, 6, 1, "", "DEFAULT_ITERATIONS"], [334, 6, 1, "", "DEFAULT_PRECONDITIONER"], [334, 6, 1, "", "DEFAULT_TOLERANCE"], [334, 6, 1, "", "LEGACY_TOLERANCE"], [334, 3, 1, "", "__repr__"], [334, 2, 1, "", "default_tolerance"]], "fipy.steppers": [[335, 4, 1, "", "L1error"], [335, 4, 1, "", "L2error"], [335, 4, 1, "", "LINFerror"], [335, 4, 1, "", "error"], [336, 0, 0, "-", "pidStepper"], [337, 0, 0, "-", "pseudoRKQSStepper"], [335, 4, 1, "", "residual"], [338, 0, 0, "-", "stepper"], [335, 4, 1, "", "sweepMonotonic"]], "fipy.steppers.pidStepper": [[336, 1, 1, "", "PIDStepper"]], "fipy.steppers.pseudoRKQSStepper": [[337, 1, 1, "", "PseudoRKQSStepper"]], "fipy.steppers.stepper": [[338, 1, 1, "", "Stepper"]], "fipy.terms": [[339, 5, 1, "", "AbstractBaseClassError"], [339, 5, 1, "", "ExplicitVariableError"], [339, 5, 1, "", "IncorrectSolutionVariable"], [339, 5, 1, "", "SolutionVariableNumberError"], [339, 5, 1, "", "SolutionVariableRequiredError"], [339, 5, 1, "", "TermMultiplyError"], [339, 5, 1, "", "TransientTermError"], [339, 5, 1, "", "VectorCoeffError"], [340, 0, 0, "-", "abstractBinaryTerm"], [341, 0, 0, "-", "abstractConvectionTerm"], [342, 0, 0, "-", "abstractDiffusionTerm"], [343, 0, 0, "-", "abstractUpwindConvectionTerm"], [344, 0, 0, "-", "advectionTerm"], [345, 0, 0, "-", "asymmetricConvectionTerm"], [346, 0, 0, "-", "binaryTerm"], [347, 0, 0, "-", "cellTerm"], [348, 0, 0, "-", "centralDiffConvectionTerm"], [349, 0, 0, "-", "coupledBinaryTerm"], [350, 0, 0, "-", "diffusionTerm"], [351, 0, 0, "-", "diffusionTermCorrection"], [352, 0, 0, "-", "diffusionTermNoCorrection"], [353, 0, 0, "-", "explicitDiffusionTerm"], [354, 0, 0, "-", "explicitSourceTerm"], [355, 0, 0, "-", "explicitUpwindConvectionTerm"], [356, 0, 0, "-", "exponentialConvectionTerm"], [357, 0, 0, "-", "faceTerm"], [358, 0, 0, "-", "firstOrderAdvectionTerm"], [359, 0, 0, "-", "hybridConvectionTerm"], [360, 0, 0, "-", "implicitDiffusionTerm"], [361, 0, 0, "-", "implicitSourceTerm"], [362, 0, 0, "-", "nonDiffusionTerm"], [363, 0, 0, "-", "powerLawConvectionTerm"], [364, 0, 0, "-", "residualTerm"], [365, 0, 0, "-", "sourceTerm"], [366, 0, 0, "-", "term"], [367, 0, 0, "-", "test"], [368, 0, 0, "-", "transientTerm"], [369, 0, 0, "-", "unaryTerm"], [370, 0, 0, "-", "upwindConvectionTerm"], [371, 0, 0, "-", "vanLeerConvectionTerm"]], "fipy.terms.AbstractBaseClassError": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.ExplicitVariableError": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.IncorrectSolutionVariable": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableNumberError": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableRequiredError": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.TermMultiplyError": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.TransientTermError": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.VectorCoeffError": [[339, 6, 1, "", "__cause__"], [339, 6, 1, "", "__context__"], [339, 3, 1, "", "__delattr__"], [339, 3, 1, "", "__getattribute__"], [339, 3, 1, "", "__reduce__"], [339, 3, 1, "", "__repr__"], [339, 3, 1, "", "__setattr__"], [339, 3, 1, "", "__str__"], [339, 3, 1, "", "add_note"], [339, 3, 1, "", "with_traceback"]], "fipy.terms.advectionTerm": [[344, 1, 1, "", "AdvectionTerm"]], "fipy.terms.advectionTerm.AdvectionTerm": [[344, 2, 1, "", "RHSvector"], [344, 3, 1, "", "__eq__"], [344, 3, 1, "", "__hash__"], [344, 3, 1, "", "__mul__"], [344, 3, 1, "", "__neg__"], [344, 3, 1, "", "__repr__"], [344, 3, 1, "", "__rmul__"], [344, 3, 1, "", "cacheMatrix"], [344, 3, 1, "", "cacheRHSvector"], [344, 3, 1, "", "justErrorVector"], [344, 3, 1, "", "justResidualVector"], [344, 2, 1, "", "matrix"], [344, 3, 1, "", "residualVectorAndNorm"], [344, 3, 1, "", "solve"], [344, 3, 1, "", "sweep"]], "fipy.terms.cellTerm": [[347, 1, 1, "", "CellTerm"]], "fipy.terms.cellTerm.CellTerm": [[347, 2, 1, "", "RHSvector"], [347, 3, 1, "", "__eq__"], [347, 3, 1, "", "__hash__"], [347, 3, 1, "", "__mul__"], [347, 3, 1, "", "__neg__"], [347, 3, 1, "", "__repr__"], [347, 3, 1, "", "__rmul__"], [347, 3, 1, "", "cacheMatrix"], [347, 3, 1, "", "cacheRHSvector"], [347, 3, 1, "", "justErrorVector"], [347, 3, 1, "", "justResidualVector"], [347, 2, 1, "", "matrix"], [347, 3, 1, "", "residualVectorAndNorm"], [347, 3, 1, "", "solve"], [347, 3, 1, "", "sweep"]], "fipy.terms.centralDiffConvectionTerm": [[348, 1, 1, "", "CentralDifferenceConvectionTerm"]], "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm": [[348, 2, 1, "", "RHSvector"], [348, 3, 1, "", "__eq__"], [348, 3, 1, "", "__hash__"], [348, 3, 1, "", "__mul__"], [348, 3, 1, "", "__neg__"], [348, 3, 1, "", "__repr__"], [348, 3, 1, "", "__rmul__"], [348, 3, 1, "", "cacheMatrix"], [348, 3, 1, "", "cacheRHSvector"], [348, 3, 1, "", "justErrorVector"], [348, 3, 1, "", "justResidualVector"], [348, 2, 1, "", "matrix"], [348, 3, 1, "", "residualVectorAndNorm"], [348, 3, 1, "", "solve"], [348, 3, 1, "", "sweep"]], "fipy.terms.diffusionTerm": [[350, 1, 1, "", "DiffusionTerm"]], "fipy.terms.diffusionTerm.DiffusionTerm": [[350, 2, 1, "", "RHSvector"], [350, 3, 1, "", "__eq__"], [350, 3, 1, "", "__hash__"], [350, 3, 1, "", "__repr__"], [350, 3, 1, "", "cacheMatrix"], [350, 3, 1, "", "cacheRHSvector"], [350, 3, 1, "", "justErrorVector"], [350, 3, 1, "", "justResidualVector"], [350, 2, 1, "", "matrix"], [350, 3, 1, "", "residualVectorAndNorm"], [350, 3, 1, "", "solve"], [350, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermCorrection": [[351, 1, 1, "", "DiffusionTermCorrection"]], "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection": [[351, 2, 1, "", "RHSvector"], [351, 3, 1, "", "__eq__"], [351, 3, 1, "", "__hash__"], [351, 3, 1, "", "__repr__"], [351, 3, 1, "", "cacheMatrix"], [351, 3, 1, "", "cacheRHSvector"], [351, 3, 1, "", "justErrorVector"], [351, 3, 1, "", "justResidualVector"], [351, 2, 1, "", "matrix"], [351, 3, 1, "", "residualVectorAndNorm"], [351, 3, 1, "", "solve"], [351, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermNoCorrection": [[352, 1, 1, "", "DiffusionTermNoCorrection"]], "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection": [[352, 2, 1, "", "RHSvector"], [352, 3, 1, "", "__eq__"], [352, 3, 1, "", "__hash__"], [352, 3, 1, "", "__repr__"], [352, 3, 1, "", "cacheMatrix"], [352, 3, 1, "", "cacheRHSvector"], [352, 3, 1, "", "justErrorVector"], [352, 3, 1, "", "justResidualVector"], [352, 2, 1, "", "matrix"], [352, 3, 1, "", "residualVectorAndNorm"], [352, 3, 1, "", "solve"], [352, 3, 1, "", "sweep"]], "fipy.terms.explicitDiffusionTerm": [[353, 1, 1, "", "ExplicitDiffusionTerm"]], "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm": [[353, 2, 1, "", "RHSvector"], [353, 3, 1, "", "__eq__"], [353, 3, 1, "", "__hash__"], [353, 3, 1, "", "__repr__"], [353, 3, 1, "", "cacheMatrix"], [353, 3, 1, "", "cacheRHSvector"], [353, 3, 1, "", "justErrorVector"], [353, 3, 1, "", "justResidualVector"], [353, 2, 1, "", "matrix"], [353, 3, 1, "", "residualVectorAndNorm"], [353, 3, 1, "", "solve"], [353, 3, 1, "", "sweep"]], "fipy.terms.explicitUpwindConvectionTerm": [[355, 1, 1, "", "ExplicitUpwindConvectionTerm"]], "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm": [[355, 2, 1, "", "RHSvector"], [355, 3, 1, "", "__eq__"], [355, 3, 1, "", "__hash__"], [355, 3, 1, "", "__mul__"], [355, 3, 1, "", "__neg__"], [355, 3, 1, "", "__repr__"], [355, 3, 1, "", "__rmul__"], [355, 3, 1, "", "cacheMatrix"], [355, 3, 1, "", "cacheRHSvector"], [355, 3, 1, "", "justErrorVector"], [355, 3, 1, "", "justResidualVector"], [355, 2, 1, "", "matrix"], [355, 3, 1, "", "residualVectorAndNorm"], [355, 3, 1, "", "solve"], [355, 3, 1, "", "sweep"]], "fipy.terms.exponentialConvectionTerm": [[356, 1, 1, "", "ExponentialConvectionTerm"]], "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm": [[356, 2, 1, "", "RHSvector"], [356, 3, 1, "", "__eq__"], [356, 3, 1, "", "__hash__"], [356, 3, 1, "", "__mul__"], [356, 3, 1, "", "__neg__"], [356, 3, 1, "", "__repr__"], [356, 3, 1, "", "__rmul__"], [356, 3, 1, "", "cacheMatrix"], [356, 3, 1, "", "cacheRHSvector"], [356, 3, 1, "", "justErrorVector"], [356, 3, 1, "", "justResidualVector"], [356, 2, 1, "", "matrix"], [356, 3, 1, "", "residualVectorAndNorm"], [356, 3, 1, "", "solve"], [356, 3, 1, "", "sweep"]], "fipy.terms.faceTerm": [[357, 1, 1, "", "FaceTerm"]], "fipy.terms.faceTerm.FaceTerm": [[357, 2, 1, "", "RHSvector"], [357, 3, 1, "", "__eq__"], [357, 3, 1, "", "__hash__"], [357, 3, 1, "", "__mul__"], [357, 3, 1, "", "__neg__"], [357, 3, 1, "", "__repr__"], [357, 3, 1, "", "__rmul__"], [357, 3, 1, "", "cacheMatrix"], [357, 3, 1, "", "cacheRHSvector"], [357, 3, 1, "", "justErrorVector"], [357, 3, 1, "", "justResidualVector"], [357, 2, 1, "", "matrix"], [357, 3, 1, "", "residualVectorAndNorm"], [357, 3, 1, "", "solve"], [357, 3, 1, "", "sweep"]], "fipy.terms.firstOrderAdvectionTerm": [[358, 1, 1, "", "FirstOrderAdvectionTerm"]], "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm": [[358, 2, 1, "", "RHSvector"], [358, 3, 1, "", "__eq__"], [358, 3, 1, "", "__hash__"], [358, 3, 1, "", "__mul__"], [358, 3, 1, "", "__neg__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__rmul__"], [358, 3, 1, "", "cacheMatrix"], [358, 3, 1, "", "cacheRHSvector"], [358, 3, 1, "", "justErrorVector"], [358, 3, 1, "", "justResidualVector"], [358, 2, 1, "", "matrix"], [358, 3, 1, "", "residualVectorAndNorm"], [358, 3, 1, "", "solve"], [358, 3, 1, "", "sweep"]], "fipy.terms.hybridConvectionTerm": [[359, 1, 1, "", "HybridConvectionTerm"]], "fipy.terms.hybridConvectionTerm.HybridConvectionTerm": [[359, 2, 1, "", "RHSvector"], [359, 3, 1, "", "__eq__"], [359, 3, 1, "", "__hash__"], [359, 3, 1, "", "__mul__"], [359, 3, 1, "", "__neg__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__rmul__"], [359, 3, 1, "", "cacheMatrix"], [359, 3, 1, "", "cacheRHSvector"], [359, 3, 1, "", "justErrorVector"], [359, 3, 1, "", "justResidualVector"], [359, 2, 1, "", "matrix"], [359, 3, 1, "", "residualVectorAndNorm"], [359, 3, 1, "", "solve"], [359, 3, 1, "", "sweep"]], "fipy.terms.implicitDiffusionTerm": [[360, 6, 1, "", "ImplicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[361, 1, 1, "", "ImplicitSourceTerm"]], "fipy.terms.implicitSourceTerm.ImplicitSourceTerm": [[361, 2, 1, "", "RHSvector"], [361, 3, 1, "", "__eq__"], [361, 3, 1, "", "__hash__"], [361, 3, 1, "", "__mul__"], [361, 3, 1, "", "__neg__"], [361, 3, 1, "", "__repr__"], [361, 3, 1, "", "__rmul__"], [361, 3, 1, "", "cacheMatrix"], [361, 3, 1, "", "cacheRHSvector"], [361, 3, 1, "", "justErrorVector"], [361, 3, 1, "", "justResidualVector"], [361, 2, 1, "", "matrix"], [361, 3, 1, "", "residualVectorAndNorm"], [361, 3, 1, "", "solve"], [361, 3, 1, "", "sweep"]], "fipy.terms.powerLawConvectionTerm": [[363, 1, 1, "", "PowerLawConvectionTerm"]], "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm": [[363, 2, 1, "", "RHSvector"], [363, 3, 1, "", "__eq__"], [363, 3, 1, "", "__hash__"], [363, 3, 1, "", "__mul__"], [363, 3, 1, "", "__neg__"], [363, 3, 1, "", "__repr__"], [363, 3, 1, "", "__rmul__"], [363, 3, 1, "", "cacheMatrix"], [363, 3, 1, "", "cacheRHSvector"], [363, 3, 1, "", "justErrorVector"], [363, 3, 1, "", "justResidualVector"], [363, 2, 1, "", "matrix"], [363, 3, 1, "", "residualVectorAndNorm"], [363, 3, 1, "", "solve"], [363, 3, 1, "", "sweep"]], "fipy.terms.residualTerm": [[364, 1, 1, "", "ResidualTerm"]], "fipy.terms.residualTerm.ResidualTerm": [[364, 2, 1, "", "RHSvector"], [364, 3, 1, "", "__eq__"], [364, 3, 1, "", "__hash__"], [364, 3, 1, "", "__mul__"], [364, 3, 1, "", "__neg__"], [364, 3, 1, "", "__repr__"], [364, 3, 1, "", "__rmul__"], [364, 3, 1, "", "cacheMatrix"], [364, 3, 1, "", "cacheRHSvector"], [364, 3, 1, "", "justErrorVector"], [364, 3, 1, "", "justResidualVector"], [364, 2, 1, "", "matrix"], [364, 3, 1, "", "residualVectorAndNorm"], [364, 3, 1, "", "solve"], [364, 3, 1, "", "sweep"]], "fipy.terms.sourceTerm": [[365, 1, 1, "", "SourceTerm"]], "fipy.terms.sourceTerm.SourceTerm": [[365, 2, 1, "", "RHSvector"], [365, 3, 1, "", "__eq__"], [365, 3, 1, "", "__hash__"], [365, 3, 1, "", "__mul__"], [365, 3, 1, "", "__neg__"], [365, 3, 1, "", "__repr__"], [365, 3, 1, "", "__rmul__"], [365, 3, 1, "", "cacheMatrix"], [365, 3, 1, "", "cacheRHSvector"], [365, 3, 1, "", "justErrorVector"], [365, 3, 1, "", "justResidualVector"], [365, 2, 1, "", "matrix"], [365, 3, 1, "", "residualVectorAndNorm"], [365, 3, 1, "", "solve"], [365, 3, 1, "", "sweep"]], "fipy.terms.term": [[366, 1, 1, "", "Term"]], "fipy.terms.term.Term": [[366, 2, 1, "", "RHSvector"], [366, 3, 1, "", "__eq__"], [366, 3, 1, "", "__hash__"], [366, 3, 1, "", "__repr__"], [366, 3, 1, "", "cacheMatrix"], [366, 3, 1, "", "cacheRHSvector"], [366, 3, 1, "", "justErrorVector"], [366, 3, 1, "", "justResidualVector"], [366, 2, 1, "", "matrix"], [366, 3, 1, "", "residualVectorAndNorm"], [366, 3, 1, "", "solve"], [366, 3, 1, "", "sweep"]], "fipy.terms.transientTerm": [[368, 1, 1, "", "TransientTerm"]], "fipy.terms.transientTerm.TransientTerm": [[368, 2, 1, "", "RHSvector"], [368, 3, 1, "", "__eq__"], [368, 3, 1, "", "__hash__"], [368, 3, 1, "", "__mul__"], [368, 3, 1, "", "__neg__"], [368, 3, 1, "", "__repr__"], [368, 3, 1, "", "__rmul__"], [368, 3, 1, "", "cacheMatrix"], [368, 3, 1, "", "cacheRHSvector"], [368, 3, 1, "", "justErrorVector"], [368, 3, 1, "", "justResidualVector"], [368, 2, 1, "", "matrix"], [368, 3, 1, "", "residualVectorAndNorm"], [368, 3, 1, "", "solve"], [368, 3, 1, "", "sweep"]], "fipy.terms.upwindConvectionTerm": [[370, 1, 1, "", "UpwindConvectionTerm"]], "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm": [[370, 2, 1, "", "RHSvector"], [370, 3, 1, "", "__eq__"], [370, 3, 1, "", "__hash__"], [370, 3, 1, "", "__mul__"], [370, 3, 1, "", "__neg__"], [370, 3, 1, "", "__repr__"], [370, 3, 1, "", "__rmul__"], [370, 3, 1, "", "cacheMatrix"], [370, 3, 1, "", "cacheRHSvector"], [370, 3, 1, "", "justErrorVector"], [370, 3, 1, "", "justResidualVector"], [370, 2, 1, "", "matrix"], [370, 3, 1, "", "residualVectorAndNorm"], [370, 3, 1, "", "solve"], [370, 3, 1, "", "sweep"]], "fipy.terms.vanLeerConvectionTerm": [[371, 1, 1, "", "VanLeerConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm": [[371, 2, 1, "", "RHSvector"], [371, 3, 1, "", "__eq__"], [371, 3, 1, "", "__hash__"], [371, 3, 1, "", "__mul__"], [371, 3, 1, "", "__neg__"], [371, 3, 1, "", "__repr__"], [371, 3, 1, "", "__rmul__"], [371, 3, 1, "", "cacheMatrix"], [371, 3, 1, "", "cacheRHSvector"], [371, 3, 1, "", "justErrorVector"], [371, 3, 1, "", "justResidualVector"], [371, 2, 1, "", "matrix"], [371, 3, 1, "", "residualVectorAndNorm"], [371, 3, 1, "", "solve"], [371, 3, 1, "", "sweep"]], "fipy.tests": [[374, 0, 0, "-", "doctestPlus"], [375, 0, 0, "-", "lateImportTest"], [376, 0, 0, "-", "test"], [377, 0, 0, "-", "testProgram"]], "fipy.tests.doctestPlus": [[374, 4, 1, "", "execButNoTest"], [374, 4, 1, "", "register_skipper"], [374, 4, 1, "", "report_skips"], [374, 4, 1, "", "testmod"]], "fipy.tests.test": [[376, 1, 1, "", "DeprecationErroringTestProgram"], [376, 1, 1, "", "test"]], "fipy.tests.test.test": [[376, 3, 1, "", "finalize_options"], [376, 3, 1, "", "initialize_options"]], "fipy.tests.testProgram": [[377, 1, 1, "", "TestProgram"], [377, 6, 1, "", "main"]], "fipy.tools": [[378, 1, 1, "", "PhysicalField"], [378, 4, 1, "", "SharedTemporaryFile"], [379, 0, 0, "-", "comms"], [382, 0, 0, "-", "debug"], [383, 0, 0, "-", "decorators"], [384, 0, 0, "-", "dimensions"], [388, 0, 0, "-", "dump"], [389, 0, 0, "-", "inline"], [390, 0, 0, "-", "logging"], [392, 0, 0, "-", "numerix"], [378, 6, 1, "", "parallelComm"], [393, 0, 0, "-", "parser"], [378, 6, 1, "", "serialComm"], [394, 0, 0, "-", "sharedtempfile"], [395, 0, 0, "-", "test"], [396, 0, 0, "-", "vector"], [397, 0, 0, "-", "version"]], "fipy.tools.PhysicalField": [[378, 3, 1, "", "__abs__"], [378, 3, 1, "", "__add__"], [378, 3, 1, "", "__array__"], [378, 3, 1, "", "__array_wrap__"], [378, 3, 1, "", "__bool__"], [378, 3, 1, "", "__div__"], [378, 3, 1, "", "__eq__"], [378, 3, 1, "", "__float__"], [378, 3, 1, "", "__ge__"], [378, 3, 1, "", "__getitem__"], [378, 3, 1, "", "__gt__"], [378, 3, 1, "", "__hash__"], [378, 3, 1, "", "__le__"], [378, 3, 1, "", "__lt__"], [378, 3, 1, "", "__mod__"], [378, 3, 1, "", "__mul__"], [378, 3, 1, "", "__ne__"], [378, 3, 1, "", "__neg__"], [378, 3, 1, "", "__nonzero__"], [378, 3, 1, "", "__pow__"], [378, 3, 1, "", "__radd__"], [378, 3, 1, "", "__repr__"], [378, 3, 1, "", "__rmul__"], [378, 3, 1, "", "__setitem__"], [378, 3, 1, "", "__str__"], [378, 3, 1, "", "__sub__"], [378, 3, 1, "", "__truediv__"], [378, 3, 1, "", "add"], [378, 3, 1, "", "allclose"], [378, 3, 1, "", "allequal"], [378, 3, 1, "", "arccos"], [378, 3, 1, "", "arccosh"], [378, 3, 1, "", "arcsin"], [378, 3, 1, "", "arctan"], [378, 3, 1, "", "arctan2"], [378, 3, 1, "", "arctanh"], [378, 3, 1, "", "ceil"], [378, 3, 1, "", "conjugate"], [378, 3, 1, "", "convertToUnit"], [378, 3, 1, "", "copy"], [378, 3, 1, "", "cos"], [378, 3, 1, "", "cosh"], [378, 3, 1, "", "divide"], [378, 3, 1, "", "dot"], [378, 3, 1, "", "floor"], [378, 3, 1, "", "getsctype"], [378, 3, 1, "", "inBaseUnits"], [378, 3, 1, "", "inDimensionless"], [378, 3, 1, "", "inRadians"], [378, 3, 1, "", "inSIUnits"], [378, 3, 1, "", "inUnitsOf"], [378, 3, 1, "", "itemset"], [378, 3, 1, "", "log"], [378, 3, 1, "", "log10"], [378, 3, 1, "", "multiply"], [378, 2, 1, "", "numericValue"], [378, 3, 1, "", "put"], [378, 3, 1, "", "reshape"], [378, 2, 1, "", "shape"], [378, 3, 1, "", "sign"], [378, 3, 1, "", "sin"], [378, 3, 1, "", "sinh"], [378, 3, 1, "", "sqrt"], [378, 3, 1, "", "subtract"], [378, 3, 1, "", "sum"], [378, 3, 1, "", "take"], [378, 3, 1, "", "tan"], [378, 3, 1, "", "tanh"], [378, 3, 1, "", "tostring"], [378, 2, 1, "", "unit"]], "fipy.tools.comms": [[380, 0, 0, "-", "commWrapper"], [381, 0, 0, "-", "dummyComm"]], "fipy.tools.comms.commWrapper": [[380, 1, 1, "", "CommWrapper"]], "fipy.tools.comms.commWrapper.CommWrapper": [[380, 3, 1, "", "__getstate__"], [380, 3, 1, "", "__repr__"]], "fipy.tools.comms.dummyComm": [[381, 1, 1, "", "DummyComm"]], "fipy.tools.comms.dummyComm.DummyComm": [[381, 3, 1, "", "__getstate__"], [381, 3, 1, "", "__repr__"]], "fipy.tools.debug": [[382, 4, 1, "", "PRINT"]], "fipy.tools.decorators": [[383, 4, 1, "", "deprecate"]], "fipy.tools.dimensions": [[385, 0, 0, "-", "DictWithDefault"], [386, 0, 0, "-", "NumberDict"], [387, 0, 0, "-", "physicalField"]], "fipy.tools.dimensions.physicalField": [[387, 1, 1, "", "PhysicalField"], [387, 1, 1, "", "PhysicalUnit"]], "fipy.tools.dimensions.physicalField.PhysicalField": [[387, 3, 1, "", "__abs__"], [387, 3, 1, "", "__add__"], [387, 3, 1, "", "__array__"], [387, 3, 1, "", "__array_wrap__"], [387, 3, 1, "", "__bool__"], [387, 3, 1, "", "__div__"], [387, 3, 1, "", "__eq__"], [387, 3, 1, "", "__float__"], [387, 3, 1, "", "__ge__"], [387, 3, 1, "", "__getitem__"], [387, 3, 1, "", "__gt__"], [387, 3, 1, "", "__hash__"], [387, 3, 1, "", "__le__"], [387, 3, 1, "", "__lt__"], [387, 3, 1, "", "__mod__"], [387, 3, 1, "", "__mul__"], [387, 3, 1, "", "__ne__"], [387, 3, 1, "", "__neg__"], [387, 3, 1, "", "__nonzero__"], [387, 3, 1, "", "__pow__"], [387, 3, 1, "", "__radd__"], [387, 3, 1, "", "__repr__"], [387, 3, 1, "", "__rmul__"], [387, 3, 1, "", "__setitem__"], [387, 3, 1, "", "__str__"], [387, 3, 1, "", "__sub__"], [387, 3, 1, "", "__truediv__"], [387, 3, 1, "", "add"], [387, 3, 1, "", "allclose"], [387, 3, 1, "", "allequal"], [387, 3, 1, "", "arccos"], [387, 3, 1, "", "arccosh"], [387, 3, 1, "", "arcsin"], [387, 3, 1, "", "arctan"], [387, 3, 1, "", "arctan2"], [387, 3, 1, "", "arctanh"], [387, 3, 1, "", "ceil"], [387, 3, 1, "", "conjugate"], [387, 3, 1, "", "convertToUnit"], [387, 3, 1, "", "copy"], [387, 3, 1, "", "cos"], [387, 3, 1, "", "cosh"], [387, 3, 1, "", "divide"], [387, 3, 1, "", "dot"], [387, 3, 1, "", "floor"], [387, 3, 1, "", "getsctype"], [387, 3, 1, "", "inBaseUnits"], [387, 3, 1, "", "inDimensionless"], [387, 3, 1, "", "inRadians"], [387, 3, 1, "", "inSIUnits"], [387, 3, 1, "", "inUnitsOf"], [387, 3, 1, "", "itemset"], [387, 3, 1, "", "log"], [387, 3, 1, "", "log10"], [387, 3, 1, "", "multiply"], [387, 2, 1, "", "numericValue"], [387, 3, 1, "", "put"], [387, 3, 1, "", "reshape"], [387, 2, 1, "", "shape"], [387, 3, 1, "", "sign"], [387, 3, 1, "", "sin"], [387, 3, 1, "", "sinh"], [387, 3, 1, "", "sqrt"], [387, 3, 1, "", "subtract"], [387, 3, 1, "", "sum"], [387, 3, 1, "", "take"], [387, 3, 1, "", "tan"], [387, 3, 1, "", "tanh"], [387, 3, 1, "", "tostring"], [387, 2, 1, "", "unit"]], "fipy.tools.dimensions.physicalField.PhysicalUnit": [[387, 3, 1, "", "__div__"], [387, 3, 1, "", "__eq__"], [387, 3, 1, "", "__ge__"], [387, 3, 1, "", "__gt__"], [387, 6, 1, "", "__hash__"], [387, 3, 1, "", "__le__"], [387, 3, 1, "", "__lt__"], [387, 3, 1, "", "__mul__"], [387, 3, 1, "", "__ne__"], [387, 3, 1, "", "__pow__"], [387, 3, 1, "", "__rdiv__"], [387, 3, 1, "", "__repr__"], [387, 3, 1, "", "__rmul__"], [387, 3, 1, "", "__rtruediv__"], [387, 3, 1, "", "__str__"], [387, 3, 1, "", "__truediv__"], [387, 3, 1, "", "conversionFactorTo"], [387, 3, 1, "", "conversionTupleTo"], [387, 3, 1, "", "isAngle"], [387, 3, 1, "", "isCompatible"], [387, 3, 1, "", "isDimensionless"], [387, 3, 1, "", "isDimensionlessOrAngle"], [387, 3, 1, "", "isInverseAngle"], [387, 3, 1, "", "name"], [387, 3, 1, "", "setName"]], "fipy.tools.dump": [[388, 4, 1, "", "read"], [388, 4, 1, "", "write"]], "fipy.tools.logging": [[391, 0, 0, "-", "environment"]], "fipy.tools.logging.environment": [[391, 4, 1, "", "conda_info"], [391, 4, 1, "", "package_info"], [391, 4, 1, "", "platform_info"]], "fipy.tools.numerix": [[392, 4, 1, "", "L1norm"], [392, 4, 1, "", "L2norm"], [392, 4, 1, "", "LINFnorm"], [392, 4, 1, "", "all"], [392, 4, 1, "", "allclose"], [392, 4, 1, "", "allequal"], [392, 4, 1, "", "dot"], [392, 4, 1, "", "getShape"], [392, 4, 1, "", "getUnit"], [392, 4, 1, "", "isclose"], [392, 4, 1, "", "nearest"], [392, 4, 1, "", "put"], [392, 4, 1, "", "rank"], [392, 4, 1, "", "reshape"], [392, 4, 1, "", "sqrtDot"], [392, 4, 1, "", "sum"], [392, 4, 1, "", "take"], [392, 4, 1, "", "tostring"]], "fipy.tools.parser": [[393, 4, 1, "", "parse"]], "fipy.tools.sharedtempfile": [[394, 4, 1, "", "SharedTemporaryFile"]], "fipy.tools.vector": [[396, 4, 1, "", "prune"], [396, 4, 1, "", "putAdd"]], "fipy.variables": [[399, 0, 0, "-", "addOverFacesVariable"], [400, 0, 0, "-", "arithmeticCellToFaceVariable"], [401, 0, 0, "-", "betaNoiseVariable"], [402, 0, 0, "-", "binaryOperatorVariable"], [403, 0, 0, "-", "cellToFaceVariable"], [404, 0, 0, "-", "cellVariable"], [405, 0, 0, "-", "constant"], [406, 0, 0, "-", "constraintMask"], [407, 0, 0, "-", "coupledCellVariable"], [408, 0, 0, "-", "distanceVariable"], [409, 0, 0, "-", "exponentialNoiseVariable"], [410, 0, 0, "-", "faceGradContributionsVariable"], [411, 0, 0, "-", "faceGradVariable"], [412, 0, 0, "-", "faceVariable"], [413, 0, 0, "-", "gammaNoiseVariable"], [414, 0, 0, "-", "gaussCellGradVariable"], [415, 0, 0, "-", "gaussianNoiseVariable"], [416, 0, 0, "-", "harmonicCellToFaceVariable"], [417, 0, 0, "-", "histogramVariable"], [418, 0, 0, "-", "interfaceAreaVariable"], [419, 0, 0, "-", "interfaceFlagVariable"], [420, 0, 0, "-", "leastSquaresCellGradVariable"], [421, 0, 0, "-", "levelSetDiffusionVariable"], [422, 0, 0, "-", "meshVariable"], [423, 0, 0, "-", "minmodCellToFaceVariable"], [424, 0, 0, "-", "modCellGradVariable"], [425, 0, 0, "-", "modCellToFaceVariable"], [426, 0, 0, "-", "modFaceGradVariable"], [427, 0, 0, "-", "modPhysicalField"], [428, 0, 0, "-", "modularVariable"], [429, 0, 0, "-", "noiseVariable"], [430, 0, 0, "-", "operatorVariable"], [431, 0, 0, "-", "scharfetterGummelFaceVariable"], [432, 0, 0, "-", "surfactantConvectionVariable"], [433, 0, 0, "-", "surfactantVariable"], [434, 0, 0, "-", "test"], [435, 0, 0, "-", "unaryOperatorVariable"], [436, 0, 0, "-", "uniformNoiseVariable"], [437, 0, 0, "-", "variable"]], "fipy.variables.betaNoiseVariable": [[401, 1, 1, "", "BetaNoiseVariable"]], "fipy.variables.betaNoiseVariable.BetaNoiseVariable": [[401, 3, 1, "", "__abs__"], [401, 3, 1, "", "__and__"], [401, 3, 1, "", "__array__"], [401, 3, 1, "", "__array_wrap__"], [401, 3, 1, "", "__bool__"], [401, 3, 1, "", "__call__"], [401, 3, 1, "", "__eq__"], [401, 3, 1, "", "__ge__"], [401, 3, 1, "", "__getitem__"], [401, 3, 1, "", "__getstate__"], [401, 3, 1, "", "__gt__"], [401, 3, 1, "", "__hash__"], [401, 3, 1, "", "__invert__"], [401, 3, 1, "", "__le__"], [401, 3, 1, "", "__lt__"], [401, 3, 1, "", "__ne__"], [401, 3, 1, "", "__new__"], [401, 3, 1, "", "__nonzero__"], [401, 3, 1, "", "__or__"], [401, 3, 1, "", "__pow__"], [401, 3, 1, "", "__repr__"], [401, 3, 1, "", "__setstate__"], [401, 3, 1, "", "__str__"], [401, 3, 1, "", "all"], [401, 3, 1, "", "allclose"], [401, 3, 1, "", "any"], [401, 2, 1, "", "arithmeticFaceValue"], [401, 2, 1, "", "cellVolumeAverage"], [401, 3, 1, "", "constrain"], [401, 2, 1, "", "constraintMask"], [401, 3, 1, "", "copy"], [401, 3, 1, "", "dot"], [401, 2, 1, "", "faceGrad"], [401, 2, 1, "", "faceGradAverage"], [401, 2, 1, "", "faceValue"], [401, 2, 1, "", "gaussGrad"], [401, 3, 1, "", "getsctype"], [401, 2, 1, "", "globalValue"], [401, 2, 1, "", "grad"], [401, 2, 1, "", "harmonicFaceValue"], [401, 3, 1, "", "inBaseUnits"], [401, 3, 1, "", "inUnitsOf"], [401, 2, 1, "", "leastSquaresGrad"], [401, 2, 1, "", "mag"], [401, 3, 1, "", "max"], [401, 3, 1, "", "min"], [401, 2, 1, "", "minmodFaceValue"], [401, 2, 1, "", "old"], [401, 3, 1, "", "rdot"], [401, 3, 1, "", "release"], [401, 3, 1, "", "scramble"], [401, 3, 1, "", "setValue"], [401, 2, 1, "", "shape"], [401, 3, 1, "", "std"], [401, 2, 1, "", "unit"], [401, 3, 1, "", "updateOld"], [401, 2, 1, "", "value"]], "fipy.variables.cellVariable": [[404, 1, 1, "", "CellVariable"]], "fipy.variables.cellVariable.CellVariable": [[404, 3, 1, "", "__abs__"], [404, 3, 1, "", "__and__"], [404, 3, 1, "", "__array__"], [404, 3, 1, "", "__array_wrap__"], [404, 3, 1, "", "__bool__"], [404, 3, 1, "", "__call__"], [404, 3, 1, "", "__eq__"], [404, 3, 1, "", "__ge__"], [404, 3, 1, "", "__getitem__"], [404, 3, 1, "", "__getstate__"], [404, 3, 1, "", "__gt__"], [404, 3, 1, "", "__hash__"], [404, 3, 1, "", "__invert__"], [404, 3, 1, "", "__le__"], [404, 3, 1, "", "__lt__"], [404, 3, 1, "", "__ne__"], [404, 3, 1, "", "__new__"], [404, 3, 1, "", "__nonzero__"], [404, 3, 1, "", "__or__"], [404, 3, 1, "", "__pow__"], [404, 3, 1, "", "__repr__"], [404, 3, 1, "", "__setstate__"], [404, 3, 1, "", "__str__"], [404, 3, 1, "", "all"], [404, 3, 1, "", "allclose"], [404, 3, 1, "", "any"], [404, 2, 1, "", "arithmeticFaceValue"], [404, 2, 1, "", "cellVolumeAverage"], [404, 3, 1, "", "constrain"], [404, 2, 1, "", "constraintMask"], [404, 3, 1, "", "copy"], [404, 3, 1, "", "dot"], [404, 2, 1, "", "faceGrad"], [404, 2, 1, "", "faceGradAverage"], [404, 2, 1, "", "faceValue"], [404, 2, 1, "", "gaussGrad"], [404, 3, 1, "", "getsctype"], [404, 2, 1, "", "globalValue"], [404, 2, 1, "", "grad"], [404, 2, 1, "", "harmonicFaceValue"], [404, 3, 1, "", "inBaseUnits"], [404, 3, 1, "", "inUnitsOf"], [404, 2, 1, "", "leastSquaresGrad"], [404, 2, 1, "", "mag"], [404, 3, 1, "", "max"], [404, 3, 1, "", "min"], [404, 2, 1, "", "minmodFaceValue"], [404, 2, 1, "", "old"], [404, 3, 1, "", "rdot"], [404, 3, 1, "", "release"], [404, 3, 1, "", "setValue"], [404, 2, 1, "", "shape"], [404, 3, 1, "", "std"], [404, 2, 1, "", "unit"], [404, 3, 1, "", "updateOld"], [404, 2, 1, "", "value"]], "fipy.variables.distanceVariable": [[408, 1, 1, "", "DistanceVariable"]], "fipy.variables.distanceVariable.DistanceVariable": [[408, 3, 1, "", "__abs__"], [408, 3, 1, "", "__and__"], [408, 3, 1, "", "__array__"], [408, 3, 1, "", "__array_wrap__"], [408, 3, 1, "", "__bool__"], [408, 3, 1, "", "__call__"], [408, 3, 1, "", "__eq__"], [408, 3, 1, "", "__ge__"], [408, 3, 1, "", "__getitem__"], [408, 3, 1, "", "__getstate__"], [408, 3, 1, "", "__gt__"], [408, 3, 1, "", "__hash__"], [408, 3, 1, "", "__invert__"], [408, 3, 1, "", "__le__"], [408, 3, 1, "", "__lt__"], [408, 3, 1, "", "__ne__"], [408, 3, 1, "", "__new__"], [408, 3, 1, "", "__nonzero__"], [408, 3, 1, "", "__or__"], [408, 3, 1, "", "__pow__"], [408, 3, 1, "", "__repr__"], [408, 3, 1, "", "__setstate__"], [408, 3, 1, "", "__str__"], [408, 3, 1, "", "all"], [408, 3, 1, "", "allclose"], [408, 3, 1, "", "any"], [408, 2, 1, "", "arithmeticFaceValue"], [408, 3, 1, "", "calcDistanceFunction"], [408, 2, 1, "", "cellInterfaceAreas"], [408, 2, 1, "", "cellVolumeAverage"], [408, 3, 1, "", "constrain"], [408, 2, 1, "", "constraintMask"], [408, 3, 1, "", "copy"], [408, 3, 1, "", "dot"], [408, 3, 1, "", "extendVariable"], [408, 2, 1, "", "faceGrad"], [408, 2, 1, "", "faceGradAverage"], [408, 2, 1, "", "faceValue"], [408, 2, 1, "", "gaussGrad"], [408, 3, 1, "", "getsctype"], [408, 2, 1, "", "globalValue"], [408, 2, 1, "", "grad"], [408, 2, 1, "", "harmonicFaceValue"], [408, 3, 1, "", "inBaseUnits"], [408, 3, 1, "", "inUnitsOf"], [408, 2, 1, "", "leastSquaresGrad"], [408, 2, 1, "", "mag"], [408, 3, 1, "", "max"], [408, 3, 1, "", "min"], [408, 2, 1, "", "minmodFaceValue"], [408, 2, 1, "", "old"], [408, 3, 1, "", "rdot"], [408, 3, 1, "", "release"], [408, 3, 1, "", "setValue"], [408, 2, 1, "", "shape"], [408, 3, 1, "", "std"], [408, 2, 1, "", "unit"], [408, 3, 1, "", "updateOld"], [408, 2, 1, "", "value"]], "fipy.variables.exponentialNoiseVariable": [[409, 1, 1, "", "ExponentialNoiseVariable"]], "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable": [[409, 3, 1, "", "__abs__"], [409, 3, 1, "", "__and__"], [409, 3, 1, "", "__array__"], [409, 3, 1, "", "__array_wrap__"], [409, 3, 1, "", "__bool__"], [409, 3, 1, "", "__call__"], [409, 3, 1, "", "__eq__"], [409, 3, 1, "", "__ge__"], [409, 3, 1, "", "__getitem__"], [409, 3, 1, "", "__getstate__"], [409, 3, 1, "", "__gt__"], [409, 3, 1, "", "__hash__"], [409, 3, 1, "", "__invert__"], [409, 3, 1, "", "__le__"], [409, 3, 1, "", "__lt__"], [409, 3, 1, "", "__ne__"], [409, 3, 1, "", "__new__"], [409, 3, 1, "", "__nonzero__"], [409, 3, 1, "", "__or__"], [409, 3, 1, "", "__pow__"], [409, 3, 1, "", "__repr__"], [409, 3, 1, "", "__setstate__"], [409, 3, 1, "", "__str__"], [409, 3, 1, "", "all"], [409, 3, 1, "", "allclose"], [409, 3, 1, "", "any"], [409, 2, 1, "", "arithmeticFaceValue"], [409, 2, 1, "", "cellVolumeAverage"], [409, 3, 1, "", "constrain"], [409, 2, 1, "", "constraintMask"], [409, 3, 1, "", "copy"], [409, 3, 1, "", "dot"], [409, 2, 1, "", "faceGrad"], [409, 2, 1, "", "faceGradAverage"], [409, 2, 1, "", "faceValue"], [409, 2, 1, "", "gaussGrad"], [409, 3, 1, "", "getsctype"], [409, 2, 1, "", "globalValue"], [409, 2, 1, "", "grad"], [409, 2, 1, "", "harmonicFaceValue"], [409, 3, 1, "", "inBaseUnits"], [409, 3, 1, "", "inUnitsOf"], [409, 2, 1, "", "leastSquaresGrad"], [409, 2, 1, "", "mag"], [409, 3, 1, "", "max"], [409, 3, 1, "", "min"], [409, 2, 1, "", "minmodFaceValue"], [409, 2, 1, "", "old"], [409, 3, 1, "", "rdot"], [409, 3, 1, "", "release"], [409, 3, 1, "", "scramble"], [409, 3, 1, "", "setValue"], [409, 2, 1, "", "shape"], [409, 3, 1, "", "std"], [409, 2, 1, "", "unit"], [409, 3, 1, "", "updateOld"], [409, 2, 1, "", "value"]], "fipy.variables.faceVariable": [[412, 1, 1, "", "FaceVariable"]], "fipy.variables.faceVariable.FaceVariable": [[412, 3, 1, "", "__abs__"], [412, 3, 1, "", "__and__"], [412, 3, 1, "", "__array__"], [412, 3, 1, "", "__array_wrap__"], [412, 3, 1, "", "__bool__"], [412, 3, 1, "", "__call__"], [412, 3, 1, "", "__eq__"], [412, 3, 1, "", "__ge__"], [412, 3, 1, "", "__getitem__"], [412, 3, 1, "", "__getstate__"], [412, 3, 1, "", "__gt__"], [412, 3, 1, "", "__hash__"], [412, 3, 1, "", "__invert__"], [412, 3, 1, "", "__le__"], [412, 3, 1, "", "__lt__"], [412, 3, 1, "", "__ne__"], [412, 3, 1, "", "__new__"], [412, 3, 1, "", "__nonzero__"], [412, 3, 1, "", "__or__"], [412, 3, 1, "", "__pow__"], [412, 3, 1, "", "__repr__"], [412, 3, 1, "", "__setstate__"], [412, 3, 1, "", "__str__"], [412, 3, 1, "", "all"], [412, 3, 1, "", "allclose"], [412, 3, 1, "", "any"], [412, 3, 1, "", "constrain"], [412, 2, 1, "", "constraintMask"], [412, 3, 1, "", "copy"], [412, 2, 1, "", "divergence"], [412, 3, 1, "", "dot"], [412, 3, 1, "", "getsctype"], [412, 3, 1, "", "inBaseUnits"], [412, 3, 1, "", "inUnitsOf"], [412, 2, 1, "", "mag"], [412, 3, 1, "", "max"], [412, 3, 1, "", "min"], [412, 3, 1, "", "rdot"], [412, 3, 1, "", "release"], [412, 3, 1, "", "setValue"], [412, 2, 1, "", "shape"], [412, 3, 1, "", "std"], [412, 2, 1, "", "unit"], [412, 2, 1, "", "value"]], "fipy.variables.gammaNoiseVariable": [[413, 1, 1, "", "GammaNoiseVariable"]], "fipy.variables.gammaNoiseVariable.GammaNoiseVariable": [[413, 3, 1, "", "__abs__"], [413, 3, 1, "", "__and__"], [413, 3, 1, "", "__array__"], [413, 3, 1, "", "__array_wrap__"], [413, 3, 1, "", "__bool__"], [413, 3, 1, "", "__call__"], [413, 3, 1, "", "__eq__"], [413, 3, 1, "", "__ge__"], [413, 3, 1, "", "__getitem__"], [413, 3, 1, "", "__getstate__"], [413, 3, 1, "", "__gt__"], [413, 3, 1, "", "__hash__"], [413, 3, 1, "", "__invert__"], [413, 3, 1, "", "__le__"], [413, 3, 1, "", "__lt__"], [413, 3, 1, "", "__ne__"], [413, 3, 1, "", "__new__"], [413, 3, 1, "", "__nonzero__"], [413, 3, 1, "", "__or__"], [413, 3, 1, "", "__pow__"], [413, 3, 1, "", "__repr__"], [413, 3, 1, "", "__setstate__"], [413, 3, 1, "", "__str__"], [413, 3, 1, "", "all"], [413, 3, 1, "", "allclose"], [413, 3, 1, "", "any"], [413, 2, 1, "", "arithmeticFaceValue"], [413, 2, 1, "", "cellVolumeAverage"], [413, 3, 1, "", "constrain"], [413, 2, 1, "", "constraintMask"], [413, 3, 1, "", "copy"], [413, 3, 1, "", "dot"], [413, 2, 1, "", "faceGrad"], [413, 2, 1, "", "faceGradAverage"], [413, 2, 1, "", "faceValue"], [413, 2, 1, "", "gaussGrad"], [413, 3, 1, "", "getsctype"], [413, 2, 1, "", "globalValue"], [413, 2, 1, "", "grad"], [413, 2, 1, "", "harmonicFaceValue"], [413, 3, 1, "", "inBaseUnits"], [413, 3, 1, "", "inUnitsOf"], [413, 2, 1, "", "leastSquaresGrad"], [413, 2, 1, "", "mag"], [413, 3, 1, "", "max"], [413, 3, 1, "", "min"], [413, 2, 1, "", "minmodFaceValue"], [413, 2, 1, "", "old"], [413, 3, 1, "", "rdot"], [413, 3, 1, "", "release"], [413, 3, 1, "", "scramble"], [413, 3, 1, "", "setValue"], [413, 2, 1, "", "shape"], [413, 3, 1, "", "std"], [413, 2, 1, "", "unit"], [413, 3, 1, "", "updateOld"], [413, 2, 1, "", "value"]], "fipy.variables.gaussianNoiseVariable": [[415, 1, 1, "", "GaussianNoiseVariable"]], "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable": [[415, 3, 1, "", "__abs__"], [415, 3, 1, "", "__and__"], [415, 3, 1, "", "__array__"], [415, 3, 1, "", "__array_wrap__"], [415, 3, 1, "", "__bool__"], [415, 3, 1, "", "__call__"], [415, 3, 1, "", "__eq__"], [415, 3, 1, "", "__ge__"], [415, 3, 1, "", "__getitem__"], [415, 3, 1, "", "__getstate__"], [415, 3, 1, "", "__gt__"], [415, 3, 1, "", "__hash__"], [415, 3, 1, "", "__invert__"], [415, 3, 1, "", "__le__"], [415, 3, 1, "", "__lt__"], [415, 3, 1, "", "__ne__"], [415, 3, 1, "", "__new__"], [415, 3, 1, "", "__nonzero__"], [415, 3, 1, "", "__or__"], [415, 3, 1, "", "__pow__"], [415, 3, 1, "", "__repr__"], [415, 3, 1, "", "__setstate__"], [415, 3, 1, "", "__str__"], [415, 3, 1, "", "all"], [415, 3, 1, "", "allclose"], [415, 3, 1, "", "any"], [415, 2, 1, "", "arithmeticFaceValue"], [415, 2, 1, "", "cellVolumeAverage"], [415, 3, 1, "", "constrain"], [415, 2, 1, "", "constraintMask"], [415, 3, 1, "", "copy"], [415, 3, 1, "", "dot"], [415, 2, 1, "", "faceGrad"], [415, 2, 1, "", "faceGradAverage"], [415, 2, 1, "", "faceValue"], [415, 2, 1, "", "gaussGrad"], [415, 3, 1, "", "getsctype"], [415, 2, 1, "", "globalValue"], [415, 2, 1, "", "grad"], [415, 2, 1, "", "harmonicFaceValue"], [415, 3, 1, "", "inBaseUnits"], [415, 3, 1, "", "inUnitsOf"], [415, 2, 1, "", "leastSquaresGrad"], [415, 2, 1, "", "mag"], [415, 3, 1, "", "max"], [415, 3, 1, "", "min"], [415, 2, 1, "", "minmodFaceValue"], [415, 2, 1, "", "old"], [415, 3, 1, "", "rdot"], [415, 3, 1, "", "release"], [415, 3, 1, "", "scramble"], [415, 3, 1, "", "setValue"], [415, 2, 1, "", "shape"], [415, 3, 1, "", "std"], [415, 2, 1, "", "unit"], [415, 3, 1, "", "updateOld"], [415, 2, 1, "", "value"]], "fipy.variables.histogramVariable": [[417, 1, 1, "", "HistogramVariable"]], "fipy.variables.histogramVariable.HistogramVariable": [[417, 3, 1, "", "__abs__"], [417, 3, 1, "", "__and__"], [417, 3, 1, "", "__array__"], [417, 3, 1, "", "__array_wrap__"], [417, 3, 1, "", "__bool__"], [417, 3, 1, "", "__call__"], [417, 3, 1, "", "__eq__"], [417, 3, 1, "", "__ge__"], [417, 3, 1, "", "__getitem__"], [417, 3, 1, "", "__getstate__"], [417, 3, 1, "", "__gt__"], [417, 3, 1, "", "__hash__"], [417, 3, 1, "", "__invert__"], [417, 3, 1, "", "__le__"], [417, 3, 1, "", "__lt__"], [417, 3, 1, "", "__ne__"], [417, 3, 1, "", "__new__"], [417, 3, 1, "", "__nonzero__"], [417, 3, 1, "", "__or__"], [417, 3, 1, "", "__pow__"], [417, 3, 1, "", "__repr__"], [417, 3, 1, "", "__setstate__"], [417, 3, 1, "", "__str__"], [417, 3, 1, "", "all"], [417, 3, 1, "", "allclose"], [417, 3, 1, "", "any"], [417, 2, 1, "", "arithmeticFaceValue"], [417, 2, 1, "", "cellVolumeAverage"], [417, 3, 1, "", "constrain"], [417, 2, 1, "", "constraintMask"], [417, 3, 1, "", "copy"], [417, 3, 1, "", "dot"], [417, 2, 1, "", "faceGrad"], [417, 2, 1, "", "faceGradAverage"], [417, 2, 1, "", "faceValue"], [417, 2, 1, "", "gaussGrad"], [417, 3, 1, "", "getsctype"], [417, 2, 1, "", "globalValue"], [417, 2, 1, "", "grad"], [417, 2, 1, "", "harmonicFaceValue"], [417, 3, 1, "", "inBaseUnits"], [417, 3, 1, "", "inUnitsOf"], [417, 2, 1, "", "leastSquaresGrad"], [417, 2, 1, "", "mag"], [417, 3, 1, "", "max"], [417, 3, 1, "", "min"], [417, 2, 1, "", "minmodFaceValue"], [417, 2, 1, "", "old"], [417, 3, 1, "", "rdot"], [417, 3, 1, "", "release"], [417, 3, 1, "", "setValue"], [417, 2, 1, "", "shape"], [417, 3, 1, "", "std"], [417, 2, 1, "", "unit"], [417, 3, 1, "", "updateOld"], [417, 2, 1, "", "value"]], "fipy.variables.meshVariable": [[422, 1, 1, "", "MeshVariable"]], "fipy.variables.meshVariable.MeshVariable": [[422, 3, 1, "", "__abs__"], [422, 3, 1, "", "__and__"], [422, 3, 1, "", "__array__"], [422, 3, 1, "", "__array_wrap__"], [422, 3, 1, "", "__bool__"], [422, 3, 1, "", "__call__"], [422, 3, 1, "", "__eq__"], [422, 3, 1, "", "__ge__"], [422, 3, 1, "", "__getitem__"], [422, 3, 1, "", "__getstate__"], [422, 3, 1, "", "__gt__"], [422, 3, 1, "", "__hash__"], [422, 3, 1, "", "__invert__"], [422, 3, 1, "", "__le__"], [422, 3, 1, "", "__lt__"], [422, 3, 1, "", "__ne__"], [422, 3, 1, "", "__new__"], [422, 3, 1, "", "__nonzero__"], [422, 3, 1, "", "__or__"], [422, 3, 1, "", "__pow__"], [422, 3, 1, "", "__repr__"], [422, 3, 1, "", "__setstate__"], [422, 3, 1, "", "__str__"], [422, 3, 1, "", "all"], [422, 3, 1, "", "allclose"], [422, 3, 1, "", "any"], [422, 3, 1, "", "constrain"], [422, 2, 1, "", "constraintMask"], [422, 3, 1, "", "copy"], [422, 3, 1, "", "dot"], [422, 3, 1, "", "getsctype"], [422, 3, 1, "", "inBaseUnits"], [422, 3, 1, "", "inUnitsOf"], [422, 2, 1, "", "mag"], [422, 3, 1, "", "max"], [422, 3, 1, "", "min"], [422, 3, 1, "", "rdot"], [422, 3, 1, "", "release"], [422, 3, 1, "", "setValue"], [422, 2, 1, "", "shape"], [422, 3, 1, "", "std"], [422, 2, 1, "", "unit"], [422, 2, 1, "", "value"]], "fipy.variables.modularVariable": [[428, 1, 1, "", "ModularVariable"]], "fipy.variables.modularVariable.ModularVariable": [[428, 3, 1, "", "__abs__"], [428, 3, 1, "", "__and__"], [428, 3, 1, "", "__array__"], [428, 3, 1, "", "__array_wrap__"], [428, 3, 1, "", "__bool__"], [428, 3, 1, "", "__call__"], [428, 3, 1, "", "__eq__"], [428, 3, 1, "", "__ge__"], [428, 3, 1, "", "__getitem__"], [428, 3, 1, "", "__getstate__"], [428, 3, 1, "", "__gt__"], [428, 3, 1, "", "__hash__"], [428, 3, 1, "", "__invert__"], [428, 3, 1, "", "__le__"], [428, 3, 1, "", "__lt__"], [428, 3, 1, "", "__ne__"], [428, 3, 1, "", "__new__"], [428, 3, 1, "", "__nonzero__"], [428, 3, 1, "", "__or__"], [428, 3, 1, "", "__pow__"], [428, 3, 1, "", "__repr__"], [428, 3, 1, "", "__setstate__"], [428, 3, 1, "", "__str__"], [428, 3, 1, "", "all"], [428, 3, 1, "", "allclose"], [428, 3, 1, "", "any"], [428, 2, 1, "", "arithmeticFaceValue"], [428, 2, 1, "", "cellVolumeAverage"], [428, 3, 1, "", "constrain"], [428, 2, 1, "", "constraintMask"], [428, 3, 1, "", "copy"], [428, 3, 1, "", "dot"], [428, 2, 1, "", "faceGrad"], [428, 2, 1, "", "faceGradAverage"], [428, 2, 1, "", "faceGradNoMod"], [428, 2, 1, "", "faceValue"], [428, 2, 1, "", "gaussGrad"], [428, 3, 1, "", "getsctype"], [428, 2, 1, "", "globalValue"], [428, 2, 1, "", "grad"], [428, 2, 1, "", "harmonicFaceValue"], [428, 3, 1, "", "inBaseUnits"], [428, 3, 1, "", "inUnitsOf"], [428, 2, 1, "", "leastSquaresGrad"], [428, 2, 1, "", "mag"], [428, 3, 1, "", "max"], [428, 3, 1, "", "min"], [428, 2, 1, "", "minmodFaceValue"], [428, 2, 1, "", "old"], [428, 3, 1, "", "rdot"], [428, 3, 1, "", "release"], [428, 3, 1, "", "setValue"], [428, 2, 1, "", "shape"], [428, 3, 1, "", "std"], [428, 2, 1, "", "unit"], [428, 3, 1, "", "updateOld"], [428, 2, 1, "", "value"]], "fipy.variables.noiseVariable": [[429, 1, 1, "", "NoiseVariable"]], "fipy.variables.noiseVariable.NoiseVariable": [[429, 3, 1, "", "__abs__"], [429, 3, 1, "", "__and__"], [429, 3, 1, "", "__array__"], [429, 3, 1, "", "__array_wrap__"], [429, 3, 1, "", "__bool__"], [429, 3, 1, "", "__call__"], [429, 3, 1, "", "__eq__"], [429, 3, 1, "", "__ge__"], [429, 3, 1, "", "__getitem__"], [429, 3, 1, "", "__getstate__"], [429, 3, 1, "", "__gt__"], [429, 3, 1, "", "__hash__"], [429, 3, 1, "", "__invert__"], [429, 3, 1, "", "__le__"], [429, 3, 1, "", "__lt__"], [429, 3, 1, "", "__ne__"], [429, 3, 1, "", "__new__"], [429, 3, 1, "", "__nonzero__"], [429, 3, 1, "", "__or__"], [429, 3, 1, "", "__pow__"], [429, 3, 1, "", "__repr__"], [429, 3, 1, "", "__setstate__"], [429, 3, 1, "", "__str__"], [429, 3, 1, "", "all"], [429, 3, 1, "", "allclose"], [429, 3, 1, "", "any"], [429, 2, 1, "", "arithmeticFaceValue"], [429, 2, 1, "", "cellVolumeAverage"], [429, 3, 1, "", "constrain"], [429, 2, 1, "", "constraintMask"], [429, 3, 1, "", "copy"], [429, 3, 1, "", "dot"], [429, 2, 1, "", "faceGrad"], [429, 2, 1, "", "faceGradAverage"], [429, 2, 1, "", "faceValue"], [429, 2, 1, "", "gaussGrad"], [429, 3, 1, "", "getsctype"], [429, 2, 1, "", "globalValue"], [429, 2, 1, "", "grad"], [429, 2, 1, "", "harmonicFaceValue"], [429, 3, 1, "", "inBaseUnits"], [429, 3, 1, "", "inUnitsOf"], [429, 2, 1, "", "leastSquaresGrad"], [429, 2, 1, "", "mag"], [429, 3, 1, "", "max"], [429, 3, 1, "", "min"], [429, 2, 1, "", "minmodFaceValue"], [429, 2, 1, "", "old"], [429, 3, 1, "", "rdot"], [429, 3, 1, "", "release"], [429, 3, 1, "", "scramble"], [429, 3, 1, "", "setValue"], [429, 2, 1, "", "shape"], [429, 3, 1, "", "std"], [429, 2, 1, "", "unit"], [429, 3, 1, "", "updateOld"], [429, 2, 1, "", "value"]], "fipy.variables.scharfetterGummelFaceVariable": [[431, 1, 1, "", "ScharfetterGummelFaceVariable"]], "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable": [[431, 3, 1, "", "__abs__"], [431, 3, 1, "", "__and__"], [431, 3, 1, "", "__array__"], [431, 3, 1, "", "__array_wrap__"], [431, 3, 1, "", "__bool__"], [431, 3, 1, "", "__call__"], [431, 3, 1, "", "__eq__"], [431, 3, 1, "", "__ge__"], [431, 3, 1, "", "__getitem__"], [431, 3, 1, "", "__getstate__"], [431, 3, 1, "", "__gt__"], [431, 3, 1, "", "__hash__"], [431, 3, 1, "", "__invert__"], [431, 3, 1, "", "__le__"], [431, 3, 1, "", "__lt__"], [431, 3, 1, "", "__ne__"], [431, 3, 1, "", "__new__"], [431, 3, 1, "", "__nonzero__"], [431, 3, 1, "", "__or__"], [431, 3, 1, "", "__pow__"], [431, 3, 1, "", "__repr__"], [431, 3, 1, "", "__setstate__"], [431, 3, 1, "", "__str__"], [431, 3, 1, "", "all"], [431, 3, 1, "", "allclose"], [431, 3, 1, "", "any"], [431, 3, 1, "", "constrain"], [431, 2, 1, "", "constraintMask"], [431, 3, 1, "", "copy"], [431, 2, 1, "", "divergence"], [431, 3, 1, "", "dot"], [431, 3, 1, "", "getsctype"], [431, 3, 1, "", "inBaseUnits"], [431, 3, 1, "", "inUnitsOf"], [431, 2, 1, "", "mag"], [431, 3, 1, "", "max"], [431, 3, 1, "", "min"], [431, 3, 1, "", "rdot"], [431, 3, 1, "", "release"], [431, 3, 1, "", "setValue"], [431, 2, 1, "", "shape"], [431, 3, 1, "", "std"], [431, 2, 1, "", "unit"], [431, 2, 1, "", "value"]], "fipy.variables.surfactantConvectionVariable": [[432, 1, 1, "", "SurfactantConvectionVariable"]], "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable": [[432, 3, 1, "", "__abs__"], [432, 3, 1, "", "__and__"], [432, 3, 1, "", "__array__"], [432, 3, 1, "", "__array_wrap__"], [432, 3, 1, "", "__bool__"], [432, 3, 1, "", "__call__"], [432, 3, 1, "", "__eq__"], [432, 3, 1, "", "__ge__"], [432, 3, 1, "", "__getitem__"], [432, 3, 1, "", "__getstate__"], [432, 3, 1, "", "__gt__"], [432, 3, 1, "", "__hash__"], [432, 3, 1, "", "__invert__"], [432, 3, 1, "", "__le__"], [432, 3, 1, "", "__lt__"], [432, 3, 1, "", "__ne__"], [432, 3, 1, "", "__new__"], [432, 3, 1, "", "__nonzero__"], [432, 3, 1, "", "__or__"], [432, 3, 1, "", "__pow__"], [432, 3, 1, "", "__repr__"], [432, 3, 1, "", "__setstate__"], [432, 3, 1, "", "__str__"], [432, 3, 1, "", "all"], [432, 3, 1, "", "allclose"], [432, 3, 1, "", "any"], [432, 3, 1, "", "constrain"], [432, 2, 1, "", "constraintMask"], [432, 3, 1, "", "copy"], [432, 2, 1, "", "divergence"], [432, 3, 1, "", "dot"], [432, 3, 1, "", "getsctype"], [432, 3, 1, "", "inBaseUnits"], [432, 3, 1, "", "inUnitsOf"], [432, 2, 1, "", "mag"], [432, 3, 1, "", "max"], [432, 3, 1, "", "min"], [432, 3, 1, "", "rdot"], [432, 3, 1, "", "release"], [432, 3, 1, "", "setValue"], [432, 2, 1, "", "shape"], [432, 3, 1, "", "std"], [432, 2, 1, "", "unit"], [432, 2, 1, "", "value"]], "fipy.variables.surfactantVariable": [[433, 1, 1, "", "SurfactantVariable"]], "fipy.variables.surfactantVariable.SurfactantVariable": [[433, 3, 1, "", "__abs__"], [433, 3, 1, "", "__and__"], [433, 3, 1, "", "__array__"], [433, 3, 1, "", "__array_wrap__"], [433, 3, 1, "", "__bool__"], [433, 3, 1, "", "__call__"], [433, 3, 1, "", "__eq__"], [433, 3, 1, "", "__ge__"], [433, 3, 1, "", "__getitem__"], [433, 3, 1, "", "__getstate__"], [433, 3, 1, "", "__gt__"], [433, 3, 1, "", "__hash__"], [433, 3, 1, "", "__invert__"], [433, 3, 1, "", "__le__"], [433, 3, 1, "", "__lt__"], [433, 3, 1, "", "__ne__"], [433, 3, 1, "", "__new__"], [433, 3, 1, "", "__nonzero__"], [433, 3, 1, "", "__or__"], [433, 3, 1, "", "__pow__"], [433, 3, 1, "", "__repr__"], [433, 3, 1, "", "__setstate__"], [433, 3, 1, "", "__str__"], [433, 3, 1, "", "all"], [433, 3, 1, "", "allclose"], [433, 3, 1, "", "any"], [433, 2, 1, "", "arithmeticFaceValue"], [433, 2, 1, "", "cellVolumeAverage"], [433, 3, 1, "", "constrain"], [433, 2, 1, "", "constraintMask"], [433, 3, 1, "", "copy"], [433, 3, 1, "", "dot"], [433, 2, 1, "", "faceGrad"], [433, 2, 1, "", "faceGradAverage"], [433, 2, 1, "", "faceValue"], [433, 2, 1, "", "gaussGrad"], [433, 3, 1, "", "getsctype"], [433, 2, 1, "", "globalValue"], [433, 2, 1, "", "grad"], [433, 2, 1, "", "harmonicFaceValue"], [433, 3, 1, "", "inBaseUnits"], [433, 3, 1, "", "inUnitsOf"], [433, 2, 1, "", "interfaceVar"], [433, 2, 1, "", "leastSquaresGrad"], [433, 2, 1, "", "mag"], [433, 3, 1, "", "max"], [433, 3, 1, "", "min"], [433, 2, 1, "", "minmodFaceValue"], [433, 2, 1, "", "old"], [433, 3, 1, "", "rdot"], [433, 3, 1, "", "release"], [433, 3, 1, "", "setValue"], [433, 2, 1, "", "shape"], [433, 3, 1, "", "std"], [433, 2, 1, "", "unit"], [433, 3, 1, "", "updateOld"], [433, 2, 1, "", "value"]], "fipy.variables.uniformNoiseVariable": [[436, 1, 1, "", "UniformNoiseVariable"]], "fipy.variables.uniformNoiseVariable.UniformNoiseVariable": [[436, 3, 1, "", "__abs__"], [436, 3, 1, "", "__and__"], [436, 3, 1, "", "__array__"], [436, 3, 1, "", "__array_wrap__"], [436, 3, 1, "", "__bool__"], [436, 3, 1, "", "__call__"], [436, 3, 1, "", "__eq__"], [436, 3, 1, "", "__ge__"], [436, 3, 1, "", "__getitem__"], [436, 3, 1, "", "__getstate__"], [436, 3, 1, "", "__gt__"], [436, 3, 1, "", "__hash__"], [436, 3, 1, "", "__invert__"], [436, 3, 1, "", "__le__"], [436, 3, 1, "", "__lt__"], [436, 3, 1, "", "__ne__"], [436, 3, 1, "", "__new__"], [436, 3, 1, "", "__nonzero__"], [436, 3, 1, "", "__or__"], [436, 3, 1, "", "__pow__"], [436, 3, 1, "", "__repr__"], [436, 3, 1, "", "__setstate__"], [436, 3, 1, "", "__str__"], [436, 3, 1, "", "all"], [436, 3, 1, "", "allclose"], [436, 3, 1, "", "any"], [436, 2, 1, "", "arithmeticFaceValue"], [436, 2, 1, "", "cellVolumeAverage"], [436, 3, 1, "", "constrain"], [436, 2, 1, "", "constraintMask"], [436, 3, 1, "", "copy"], [436, 3, 1, "", "dot"], [436, 2, 1, "", "faceGrad"], [436, 2, 1, "", "faceGradAverage"], [436, 2, 1, "", "faceValue"], [436, 2, 1, "", "gaussGrad"], [436, 3, 1, "", "getsctype"], [436, 2, 1, "", "globalValue"], [436, 2, 1, "", "grad"], [436, 2, 1, "", "harmonicFaceValue"], [436, 3, 1, "", "inBaseUnits"], [436, 3, 1, "", "inUnitsOf"], [436, 2, 1, "", "leastSquaresGrad"], [436, 2, 1, "", "mag"], [436, 3, 1, "", "max"], [436, 3, 1, "", "min"], [436, 2, 1, "", "minmodFaceValue"], [436, 2, 1, "", "old"], [436, 3, 1, "", "rdot"], [436, 3, 1, "", "release"], [436, 3, 1, "", "scramble"], [436, 3, 1, "", "setValue"], [436, 2, 1, "", "shape"], [436, 3, 1, "", "std"], [436, 2, 1, "", "unit"], [436, 3, 1, "", "updateOld"], [436, 2, 1, "", "value"]], "fipy.variables.variable": [[437, 1, 1, "", "Variable"]], "fipy.variables.variable.Variable": [[437, 3, 1, "", "__abs__"], [437, 3, 1, "", "__and__"], [437, 3, 1, "", "__array__"], [437, 3, 1, "", "__array_wrap__"], [437, 3, 1, "", "__bool__"], [437, 3, 1, "", "__call__"], [437, 3, 1, "", "__eq__"], [437, 3, 1, "", "__ge__"], [437, 3, 1, "", "__getitem__"], [437, 3, 1, "", "__getstate__"], [437, 3, 1, "", "__gt__"], [437, 3, 1, "", "__hash__"], [437, 3, 1, "", "__invert__"], [437, 3, 1, "", "__le__"], [437, 3, 1, "", "__lt__"], [437, 3, 1, "", "__ne__"], [437, 3, 1, "", "__new__"], [437, 3, 1, "", "__nonzero__"], [437, 3, 1, "", "__or__"], [437, 3, 1, "", "__pow__"], [437, 3, 1, "", "__repr__"], [437, 3, 1, "", "__setstate__"], [437, 3, 1, "", "__str__"], [437, 3, 1, "", "all"], [437, 3, 1, "", "allclose"], [437, 3, 1, "", "any"], [437, 3, 1, "", "constrain"], [437, 3, 1, "", "copy"], [437, 3, 1, "", "getsctype"], [437, 3, 1, "", "inBaseUnits"], [437, 3, 1, "", "inUnitsOf"], [437, 2, 1, "", "mag"], [437, 3, 1, "", "max"], [437, 3, 1, "", "min"], [437, 3, 1, "", "release"], [437, 3, 1, "", "setValue"], [437, 2, 1, "", "shape"], [437, 3, 1, "", "std"], [437, 2, 1, "", "unit"], [437, 2, 1, "", "value"]], "fipy.viewers": [[438, 1, 1, "", "DummyViewer"], [438, 5, 1, "", "MeshDimensionError"], [438, 4, 1, "", "Viewer"], [439, 0, 0, "-", "matplotlibViewer"], [451, 0, 0, "-", "mayaviViewer"], [455, 0, 0, "-", "multiViewer"], [456, 0, 0, "-", "test"], [457, 0, 0, "-", "testinteractive"], [458, 0, 0, "-", "tsvViewer"], [459, 0, 0, "-", "viewer"], [460, 0, 0, "-", "vtkViewer"]], "fipy.viewers.DummyViewer": [[438, 3, 1, "", "plot"], [438, 3, 1, "", "plotMesh"], [438, 3, 1, "", "setLimits"], [438, 2, 1, "", "title"], [438, 2, 1, "", "vars"]], "fipy.viewers.MeshDimensionError": [[438, 6, 1, "", "__cause__"], [438, 6, 1, "", "__context__"], [438, 3, 1, "", "__delattr__"], [438, 3, 1, "", "__getattribute__"], [438, 3, 1, "", "__reduce__"], [438, 3, 1, "", "__repr__"], [438, 3, 1, "", "__setattr__"], [438, 3, 1, "", "__str__"], [438, 3, 1, "", "add_note"], [438, 3, 1, "", "with_traceback"]], "fipy.viewers.matplotlibViewer": [[439, 4, 1, "", "MatplotlibViewer"], [440, 0, 0, "-", "abstractMatplotlib2DViewer"], [441, 0, 0, "-", "abstractMatplotlibViewer"], [442, 0, 0, "-", "matplotlib1DViewer"], [443, 0, 0, "-", "matplotlib2DContourViewer"], [444, 0, 0, "-", "matplotlib2DGridContourViewer"], [445, 0, 0, "-", "matplotlib2DGridViewer"], [446, 0, 0, "-", "matplotlib2DViewer"], [447, 0, 0, "-", "matplotlibSparseMatrixViewer"], [448, 0, 0, "-", "matplotlibStreamViewer"], [449, 0, 0, "-", "matplotlibVectorViewer"], [450, 0, 0, "-", "test"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[440, 1, 1, "", "AbstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer": [[440, 2, 1, "", "axes"], [440, 2, 1, "", "cmap"], [440, 2, 1, "", "colorbar"], [440, 2, 1, "", "fig"], [440, 2, 1, "", "id"], [440, 2, 1, "", "log"], [440, 3, 1, "", "plot"], [440, 3, 1, "", "plotMesh"], [440, 3, 1, "", "setLimits"], [440, 2, 1, "", "title"], [440, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[441, 1, 1, "", "AbstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer": [[441, 2, 1, "", "axes"], [441, 2, 1, "", "cmap"], [441, 2, 1, "", "colorbar"], [441, 2, 1, "", "fig"], [441, 2, 1, "", "id"], [441, 2, 1, "", "log"], [441, 3, 1, "", "plot"], [441, 3, 1, "", "plotMesh"], [441, 3, 1, "", "setLimits"], [441, 2, 1, "", "title"], [441, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[442, 1, 1, "", "Matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer": [[442, 2, 1, "", "axes"], [442, 2, 1, "", "cmap"], [442, 2, 1, "", "colorbar"], [442, 2, 1, "", "fig"], [442, 2, 1, "", "id"], [442, 2, 1, "", "lines"], [442, 2, 1, "", "log"], [442, 3, 1, "", "plot"], [442, 3, 1, "", "plotMesh"], [442, 3, 1, "", "setLimits"], [442, 2, 1, "", "title"], [442, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[443, 1, 1, "", "Matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer": [[443, 2, 1, "", "axes"], [443, 2, 1, "", "cmap"], [443, 2, 1, "", "colorbar"], [443, 2, 1, "", "fig"], [443, 2, 1, "", "id"], [443, 2, 1, "", "levels"], [443, 2, 1, "", "log"], [443, 3, 1, "", "plot"], [443, 3, 1, "", "plotMesh"], [443, 3, 1, "", "setLimits"], [443, 2, 1, "", "title"], [443, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[444, 1, 1, "", "Matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer": [[444, 2, 1, "", "axes"], [444, 2, 1, "", "cmap"], [444, 2, 1, "", "colorbar"], [444, 2, 1, "", "fig"], [444, 2, 1, "", "id"], [444, 2, 1, "", "levels"], [444, 2, 1, "", "log"], [444, 3, 1, "", "plot"], [444, 3, 1, "", "plotMesh"], [444, 3, 1, "", "setLimits"], [444, 2, 1, "", "title"], [444, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[445, 1, 1, "", "Matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer": [[445, 2, 1, "", "axes"], [445, 2, 1, "", "cmap"], [445, 2, 1, "", "colorbar"], [445, 2, 1, "", "fig"], [445, 2, 1, "", "id"], [445, 2, 1, "", "log"], [445, 3, 1, "", "plot"], [445, 3, 1, "", "plotMesh"], [445, 3, 1, "", "setLimits"], [445, 2, 1, "", "title"], [445, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[446, 1, 1, "", "Matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer": [[446, 2, 1, "", "axes"], [446, 2, 1, "", "cmap"], [446, 2, 1, "", "collection"], [446, 2, 1, "", "colorbar"], [446, 2, 1, "", "fig"], [446, 2, 1, "", "id"], [446, 2, 1, "", "log"], [446, 3, 1, "", "plot"], [446, 3, 1, "", "plotMesh"], [446, 3, 1, "", "setLimits"], [446, 2, 1, "", "title"], [446, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[447, 1, 1, "", "MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[448, 1, 1, "", "MatplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer": [[448, 2, 1, "", "axes"], [448, 2, 1, "", "cmap"], [448, 2, 1, "", "colorbar"], [448, 2, 1, "", "fig"], [448, 2, 1, "", "id"], [448, 2, 1, "", "kwargs"], [448, 2, 1, "", "log"], [448, 3, 1, "", "plot"], [448, 3, 1, "", "plotMesh"], [448, 3, 1, "", "setLimits"], [448, 2, 1, "", "title"], [448, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[449, 1, 1, "", "MatplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer": [[449, 2, 1, "", "axes"], [449, 2, 1, "", "cmap"], [449, 2, 1, "", "colorbar"], [449, 2, 1, "", "fig"], [449, 2, 1, "", "id"], [449, 2, 1, "", "log"], [449, 3, 1, "", "plot"], [449, 3, 1, "", "plotMesh"], [449, 3, 1, "", "setLimits"], [449, 2, 1, "", "title"], [449, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer": [[451, 1, 1, "", "MayaviClient"], [452, 0, 0, "-", "mayaviClient"], [453, 0, 0, "-", "mayaviDaemon"], [454, 0, 0, "-", "test"]], "fipy.viewers.mayaviViewer.MayaviClient": [[451, 2, 1, "", "fps"], [451, 3, 1, "", "plot"], [451, 3, 1, "", "plotMesh"], [451, 3, 1, "", "setLimits"], [451, 2, 1, "", "title"], [451, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviClient": [[452, 1, 1, "", "MayaviClient"]], "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient": [[452, 2, 1, "", "fps"], [452, 3, 1, "", "plot"], [452, 3, 1, "", "plotMesh"], [452, 3, 1, "", "setLimits"], [452, 2, 1, "", "title"], [452, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[453, 1, 1, "", "MayaviDaemon"], [453, 4, 1, "", "main"]], "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon": [[453, 3, 1, "", "parse_command_line"], [453, 3, 1, "", "setup_source"], [453, 3, 1, "", "update_pipeline"], [453, 3, 1, "", "view_data"]], "fipy.viewers.multiViewer": [[455, 1, 1, "", "MultiViewer"]], "fipy.viewers.multiViewer.MultiViewer": [[455, 3, 1, "", "plot"], [455, 3, 1, "", "plotMesh"], [455, 3, 1, "", "setLimits"], [455, 2, 1, "", "title"], [455, 2, 1, "", "vars"]], "fipy.viewers.tsvViewer": [[458, 1, 1, "", "TSVViewer"]], "fipy.viewers.tsvViewer.TSVViewer": [[458, 3, 1, "", "plot"], [458, 3, 1, "", "plotMesh"], [458, 3, 1, "", "setLimits"], [458, 2, 1, "", "title"], [458, 2, 1, "", "vars"]], "fipy.viewers.viewer": [[459, 1, 1, "", "AbstractViewer"]], "fipy.viewers.viewer.AbstractViewer": [[459, 3, 1, "", "plot"], [459, 3, 1, "", "plotMesh"], [459, 3, 1, "", "setLimits"], [459, 2, 1, "", "title"], [459, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer": [[460, 1, 1, "", "VTKCellViewer"], [460, 1, 1, "", "VTKFaceViewer"], [460, 4, 1, "", "VTKViewer"], [461, 0, 0, "-", "test"], [462, 0, 0, "-", "vtkCellViewer"], [463, 0, 0, "-", "vtkFaceViewer"], [464, 0, 0, "-", "vtkViewer"]], "fipy.viewers.vtkViewer.VTKCellViewer": [[460, 3, 1, "", "plot"], [460, 3, 1, "", "plotMesh"], [460, 3, 1, "", "setLimits"], [460, 2, 1, "", "title"], [460, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.VTKFaceViewer": [[460, 3, 1, "", "plot"], [460, 3, 1, "", "plotMesh"], [460, 3, 1, "", "setLimits"], [460, 2, 1, "", "title"], [460, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[462, 1, 1, "", "VTKCellViewer"]], "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer": [[462, 3, 1, "", "plot"], [462, 3, 1, "", "plotMesh"], [462, 3, 1, "", "setLimits"], [462, 2, 1, "", "title"], [462, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[463, 1, 1, "", "VTKFaceViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer": [[463, 3, 1, "", "plot"], [463, 3, 1, "", "plotMesh"], [463, 3, 1, "", "setLimits"], [463, 2, 1, "", "title"], [463, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkViewer": [[464, 1, 1, "", "VTKViewer"]], "fipy.viewers.vtkViewer.vtkViewer.VTKViewer": [[464, 3, 1, "", "plot"], [464, 3, 1, "", "plotMesh"], [464, 3, 1, "", "setLimits"], [464, 2, 1, "", "title"], [464, 2, 1, "", "vars"]], "package": [[474, 0, 0, "-", "subpackage"]], "package.subpackage": [[475, 0, 0, "-", "base"], [476, 0, 0, "-", "object"]], "package.subpackage.base": [[475, 1, 1, "", "Base"]], "package.subpackage.base.Base": [[475, 3, 1, "", "method1"], [475, 3, 1, "", "method2"]], "package.subpackage.object": [[476, 1, 1, "", "Object"]], "package.subpackage.object.Object": [[476, 3, 1, "", "method1"], [476, 3, 1, "", "method2"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute", "7": "std:cmdoption", "8": "std:envvar"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["std", "cmdoption", "program option"], "8": ["std", "envvar", "environment variable"]}, "titleterms": {"git": [0, 9, 11], "practic": 0, "branch": [0, 9, 11], "merg": 0, "chang": [0, 2, 8], "from": 0, "master": 0, "submit": 0, "code": [0, 16], "review": 0, "refactor": 0, "complet": 0, "continu": 0, "integr": 0, "conda": [0, 11], "lockfil": 0, "make": [0, 8], "releas": 0, "sourc": [0, 8, 21, 65, 468], "upload": 0, "updat": [0, 7, 167, 168, 169, 170], "forg": 0, "feedstock": 0, "announc": 0, "fipi": [1, 7, 8, 11, 17, 20, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467], "packag": [1, 11, 13, 473, 474, 475, 476], "document": [1, 477], "log": [2, 17, 390, 391], "version": [2, 29, 397], "3": 2, "4": 2, "263": 2, "gcc1eb816c": 2, "pull": 2, "fix": [2, 17], "2022": 2, "06": 2, "15": 2, "2": [2, 17], "1": 2, "2020": 2, "08": 2, "01": 2, "02": 2, "14": 2, "2019": 2, "28": 2, "04": 2, "22": 2, "2017": 2, "17": 2, "2016": 2, "12": 2, "24": 2, "2015": 2, "2013": 2, "09": 2, "30": 2, "0": 2, "2012": 2, "10": 2, "03": 2, "16": 2, "2011": 2, "20": 2, "2010": 2, "05": 2, "2009": 2, "11": 2, "23": 2, "2008": 2, "2007": 2, "2006": 2, "2005": 2, "2004": 2, "contact": 3, "github": 3, "discuss": [3, 6], "issu": 3, "stackoverflow": 3, "mail": 3, "list": 3, "archiv": 3, "contributor": 4, "disclaim": 5, "effici": 6, "comparison": 6, "between": [6, 8], "cach": 6, "flag": [6, 17, 22], "pyspars": [6, 16, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "trilino": [6, 16, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "exampl": [7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "select": 7, "diffus": [7, 8, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 468], "convect": [7, 8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 468], "phase": [7, 102, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], "field": 7, "level": [7, 11, 21, 125], "set": [7, 11], "cahn": 7, "hilliard": 7, "fluid": 7, "flow": [7, 106, 107, 108], "reactiv": 7, "wet": 7, "frequent": 8, "ask": 8, "question": 8, "how": [8, 477], "do": 8, "i": 8, "repres": 8, "an": 8, "equat": [8, 17, 468, 469], "wai": 8, "model": 8, "anisotrop": 8, "process": 8, "more": 8, "gener": [8, 469], "coeffici": 8, "tensor": 8, "so": 8, "term": [8, 12, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 468], "take": 8, "form": 8, "partial_i": 8, "gamma_": 8, "ij": 8, "partial_j": 8, "phi": [8, 468], "doesn": 8, "t": [8, 15, 468], "involv": 8, "depend": 8, "variabl": [8, 17, 22, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "transient": [8, 468], "what": 8, "my": 8, "where": 8, "put": 8, "m": 8, "solv": [8, 17], "can": 8, "see": 8, "export": 8, "data": 8, "save": 8, "plot": 8, "imag": 8, "onli": 8, "want": 8, "file": 8, "displai": 8, "screen": 8, "movi": 8, "why": 8, "viewer": [8, 18, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "look": 8, "iter": 8, "timestep": 8, "sweep": 8, "oh": 8, "distinct": 8, "cellvari": [8, 404], "facevari": [8, 412], "boundari": [8, 17, 468], "condit": [8, 17, 468], "doe": 8, "thi": 8, "error": 8, "messag": 8, "mean": 8, "": 8, "default": [8, 16, 17], "behavior": 8, "tell": 8, "run": [8, 17], "parallel": [8, 17, 142], "don": [8, 15], "script": [8, 21], "work": 8, "anymor": 8, "isn": 8, "answer": 8, "here": 8, "usag": [9, 11], "client": [9, 11], "develop": [10, 11, 21], "guidelin": 10, "object": [10, 21, 476], "orient": [10, 21], "design": [10, 21], "program": [10, 21], "style": 10, "test": [10, 17, 21, 37, 42, 66, 76, 82, 94, 95, 105, 108, 113, 118, 132, 135, 136, 141, 151, 153, 159, 163, 165, 166, 178, 185, 223, 306, 367, 373, 374, 375, 376, 377, 395, 434, 450, 454, 456, 461], "instal": [11, 13, 15], "pre": 11, "binder": 11, "recommend": 11, "method": [11, 468], "creat": 11, "environ": [11, 17, 22, 391], "enabl": 11, "obtain": 11, "requir": 11, "python": [11, 17, 21], "numpi": 11, "option": 11, "gmsh": [11, 17], "scipi": [11, 16, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "scikit": 11, "fmm": 11, "lsmlib": 11, "nix": [11, 13], "get": [11, 13], "start": [11, 13], "addit": [11, 13], "us": [11, 12, 13, 17], "pip": [11, 13], "public": 14, "present": 14, "overview": 15, "even": 15, "you": 15, "read": [15, 477], "manual": [15, 17, 467], "download": 15, "support": 15, "convent": 15, "notat": 15, "solver": [16, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "petsc": [16, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "pyamg": [16, 257, 258, 259, 260, 261, 262, 263, 264], "pyamgx": [16, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "converg": [16, 233], "residu": 16, "criteria": 16, "legaci": 16, "absolute_toler": 16, "divergence_toler": 16, "report": 16, "statu": 16, "diverg": 16, "command": [17, 22], "line": [17, 22, 126], "openmp": 17, "thread": 17, "v": 17, "mpi": 17, "rank": 17, "mesh": [17, 137, 138, 139, 140, 141, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "coupl": [17, 71], "vector": [17, 396], "appli": 17, "valu": 17, "dirichlet": 17, "gradient": 17, "neumann": 17, "flux": 17, "outlet": 17, "inlet": 17, "spatial": 17, "vari": 17, "robin": [17, 64], "intern": 17, "under": 17, "matplotlib": 18, "mayavi": 18, "virtual": 19, "kinet": 19, "materi": 19, "laboratori": 19, "content": 20, "implement": 21, "numer": [21, 470, 471], "approach": 21, "structur": 21, "base": [21, 475], "open": 21, "high": 21, "languag": 21, "extern": 22, "benchmark": [24, 25, 26, 27, 28, 29], "size": 26, "step": 27, "util": 28, "cahnhilliard": [30, 31, 32, 33, 34, 35, 36, 37], "mesh2d": [31, 58, 100, 209], "mesh2dcoupl": 32, "mesh3d": 33, "sphere": [34, 140], "spheredaemon": 35, "tanh1d": 36, "chemotaxi": [38, 39, 40, 41, 42], "input": [39, 101], "input2d": 40, "paramet": 41, "advect": [44, 110, 111, 112, 113, 114], "exponential1d": [45, 46, 47, 48, 49], "cylindricalmesh1d": 46, "cylindricalmesh1dnonuniform": 47, "mesh1d": [48, 51, 53, 62, 74, 77, 84, 85, 98, 112, 117, 208], "tri2d": [49, 54, 59, 63, 228], "exponential1dback": [50, 51], "exponential1dsourc": [52, 53, 54], "exponential2d": [55, 56, 57, 58, 59], "cylindricalmesh2d": 56, "cylindricalmesh2dnonuniform": 57, "peclet": 60, "powerlaw1d": [61, 62, 63], "anisotropi": [68, 144], "circl": [69, 111, 116], "circlequad": 70, "electrostat": 72, "explicit": [73, 74, 75, 76], "mixedel": 75, "mesh20x20": [78, 86, 87, 88, 89, 90, 149], "mesh20x20coupl": 79, "nthorder": [80, 81, 82], "input4thorder1d": 81, "steadyst": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "inputperiod": 85, "gmshinput": 87, "isotropi": 88, "modifiedmeshinput": 89, "orthoerror": 90, "mesh50x50": 91, "othermesh": [92, 93], "prism": 93, "elphf": [96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "mesh1ddimension": 99, "phasediffus": 103, "poisson": 104, "stokescav": 107, "levelset": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "trench": 114, "distancefunct": [115, 116, 117, 118], "electrochem": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "adsorbingsurfactantequ": 120, "gapfilldistancevari": 121, "gapfillmesh": 122, "gold": 123, "howtowriteascript": 124, "matplotlibsurfactantview": 127, "mayavisurfactantview": 128, "metaliondiffusionequ": 129, "simpletrenchsystem": 130, "surfactantbulkdiffusionequ": 131, "trenchmesh": 133, "surfact": [134, 135], "gmshrefin": 138, "inputgrid2d": 139, "anisotropyold": 145, "binari": 146, "binarycoupl": 147, "imping": [148, 149, 150, 151], "mesh40x1": 150, "missorient": [152, 153], "polyxt": 154, "polyxtalcoupl": 155, "quaternari": 156, "simpl": 157, "symmetri": 158, "reactivewet": [160, 161, 162, 163], "liquidvapor1d": 161, "liquidvapor2d": 162, "riemann": [164, 165], "update0_1to1_0": 168, "update1_0to2_0": 169, "update2_0to3_0": 170, "boundarycondit": [172, 173, 174, 175, 176, 177, 178], "constraint": 174, "fixedflux": 175, "fixedvalu": 176, "nthorderboundarycondit": 177, "matric": [179, 180, 181, 182, 183, 184, 185, 186], "offsetsparsematrix": 180, "petscmatrix": 181, "pysparsematrix": 182, "scipymatrix": 183, "sparsematrix": 184, "trilinosmatrix": 186, "abstractmesh": 188, "builder": [189, 190, 191, 192, 193, 194, 195], "abstractgridbuild": 190, "grid1dbuild": 191, "grid2dbuild": 192, "grid3dbuild": 193, "periodicgrid1dbuild": 194, "utilityclass": 195, "cylindricalgrid1d": 196, "cylindricalgrid2d": 197, "cylindricalnonuniformgrid1d": 198, "cylindricalnonuniformgrid2d": 199, "cylindricaluniformgrid1d": 200, "cylindricaluniformgrid2d": 201, "factorymesh": 202, "gmshmesh": 203, "grid1d": 204, "grid2d": 205, "grid3d": 206, "nonuniformgrid1d": 210, "nonuniformgrid2d": 211, "nonuniformgrid3d": 212, "periodicgrid1d": 213, "periodicgrid2d": 214, "periodicgrid3d": 215, "represent": [216, 217, 218, 219], "abstractrepresent": 217, "gridrepresent": 218, "meshrepresent": 219, "skewedgrid2d": 220, "sphericalnonuniformgrid1d": 221, "sphericaluniformgrid1d": 222, "topologi": [224, 225, 226, 227], "abstracttopologi": 225, "gridtopologi": 226, "meshtopologi": 227, "uniformgrid": 229, "uniformgrid1d": 230, "uniformgrid2d": 231, "comm": [235, 236, 237, 238, 309, 310, 311, 312, 379, 380, 381], "parallelpetsccommwrapp": 236, "petsccommwrapp": 237, "serialpetsccommwrapp": 238, "dummysolv": 239, "linearbicgsolv": 240, "linearcgssolv": [241, 258, 278, 294, 314], "lineargmressolv": [242, 259, 270, 279, 295, 315], "linearlusolv": [243, 261, 271, 282, 296, 316], "linearpcgsolv": [244, 262, 272, 283, 297, 317], "petscconverg": 245, "petsckrylovsolv": 246, "petscsolv": 247, "precondition": [248, 249, 250, 251, 252, 253, 254, 255, 256, 263, 264, 273, 285, 286, 287, 288, 298, 299, 300, 301, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330], "defaultprecondition": 249, "icprecondition": [250, 320], "iluprecondition": [251, 299, 321], "jacobiprecondition": [252, 286, 300, 322], "luprecondition": 253, "petscprecondition": 254, "ssorprecondition": [255, 288], "lineargeneralsolv": 260, "smoothedaggregationprecondition": 264, "aggregationamgsolv": 266, "classicalamgsolv": 267, "linearbicgstabsolv": [268, 293, 313], "linearfgmressolv": 269, "pyamgxsolv": 274, "pyamgxconverg": 275, "smoother": 276, "linearinitialsolv": 280, "linearjorsolv": 281, "linearrhssolv": 284, "pysparseprecondition": 287, "pysparseconverg": 289, "pysparsesolv": 290, "pysparsematrixsolv": 291, "scipyprecondition": 301, "scipyconverg": 302, "scipykrylovsolv": 303, "scipysolv": 304, "aztecconverg": 308, "epetracommwrapp": 310, "parallelepetracommwrapp": 311, "serialepetracommwrapp": 312, "domdecompprecondition": 319, "multilevelddmlprecondition": 323, "multilevelddprecondition": 324, "multilevelnssaprecondition": 325, "multilevelprecondition": 326, "multilevelsaprecondition": 327, "multilevelsgsprecondition": 328, "multilevelsolversmootherprecondition": 329, "trilinosprecondition": 330, "trilinosaztecoosolv": 331, "trilinosmltest": 332, "trilinosnonlinearsolv": 333, "trilinossolv": 334, "stepper": [335, 336, 337, 338], "pidstepp": 336, "pseudorkqsstepp": 337, "abstractbinaryterm": 340, "abstractconvectionterm": 341, "abstractdiffusionterm": 342, "abstractupwindconvectionterm": 343, "advectionterm": 344, "asymmetricconvectionterm": 345, "binaryterm": 346, "cellterm": 347, "centraldiffconvectionterm": 348, "coupledbinaryterm": 349, "diffusionterm": 350, "diffusiontermcorrect": 351, "diffusiontermnocorrect": 352, "explicitdiffusionterm": 353, "explicitsourceterm": 354, "explicitupwindconvectionterm": 355, "exponentialconvectionterm": 356, "faceterm": 357, "firstorderadvectionterm": 358, "hybridconvectionterm": 359, "implicitdiffusionterm": 360, "implicitsourceterm": 361, "nondiffusionterm": 362, "powerlawconvectionterm": 363, "residualterm": 364, "sourceterm": 365, "transientterm": 368, "unaryterm": 369, "upwindconvectionterm": 370, "vanleerconvectionterm": 371, "testfipi": 372, "doctestplu": 374, "lateimporttest": 375, "testprogram": 377, "tool": [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "commwrapp": 380, "dummycomm": 381, "debug": 382, "decor": 383, "dimens": [384, 385, 386, 387], "dictwithdefault": 385, "numberdict": 386, "physicalfield": 387, "dump": 388, "inlin": 389, "numerix": 392, "parser": 393, "sharedtempfil": 394, "addoverfacesvari": 399, "arithmeticcelltofacevari": 400, "betanoisevari": 401, "binaryoperatorvari": 402, "celltofacevari": 403, "constant": 405, "constraintmask": 406, "coupledcellvari": 407, "distancevari": 408, "exponentialnoisevari": 409, "facegradcontributionsvari": 410, "facegradvari": 411, "gammanoisevari": 413, "gausscellgradvari": 414, "gaussiannoisevari": 415, "harmoniccelltofacevari": 416, "histogramvari": 417, "interfaceareavari": 418, "interfaceflagvari": 419, "leastsquarescellgradvari": 420, "levelsetdiffusionvari": 421, "meshvari": 422, "minmodcelltofacevari": 423, "modcellgradvari": 424, "modcelltofacevari": 425, "modfacegradvari": 426, "modphysicalfield": 427, "modularvari": 428, "noisevari": 429, "operatorvari": 430, "scharfettergummelfacevari": 431, "surfactantconvectionvari": 432, "surfactantvari": 433, "unaryoperatorvari": 435, "uniformnoisevari": 436, "matplotlibview": [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450], "abstractmatplotlib2dview": 440, "abstractmatplotlibview": 441, "matplotlib1dview": 442, "matplotlib2dcontourview": 443, "matplotlib2dgridcontourview": 444, "matplotlib2dgridview": 445, "matplotlib2dview": 446, "matplotlibsparsematrixview": 447, "matplotlibstreamview": 448, "matplotlibvectorview": 449, "mayaviview": [451, 452, 453, 454], "mayavicli": 452, "mayavidaemon": 453, "multiview": 455, "testinteract": 457, "tsvviewer": 458, "vtkviewer": [460, 461, 462, 463, 464], "vtkcellview": 462, "vtkfaceview": 463, "glossari": 465, "introduct": 466, "finit": 468, "volum": 468, "cell": 468, "center": 468, "fvm": 468, "cc": 468, "vertex": 468, "vc": 468, "discret": 468, "partial": 468, "rho": 468, "nabla": 468, "cdot": 468, "left": 468, "vec": 468, "u": 468, "right": 468, "gamma_1": 468, "higher": 468, "order": 468, "linear": 468, "conserv": 469, "theoret": 470, "background": 470, "scheme": 471, "refer": 472, "subpackag": [474, 475, 476], "modul": 477}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"Git practices": [[0, "git-practices"]], "Branches": [[0, "branches"]], "Merging changes from master to the branch": [[0, "merging-changes-from-master-to-the-branch"]], "Submit branch for code review": [[0, "submit-branch-for-code-review"]], "Refactoring complete: merge branch to master": [[0, "refactoring-complete-merge-branch-to-master"]], "Continuous Integration": [[0, "continuous-integration"]], "Conda Lockfiles": [[0, "conda-lockfiles"]], "Making a Release": [[0, "making-a-release"]], "Source": [[0, "source"]], "Release from master": [[0, "release-from-master"]], "Upload": [[0, "upload"]], "Update conda-forge feedstock": [[0, "update-conda-forge-feedstock"]], "Announce": [[0, "announce"]], "fipy Package Documentation": [[1, "fipy-package-documentation"]], "Change Log": [[2, "change-log"]], "Version 3.4.4+263.gcc1eb816c": [[2, "version-release"]], "Pulls": [[2, "pulls"], [2, "id7"], [2, "id52"], [2, "id61"], [2, "id67"], [2, "id80"], [2, "id98"], [2, "id171"]], "Fixes": [[2, "fixes"], [2, "id25"], [2, "id57"], [2, "id65"], [2, "id76"], [2, "id86"], [2, "id130"], [2, "id169"], [2, "id206"], [2, "id231"], [2, "id241"], [2, "id304"], [2, "id308"], [2, "id367"], [2, "id391"], [2, "id399"], [2, "id407"], [2, "id416"], [2, "id423"], [2, "id427"], [2, "id439"], [2, "id441"], [2, "id484"], [2, "id500"], [2, "id519"]], "Version 3.4.3 - 2022-06-15": [[2, "version-3-4-3-2022-06-15"]], "Version 3.4.2.1 - 2020-08-01": [[2, "version-3-4-2-1-2020-08-01"]], "Version 3.4.1 - 2020-02-14": [[2, "version-3-4-1-2020-02-14"]], "Version 3.4 - 2020-02-06": [[2, "version-3-4-2020-02-06"]], "Version 3.3 - 2019-06-28": [[2, "version-3-3-2019-06-28"]], "Version 3.2 - 2019-04-22": [[2, "version-3-2-2019-04-22"]], "Version 3.1.3 - 2017-01-17": [[2, "version-3-1-3-2017-01-17"]], "Version 3.1.2 - 2016-12-24": [[2, "version-3-1-2-2016-12-24"]], "Version 3.1.1 - 2015-12-17": [[2, "version-3-1-1-2015-12-17"]], "Version 3.1 - 2013-09-30": [[2, "version-3-1-2013-09-30"]], "Version 3.0.1 - 2012-10-03": [[2, "version-3-0-1-2012-10-03"]], "Version 3.0 - 2012-08-16": [[2, "version-3-0-2012-08-16"]], "Version 2.1.3 - 2012-01-17": [[2, "version-2-1-3-2012-01-17"]], "Version 2.1.2 - 2011-04-20": [[2, "version-2-1-2-2011-04-20"]], "Version 2.1.1 - 2010-10-05": [[2, "version-2-1-1-2010-10-05"]], "Version 2.1 - 2010-04-01": [[2, "version-2-1-2010-04-01"]], "Version 2.0.3 - 2010-03-17": [[2, "version-2-0-3-2010-03-17"]], "Version 2.0.2 - 2009-06-11": [[2, "version-2-0-2-2009-06-11"]], "Version 2.0.1 - 2009-04-23": [[2, "version-2-0-1-2009-04-23"]], "Version 2.0 - 2009-02-09": [[2, "version-2-0-2009-02-09"]], "Version 1.2.3 - 2009-01-0": [[2, "version-1-2-3-2009-01-0"]], "Version 1.2.2 - 2008-12-30": [[2, "version-1-2-2-2008-12-30"]], "Version 1.2.1 - 2008-02-08": [[2, "version-1-2-1-2008-02-08"]], "Version 1.2 - 2007-02-12": [[2, "version-1-2-2007-02-12"]], "Version 1.1 - 2006-06-06": [[2, "version-1-1-2006-06-06"]], "Version 1.0 - 2005-09-16": [[2, "version-1-0-2005-09-16"]], "Version 0.1.1": [[2, "version-0-1-1"]], "Version 0.1 - 2004-11-05": [[2, "version-0-1-2004-11-05"]], "Contact": [[3, "contact"]], "GitHub Discussions": [[3, "github-discussions"]], "GitHub Issues": [[3, "github-issues"]], "StackOverflow": [[3, "stackoverflow"]], "Mailing List": [[3, "mailing-list"]], "List Archive": [[3, "list-archive"]], "Contributors": [[4, "contributors"]], "Disclaimer": [[5, "disclaimer"]], "Efficiency": [[6, "efficiency"]], "Efficiency comparison between --no-cache and --cache flags": [[6, "efficiency-comparison-between-no-cache-and-cache-flags"]], "Efficiency discussion of Pysparse and Trilinos": [[6, "efficiency-discussion-of-pysparse-and-trilinos"]], "Examples": [[7, "examples"]], "Selected Examples": [[7, "selected-examples"]], "Diffusion Examples": [[7, "diffusion-examples"]], "Convection Examples": [[7, "convection-examples"]], "Phase Field Examples": [[7, "phase-field-examples"]], "Level Set Examples": [[7, "level-set-examples"]], "Cahn-Hilliard Examples": [[7, "cahn-hilliard-examples"]], "Fluid Flow Examples": [[7, "fluid-flow-examples"]], "Reactive Wetting Examples": [[7, "reactive-wetting-examples"]], "Updating FiPy": [[7, "updating-fipy"]], "Frequently Asked Questions": [[8, "frequently-asked-questions"]], "How do I represent an equation in FiPy?": [[8, "how-do-i-represent-an-equation-in-fipy"]], "Is there a way to model an anisotropic diffusion process or more generally to represent the diffusion coefficient as a tensor so that the diffusion term takes the form \\partial_i \\Gamma_{ij}\\partial_j \\phi?": [[8, "is-there-a-way-to-model-an-anisotropic-diffusion-process-or-more-generally-to-represent-the-diffusion-coefficient-as-a-tensor-so-that-the-diffusion-term-takes-the-form-partial-i-gamma-ij-partial-j-phi"]], "How do I represent a \u2026 term that doesn\u2019t involve the dependent variable?": [[8, "how-do-i-represent-a-term-that-doesn-t-involve-the-dependent-variable"]], "How do I represent a diffusive source?": [[8, "how-do-i-represent-a-diffusive-source"]], "How do I represent a convective source?": [[8, "how-do-i-represent-a-convective-source"]], "How do I represent a transient source?": [[8, "how-do-i-represent-a-transient-source"]], "What if my term involves the dependent variable, but not where FiPy puts it?": [[8, "what-if-my-term-involves-the-dependent-variable-but-not-where-fipy-puts-it"]], "What if the coefficient of a term depends on the variable that I\u2019m solving for?": [[8, "what-if-the-coefficient-of-a-term-depends-on-the-variable-that-i-m-solving-for"]], "How can I see what I\u2019m doing?": [[8, "how-can-i-see-what-i-m-doing"]], "How do I export data?": [[8, "how-do-i-export-data"]], "How do I save a plot image?": [[8, "how-do-i-save-a-plot-image"]], "What if I only want the saved file, with no display on screen?": [[8, "what-if-i-only-want-the-saved-file-with-no-display-on-screen"]], "How do I make a movie?": [[8, "how-do-i-make-a-movie"]], "Why doesn\u2019t the Viewer look the way I want?": [[8, "why-doesn-t-the-viewer-look-the-way-i-want"]], "Iterations, timesteps, and sweeps? Oh, my!": [[8, "iterations-timesteps-and-sweeps-oh-my"]], "Why the distinction between CellVariable and FaceVariable coefficients?": [[8, "why-the-distinction-between-cellvariable-and-facevariable-coefficients"]], "How do I represent boundary conditions?": [[8, "how-do-i-represent-boundary-conditions"]], "What does this error message mean?": [[8, "what-does-this-error-message-mean"]], "How do I change FiPy\u2019s default behavior?": [[8, "how-do-i-change-fipy-s-default-behavior"]], "How can I tell if I\u2019m running in parallel?": [[8, "how-can-i-tell-if-i-m-running-in-parallel"]], "Why don\u2019t my scripts work anymore?": [[8, "why-don-t-my-scripts-work-anymore"]], "What if my question isn\u2019t answered here?": [[8, "what-if-my-question-isn-t-answered-here"]], "Git usage": [[9, "git-usage"], [11, "git-usage"]], "Git client": [[9, "git-client"], [11, "git-client"]], "Git branches": [[9, "git-branches"], [11, "git-branches"]], "Development Guidelines": [[10, "development-guidelines"]], "Object Oriented Design": [[10, "object-oriented-design"]], "Programming Style": [[10, "programming-style"]], "Testing": [[10, "testing"]], "Installation": [[11, "installation"]], "Pre-Installed on Binder": [[11, "pre-installed-on-binder"]], "Recommended Method": [[11, "recommended-method"]], "Install conda": [[11, "install-conda"]], "Create a conda environment": [[11, "create-a-conda-environment"]], "Install FiPy": [[11, "install-fipy"]], "Enable conda environment": [[11, "enable-conda-environment"]], "Obtaining FiPy": [[11, "obtaining-fipy"]], "Installing FiPy": [[11, "installing-fipy"]], "Required Packages": [[11, "required-packages"]], "Python": [[11, "python"]], "NumPy": [[11, "numpy"]], "Optional Packages": [[11, "optional-packages"]], "Gmsh": [[11, "gmsh"]], "SciPy": [[11, "scipy"], [16, "scipy"]], "Level Set Packages": [[11, "level-set-packages"]], "Scikit-fmm": [[11, "scikit-fmm"]], "LSMLIB": [[11, "lsmlib"]], "Development Environment": [[11, "development-environment"]], "Nix": [[11, "nix"]], "Nix Installation": [[11, "nix-installation"], [13, "nix-installation"]], "Getting Started with Nix": [[11, "getting-started-with-nix"], [13, "getting-started-with-nix"]], "Installing": [[11, "installing"], [13, "installing"]], "Additional Packages": [[11, "additional-packages"], [13, "additional-packages"]], "Using Pip": [[11, "using-pip"], [13, "using-pip"]], "Terms of Use": [[12, "terms-of-use"]], "Publications": [[14, "publications"]], "Presentations": [[14, "presentations"]], "Overview": [[15, "overview"]], "Even if you don\u2019t read manuals\u2026": [[15, "even-if-you-don-t-read-manuals"]], "Download and Installation": [[15, "download-and-installation"]], "Support": [[15, "support"]], "Conventions and Notation": [[15, "conventions-and-notation"]], "Solvers": [[16, "solvers"]], "PETSc": [[16, "petsc"]], "Pysparse": [[16, "pysparse"]], "PyAMG": [[16, "pyamg"]], "pyamgx": [[16, "pyamgx"]], "Trilinos": [[16, "trilinos"]], "Convergence": [[16, "convergence"]], "Residual Criteria": [[16, "id25"]], "default": [[16, "default"]], "legacy": [[16, "legacy"]], "absolute_tolerance": [[16, "absolute-tolerance"]], "divergence_tolerance": [[16, "divergence-tolerance"]], "Reporting": [[16, "reporting"]], "Convergence Status Codes": [[16, "id26"]], "Divergence Status Codes": [[16, "id27"]], "Using FiPy": [[17, "using-fipy"]], "Logging": [[17, "logging"]], "Testing FiPy": [[17, "testing-fipy"]], "Parallel Tests": [[17, "parallel-tests"]], "Command-line Flags and Environment Variables": [[17, "command-line-flags-and-environment-variables"]], "Command-line Flags": [[17, "command-line-flags"]], "Environment Variables": [[17, "environment-variables"]], "Solving in Parallel": [[17, "solving-in-parallel"]], "OpenMP Threads vs. MPI Ranks": [[17, "openmp-threads-vs-mpi-ranks"]], "Meshing with Gmsh": [[17, "meshing-with-gmsh"]], "Coupled and Vector Equations": [[17, "coupled-and-vector-equations"]], "Boundary Conditions": [[17, "boundary-conditions"], [468, "boundary-conditions"]], "Default boundary conditions": [[17, "default-boundary-conditions"]], "Applying fixed value (Dirichlet) boundary conditions": [[17, "applying-fixed-value-dirichlet-boundary-conditions"]], "Applying fixed gradient boundary conditions (Neumann)": [[17, "applying-fixed-gradient-boundary-conditions-neumann"]], "Applying fixed flux boundary conditions": [[17, "applying-fixed-flux-boundary-conditions"]], "Applying outlet or inlet boundary conditions": [[17, "applying-outlet-or-inlet-boundary-conditions"]], "Applying spatially varying boundary conditions": [[17, "applying-spatially-varying-boundary-conditions"]], "Applying Robin boundary conditions": [[17, "applying-robin-boundary-conditions"]], "Applying internal \u201cboundary\u201d conditions": [[17, "applying-internal-boundary-conditions"]], "Internal fixed value": [[17, "internal-fixed-value"]], "Internal fixed gradient": [[17, "internal-fixed-gradient"]], "Internal Robin condition": [[17, "internal-robin-condition"]], "Running under Python 2": [[17, "running-under-python-2"]], "Manual": [[17, "manual"]], "Viewers": [[18, "viewers"]], "Matplotlib": [[18, "matplotlib"]], "Mayavi": [[18, "mayavi"]], "Virtual Kinetics of Materials Laboratory": [[19, "virtual-kinetics-of-materials-laboratory"]], "FiPy Contents": [[20, "fipy-contents"]], "Design and Implementation": [[21, "design-and-implementation"]], "Design": [[21, "design"]], "Numerical Approach": [[21, "numerical-approach"]], "Object Oriented Structure": [[21, "object-oriented-structure"]], "Test Based Development": [[21, "test-based-development"]], "Open Source": [[21, "open-source"]], "High-Level Scripting Language": [[21, "high-level-scripting-language"]], "Python Programming Language": [[21, "python-programming-language"]], "Implementation": [[21, "implementation"]], "External Command-line Flags": [[22, "external-command-line-flags"]], "External Environment Variables": [[22, "external-environment-variables"]], "examples": [[23, "module-examples"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnHilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnHilliard.mesh2D": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnHilliard.mesh2DCoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnHilliard.mesh3D": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnHilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnHilliard.sphereDaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "examples.cahnHilliard.tanh1D": [[36, "module-examples.cahnHilliard.tanh1D"]], "examples.cahnHilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2D": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.exponential1D": [[45, "module-examples.convection.exponential1D"]], "examples.convection.exponential1D.cylindricalMesh1D": [[46, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1D.cylindricalMesh1DNonUniform": [[47, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1D.mesh1D": [[48, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1D.tri2D": [[49, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1DBack": [[50, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1DBack.mesh1D": [[51, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1DSource": [[52, "module-examples.convection.exponential1DSource"]], "examples.convection.exponential1DSource.mesh1D": [[53, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1DSource.tri2D": [[54, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2D": [[55, "module-examples.convection.exponential2D"]], "examples.convection.exponential2D.cylindricalMesh2D": [[56, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2D.cylindricalMesh2DNonUniform": [[57, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2D.mesh2D": [[58, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2D.tri2D": [[59, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[60, "module-examples.convection.peclet"]], "examples.convection.powerLaw1D": [[61, "module-examples.convection.powerLaw1D"]], "examples.convection.powerLaw1D.mesh1D": [[62, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerLaw1D.tri2D": [[63, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[64, "module-examples.convection.robin"]], "examples.convection.source": [[65, "module-examples.convection.source"]], "examples.convection.test": [[66, "module-examples.convection.test"]], "examples.diffusion": [[67, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[68, "module-examples.diffusion.anisotropy"]], "examples.diffusion.circle": [[69, "module-examples.diffusion.circle"]], "examples.diffusion.circleQuad": [[70, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[71, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[72, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[73, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1D": [[74, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[75, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[76, "module-examples.diffusion.explicit.test"]], "examples.diffusion.mesh1D": [[77, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[78, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20Coupled": [[79, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthOrder": [[80, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthOrder.input4thOrder1D": [[81, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthOrder.test": [[82, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadyState": [[83, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadyState.mesh1D": [[84, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadyState.mesh1D.inputPeriodic": [[85, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadyState.mesh20x20": [[86, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadyState.mesh20x20.gmshinput": [[87, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadyState.mesh20x20.isotropy": [[88, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput": [[89, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadyState.mesh20x20.orthoerror": [[90, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadyState.mesh50x50": [[91, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadyState.otherMeshes": [[92, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadyState.otherMeshes.prism": [[93, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadyState.test": [[94, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[95, "module-examples.diffusion.test"]], "examples.elphf": [[96, "module-examples.elphf"]], "examples.elphf.diffusion": [[97, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1D": [[98, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1Ddimensional": [[99, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2D": [[100, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[101, "module-examples.elphf.input"]], "examples.elphf.phase": [[102, "module-examples.elphf.phase"]], "examples.elphf.phaseDiffusion": [[103, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[104, "module-examples.elphf.poisson"]], "examples.elphf.test": [[105, "module-examples.elphf.test"]], "examples.flow": [[106, "module-examples.flow"]], "examples.flow.stokesCavity": [[107, "module-examples.flow.stokesCavity"]], "examples.flow.test": [[108, "module-examples.flow.test"]], "examples.levelSet": [[109, "module-examples.levelSet"]], "examples.levelSet.advection": [[110, "module-examples.levelSet.advection"]], "examples.levelSet.advection.circle": [[111, "module-examples.levelSet.advection.circle"]], "examples.levelSet.advection.mesh1D": [[112, "module-examples.levelSet.advection.mesh1D"]], "examples.levelSet.advection.test": [[113, "module-examples.levelSet.advection.test"]], "examples.levelSet.advection.trench": [[114, "module-examples.levelSet.advection.trench"]], "examples.levelSet.distanceFunction": [[115, "module-examples.levelSet.distanceFunction"]], "examples.levelSet.distanceFunction.circle": [[116, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelSet.distanceFunction.mesh1D": [[117, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelSet.distanceFunction.test": [[118, "module-examples.levelSet.distanceFunction.test"]], "examples.levelSet.electroChem": [[119, "module-examples.levelSet.electroChem"]], "examples.levelSet.electroChem.adsorbingSurfactantEquation": [[120, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelSet.electroChem.gapFillDistanceVariable": [[121, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelSet.electroChem.gapFillMesh": [[122, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelSet.electroChem.gold": [[123, "module-examples.levelSet.electroChem.gold"]], "examples.levelSet.electroChem.howToWriteAScript": [[124, "module-examples.levelSet.electroChem.howToWriteAScript"]], "examples.levelSet.electroChem.leveler": [[125, "module-examples.levelSet.electroChem.leveler"]], "examples.levelSet.electroChem.lines": [[126, "module-examples.levelSet.electroChem.lines"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[127, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[128, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "examples.levelSet.electroChem.metalIonDiffusionEquation": [[129, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelSet.electroChem.simpleTrenchSystem": [[130, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "examples.levelSet.electroChem.surfactantBulkDiffusionEquation": [[131, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelSet.electroChem.test": [[132, "module-examples.levelSet.electroChem.test"]], "examples.levelSet.electroChem.trenchMesh": [[133, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelSet.surfactant": [[134, "module-examples.levelSet.surfactant"]], "examples.levelSet.surfactant.test": [[135, "module-examples.levelSet.surfactant.test"]], "examples.levelSet.test": [[136, "module-examples.levelSet.test"]], "examples.meshing": [[137, "module-examples.meshing"]], "examples.meshing.gmshRefinement": [[138, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputGrid2D": [[139, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[140, "module-examples.meshing.sphere"]], "examples.meshing.test": [[141, "module-examples.meshing.test"]], "examples.parallel": [[142, "module-examples.parallel"]], "examples.phase": [[143, "module-examples.phase"]], "examples.phase.anisotropy": [[144, "module-examples.phase.anisotropy"]], "examples.phase.anisotropyOLD": [[145, "module-examples.phase.anisotropyOLD"]], "examples.phase.binary": [[146, "module-examples.phase.binary"]], "examples.phase.binaryCoupled": [[147, "module-examples.phase.binaryCoupled"]], "examples.phase.impingement": [[148, "module-examples.phase.impingement"]], "examples.phase.impingement.mesh20x20": [[149, "module-examples.phase.impingement.mesh20x20"]], "examples.phase.impingement.mesh40x1": [[150, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[151, "module-examples.phase.impingement.test"]], "examples.phase.missOrientation": [[152, "module-examples.phase.missOrientation"]], "examples.phase.missOrientation.test": [[153, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[154, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalCoupled": [[155, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[156, "module-examples.phase.quaternary"]], "examples.phase.simple": [[157, "module-examples.phase.simple"]], "examples.phase.symmetry": [[158, "module-examples.phase.symmetry"]], "examples.phase.test": [[159, "module-examples.phase.test"]], "examples.reactiveWetting": [[160, "module-examples.reactiveWetting"]], "examples.reactiveWetting.liquidVapor1D": [[161, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactiveWetting.liquidVapor2D": [[162, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactiveWetting.test": [[163, "module-examples.reactiveWetting.test"]], "examples.riemann": [[164, "module-examples.riemann"]], "examples.riemann.test": [[165, "module-examples.riemann.test"]], "examples.test": [[166, "module-examples.test"]], "examples.updating": [[167, "module-examples.updating"]], "examples.updating.update0_1to1_0": [[168, "module-examples.updating.update0_1to1_0"]], "examples.updating.update1_0to2_0": [[169, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[170, "module-examples.updating.update2_0to3_0"]], "fipy": [[171, "module-fipy"]], "fipy.boundaryConditions": [[172, "module-fipy.boundaryConditions"]], "fipy.boundaryConditions.boundaryCondition": [[173, "module-fipy.boundaryConditions.boundaryCondition"]], "fipy.boundaryConditions.constraint": [[174, "module-fipy.boundaryConditions.constraint"]], "fipy.boundaryConditions.fixedFlux": [[175, "module-fipy.boundaryConditions.fixedFlux"]], "fipy.boundaryConditions.fixedValue": [[176, "module-fipy.boundaryConditions.fixedValue"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[177, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryConditions.test": [[178, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[179, "module-fipy.matrices"]], "fipy.matrices.offsetSparseMatrix": [[180, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscMatrix": [[181, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparseMatrix": [[182, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipyMatrix": [[183, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparseMatrix": [[184, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[185, "module-fipy.matrices.test"]], "fipy.matrices.trilinosMatrix": [[186, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[187, "module-fipy.meshes"]], "fipy.meshes.abstractMesh": [[188, "module-fipy.meshes.abstractMesh"]], "fipy.meshes.builders": [[189, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractGridBuilder": [[190, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1DBuilder": [[191, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2DBuilder": [[192, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3DBuilder": [[193, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicGrid1DBuilder": [[194, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityClasses": [[195, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalGrid1D": [[196, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalGrid2D": [[197, "module-fipy.meshes.cylindricalGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[198, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[199, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid1D": [[200, "module-fipy.meshes.cylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid2D": [[201, "module-fipy.meshes.cylindricalUniformGrid2D"]], "fipy.meshes.factoryMeshes": [[202, "module-fipy.meshes.factoryMeshes"]], "fipy.meshes.gmshMesh": [[203, "module-fipy.meshes.gmshMesh"]], "fipy.meshes.grid1D": [[204, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2D": [[205, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3D": [[206, "module-fipy.meshes.grid3D"]], "fipy.meshes.mesh": [[207, "module-fipy.meshes.mesh"]], "fipy.meshes.mesh1D": [[208, "module-fipy.meshes.mesh1D"]], "fipy.meshes.mesh2D": [[209, "module-fipy.meshes.mesh2D"]], "fipy.meshes.nonUniformGrid1D": [[210, "module-fipy.meshes.nonUniformGrid1D"]], "fipy.meshes.nonUniformGrid2D": [[211, "module-fipy.meshes.nonUniformGrid2D"]], "fipy.meshes.nonUniformGrid3D": [[212, "module-fipy.meshes.nonUniformGrid3D"]], "fipy.meshes.periodicGrid1D": [[213, "module-fipy.meshes.periodicGrid1D"]], "fipy.meshes.periodicGrid2D": [[214, "module-fipy.meshes.periodicGrid2D"]], "fipy.meshes.periodicGrid3D": [[215, "module-fipy.meshes.periodicGrid3D"]], "fipy.meshes.representations": [[216, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractRepresentation": [[217, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridRepresentation": [[218, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshRepresentation": [[219, "module-fipy.meshes.representations.meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[220, "module-fipy.meshes.skewedGrid2D"]], "fipy.meshes.sphericalNonUniformGrid1D": [[221, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D": [[222, "module-fipy.meshes.sphericalUniformGrid1D"]], "fipy.meshes.test": [[223, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[224, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstractTopology": [[225, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridTopology": [[226, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshTopology": [[227, "module-fipy.meshes.topologies.meshTopology"]], "fipy.meshes.tri2D": [[228, "module-fipy.meshes.tri2D"]], "fipy.meshes.uniformGrid": [[229, "module-fipy.meshes.uniformGrid"]], "fipy.meshes.uniformGrid1D": [[230, "module-fipy.meshes.uniformGrid1D"]], "fipy.meshes.uniformGrid2D": [[231, "module-fipy.meshes.uniformGrid2D"]], "fipy.solvers": [[232, "module-fipy.solvers"]], "fipy.solvers.convergence": [[233, "module-fipy.solvers.convergence"]], "fipy.solvers.petsc": [[234, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[235, "module-fipy.solvers.petsc.comms"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[236, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[237, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[238, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "fipy.solvers.petsc.dummySolver": [[239, "module-fipy.solvers.petsc.dummySolver"]], "fipy.solvers.petsc.linearBicgSolver": [[240, "module-fipy.solvers.petsc.linearBicgSolver"]], "fipy.solvers.petsc.linearCGSSolver": [[241, "module-fipy.solvers.petsc.linearCGSSolver"]], "fipy.solvers.petsc.linearGMRESSolver": [[242, "module-fipy.solvers.petsc.linearGMRESSolver"]], "fipy.solvers.petsc.linearLUSolver": [[243, "module-fipy.solvers.petsc.linearLUSolver"]], "fipy.solvers.petsc.linearPCGSolver": [[244, "module-fipy.solvers.petsc.linearPCGSolver"]], "fipy.solvers.petsc.petscConvergence": [[245, "module-fipy.solvers.petsc.petscConvergence"]], "fipy.solvers.petsc.petscKrylovSolver": [[246, "module-fipy.solvers.petsc.petscKrylovSolver"]], "fipy.solvers.petsc.petscSolver": [[247, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.petsc.preconditioners": [[248, "module-fipy.solvers.petsc.preconditioners"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[249, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[250, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[251, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[252, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[253, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[254, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[255, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "fipy.solvers.preconditioner": [[256, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyAMG": [[257, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyAMG.linearCGSSolver": [[258, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[259, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[260, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "fipy.solvers.pyAMG.linearLUSolver": [[261, "module-fipy.solvers.pyAMG.linearLUSolver"]], "fipy.solvers.pyAMG.linearPCGSolver": [[262, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyAMG.preconditioners": [[263, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[264, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[265, "module-fipy.solvers.pyamgx"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[266, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[267, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[268, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[269, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[270, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "fipy.solvers.pyamgx.linearLUSolver": [[271, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.linearPCGSolver": [[272, "module-fipy.solvers.pyamgx.linearPCGSolver"]], "fipy.solvers.pyamgx.preconditioners": [[273, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[274, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[275, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "fipy.solvers.pyamgx.smoothers": [[276, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pysparse": [[277, "module-fipy.solvers.pysparse"]], "fipy.solvers.pysparse.linearCGSSolver": [[278, "module-fipy.solvers.pysparse.linearCGSSolver"]], "fipy.solvers.pysparse.linearGMRESSolver": [[279, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "fipy.solvers.pysparse.linearInitialSolver": [[280, "module-fipy.solvers.pysparse.linearInitialSolver"]], "fipy.solvers.pysparse.linearJORSolver": [[281, "module-fipy.solvers.pysparse.linearJORSolver"]], "fipy.solvers.pysparse.linearLUSolver": [[282, "module-fipy.solvers.pysparse.linearLUSolver"]], "fipy.solvers.pysparse.linearPCGSolver": [[283, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.linearRHSSolver": [[284, "module-fipy.solvers.pysparse.linearRHSSolver"]], "fipy.solvers.pysparse.preconditioners": [[285, "module-fipy.solvers.pysparse.preconditioners"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[286, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner": [[287, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[288, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "fipy.solvers.pysparse.pysparseConvergence": [[289, "module-fipy.solvers.pysparse.pysparseConvergence"]], "fipy.solvers.pysparse.pysparseSolver": [[290, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparseMatrixSolver": [[291, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[292, "module-fipy.solvers.scipy"]], "fipy.solvers.scipy.linearBicgstabSolver": [[293, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "fipy.solvers.scipy.linearCGSSolver": [[294, "module-fipy.solvers.scipy.linearCGSSolver"]], "fipy.solvers.scipy.linearGMRESSolver": [[295, "module-fipy.solvers.scipy.linearGMRESSolver"]], "fipy.solvers.scipy.linearLUSolver": [[296, "module-fipy.solvers.scipy.linearLUSolver"]], "fipy.solvers.scipy.linearPCGSolver": [[297, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.preconditioners": [[298, "module-fipy.solvers.scipy.preconditioners"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[299, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[300, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[301, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[302, "module-fipy.solvers.scipy.scipyConvergence"]], "fipy.solvers.scipy.scipyKrylovSolver": [[303, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipySolver": [[304, "module-fipy.solvers.scipy.scipySolver"]], "fipy.solvers.solver": [[305, "module-fipy.solvers.solver"]], "fipy.solvers.test": [[306, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[307, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.aztecConvergence": [[308, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[309, "module-fipy.solvers.trilinos.comms"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[310, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[311, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[312, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[313, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "fipy.solvers.trilinos.linearCGSSolver": [[314, "module-fipy.solvers.trilinos.linearCGSSolver"]], "fipy.solvers.trilinos.linearGMRESSolver": [[315, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "fipy.solvers.trilinos.linearLUSolver": [[316, "module-fipy.solvers.trilinos.linearLUSolver"]], "fipy.solvers.trilinos.linearPCGSolver": [[317, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[318, "module-fipy.solvers.trilinos.preconditioners"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[319, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[320, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[321, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[322, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[323, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[329, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[330, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[331, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosMLTest": [[332, "module-fipy.solvers.trilinos.trilinosMLTest"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[333, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosSolver": [[334, "module-fipy.solvers.trilinos.trilinosSolver"]], "fipy.steppers": [[335, "module-fipy.steppers"]], "fipy.steppers.pidStepper": [[336, "module-fipy.steppers.pidStepper"]], "fipy.steppers.pseudoRKQSStepper": [[337, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[338, "module-fipy.steppers.stepper"]], "fipy.terms": [[339, "module-fipy.terms"]], "fipy.terms.abstractBinaryTerm": [[340, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractConvectionTerm": [[341, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractDiffusionTerm": [[342, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractUpwindConvectionTerm": [[343, "module-fipy.terms.abstractUpwindConvectionTerm"]], "fipy.terms.advectionTerm": [[344, "module-fipy.terms.advectionTerm"]], "fipy.terms.asymmetricConvectionTerm": [[345, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryTerm": [[346, "module-fipy.terms.binaryTerm"]], "fipy.terms.cellTerm": [[347, "module-fipy.terms.cellTerm"]], "fipy.terms.centralDiffConvectionTerm": [[348, "module-fipy.terms.centralDiffConvectionTerm"]], "fipy.terms.coupledBinaryTerm": [[349, "module-fipy.terms.coupledBinaryTerm"]], "fipy.terms.diffusionTerm": [[350, "module-fipy.terms.diffusionTerm"]], "fipy.terms.diffusionTermCorrection": [[351, "module-fipy.terms.diffusionTermCorrection"]], "fipy.terms.diffusionTermNoCorrection": [[352, "module-fipy.terms.diffusionTermNoCorrection"]], "fipy.terms.explicitDiffusionTerm": [[353, "module-fipy.terms.explicitDiffusionTerm"]], "fipy.terms.explicitSourceTerm": [[354, "module-fipy.terms.explicitSourceTerm"]], "fipy.terms.explicitUpwindConvectionTerm": [[355, "module-fipy.terms.explicitUpwindConvectionTerm"]], "fipy.terms.exponentialConvectionTerm": [[356, "module-fipy.terms.exponentialConvectionTerm"]], "fipy.terms.faceTerm": [[357, "module-fipy.terms.faceTerm"]], "fipy.terms.firstOrderAdvectionTerm": [[358, "module-fipy.terms.firstOrderAdvectionTerm"]], "fipy.terms.hybridConvectionTerm": [[359, "module-fipy.terms.hybridConvectionTerm"]], "fipy.terms.implicitDiffusionTerm": [[360, "module-fipy.terms.implicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[361, "module-fipy.terms.implicitSourceTerm"]], "fipy.terms.nonDiffusionTerm": [[362, "module-fipy.terms.nonDiffusionTerm"]], "fipy.terms.powerLawConvectionTerm": [[363, "module-fipy.terms.powerLawConvectionTerm"]], "fipy.terms.residualTerm": [[364, "module-fipy.terms.residualTerm"]], "fipy.terms.sourceTerm": [[365, "module-fipy.terms.sourceTerm"]], "fipy.terms.term": [[366, "module-fipy.terms.term"]], "fipy.terms.test": [[367, "module-fipy.terms.test"]], "fipy.terms.transientTerm": [[368, "module-fipy.terms.transientTerm"]], "fipy.terms.unaryTerm": [[369, "module-fipy.terms.unaryTerm"]], "fipy.terms.upwindConvectionTerm": [[370, "module-fipy.terms.upwindConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm": [[371, "module-fipy.terms.vanLeerConvectionTerm"]], "fipy.testFiPy": [[372, "module-fipy.testFiPy"]], "fipy.tests": [[373, "module-fipy.tests"]], "fipy.tests.doctestPlus": [[374, "module-fipy.tests.doctestPlus"]], "fipy.tests.lateImportTest": [[375, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[376, "module-fipy.tests.test"]], "fipy.tests.testProgram": [[377, "module-fipy.tests.testProgram"]], "fipy.tools": [[378, "module-fipy.tools"]], "fipy.tools.comms": [[379, "module-fipy.tools.comms"]], "fipy.tools.comms.commWrapper": [[380, "module-fipy.tools.comms.commWrapper"]], "fipy.tools.comms.dummyComm": [[381, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.debug": [[382, "module-fipy.tools.debug"]], "fipy.tools.decorators": [[383, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[384, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.DictWithDefault": [[385, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.NumberDict": [[386, "module-fipy.tools.dimensions.NumberDict"]], "fipy.tools.dimensions.physicalField": [[387, "module-fipy.tools.dimensions.physicalField"]], "fipy.tools.dump": [[388, "module-fipy.tools.dump"]], "fipy.tools.inline": [[389, "module-fipy.tools.inline"]], "fipy.tools.logging": [[390, "module-fipy.tools.logging"]], "fipy.tools.logging.environment": [[391, "module-fipy.tools.logging.environment"]], "fipy.tools.numerix": [[392, "module-fipy.tools.numerix"]], "fipy.tools.parser": [[393, "module-fipy.tools.parser"]], "fipy.tools.sharedtempfile": [[394, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[395, "module-fipy.tools.test"]], "fipy.tools.vector": [[396, "module-fipy.tools.vector"]], "fipy.tools.version": [[397, "module-fipy.tools.version"]], "fipy.variables": [[398, "module-fipy.variables"]], "fipy.variables.addOverFacesVariable": [[399, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticCellToFaceVariable": [[400, "module-fipy.variables.arithmeticCellToFaceVariable"]], "fipy.variables.betaNoiseVariable": [[401, "module-fipy.variables.betaNoiseVariable"]], "fipy.variables.binaryOperatorVariable": [[402, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.cellToFaceVariable": [[403, "module-fipy.variables.cellToFaceVariable"]], "fipy.variables.cellVariable": [[404, "module-fipy.variables.cellVariable"]], "fipy.variables.constant": [[405, "module-fipy.variables.constant"]], "fipy.variables.constraintMask": [[406, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledCellVariable": [[407, "module-fipy.variables.coupledCellVariable"]], "fipy.variables.distanceVariable": [[408, "module-fipy.variables.distanceVariable"]], "fipy.variables.exponentialNoiseVariable": [[409, "module-fipy.variables.exponentialNoiseVariable"]], "fipy.variables.faceGradContributionsVariable": [[410, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.faceGradVariable": [[411, "module-fipy.variables.faceGradVariable"]], "fipy.variables.faceVariable": [[412, "module-fipy.variables.faceVariable"]], "fipy.variables.gammaNoiseVariable": [[413, "module-fipy.variables.gammaNoiseVariable"]], "fipy.variables.gaussCellGradVariable": [[414, "module-fipy.variables.gaussCellGradVariable"]], "fipy.variables.gaussianNoiseVariable": [[415, "module-fipy.variables.gaussianNoiseVariable"]], "fipy.variables.harmonicCellToFaceVariable": [[416, "module-fipy.variables.harmonicCellToFaceVariable"]], "fipy.variables.histogramVariable": [[417, "module-fipy.variables.histogramVariable"]], "fipy.variables.interfaceAreaVariable": [[418, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceFlagVariable": [[419, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastSquaresCellGradVariable": [[420, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelSetDiffusionVariable": [[421, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshVariable": [[422, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodCellToFaceVariable": [[423, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modCellGradVariable": [[424, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modCellToFaceVariable": [[425, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modFaceGradVariable": [[426, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modPhysicalField": [[427, "module-fipy.variables.modPhysicalField"]], "fipy.variables.modularVariable": [[428, "module-fipy.variables.modularVariable"]], "fipy.variables.noiseVariable": [[429, "module-fipy.variables.noiseVariable"]], "fipy.variables.operatorVariable": [[430, "module-fipy.variables.operatorVariable"]], "fipy.variables.scharfetterGummelFaceVariable": [[431, "module-fipy.variables.scharfetterGummelFaceVariable"]], "fipy.variables.surfactantConvectionVariable": [[432, "module-fipy.variables.surfactantConvectionVariable"]], "fipy.variables.surfactantVariable": [[433, "module-fipy.variables.surfactantVariable"]], "fipy.variables.test": [[434, "module-fipy.variables.test"]], "fipy.variables.unaryOperatorVariable": [[435, "module-fipy.variables.unaryOperatorVariable"]], "fipy.variables.uniformNoiseVariable": [[436, "module-fipy.variables.uniformNoiseVariable"]], "fipy.variables.variable": [[437, "module-fipy.variables.variable"]], "fipy.viewers": [[438, "module-fipy.viewers"]], "fipy.viewers.matplotlibViewer": [[439, "module-fipy.viewers.matplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[440, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[441, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[442, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[443, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[444, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[445, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[446, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[447, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[448, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[449, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.test": [[450, "module-fipy.viewers.matplotlibViewer.test"]], "fipy.viewers.mayaviViewer": [[451, "module-fipy.viewers.mayaviViewer"]], "fipy.viewers.mayaviViewer.mayaviClient": [[452, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[453, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "fipy.viewers.mayaviViewer.test": [[454, "module-fipy.viewers.mayaviViewer.test"]], "fipy.viewers.multiViewer": [[455, "module-fipy.viewers.multiViewer"]], "fipy.viewers.test": [[456, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[457, "module-fipy.viewers.testinteractive"]], "fipy.viewers.tsvViewer": [[458, "module-fipy.viewers.tsvViewer"]], "fipy.viewers.viewer": [[459, "module-fipy.viewers.viewer"]], "fipy.viewers.vtkViewer": [[460, "module-fipy.viewers.vtkViewer"]], "fipy.viewers.vtkViewer.test": [[461, "module-fipy.viewers.vtkViewer.test"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[462, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[463, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "fipy.viewers.vtkViewer.vtkViewer": [[464, "module-fipy.viewers.vtkViewer.vtkViewer"]], "Glossary": [[465, "glossary"]], "Introduction": [[466, "introduction"]], "FiPy Manual": [[467, "fipy-manual"]], "Finite Volume Method": [[468, "finite-volume-method"]], "Cell Centered FVM (CC-FVM)": [[468, "cell-centered-fvm-cc-fvm"]], "Vertex Centered FVM (VC-FVM)": [[468, "vertex-centered-fvm-vc-fvm"]], "Discretization": [[468, "discretization"]], "Transient Term \\partial (\\rho \\phi) / \\partial t": [[468, "transient-term-partial-rho-phi-partial-t"]], "Convection Term \\nabla \\cdot \\left( \\vec{u} \\phi \\right)": [[468, "convection-term-nabla-cdot-left-vec-u-phi-right"]], "Diffusion Term \\nabla \\cdot \\left( \\Gamma_1 \\nabla \\phi \\right)": [[468, "diffusion-term-nabla-cdot-left-gamma-1-nabla-phi-right"]], "Higher Order Diffusion": [[468, "higher-order-diffusion"]], "Source Term": [[468, "source-term"]], "Linear Equations": [[468, "linear-equations"]], "General Conservation Equation": [[469, "general-conservation-equation"]], "Theoretical and Numerical Background": [[470, "theoretical-and-numerical-background"]], "Numerical Schemes": [[471, "numerical-schemes"]], "References": [[472, "references"]], "package": [[473, "module-package"]], "package.subpackage": [[474, "module-package.subpackage"]], "package.subpackage.base": [[475, "module-package.subpackage.base"]], "package.subpackage.object": [[476, "module-package.subpackage.object"]], "How to Read the Modules Documentation": [[477, "how-to-read-the-modules-documentation"]]}, "indexentries": {"path": [[10, "index-1"]], "pep 8": [[10, "index-0"]], "python enhancement proposals": [[10, "index-0"], [465, "index-0"]], "environment variable": [[10, "index-1"], [16, "index-0"], [17, "envvar-FIPY_CACHE"], [17, "envvar-FIPY_DEFAULT_CRITERION"], [17, "envvar-FIPY_DISPLAY_MATRIX"], [17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [17, "envvar-FIPY_INLINE"], [17, "envvar-FIPY_INLINE_COMMENT"], [17, "envvar-FIPY_LOG_CONFIG"], [17, "envvar-FIPY_SOLVERS"], [17, "envvar-FIPY_VERBOSE_SOLVER"], [17, "envvar-FIPY_VIEWER"], [17, "envvar-PETSC_OPTIONS"], [17, "index-0"], [17, "index-1"], [17, "index-2"], [22, "envvar-DYLD_LIBRARY_PATH"], [22, "envvar-LD_LIBRARY_PATH"], [170, "index-0"]], "fipy_solvers": [[16, "index-0"], [17, "envvar-FIPY_SOLVERS"], [17, "index-1"]], "--cache": [[17, "cmdoption-cache"]], "--inline": [[17, "cmdoption-inline"]], "--lsmlib": [[17, "cmdoption-lsmlib"]], "--no-cache": [[17, "cmdoption-no-cache"]], "--no-pysparse": [[17, "cmdoption-no-pysparse"]], "--pyamg": [[17, "cmdoption-pyamg"]], "--pyamgx": [[17, "cmdoption-pyamgx"]], "--pysparse": [[17, "cmdoption-pysparse"]], "--scipy": [[17, "cmdoption-scipy"]], "--skfmm": [[17, "cmdoption-skfmm"]], "--trilinos": [[17, "cmdoption-trilinos"]], "fipy_cache": [[17, "envvar-FIPY_CACHE"]], "fipy_default_criterion": [[17, "envvar-FIPY_DEFAULT_CRITERION"]], "fipy_display_matrix": [[17, "envvar-FIPY_DISPLAY_MATRIX"]], "fipy_include_numerix_all": [[17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [170, "index-0"]], "fipy_inline": [[17, "envvar-FIPY_INLINE"]], "fipy_inline_comment": [[17, "envvar-FIPY_INLINE_COMMENT"]], "fipy_log_config": [[17, "envvar-FIPY_LOG_CONFIG"], [17, "index-0"], [17, "index-2"]], "fipy_verbose_solver": [[17, "envvar-FIPY_VERBOSE_SOLVER"]], "fipy_viewer": [[17, "envvar-FIPY_VIEWER"]], "petsc_options": [[17, "envvar-PETSC_OPTIONS"]], "command line option": [[17, "cmdoption-cache"], [17, "cmdoption-inline"], [17, "cmdoption-lsmlib"], [17, "cmdoption-no-cache"], [17, "cmdoption-no-pysparse"], [17, "cmdoption-pyamg"], [17, "cmdoption-pyamgx"], [17, "cmdoption-pysparse"], [17, "cmdoption-scipy"], [17, "cmdoption-skfmm"], [17, "cmdoption-trilinos"], [22, "cmdoption-home"], [22, "cmdoption-prefix"]], "--home": [[22, "cmdoption-home"]], "--prefix": [[22, "cmdoption-prefix"]], "dyld_library_path": [[22, "envvar-DYLD_LIBRARY_PATH"]], "ld_library_path": [[22, "envvar-LD_LIBRARY_PATH"]], "examples": [[23, "module-examples"]], "module": [[23, "module-examples"], [24, "module-examples.benchmarking"], [25, "module-examples.benchmarking.benchmarker"], [26, "module-examples.benchmarking.size"], [27, "module-examples.benchmarking.steps"], [28, "module-examples.benchmarking.utils"], [29, "module-examples.benchmarking.versions"], [30, "module-examples.cahnHilliard"], [31, "module-examples.cahnHilliard.mesh2D"], [32, "module-examples.cahnHilliard.mesh2DCoupled"], [33, "module-examples.cahnHilliard.mesh3D"], [34, "module-examples.cahnHilliard.sphere"], [35, "module-examples.cahnHilliard.sphereDaemon"], [36, "index-5"], [36, "module-examples.cahnHilliard.tanh1D"], [37, "module-examples.cahnHilliard.test"], [38, "module-examples.chemotaxis"], [39, "module-examples.chemotaxis.input"], [40, "module-examples.chemotaxis.input2D"], [41, "module-examples.chemotaxis.parameters"], [42, "module-examples.chemotaxis.test"], [43, "module-examples.convection"], [44, "module-examples.convection.advection"], [45, "module-examples.convection.exponential1D"], [46, "index-2"], [46, "module-examples.convection.exponential1D.cylindricalMesh1D"], [47, "index-1"], [47, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"], [48, "index-2"], [48, "module-examples.convection.exponential1D.mesh1D"], [49, "module-examples.convection.exponential1D.tri2D"], [50, "module-examples.convection.exponential1DBack"], [51, "module-examples.convection.exponential1DBack.mesh1D"], [52, "module-examples.convection.exponential1DSource"], [53, "index-4"], [53, "module-examples.convection.exponential1DSource.mesh1D"], [54, "module-examples.convection.exponential1DSource.tri2D"], [55, "module-examples.convection.exponential2D"], [56, "index-2"], [56, "module-examples.convection.exponential2D.cylindricalMesh2D"], [57, "index-1"], [57, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"], [58, "module-examples.convection.exponential2D.mesh2D"], [59, "module-examples.convection.exponential2D.tri2D"], [60, "module-examples.convection.peclet"], [61, "module-examples.convection.powerLaw1D"], [62, "module-examples.convection.powerLaw1D.mesh1D"], [63, "module-examples.convection.powerLaw1D.tri2D"], [64, "module-examples.convection.robin"], [65, "module-examples.convection.source"], [66, "module-examples.convection.test"], [67, "module-examples.diffusion"], [68, "module-examples.diffusion.anisotropy"], [69, "index-3"], [69, "module-examples.diffusion.circle"], [70, "index-3"], [70, "module-examples.diffusion.circleQuad"], [71, "module-examples.diffusion.coupled"], [72, "module-examples.diffusion.electrostatics"], [73, "module-examples.diffusion.explicit"], [74, "module-examples.diffusion.explicit.mesh1D"], [75, "module-examples.diffusion.explicit.mixedelement"], [76, "module-examples.diffusion.explicit.test"], [77, "index-1"], [77, "module-examples.diffusion.mesh1D"], [78, "index-1"], [78, "module-examples.diffusion.mesh20x20"], [79, "index-1"], [79, "module-examples.diffusion.mesh20x20Coupled"], [80, "module-examples.diffusion.nthOrder"], [81, "index-3"], [81, "module-examples.diffusion.nthOrder.input4thOrder1D"], [82, "module-examples.diffusion.nthOrder.test"], [83, "module-examples.diffusion.steadyState"], [84, "module-examples.diffusion.steadyState.mesh1D"], [85, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"], [86, "module-examples.diffusion.steadyState.mesh20x20"], [87, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"], [88, "module-examples.diffusion.steadyState.mesh20x20.isotropy"], [89, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"], [90, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"], [91, "module-examples.diffusion.steadyState.mesh50x50"], [92, "module-examples.diffusion.steadyState.otherMeshes"], [93, "module-examples.diffusion.steadyState.otherMeshes.prism"], [94, "module-examples.diffusion.steadyState.test"], [95, "module-examples.diffusion.test"], [96, "module-examples.elphf"], [97, "module-examples.elphf.diffusion"], [98, "module-examples.elphf.diffusion.mesh1D"], [99, "module-examples.elphf.diffusion.mesh1Ddimensional"], [100, "module-examples.elphf.diffusion.mesh2D"], [101, "module-examples.elphf.input"], [102, "module-examples.elphf.phase"], [103, "module-examples.elphf.phaseDiffusion"], [104, "module-examples.elphf.poisson"], [105, "module-examples.elphf.test"], [106, "module-examples.flow"], [107, "index-2"], [107, "module-examples.flow.stokesCavity"], [108, "module-examples.flow.test"], [109, "module-examples.levelSet"], [110, "module-examples.levelSet.advection"], [111, "module-examples.levelSet.advection.circle"], [112, "module-examples.levelSet.advection.mesh1D"], [113, "module-examples.levelSet.advection.test"], [114, "module-examples.levelSet.advection.trench"], [115, "module-examples.levelSet.distanceFunction"], [116, "module-examples.levelSet.distanceFunction.circle"], [117, "module-examples.levelSet.distanceFunction.mesh1D"], [118, "module-examples.levelSet.distanceFunction.test"], [119, "module-examples.levelSet.electroChem"], [120, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"], [121, "module-examples.levelSet.electroChem.gapFillDistanceVariable"], [122, "module-examples.levelSet.electroChem.gapFillMesh"], [123, "index-1"], [123, "module-examples.levelSet.electroChem.gold"], [124, "index-0"], [124, "module-examples.levelSet.electroChem.howToWriteAScript"], [125, "index-1"], [125, "module-examples.levelSet.electroChem.leveler"], [126, "module-examples.levelSet.electroChem.lines"], [127, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"], [128, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"], [129, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"], [130, "index-1"], [130, "module-examples.levelSet.electroChem.simpleTrenchSystem"], [131, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"], [132, "module-examples.levelSet.electroChem.test"], [133, "module-examples.levelSet.electroChem.trenchMesh"], [134, "module-examples.levelSet.surfactant"], [135, "module-examples.levelSet.surfactant.test"], [136, "module-examples.levelSet.test"], [137, "module-examples.meshing"], [138, "module-examples.meshing.gmshRefinement"], [139, "module-examples.meshing.inputGrid2D"], [140, "module-examples.meshing.sphere"], [141, "module-examples.meshing.test"], [142, "module-examples.parallel"], [143, "module-examples.phase"], [144, "module-examples.phase.anisotropy"], [145, "index-4"], [145, "module-examples.phase.anisotropyOLD"], [146, "index-7"], [146, "module-examples.phase.binary"], [147, "index-5"], [147, "index-6"], [147, "module-examples.phase.binaryCoupled"], [148, "module-examples.phase.impingement"], [149, "index-0"], [149, "index-6"], [149, "index-8"], [149, "module-examples.phase.impingement.mesh20x20"], [150, "index-4"], [150, "module-examples.phase.impingement.mesh40x1"], [151, "module-examples.phase.impingement.test"], [152, "module-examples.phase.missOrientation"], [153, "module-examples.phase.missOrientation.test"], [154, "module-examples.phase.polyxtal"], [155, "module-examples.phase.polyxtalCoupled"], [156, "index-4"], [156, "module-examples.phase.quaternary"], [157, "index-2"], [157, "index-8"], [157, "module-examples.phase.simple"], [158, "module-examples.phase.symmetry"], [159, "module-examples.phase.test"], [160, "module-examples.reactiveWetting"], [161, "module-examples.reactiveWetting.liquidVapor1D"], [162, "module-examples.reactiveWetting.liquidVapor2D"], [163, "module-examples.reactiveWetting.test"], [164, "module-examples.riemann"], [165, "module-examples.riemann.test"], [166, "module-examples.test"], [167, "module-examples.updating"], [168, "index-5"], [168, "module-examples.updating.update0_1to1_0"], [169, "module-examples.updating.update1_0to2_0"], [170, "module-examples.updating.update2_0to3_0"], [171, "module-fipy"], [172, "module-fipy.boundaryConditions"], [173, "module-fipy.boundaryConditions.boundaryCondition"], [174, "module-fipy.boundaryConditions.constraint"], [175, "module-fipy.boundaryConditions.fixedFlux"], [176, "module-fipy.boundaryConditions.fixedValue"], [177, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"], [178, "module-fipy.boundaryConditions.test"], [179, "module-fipy.matrices"], [180, "module-fipy.matrices.offsetSparseMatrix"], [181, "module-fipy.matrices.petscMatrix"], [182, "module-fipy.matrices.pysparseMatrix"], [183, "module-fipy.matrices.scipyMatrix"], [184, "module-fipy.matrices.sparseMatrix"], [185, "module-fipy.matrices.test"], [186, "module-fipy.matrices.trilinosMatrix"], [187, "module-fipy.meshes"], [188, "module-fipy.meshes.abstractMesh"], [189, "module-fipy.meshes.builders"], [190, "module-fipy.meshes.builders.abstractGridBuilder"], [191, "module-fipy.meshes.builders.grid1DBuilder"], [192, "module-fipy.meshes.builders.grid2DBuilder"], [193, "module-fipy.meshes.builders.grid3DBuilder"], [194, "module-fipy.meshes.builders.periodicGrid1DBuilder"], [195, "module-fipy.meshes.builders.utilityClasses"], [196, "module-fipy.meshes.cylindricalGrid1D"], [197, "module-fipy.meshes.cylindricalGrid2D"], [198, "module-fipy.meshes.cylindricalNonUniformGrid1D"], [199, "module-fipy.meshes.cylindricalNonUniformGrid2D"], [200, "module-fipy.meshes.cylindricalUniformGrid1D"], [201, "module-fipy.meshes.cylindricalUniformGrid2D"], [202, "module-fipy.meshes.factoryMeshes"], [203, "module-fipy.meshes.gmshMesh"], [204, "module-fipy.meshes.grid1D"], [205, "module-fipy.meshes.grid2D"], [206, "module-fipy.meshes.grid3D"], [207, "module-fipy.meshes.mesh"], [208, "module-fipy.meshes.mesh1D"], [209, "module-fipy.meshes.mesh2D"], [210, "module-fipy.meshes.nonUniformGrid1D"], [211, "module-fipy.meshes.nonUniformGrid2D"], [212, "module-fipy.meshes.nonUniformGrid3D"], [213, "module-fipy.meshes.periodicGrid1D"], [214, "module-fipy.meshes.periodicGrid2D"], [215, "module-fipy.meshes.periodicGrid3D"], [216, "module-fipy.meshes.representations"], [217, "module-fipy.meshes.representations.abstractRepresentation"], [218, "module-fipy.meshes.representations.gridRepresentation"], [219, "module-fipy.meshes.representations.meshRepresentation"], [220, "module-fipy.meshes.skewedGrid2D"], [221, "module-fipy.meshes.sphericalNonUniformGrid1D"], [222, "module-fipy.meshes.sphericalUniformGrid1D"], [223, "module-fipy.meshes.test"], [224, "module-fipy.meshes.topologies"], [225, "module-fipy.meshes.topologies.abstractTopology"], [226, "module-fipy.meshes.topologies.gridTopology"], [227, "module-fipy.meshes.topologies.meshTopology"], [228, "module-fipy.meshes.tri2D"], [229, "module-fipy.meshes.uniformGrid"], [230, "module-fipy.meshes.uniformGrid1D"], [231, "module-fipy.meshes.uniformGrid2D"], [232, "module-fipy.solvers"], [233, "module-fipy.solvers.convergence"], [234, "module-fipy.solvers.petsc"], [235, "module-fipy.solvers.petsc.comms"], [236, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"], [237, "module-fipy.solvers.petsc.comms.petscCommWrapper"], [238, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"], [239, "module-fipy.solvers.petsc.dummySolver"], [240, "module-fipy.solvers.petsc.linearBicgSolver"], [241, "module-fipy.solvers.petsc.linearCGSSolver"], [242, "module-fipy.solvers.petsc.linearGMRESSolver"], [243, "module-fipy.solvers.petsc.linearLUSolver"], [244, "module-fipy.solvers.petsc.linearPCGSolver"], [245, "module-fipy.solvers.petsc.petscConvergence"], [246, "module-fipy.solvers.petsc.petscKrylovSolver"], [247, "module-fipy.solvers.petsc.petscSolver"], [248, "module-fipy.solvers.petsc.preconditioners"], [249, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"], [250, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"], [251, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"], [252, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"], [253, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"], [254, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"], [255, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"], [256, "module-fipy.solvers.preconditioner"], [257, "module-fipy.solvers.pyAMG"], [258, "module-fipy.solvers.pyAMG.linearCGSSolver"], [259, "module-fipy.solvers.pyAMG.linearGMRESSolver"], [260, "module-fipy.solvers.pyAMG.linearGeneralSolver"], [261, "module-fipy.solvers.pyAMG.linearLUSolver"], [262, "module-fipy.solvers.pyAMG.linearPCGSolver"], [263, "module-fipy.solvers.pyAMG.preconditioners"], [264, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"], [265, "module-fipy.solvers.pyamgx"], [266, "module-fipy.solvers.pyamgx.aggregationAMGSolver"], [267, "module-fipy.solvers.pyamgx.classicalAMGSolver"], [268, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"], [269, "module-fipy.solvers.pyamgx.linearFGMRESSolver"], [270, "module-fipy.solvers.pyamgx.linearGMRESSolver"], [271, "module-fipy.solvers.pyamgx.linearLUSolver"], [272, "module-fipy.solvers.pyamgx.linearPCGSolver"], [273, "module-fipy.solvers.pyamgx.preconditioners"], [274, "module-fipy.solvers.pyamgx.pyAMGXSolver"], [275, "module-fipy.solvers.pyamgx.pyamgxConvergence"], [276, "module-fipy.solvers.pyamgx.smoothers"], [277, "module-fipy.solvers.pysparse"], [278, "module-fipy.solvers.pysparse.linearCGSSolver"], [279, "module-fipy.solvers.pysparse.linearGMRESSolver"], [280, "module-fipy.solvers.pysparse.linearInitialSolver"], [281, "module-fipy.solvers.pysparse.linearJORSolver"], [282, "module-fipy.solvers.pysparse.linearLUSolver"], [283, "module-fipy.solvers.pysparse.linearPCGSolver"], [284, "module-fipy.solvers.pysparse.linearRHSSolver"], [285, "module-fipy.solvers.pysparse.preconditioners"], [286, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"], [287, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"], [288, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"], [289, "module-fipy.solvers.pysparse.pysparseConvergence"], [290, "module-fipy.solvers.pysparse.pysparseSolver"], [291, "module-fipy.solvers.pysparseMatrixSolver"], [292, "module-fipy.solvers.scipy"], [293, "module-fipy.solvers.scipy.linearBicgstabSolver"], [294, "module-fipy.solvers.scipy.linearCGSSolver"], [295, "module-fipy.solvers.scipy.linearGMRESSolver"], [296, "module-fipy.solvers.scipy.linearLUSolver"], [297, "module-fipy.solvers.scipy.linearPCGSolver"], [298, "module-fipy.solvers.scipy.preconditioners"], [299, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"], [300, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"], [301, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"], [302, "module-fipy.solvers.scipy.scipyConvergence"], [303, "module-fipy.solvers.scipy.scipyKrylovSolver"], [304, "module-fipy.solvers.scipy.scipySolver"], [305, "module-fipy.solvers.solver"], [306, "module-fipy.solvers.test"], [307, "module-fipy.solvers.trilinos"], [308, "module-fipy.solvers.trilinos.aztecConvergence"], [309, "module-fipy.solvers.trilinos.comms"], [310, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"], [311, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"], [312, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"], [313, "module-fipy.solvers.trilinos.linearBicgstabSolver"], [314, "module-fipy.solvers.trilinos.linearCGSSolver"], [315, "module-fipy.solvers.trilinos.linearGMRESSolver"], [316, "module-fipy.solvers.trilinos.linearLUSolver"], [317, "module-fipy.solvers.trilinos.linearPCGSolver"], [318, "module-fipy.solvers.trilinos.preconditioners"], [319, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"], [320, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"], [321, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"], [322, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"], [323, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"], [324, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"], [325, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"], [326, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"], [327, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"], [328, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"], [329, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"], [330, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"], [331, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"], [332, "module-fipy.solvers.trilinos.trilinosMLTest"], [333, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"], [334, "module-fipy.solvers.trilinos.trilinosSolver"], [335, "module-fipy.steppers"], [336, "module-fipy.steppers.pidStepper"], [337, "module-fipy.steppers.pseudoRKQSStepper"], [338, "module-fipy.steppers.stepper"], [339, "module-fipy.terms"], [340, "module-fipy.terms.abstractBinaryTerm"], [341, "module-fipy.terms.abstractConvectionTerm"], [342, "module-fipy.terms.abstractDiffusionTerm"], [343, "module-fipy.terms.abstractUpwindConvectionTerm"], [344, "module-fipy.terms.advectionTerm"], [345, "module-fipy.terms.asymmetricConvectionTerm"], [346, "module-fipy.terms.binaryTerm"], [347, "module-fipy.terms.cellTerm"], [348, "module-fipy.terms.centralDiffConvectionTerm"], [349, "module-fipy.terms.coupledBinaryTerm"], [350, "module-fipy.terms.diffusionTerm"], [351, "module-fipy.terms.diffusionTermCorrection"], [352, "module-fipy.terms.diffusionTermNoCorrection"], [353, "module-fipy.terms.explicitDiffusionTerm"], [354, "module-fipy.terms.explicitSourceTerm"], [355, "module-fipy.terms.explicitUpwindConvectionTerm"], [356, "module-fipy.terms.exponentialConvectionTerm"], [357, "module-fipy.terms.faceTerm"], [358, "module-fipy.terms.firstOrderAdvectionTerm"], [359, "module-fipy.terms.hybridConvectionTerm"], [360, "module-fipy.terms.implicitDiffusionTerm"], [361, "module-fipy.terms.implicitSourceTerm"], [362, "module-fipy.terms.nonDiffusionTerm"], [363, "module-fipy.terms.powerLawConvectionTerm"], [364, "module-fipy.terms.residualTerm"], [365, "module-fipy.terms.sourceTerm"], [366, "module-fipy.terms.term"], [367, "module-fipy.terms.test"], [368, "module-fipy.terms.transientTerm"], [369, "module-fipy.terms.unaryTerm"], [370, "module-fipy.terms.upwindConvectionTerm"], [371, "module-fipy.terms.vanLeerConvectionTerm"], [372, "module-fipy.testFiPy"], [373, "module-fipy.tests"], [374, "module-fipy.tests.doctestPlus"], [375, "module-fipy.tests.lateImportTest"], [376, "module-fipy.tests.test"], [377, "module-fipy.tests.testProgram"], [378, "module-fipy.tools"], [379, "module-fipy.tools.comms"], [380, "module-fipy.tools.comms.commWrapper"], [381, "module-fipy.tools.comms.dummyComm"], [382, "module-fipy.tools.debug"], [383, "module-fipy.tools.decorators"], [384, "module-fipy.tools.dimensions"], [385, "module-fipy.tools.dimensions.DictWithDefault"], [386, "module-fipy.tools.dimensions.NumberDict"], [387, "module-fipy.tools.dimensions.physicalField"], [388, "module-fipy.tools.dump"], [389, "module-fipy.tools.inline"], [390, "module-fipy.tools.logging"], [391, "module-fipy.tools.logging.environment"], [392, "module-fipy.tools.numerix"], [393, "module-fipy.tools.parser"], [394, "module-fipy.tools.sharedtempfile"], [395, "module-fipy.tools.test"], [396, "module-fipy.tools.vector"], [397, "module-fipy.tools.version"], [398, "module-fipy.variables"], [399, "module-fipy.variables.addOverFacesVariable"], [400, "module-fipy.variables.arithmeticCellToFaceVariable"], [401, "module-fipy.variables.betaNoiseVariable"], [402, "module-fipy.variables.binaryOperatorVariable"], [403, "module-fipy.variables.cellToFaceVariable"], [404, "module-fipy.variables.cellVariable"], [405, "module-fipy.variables.constant"], [406, "module-fipy.variables.constraintMask"], [407, "module-fipy.variables.coupledCellVariable"], [408, "module-fipy.variables.distanceVariable"], [409, "module-fipy.variables.exponentialNoiseVariable"], [410, "module-fipy.variables.faceGradContributionsVariable"], [411, "module-fipy.variables.faceGradVariable"], [412, "module-fipy.variables.faceVariable"], [413, "module-fipy.variables.gammaNoiseVariable"], [414, "module-fipy.variables.gaussCellGradVariable"], [415, "module-fipy.variables.gaussianNoiseVariable"], [416, "module-fipy.variables.harmonicCellToFaceVariable"], [417, "module-fipy.variables.histogramVariable"], [418, "module-fipy.variables.interfaceAreaVariable"], [419, "module-fipy.variables.interfaceFlagVariable"], [420, "module-fipy.variables.leastSquaresCellGradVariable"], [421, "module-fipy.variables.levelSetDiffusionVariable"], [422, "module-fipy.variables.meshVariable"], [423, "module-fipy.variables.minmodCellToFaceVariable"], [424, "module-fipy.variables.modCellGradVariable"], [425, "module-fipy.variables.modCellToFaceVariable"], [426, "module-fipy.variables.modFaceGradVariable"], [427, "module-fipy.variables.modPhysicalField"], [428, "module-fipy.variables.modularVariable"], [429, "module-fipy.variables.noiseVariable"], [430, "module-fipy.variables.operatorVariable"], [431, "module-fipy.variables.scharfetterGummelFaceVariable"], [432, "module-fipy.variables.surfactantConvectionVariable"], [433, "module-fipy.variables.surfactantVariable"], [434, "module-fipy.variables.test"], [435, "module-fipy.variables.unaryOperatorVariable"], [436, "module-fipy.variables.uniformNoiseVariable"], [437, "module-fipy.variables.variable"], [438, "module-fipy.viewers"], [439, "module-fipy.viewers.matplotlibViewer"], [440, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"], [441, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"], [442, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"], [443, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"], [444, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"], [445, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"], [446, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"], [447, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"], [448, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"], [449, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"], [450, "module-fipy.viewers.matplotlibViewer.test"], [451, "module-fipy.viewers.mayaviViewer"], [452, "module-fipy.viewers.mayaviViewer.mayaviClient"], [453, "module-fipy.viewers.mayaviViewer.mayaviDaemon"], [454, "module-fipy.viewers.mayaviViewer.test"], [455, "module-fipy.viewers.multiViewer"], [456, "module-fipy.viewers.test"], [457, "module-fipy.viewers.testinteractive"], [458, "module-fipy.viewers.tsvViewer"], [459, "module-fipy.viewers.viewer"], [460, "module-fipy.viewers.vtkViewer"], [461, "module-fipy.viewers.vtkViewer.test"], [462, "module-fipy.viewers.vtkViewer.vtkCellViewer"], [463, "module-fipy.viewers.vtkViewer.vtkFaceViewer"], [464, "module-fipy.viewers.vtkViewer.vtkViewer"], [473, "module-package"], [474, "module-package.subpackage"], [475, "module-package.subpackage.base"], [476, "module-package.subpackage.object"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnhilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnhilliard.mesh2d": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnhilliard.mesh2dcoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnhilliard.mesh3d": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnhilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnhilliard.spheredaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "cellvariable": [[36, "index-1"], [53, "index-1"], [81, "index-1"], [107, "index-1"], [124, "index-5"], [145, "index-1"], [146, "index-1"], [147, "index-1"], [149, "index-2"], [150, "index-1"], [156, "index-1"], [157, "index-1"], [168, "index-2"], [168, "index-9"]], "defaultsolver": [[36, "index-3"]], "grid2d": [[36, "index-0"], [78, "index-0"], [79, "index-0"], [107, "index-0"], [116, "index-0"], [117, "index-0"], [124, "index-2"], [145, "index-0"], [149, "index-1"], [168, "index-0"]], "linearlusolver": [[36, "index-3"], [147, "index-7"], [168, "index-3"]], "nthorderboundarycondition": [[36, "index-2"], [81, "index-2"]], "examples.cahnhilliard.tanh1d": [[36, "module-examples.cahnHilliard.tanh1D"]], "exp": [[36, "index-4"], [46, "index-1"], [47, "index-0"], [48, "index-1"], [53, "index-3"], [56, "index-1"], [57, "index-0"], [124, "index-1"], [146, "index-4"], [147, "index-3"], [149, "index-5"], [150, "index-3"]], "fipy.viewers": [[36, "index-5"], [46, "index-2"], [47, "index-1"], [48, "index-2"], [53, "index-4"], [56, "index-2"], [57, "index-1"], [77, "index-1"], [78, "index-1"], [79, "index-1"], [81, "index-3"], [107, "index-2"], [145, "index-4"], [146, "index-7"], [147, "index-6"], [149, "index-6"], [150, "index-4"], [157, "index-2"], [168, "index-11"], [438, "module-fipy.viewers"]], "sqrt": [[36, "index-4"], [69, "index-3"], [70, "index-3"], [124, "index-1"], [149, "index-1"], [157, "index-3"]], "examples.cahnhilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2d": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.exponential1d": [[45, "module-examples.convection.exponential1D"]], "grid1d": [[46, "index-0"], [48, "index-0"], [53, "index-0"], [56, "index-0"], [81, "index-0"], [112, "index-0"], [146, "index-0"], [147, "index-0"], [150, "index-0"], [156, "index-0"], [157, "index-0"], [168, "index-7"]], "examples.convection.exponential1d.cylindricalmesh1d": [[46, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1d.cylindricalmesh1dnonuniform": [[47, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1d.mesh1d": [[48, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1d.tri2d": [[49, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1dback": [[50, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1dback.mesh1d": [[51, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1dsource": [[52, "module-examples.convection.exponential1DSource"]], "defaultasymmetricsolver": [[53, "index-2"], [156, "index-5"]], "examples.convection.exponential1dsource.mesh1d": [[53, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1dsource.tri2d": [[54, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2d": [[55, "module-examples.convection.exponential2D"]], "examples.convection.exponential2d.cylindricalmesh2d": [[56, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2d.cylindricalmesh2dnonuniform": [[57, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2d.mesh2d": [[58, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2d.tri2d": [[59, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[60, "module-examples.convection.peclet"]], "examples.convection.powerlaw1d": [[61, "module-examples.convection.powerLaw1D"]], "examples.convection.powerlaw1d.mesh1d": [[62, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerlaw1d.tri2d": [[63, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[64, "module-examples.convection.robin"]], "examples.convection.source": [[65, "module-examples.convection.source"]], "examples.convection.test": [[66, "module-examples.convection.test"]], "examples.diffusion": [[67, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[68, "module-examples.diffusion.anisotropy"]], "arcsin; cos": [[69, "index-3"], [70, "index-3"]], "examples.diffusion.circle": [[69, "module-examples.diffusion.circle"]], "fipy.terms.implicitdiffusionterm.diffusionterm": [[69, "index-1"], [70, "index-1"]], "fipy.terms.transientterm.transientterm": [[69, "index-1"], [70, "index-1"]], "fipy.variables.cellvariable.cellvariable": [[69, "index-0"], [70, "index-0"]], "fipy.viewers.tsvviewer.tsvviewer": [[69, "index-2"], [70, "index-2"]], "object": [[69, "index-0"], [69, "index-1"], [69, "index-2"], [70, "index-0"], [70, "index-1"], [70, "index-2"]], "scipy": [[69, "index-3"], [70, "index-3"], [146, "index-6"], [147, "index-5"], [157, "index-8"], [465, "term-SciPy"]], "examples.diffusion.circlequad": [[70, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[71, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[72, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[73, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1d": [[74, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[75, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[76, "module-examples.diffusion.explicit.test"]], "explicitdiffusionterm": [[77, "index-0"], [145, "index-3"], [149, "index-4"], [150, "index-2"]], "facevariable": [[77, "index-2"]], "transientterm": [[77, "index-0"], [145, "index-3"], [149, "index-4"], [150, "index-2"], [157, "index-4"]], "examples.diffusion.mesh1d": [[77, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[78, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20coupled": [[79, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthorder": [[80, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthorder.input4thorder1d": [[81, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthorder.test": [[82, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadystate": [[83, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadystate.mesh1d": [[84, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadystate.mesh1d.inputperiodic": [[85, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadystate.mesh20x20": [[86, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadystate.mesh20x20.gmshinput": [[87, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadystate.mesh20x20.isotropy": [[88, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadystate.mesh20x20.modifiedmeshinput": [[89, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadystate.mesh20x20.orthoerror": [[90, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadystate.mesh50x50": [[91, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadystate.othermeshes": [[92, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadystate.othermeshes.prism": [[93, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadystate.test": [[94, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[95, "module-examples.diffusion.test"]], "examples.elphf": [[96, "module-examples.elphf"]], "examples.elphf.diffusion": [[97, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1d": [[98, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1ddimensional": [[99, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2d": [[100, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[101, "module-examples.elphf.input"]], "examples.elphf.phase": [[102, "module-examples.elphf.phase"]], "examples.elphf.phasediffusion": [[103, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[104, "module-examples.elphf.poisson"]], "examples.elphf.test": [[105, "module-examples.elphf.test"]], "examples.flow": [[106, "module-examples.flow"]], "rhsvector": [[107, "index-3"]], "cachematrix": [[107, "index-3"]], "cacherhsvector": [[107, "index-3"]], "examples.flow.stokescavity": [[107, "module-examples.flow.stokesCavity"]], "matrix": [[107, "index-3"]], "sweep": [[107, "index-3"], [147, "index-7"], [157, "index-7"]], "examples.flow.test": [[108, "module-examples.flow.test"]], "examples.levelset": [[109, "module-examples.levelSet"]], "examples.levelset.advection": [[110, "module-examples.levelSet.advection"]], "examples.levelset.advection.circle": [[111, "module-examples.levelSet.advection.circle"]], "examples.levelset.advection.mesh1d": [[112, "module-examples.levelSet.advection.mesh1D"]], "examples.levelset.advection.test": [[113, "module-examples.levelSet.advection.test"]], "examples.levelset.advection.trench": [[114, "module-examples.levelSet.advection.trench"]], "examples.levelset.distancefunction": [[115, "module-examples.levelSet.distanceFunction"]], "examples.levelset.distancefunction.circle": [[116, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelset.distancefunction.mesh1d": [[117, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelset.distancefunction.test": [[118, "module-examples.levelSet.distanceFunction.test"]], "examples.levelset.electrochem": [[119, "module-examples.levelSet.electroChem"]], "examples.levelset.electrochem.adsorbingsurfactantequation": [[120, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelset.electrochem.gapfilldistancevariable": [[121, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelset.electrochem.gapfillmesh": [[122, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelset.electrochem.gold": [[123, "module-examples.levelSet.electroChem.gold"]], "gmsh": [[123, "index-1"], [125, "index-1"], [130, "index-1"], [465, "term-Gmsh"]], "rungold": [[123, "index-0"]], "advectionterm": [[124, "index-6"]], "distancevariable": [[124, "index-3"]], "mayavisurfactantviewer": [[124, "index-7"]], "surfactantvariable": [[124, "index-4"]], "examples.levelset.electrochem.howtowriteascript": [[124, "module-examples.levelSet.electroChem.howToWriteAScript"]], "fipy.tools.parser": [[124, "index-0"], [149, "index-0"], [393, "module-fipy.tools.parser"]], "loadtxt": [[124, "index-8"], [145, "index-5"], [149, "index-7"], [150, "index-6"]], "examples.levelset.electrochem.leveler": [[125, "module-examples.levelSet.electroChem.leveler"]], "runleveler": [[125, "index-0"]], "examples.levelset.electrochem.lines": [[126, "module-examples.levelSet.electroChem.lines"]], "matplotlibsurfactantviewer (class in examples.levelset.electrochem.matplotlibsurfactantviewer)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer"]], "axes (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.axes"]], "cmap (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.cmap"]], "colorbar (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.colorbar"]], "examples.levelset.electrochem.matplotlibsurfactantviewer": [[127, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "fig (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.fig"]], "id (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.id"]], "log (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.log"]], "plot() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plot"]], "plotmesh() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.title"]], "vars (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[127, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.vars"]], "mayavisurfactantviewer (class in examples.levelset.electrochem.mayavisurfactantviewer)": [[128, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer"]], "examples.levelset.electrochem.mayavisurfactantviewer": [[128, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "plotmesh() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[128, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[128, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[128, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.title"]], "vars (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[128, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.vars"]], "examples.levelset.electrochem.metaliondiffusionequation": [[129, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelset.electrochem.simpletrenchsystem": [[130, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "runsimpletrenchsystem": [[130, "index-0"]], "examples.levelset.electrochem.surfactantbulkdiffusionequation": [[131, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelset.electrochem.test": [[132, "module-examples.levelSet.electroChem.test"]], "examples.levelset.electrochem.trenchmesh": [[133, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelset.surfactant": [[134, "module-examples.levelSet.surfactant"]], "examples.levelset.surfactant.test": [[135, "module-examples.levelSet.surfactant.test"]], "examples.levelset.test": [[136, "module-examples.levelSet.test"]], "examples.meshing": [[137, "module-examples.meshing"]], "examples.meshing.gmshrefinement": [[138, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputgrid2d": [[139, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[140, "module-examples.meshing.sphere"]], "examples.meshing.test": [[141, "module-examples.meshing.test"]], "examples.parallel": [[142, "module-examples.parallel"]], "examples.phase": [[143, "module-examples.phase"]], ":math:`\\pi`": [[144, "index-0"], [145, "index-2"], [149, "index-3"], [150, "index-5"]], "arctan": [[144, "index-0"], [145, "index-2"]], "arctan2": [[144, "index-0"], [145, "index-2"]], "examples.phase.anisotropy": [[144, "module-examples.phase.anisotropy"]], "pi": [[144, "index-0"], [145, "index-2"], [149, "index-3"], [150, "index-5"]], "tan": [[144, "index-0"], [145, "index-2"]], "implicitsourceterm": [[145, "index-3"], [149, "index-4"], [150, "index-2"], [157, "index-5"]], "allclose": [[145, "index-5"], [156, "index-6"]], "examples.phase.anisotropyold": [[145, "module-examples.phase.anisotropyOLD"]], "powerlawconvectionterm": [[146, "index-3"], [156, "index-3"]], "variable": [[146, "index-2"], [147, "index-2"], [157, "index-6"]], "array": [[146, "index-5"], [147, "index-4"]], "examples.phase.binary": [[146, "module-examples.phase.binary"]], "log": [[146, "index-5"], [147, "index-4"], [156, "index-2"]], "examples.phase.binarycoupled": [[147, "module-examples.phase.binaryCoupled"]], "solve": [[147, "index-7"]], "examples.phase.impingement": [[148, "module-examples.phase.impingement"]], "modularvariable": [[149, "index-3"]], "examples.phase.impingement.mesh20x20": [[149, "module-examples.phase.impingement.mesh20x20"]], "fipy.tools.dump": [[149, "index-8"], [388, "module-fipy.tools.dump"]], "examples.phase.impingement.mesh40x1": [[150, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[151, "module-examples.phase.impingement.test"]], "examples.phase.missorientation": [[152, "module-examples.phase.missOrientation"]], "examples.phase.missorientation.test": [[153, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[154, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalcoupled": [[155, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[156, "module-examples.phase.quaternary"]], "viewers": [[156, "index-4"]], "examples.phase.simple": [[157, "module-examples.phase.simple"]], "tanh": [[157, "index-3"]], "examples.phase.symmetry": [[158, "module-examples.phase.symmetry"]], "examples.phase.test": [[159, "module-examples.phase.test"]], "examples.reactivewetting": [[160, "module-examples.reactiveWetting"]], "examples.reactivewetting.liquidvapor1d": [[161, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactivewetting.liquidvapor2d": [[162, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactivewetting.test": [[163, "module-examples.reactiveWetting.test"]], "examples.riemann": [[164, "module-examples.riemann"]], "examples.riemann.test": [[165, "module-examples.riemann.test"]], "examples.test": [[166, "module-examples.test"]], "examples.updating": [[167, "module-examples.updating"]], "exponentialconvectionterm": [[168, "index-3"]], "fixedflux": [[168, "index-1"]], "fixedvalue": [[168, "index-1"], [168, "index-8"]], "gist1dviewer": [[168, "index-10"]], "grid2dgistviewer": [[168, "index-6"]], "iterator": [[168, "index-4"]], "steadyconvectiondiffusionscequation": [[168, "index-3"]], "examples.updating.update0_1to1_0": [[168, "module-examples.updating.update0_1to1_0"]], "fipy.numerix": [[168, "index-5"]], "examples.updating.update1_0to2_0": [[169, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[170, "module-examples.updating.update2_0to3_0"]], "doctest_raw_input() (in module fipy)": [[171, "fipy.doctest_raw_input"]], "fipy": [[171, "module-fipy"], [465, "term-FiPy"]], "test() (in module fipy)": [[171, "fipy.test"]], "fipy.boundaryconditions": [[172, "module-fipy.boundaryConditions"]], "boundarycondition (class in fipy.boundaryconditions.boundarycondition)": [[173, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition"]], "__repr__() (fipy.boundaryconditions.boundarycondition.boundarycondition method)": [[173, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition.__repr__"]], "fipy.boundaryconditions.boundarycondition": [[173, "module-fipy.boundaryConditions.boundaryCondition"]], "constraint (class in fipy.boundaryconditions.constraint)": [[174, "fipy.boundaryConditions.constraint.Constraint"]], "__repr__() (fipy.boundaryconditions.constraint.constraint method)": [[174, "fipy.boundaryConditions.constraint.Constraint.__repr__"]], "fipy.boundaryconditions.constraint": [[174, "module-fipy.boundaryConditions.constraint"]], "fixedflux (class in fipy.boundaryconditions.fixedflux)": [[175, "fipy.boundaryConditions.fixedFlux.FixedFlux"]], "__repr__() (fipy.boundaryconditions.fixedflux.fixedflux method)": [[175, "fipy.boundaryConditions.fixedFlux.FixedFlux.__repr__"]], "fipy.boundaryconditions.fixedflux": [[175, "module-fipy.boundaryConditions.fixedFlux"]], "fixedvalue (class in fipy.boundaryconditions.fixedvalue)": [[176, "fipy.boundaryConditions.fixedValue.FixedValue"]], "__repr__() (fipy.boundaryconditions.fixedvalue.fixedvalue method)": [[176, "fipy.boundaryConditions.fixedValue.FixedValue.__repr__"]], "fipy.boundaryconditions.fixedvalue": [[176, "module-fipy.boundaryConditions.fixedValue"]], "nthorderboundarycondition (class in fipy.boundaryconditions.nthorderboundarycondition)": [[177, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition"]], "__repr__() (fipy.boundaryconditions.nthorderboundarycondition.nthorderboundarycondition method)": [[177, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition.__repr__"]], "fipy.boundaryconditions.nthorderboundarycondition": [[177, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryconditions.test": [[178, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[179, "module-fipy.matrices"]], "offsetsparsematrix() (in module fipy.matrices.offsetsparsematrix)": [[180, "fipy.matrices.offsetSparseMatrix.OffsetSparseMatrix"]], "fipy.matrices.offsetsparsematrix": [[180, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscmatrix": [[181, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparsematrix": [[182, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipymatrix": [[183, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparsematrix": [[184, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[185, "module-fipy.matrices.test"]], "fipy.matrices.trilinosmatrix": [[186, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[187, "module-fipy.meshes"]], "abstractmesh (class in fipy.meshes.abstractmesh)": [[188, "fipy.meshes.abstractMesh.AbstractMesh"]], "meshadditionerror": [[188, "fipy.meshes.abstractMesh.MeshAdditionError"], [207, "fipy.meshes.mesh.MeshAdditionError"]], "vtkcelldataset (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.abstractmesh.abstractmesh method)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.__add__"]], "__cause__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.abstractmesh.abstractmesh method)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.__div__"]], "__getattribute__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.abstractmesh.abstractmesh method)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.__getstate__"]], "__radd__() (fipy.meshes.abstractmesh.abstractmesh method)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.__radd__"]], "__reduce__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.abstractmesh.abstractmesh method)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.__repr__"]], "__repr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__repr__"]], "__setattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.abstractmesh.abstractmesh method)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.__sub__"]], "__truediv__() (fipy.meshes.abstractmesh.abstractmesh method)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.__truediv__"]], "add_note() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.aspect2D"]], "cellcenters (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.cellCenters"]], "cellfaceids (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.cellFaceIDs"]], "facesback (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesBack"]], "facesbottom (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesBottom"]], "facesdown (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesDown"]], "facesfront (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesFront"]], "facesleft (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesLeft"]], "facesright (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesRight"]], "facestop (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesTop"]], "facesup (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.facesUp"]], "fipy.meshes.abstractmesh": [[188, "module-fipy.meshes.abstractMesh"]], "with_traceback() (fipy.meshes.abstractmesh.meshadditionerror method)": [[188, "fipy.meshes.abstractMesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.x"]], "y (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.y"]], "z (fipy.meshes.abstractmesh.abstractmesh property)": [[188, "fipy.meshes.abstractMesh.AbstractMesh.z"]], "fipy.meshes.builders": [[189, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractgridbuilder": [[190, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1dbuilder": [[191, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2dbuilder": [[192, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3dbuilder": [[193, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicgrid1dbuilder": [[194, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityclasses": [[195, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalgrid1d": [[196, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalgrid2d": [[197, "module-fipy.meshes.cylindricalGrid2D"]], "cylindricalnonuniformgrid1d (class in fipy.meshes.cylindricalnonuniformgrid1d)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid1d": [[198, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "x (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[198, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.z"]], "cylindricalnonuniformgrid2d (class in fipy.meshes.cylindricalnonuniformgrid2d)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.extrude"]], "facesback (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid2d": [[199, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "x (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[199, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.z"]], "cylindricaluniformgrid1d (class in fipy.meshes.cylindricaluniformgrid1d)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesUp"]], "fipy.meshes.cylindricaluniformgrid1d": [[200, "module-fipy.meshes.cylindricalUniformGrid1D"]], "x (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.x"]], "y (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.y"]], "z (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[200, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.z"]], "cylindricaluniformgrid2d (class in fipy.meshes.cylindricaluniformgrid2d)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesUp"]], "fipy.meshes.cylindricaluniformgrid2d": [[201, "module-fipy.meshes.cylindricalUniformGrid2D"]], "x (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.x"]], "y (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.y"]], "z (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[201, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.z"]], "cylindricalgrid1d() (in module fipy.meshes.factorymeshes)": [[202, "fipy.meshes.factoryMeshes.CylindricalGrid1D"]], "cylindricalgrid2d() (in module fipy.meshes.factorymeshes)": [[202, "fipy.meshes.factoryMeshes.CylindricalGrid2D"]], "grid1d() (in module fipy.meshes.factorymeshes)": [[202, "fipy.meshes.factoryMeshes.Grid1D"]], "grid2d() (in module fipy.meshes.factorymeshes)": [[202, "fipy.meshes.factoryMeshes.Grid2D"]], "grid3d() (in module fipy.meshes.factorymeshes)": [[202, "fipy.meshes.factoryMeshes.Grid3D"]], "sphericalgrid1d() (in module fipy.meshes.factorymeshes)": [[202, "fipy.meshes.factoryMeshes.SphericalGrid1D"]], "fipy.meshes.factorymeshes": [[202, "module-fipy.meshes.factoryMeshes"]], "gmsh2d (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.Gmsh2D"]], "gmsh2din3dspace (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace"]], "gmsh3d (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.Gmsh3D"]], "gmshexception": [[203, "fipy.meshes.gmshMesh.GmshException"]], "gmshfile (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.GmshFile"]], "gmshgrid2d (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D"]], "gmshgrid3d (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D"]], "mshfile (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.MSHFile"]], "meshexporterror": [[203, "fipy.meshes.gmshMesh.MeshExportError"]], "posfile (class in fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.POSFile"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__add__"]], "__cause__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[203, "fipy.meshes.gmshMesh.GmshException.__cause__"]], "__cause__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__cause__"]], "__context__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[203, "fipy.meshes.gmshMesh.GmshException.__context__"]], "__context__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__context__"]], "__delattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.__delattr__"]], "__delattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__delattr__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__div__"]], "__getattribute__() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.__getattribute__"]], "__getattribute__() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__getattribute__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__getstate__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__mul__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__radd__"]], "__reduce__() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.__reduce__"]], "__reduce__() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__reduce__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__repr__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__rmul__"]], "__setattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.__setattr__"]], "__setattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__setattr__"]], "__str__() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.__str__"]], "__str__() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.__str__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__sub__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh3d method)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.__truediv__"]], "add_note() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.add_note"]], "add_note() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.add_note"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.aspect2D"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.cellFaceIDs"]], "extrude() (fipy.meshes.gmshmesh.gmsh2d method)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.extrude"]], "facesback (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesBack"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesBottom"]], "facesdown (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesDown"]], "facesfront (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesFront"]], "facesleft (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesLeft"]], "facesright (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesRight"]], "facestop (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesTop"]], "facesup (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.facesUp"]], "fipy.meshes.gmshmesh": [[203, "module-fipy.meshes.gmshMesh"]], "gmshversion() (in module fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.gmshVersion"]], "makemapvariables() (fipy.meshes.gmshmesh.mshfile method)": [[203, "fipy.meshes.gmshMesh.MSHFile.makeMapVariables"]], "openmshfile() (in module fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.openMSHFile"]], "openposfile() (in module fipy.meshes.gmshmesh)": [[203, "fipy.meshes.gmshMesh.openPOSFile"]], "read() (fipy.meshes.gmshmesh.mshfile method)": [[203, "fipy.meshes.gmshMesh.MSHFile.read"]], "with_traceback() (fipy.meshes.gmshmesh.gmshexception method)": [[203, "fipy.meshes.gmshMesh.GmshException.with_traceback"]], "with_traceback() (fipy.meshes.gmshmesh.meshexporterror method)": [[203, "fipy.meshes.gmshMesh.MeshExportError.with_traceback"]], "x (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.x"]], "x (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.x"]], "x (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.x"]], "y (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.y"]], "y (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.y"]], "y (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.y"]], "z (fipy.meshes.gmshmesh.gmsh2d property)": [[203, "fipy.meshes.gmshMesh.Gmsh2D.z"]], "z (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[203, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.z"]], "z (fipy.meshes.gmshmesh.gmsh3d property)": [[203, "fipy.meshes.gmshMesh.Gmsh3D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid2d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid2D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid3d property)": [[203, "fipy.meshes.gmshMesh.GmshGrid3D.z"]], "fipy.meshes.grid1d": [[204, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2d": [[205, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3d": [[206, "module-fipy.meshes.grid3D"]], "mesh (class in fipy.meshes.mesh)": [[207, "fipy.meshes.mesh.Mesh"]], "vtkcelldataset (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__add__"]], "__cause__ (fipy.meshes.mesh.meshadditionerror attribute)": [[207, "fipy.meshes.mesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.mesh.meshadditionerror attribute)": [[207, "fipy.meshes.mesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__div__"]], "__getattribute__() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__getstate__"]], "__mul__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__mul__"]], "__radd__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__radd__"]], "__reduce__() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__repr__"]], "__repr__() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.__repr__"]], "__rmul__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__rmul__"]], "__setattr__() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__sub__"]], "__truediv__() (fipy.meshes.mesh.mesh method)": [[207, "fipy.meshes.mesh.Mesh.__truediv__"]], "add_note() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.aspect2D"]], "cellcenters (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.cellCenters"]], "cellfaceids (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.cellFaceIDs"]], "facesback (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesBack"]], "facesbottom (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesBottom"]], "facesdown (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesDown"]], "facesfront (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesFront"]], "facesleft (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesLeft"]], "facesright (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesRight"]], "facestop (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesTop"]], "facesup (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.facesUp"]], "fipy.meshes.mesh": [[207, "module-fipy.meshes.mesh"]], "with_traceback() (fipy.meshes.mesh.meshadditionerror method)": [[207, "fipy.meshes.mesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.x"]], "y (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.y"]], "z (fipy.meshes.mesh.mesh property)": [[207, "fipy.meshes.mesh.Mesh.z"]], "mesh1d (class in fipy.meshes.mesh1d)": [[208, "fipy.meshes.mesh1D.Mesh1D"]], "vtkcelldataset (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__add__"]], "__div__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__div__"]], "__getstate__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__getstate__"]], "__mul__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__mul__"]], "__radd__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__radd__"]], "__repr__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__repr__"]], "__rmul__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__rmul__"]], "__sub__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__sub__"]], "__truediv__() (fipy.meshes.mesh1d.mesh1d method)": [[208, "fipy.meshes.mesh1D.Mesh1D.__truediv__"]], "aspect2d (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.aspect2D"]], "cellcenters (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.cellCenters"]], "cellfaceids (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.cellFaceIDs"]], "facesback (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesBack"]], "facesbottom (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesBottom"]], "facesdown (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesDown"]], "facesfront (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesFront"]], "facesleft (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesLeft"]], "facesright (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesRight"]], "facestop (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesTop"]], "facesup (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.facesUp"]], "fipy.meshes.mesh1d": [[208, "module-fipy.meshes.mesh1D"]], "x (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.x"]], "y (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.y"]], "z (fipy.meshes.mesh1d.mesh1d property)": [[208, "fipy.meshes.mesh1D.Mesh1D.z"]], "mesh2d (class in fipy.meshes.mesh2d)": [[209, "fipy.meshes.mesh2D.Mesh2D"]], "vtkcelldataset (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__add__"]], "__div__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__div__"]], "__getstate__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__getstate__"]], "__mul__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__mul__"]], "__radd__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__radd__"]], "__repr__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__repr__"]], "__rmul__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__rmul__"]], "__sub__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__sub__"]], "__truediv__() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.__truediv__"]], "aspect2d (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.aspect2D"]], "cellcenters (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.cellCenters"]], "cellfaceids (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.cellFaceIDs"]], "extrude() (fipy.meshes.mesh2d.mesh2d method)": [[209, "fipy.meshes.mesh2D.Mesh2D.extrude"]], "facesback (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesBack"]], "facesbottom (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesBottom"]], "facesdown (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesDown"]], "facesfront (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesFront"]], "facesleft (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesLeft"]], "facesright (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesRight"]], "facestop (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesTop"]], "facesup (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.facesUp"]], "fipy.meshes.mesh2d": [[209, "module-fipy.meshes.mesh2D"]], "x (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.x"]], "y (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.y"]], "z (fipy.meshes.mesh2d.mesh2d property)": [[209, "fipy.meshes.mesh2D.Mesh2D.z"]], "nonuniformgrid1d (class in fipy.meshes.nonuniformgrid1d)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesUp"]], "fipy.meshes.nonuniformgrid1d": [[210, "module-fipy.meshes.nonUniformGrid1D"]], "x (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.x"]], "y (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.y"]], "z (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[210, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.z"]], "nonuniformgrid2d (class in fipy.meshes.nonuniformgrid2d)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.extrude"]], "facesback (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesUp"]], "fipy.meshes.nonuniformgrid2d": [[211, "module-fipy.meshes.nonUniformGrid2D"]], "x (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.x"]], "y (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.y"]], "z (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[211, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.z"]], "nonuniformgrid3d (class in fipy.meshes.nonuniformgrid3d)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesUp"]], "fipy.meshes.nonuniformgrid3d": [[212, "module-fipy.meshes.nonUniformGrid3D"]], "x (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.x"]], "y (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.y"]], "z (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[212, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.z"]], "periodicgrid1d (class in fipy.meshes.periodicgrid1d)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D"]], "vtkcelldataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__add__"]], "__div__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__div__"]], "__getstate__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__mul__"]], "__radd__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__radd__"]], "__repr__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBack"]], "facesbottom (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBottom"]], "facesdown (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesDown"]], "facesfront (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesFront"]], "facesleft (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesLeft"]], "facesright (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesRight"]], "facestop (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesTop"]], "facesup (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesUp"]], "fipy.meshes.periodicgrid1d": [[213, "module-fipy.meshes.periodicGrid1D"]], "x (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.x"]], "y (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.y"]], "z (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[213, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.z"]], "periodicgrid2d (class in fipy.meshes.periodicgrid2d)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D"]], "periodicgrid2dleftright (class in fipy.meshes.periodicgrid2d)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight"]], "periodicgrid2dtopbottom (class in fipy.meshes.periodicgrid2d)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__add__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__div__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__mul__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__radd__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellFaceIDs"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.extrude"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBack"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBottom"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesDown"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesFront"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesLeft"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesRight"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesTop"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesUp"]], "fipy.meshes.periodicgrid2d": [[214, "module-fipy.meshes.periodicGrid2D"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.x"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.y"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[214, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.z"]], "periodicgrid3d (class in fipy.meshes.periodicgrid3d)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D"]], "periodicgrid3dfrontback (class in fipy.meshes.periodicgrid3d)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack"]], "periodicgrid3dleftright (class in fipy.meshes.periodicgrid3d)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight"]], "periodicgrid3dleftrightfrontback (class in fipy.meshes.periodicgrid3d)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack"]], "periodicgrid3dleftrighttopbottom (class in fipy.meshes.periodicgrid3d)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom"]], "periodicgrid3dtopbottom (class in fipy.meshes.periodicgrid3d)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom"]], "periodicgrid3dtopbottomfrontback (class in fipy.meshes.periodicgrid3d)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__add__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__div__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__mul__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__radd__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBack"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBottom"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesDown"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesFront"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesLeft"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesRight"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesTop"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesUp"]], "fipy.meshes.periodicgrid3d": [[215, "module-fipy.meshes.periodicGrid3D"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.x"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.y"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[215, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.z"]], "fipy.meshes.representations": [[216, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractrepresentation": [[217, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridrepresentation": [[218, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshrepresentation": [[219, "module-fipy.meshes.representations.meshRepresentation"]], "skewedgrid2d (class in fipy.meshes.skewedgrid2d)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D"]], "vtkcelldataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__add__"]], "__div__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__div__"]], "__getstate__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__getstate__"]], "__mul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__mul__"]], "__radd__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__radd__"]], "__repr__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__repr__"]], "__rmul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__rmul__"]], "__sub__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__sub__"]], "__truediv__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__truediv__"]], "aspect2d (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.aspect2D"]], "cellcenters (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.extrude"]], "facesback (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBack"]], "facesbottom (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBottom"]], "facesdown (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesDown"]], "facesfront (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesFront"]], "facesleft (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesLeft"]], "facesright (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesRight"]], "facestop (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesTop"]], "facesup (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesUp"]], "fipy.meshes.skewedgrid2d": [[220, "module-fipy.meshes.skewedGrid2D"]], "physicalshape (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.physicalShape"]], "x (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.x"]], "y (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.y"]], "z (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[220, "fipy.meshes.skewedGrid2D.SkewedGrid2D.z"]], "sphericalnonuniformgrid1d (class in fipy.meshes.sphericalnonuniformgrid1d)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesUp"]], "fipy.meshes.sphericalnonuniformgrid1d": [[221, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "x (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.x"]], "y (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.y"]], "z (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[221, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.z"]], "sphericaluniformgrid1d (class in fipy.meshes.sphericaluniformgrid1d)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesUp"]], "fipy.meshes.sphericaluniformgrid1d": [[222, "module-fipy.meshes.sphericalUniformGrid1D"]], "x (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.x"]], "y (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.y"]], "z (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[222, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.z"]], "fipy.meshes.test": [[223, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[224, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstracttopology": [[225, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridtopology": [[226, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshtopology": [[227, "module-fipy.meshes.topologies.meshTopology"]], "tri2d (class in fipy.meshes.tri2d)": [[228, "fipy.meshes.tri2D.Tri2D"]], "vtkcelldataset (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__add__"]], "__div__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__div__"]], "__getstate__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__getstate__"]], "__mul__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__mul__"]], "__radd__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__radd__"]], "__repr__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__repr__"]], "__rmul__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__rmul__"]], "__sub__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__sub__"]], "__truediv__() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.__truediv__"]], "aspect2d (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.aspect2D"]], "cellcenters (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.cellCenters"]], "cellfaceids (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.cellFaceIDs"]], "extrude() (fipy.meshes.tri2d.tri2d method)": [[228, "fipy.meshes.tri2D.Tri2D.extrude"]], "facesback (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesBack"]], "facesbottom (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesBottom"]], "facesdown (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesDown"]], "facesfront (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesFront"]], "facesleft (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesLeft"]], "facesright (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesRight"]], "facestop (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesTop"]], "facesup (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.facesUp"]], "fipy.meshes.tri2d": [[228, "module-fipy.meshes.tri2D"]], "physicalshape (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.physicalShape"]], "x (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.x"]], "y (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.y"]], "z (fipy.meshes.tri2d.tri2d property)": [[228, "fipy.meshes.tri2D.Tri2D.z"]], "uniformgrid (class in fipy.meshes.uniformgrid)": [[229, "fipy.meshes.uniformGrid.UniformGrid"]], "vtkcelldataset (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid.uniformgrid method)": [[229, "fipy.meshes.uniformGrid.UniformGrid.__add__"]], "__div__() (fipy.meshes.uniformgrid.uniformgrid method)": [[229, "fipy.meshes.uniformGrid.UniformGrid.__div__"]], "__getstate__() (fipy.meshes.uniformgrid.uniformgrid method)": [[229, "fipy.meshes.uniformGrid.UniformGrid.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid.uniformgrid method)": [[229, "fipy.meshes.uniformGrid.UniformGrid.__radd__"]], "__repr__() (fipy.meshes.uniformgrid.uniformgrid method)": [[229, "fipy.meshes.uniformGrid.UniformGrid.__repr__"]], "__sub__() (fipy.meshes.uniformgrid.uniformgrid method)": [[229, "fipy.meshes.uniformGrid.UniformGrid.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid.uniformgrid method)": [[229, "fipy.meshes.uniformGrid.UniformGrid.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesBack"]], "facesbottom (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesBottom"]], "facesdown (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesDown"]], "facesfront (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesFront"]], "facesleft (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesLeft"]], "facesright (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesRight"]], "facestop (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesTop"]], "facesup (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.facesUp"]], "fipy.meshes.uniformgrid": [[229, "module-fipy.meshes.uniformGrid"]], "x (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.x"]], "y (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.y"]], "z (fipy.meshes.uniformgrid.uniformgrid property)": [[229, "fipy.meshes.uniformGrid.UniformGrid.z"]], "uniformgrid1d (class in fipy.meshes.uniformgrid1d)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D"]], "vtkcelldataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.__add__"]], "__div__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesDown"]], "facesfront (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesFront"]], "facesleft (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesLeft"]], "facesright (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesRight"]], "facestop (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesTop"]], "facesup (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesUp"]], "fipy.meshes.uniformgrid1d": [[230, "module-fipy.meshes.uniformGrid1D"]], "x (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.x"]], "y (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.y"]], "z (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[230, "fipy.meshes.uniformGrid1D.UniformGrid1D.z"]], "uniformgrid2d (class in fipy.meshes.uniformgrid2d)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D"]], "vtkcelldataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.__add__"]], "__div__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesDown"]], "facesfront (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesFront"]], "facesleft (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesLeft"]], "facesright (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesRight"]], "facestop (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesTop"]], "facesup (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesUp"]], "fipy.meshes.uniformgrid2d": [[231, "module-fipy.meshes.uniformGrid2D"]], "x (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.x"]], "y (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.y"]], "z (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[231, "fipy.meshes.uniformGrid2D.UniformGrid2D.z"]], "defaultasymmetricsolver (in module fipy.solvers)": [[232, "fipy.solvers.DefaultAsymmetricSolver"]], "defaultsolver (in module fipy.solvers)": [[232, "fipy.solvers.DefaultSolver"]], "dummysolver (in module fipy.solvers)": [[232, "fipy.solvers.DummySolver"]], "generalsolver (in module fipy.solvers)": [[232, "fipy.solvers.GeneralSolver"]], "serialsolvererror": [[232, "fipy.solvers.SerialSolverError"]], "__cause__ (fipy.solvers.serialsolvererror attribute)": [[232, "fipy.solvers.SerialSolverError.__cause__"]], "__context__ (fipy.solvers.serialsolvererror attribute)": [[232, "fipy.solvers.SerialSolverError.__context__"]], "__delattr__() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.__delattr__"]], "__getattribute__() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.__getattribute__"]], "__reduce__() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.__reduce__"]], "__repr__() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.__repr__"]], "__setattr__() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.__setattr__"]], "__str__() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.__str__"]], "add_note() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.add_note"]], "fipy.solvers": [[232, "module-fipy.solvers"]], "with_traceback() (fipy.solvers.serialsolvererror method)": [[232, "fipy.solvers.SerialSolverError.with_traceback"]], "absolutetoleranceconvergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.AbsoluteToleranceConvergence"]], "breakdowndivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.BreakdownDivergence"]], "convergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.Convergence"]], "convergencebase (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.ConvergenceBase"]], "divergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.Divergence"]], "happybreakdownconvergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.HappyBreakdownConvergence"]], "illconditioneddivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.IllConditionedDivergence"]], "illconditionedpreconditionerdivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence"]], "iteratingconvergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.IteratingConvergence"]], "iterationconvergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.IterationConvergence"]], "iterationdivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.IterationDivergence"]], "lossofaccuracyconvergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.LossOfAccuracyConvergence"]], "nulldivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.NullDivergence"]], "outofrangedivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.OutOfRangeDivergence"]], "preconditioningdivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.PreconditioningDivergence"]], "rhszeroconvergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.RHSZeroConvergence"]], "relativetoleranceconvergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.RelativeToleranceConvergence"]], "stagnateddivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.StagnatedDivergence"]], "tolerancedivergence (class in fipy.solvers.convergence)": [[233, "fipy.solvers.convergence.ToleranceDivergence"]], "__str__() (fipy.solvers.convergence.absolutetoleranceconvergence method)": [[233, "fipy.solvers.convergence.AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.breakdowndivergence method)": [[233, "fipy.solvers.convergence.BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.convergence.convergence method)": [[233, "fipy.solvers.convergence.Convergence.__str__"]], "__str__() (fipy.solvers.convergence.convergencebase method)": [[233, "fipy.solvers.convergence.ConvergenceBase.__str__"]], "__str__() (fipy.solvers.convergence.divergence method)": [[233, "fipy.solvers.convergence.Divergence.__str__"]], "__str__() (fipy.solvers.convergence.happybreakdownconvergence method)": [[233, "fipy.solvers.convergence.HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditioneddivergence method)": [[233, "fipy.solvers.convergence.IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditionedpreconditionerdivergence method)": [[233, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.convergence.iteratingconvergence method)": [[233, "fipy.solvers.convergence.IteratingConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationconvergence method)": [[233, "fipy.solvers.convergence.IterationConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationdivergence method)": [[233, "fipy.solvers.convergence.IterationDivergence.__str__"]], "__str__() (fipy.solvers.convergence.lossofaccuracyconvergence method)": [[233, "fipy.solvers.convergence.LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.convergence.nulldivergence method)": [[233, "fipy.solvers.convergence.NullDivergence.__str__"]], "__str__() (fipy.solvers.convergence.outofrangedivergence method)": [[233, "fipy.solvers.convergence.OutOfRangeDivergence.__str__"]], "__str__() (fipy.solvers.convergence.preconditioningdivergence method)": [[233, "fipy.solvers.convergence.PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.convergence.rhszeroconvergence method)": [[233, "fipy.solvers.convergence.RHSZeroConvergence.__str__"]], "__str__() (fipy.solvers.convergence.relativetoleranceconvergence method)": [[233, "fipy.solvers.convergence.RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.stagnateddivergence method)": [[233, "fipy.solvers.convergence.StagnatedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.tolerancedivergence method)": [[233, "fipy.solvers.convergence.ToleranceDivergence.__str__"]], "actual_code (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.actual_code"]], "criterion (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.criterion"]], "fipy.solvers.convergence": [[233, "module-fipy.solvers.convergence"]], "iterations (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.iterations"]], "residual (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.residual"]], "solver (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.solver"]], "status_code (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.status_code"]], "status_name (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.status_name"]], "tolerance_scale (fipy.solvers.convergence.convergencebase attribute)": [[233, "fipy.solvers.convergence.ConvergenceBase.tolerance_scale"]], "fipy.solvers.petsc": [[234, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[235, "module-fipy.solvers.petsc.comms"]], "parallelpetsccommwrapper (class in fipy.solvers.petsc.comms.parallelpetsccommwrapper)": [[236, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[236, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[236, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.parallelpetsccommwrapper": [[236, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "petsccommwrapper (class in fipy.solvers.petsc.comms.petsccommwrapper)": [[237, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[237, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[237, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.petsccommwrapper": [[237, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "serialpetsccommwrapper (class in fipy.solvers.petsc.comms.serialpetsccommwrapper)": [[238, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[238, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[238, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.serialpetsccommwrapper": [[238, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "default_iterations (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[239, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[239, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[239, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_TOLERANCE"]], "dummysolver (class in fipy.solvers.petsc.dummysolver)": [[239, "fipy.solvers.petsc.dummySolver.DummySolver"]], "legacy_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[239, "fipy.solvers.petsc.dummySolver.DummySolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.petsc.dummysolver.dummysolver method)": [[239, "fipy.solvers.petsc.dummySolver.DummySolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver property)": [[239, "fipy.solvers.petsc.dummySolver.DummySolver.default_tolerance"]], "fipy.solvers.petsc.dummysolver": [[239, "module-fipy.solvers.petsc.dummySolver"]], "default_iterations (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[240, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[240, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[240, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[240, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.LEGACY_TOLERANCE"]], "linearbicgsolver (class in fipy.solvers.petsc.linearbicgsolver)": [[240, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver"]], "__repr__() (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver method)": [[240, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver property)": [[240, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.default_tolerance"]], "fipy.solvers.petsc.linearbicgsolver": [[240, "module-fipy.solvers.petsc.linearBicgSolver"]], "default_iterations (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[241, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[241, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[241, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[241, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.petsc.linearcgssolver)": [[241, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.petsc.linearcgssolver.linearcgssolver method)": [[241, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver property)": [[241, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.petsc.linearcgssolver": [[241, "module-fipy.solvers.petsc.linearCGSSolver"]], "default_iterations (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[242, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[242, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[242, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[242, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.petsc.lineargmressolver)": [[242, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.petsc.lineargmressolver.lineargmressolver method)": [[242, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver property)": [[242, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.petsc.lineargmressolver": [[242, "module-fipy.solvers.petsc.linearGMRESSolver"]], "default_iterations (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[243, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[243, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[243, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[243, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.petsc.linearlusolver)": [[243, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.petsc.linearlusolver.linearlusolver method)": [[243, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver property)": [[243, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.petsc.linearlusolver": [[243, "module-fipy.solvers.petsc.linearLUSolver"]], "default_iterations (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[244, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[244, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[244, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[244, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.petsc.linearpcgsolver)": [[244, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver method)": [[244, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver property)": [[244, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.petsc.linearpcgsolver": [[244, "module-fipy.solvers.petsc.linearPCGSolver"]], "ksp_absolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence"]], "ksp_breakdownbicgdivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence"]], "ksp_breakdowndivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence"]], "ksp_happybreakdownconvergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence"]], "ksp_indefinitematrixdivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence"]], "ksp_indefinitepreconditionerdivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence"]], "ksp_iteratingconvergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence"]], "ksp_iterationconvergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence"]], "ksp_iterationdivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence"]], "ksp_nanorinfdivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence"]], "ksp_nonsymmetricdivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence"]], "ksp_normalabsolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence"]], "ksp_normalrelativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence"]], "ksp_nulldivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence"]], "ksp_preconditioningdivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence"]], "ksp_relativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence"]], "ksp_tolerancedivergence (class in fipy.solvers.petsc.petscconvergence)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_absolutetoleranceconvergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdownbicgdivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdowndivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_happybreakdownconvergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitematrixdivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitepreconditionerdivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iteratingconvergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationconvergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationdivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nanorinfdivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nonsymmetricdivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalabsolutetoleranceconvergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalrelativetoleranceconvergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nulldivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_preconditioningdivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_relativetoleranceconvergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_tolerancedivergence method)": [[245, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence.__str__"]], "fipy.solvers.petsc.petscconvergence": [[245, "module-fipy.solvers.petsc.petscConvergence"]], "default_iterations (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[246, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[246, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[246, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[246, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.LEGACY_TOLERANCE"]], "petsckrylovsolver (class in fipy.solvers.petsc.petsckrylovsolver)": [[246, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver"]], "__repr__() (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver method)": [[246, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver property)": [[246, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.default_tolerance"]], "fipy.solvers.petsc.petsckrylovsolver": [[246, "module-fipy.solvers.petsc.petscKrylovSolver"]], "default_iterations (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[247, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[247, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[247, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[247, "fipy.solvers.petsc.petscSolver.PETScSolver.LEGACY_TOLERANCE"]], "petscsolver (class in fipy.solvers.petsc.petscsolver)": [[247, "fipy.solvers.petsc.petscSolver.PETScSolver"]], "__repr__() (fipy.solvers.petsc.petscsolver.petscsolver method)": [[247, "fipy.solvers.petsc.petscSolver.PETScSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver property)": [[247, "fipy.solvers.petsc.petscSolver.PETScSolver.default_tolerance"]], "fipy.solvers.petsc.petscsolver": [[247, "module-fipy.solvers.petsc.petscSolver"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[248, "fipy.solvers.petsc.preconditioners.DefaultPreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[248, "fipy.solvers.petsc.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[248, "fipy.solvers.petsc.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners)": [[248, "fipy.solvers.petsc.preconditioners.JacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[248, "fipy.solvers.petsc.preconditioners.LUPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[248, "fipy.solvers.petsc.preconditioners.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners": [[248, "module-fipy.solvers.petsc.preconditioners"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners.defaultpreconditioner)": [[249, "fipy.solvers.petsc.preconditioners.defaultPreconditioner.DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultpreconditioner": [[249, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners.icpreconditioner)": [[250, "fipy.solvers.petsc.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.icpreconditioner": [[250, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners.ilupreconditioner)": [[251, "fipy.solvers.petsc.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.ilupreconditioner": [[251, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners.jacobipreconditioner)": [[252, "fipy.solvers.petsc.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobipreconditioner": [[252, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners.lupreconditioner)": [[253, "fipy.solvers.petsc.preconditioners.luPreconditioner.LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.lupreconditioner": [[253, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "petscpreconditioner (class in fipy.solvers.petsc.preconditioners.petscpreconditioner)": [[254, "fipy.solvers.petsc.preconditioners.petscPreconditioner.PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscpreconditioner": [[254, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners.ssorpreconditioner)": [[255, "fipy.solvers.petsc.preconditioners.ssorPreconditioner.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorpreconditioner": [[255, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "matrixmodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[256, "fipy.solvers.preconditioner.MatrixModifyingPreconditioner"]], "preconditioner (class in fipy.solvers.preconditioner)": [[256, "fipy.solvers.preconditioner.Preconditioner"]], "solvermodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[256, "fipy.solvers.preconditioner.SolverModifyingPreconditioner"]], "fipy.solvers.preconditioner": [[256, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyamg": [[257, "module-fipy.solvers.pyAMG"]], "default_iterations (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[258, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[258, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[258, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[258, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.pyamg.linearcgssolver)": [[258, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pyamg.linearcgssolver.linearcgssolver method)": [[258, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver property)": [[258, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.pyamg.linearcgssolver": [[258, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "default_iterations (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[259, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[259, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[259, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[259, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pyamg.lineargmressolver)": [[259, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamg.lineargmressolver.lineargmressolver method)": [[259, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver property)": [[259, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pyamg.lineargmressolver": [[259, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "default_iterations (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[260, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[260, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[260, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[260, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.LEGACY_TOLERANCE"]], "lineargeneralsolver (class in fipy.solvers.pyamg.lineargeneralsolver)": [[260, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver"]], "__repr__() (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver method)": [[260, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver property)": [[260, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.default_tolerance"]], "fipy.solvers.pyamg.lineargeneralsolver": [[260, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "default_iterations (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[261, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[261, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[261, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[261, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pyamg.linearlusolver)": [[261, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamg.linearlusolver.linearlusolver method)": [[261, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver property)": [[261, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pyamg.linearlusolver": [[261, "module-fipy.solvers.pyAMG.linearLUSolver"]], "default_iterations (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[262, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[262, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[262, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[262, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pyamg.linearpcgsolver)": [[262, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver method)": [[262, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver property)": [[262, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pyamg.linearpcgsolver": [[262, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyamg.preconditioners": [[263, "module-fipy.solvers.pyAMG.preconditioners"]], "smoothedaggregationpreconditioner (class in fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner)": [[264, "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner": [[264, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[265, "module-fipy.solvers.pyamgx"]], "aggregationamgsolver (class in fipy.solvers.pyamgx.aggregationamgsolver)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver method)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver property)": [[266, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.aggregationamgsolver": [[266, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "classicalamgsolver (class in fipy.solvers.pyamgx.classicalamgsolver)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver method)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver property)": [[267, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.classicalamgsolver": [[267, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.pyamgx.linearbicgstabsolver)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver"]], "__repr__() (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver method)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver property)": [[268, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearbicgstabsolver": [[268, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "default_iterations (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.LEGACY_TOLERANCE"]], "linearfgmressolver (class in fipy.solvers.pyamgx.linearfgmressolver)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver method)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver property)": [[269, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearfgmressolver": [[269, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pyamgx.lineargmressolver)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver method)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver property)": [[270, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.lineargmressolver": [[270, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[271, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[271, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[271, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[271, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pyamgx.linearlusolver)": [[271, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamgx.linearlusolver.linearlusolver method)": [[271, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver property)": [[271, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearlusolver": [[271, "module-fipy.solvers.pyamgx.linearLUSolver"]], "default_iterations (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pyamgx.linearpcgsolver)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver method)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver property)": [[272, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearpcgsolver": [[272, "module-fipy.solvers.pyamgx.linearPCGSolver"]], "amgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.AMGPreconditioner"]], "aggregationamgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.AggregationAMGPreconditioner"]], "bicgstabpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.BiCGStabPreconditioner"]], "cgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.CGPreconditioner"]], "dilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.DILUPreconditioner"]], "fgmrespreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.FGMRESPreconditioner"]], "gaussseidelpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.GaussSeidelPreconditioner"]], "ilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.JacobiPreconditioner"]], "polynomialpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.PolynomialPreconditioner"]], "pyamgxpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[273, "fipy.solvers.pyamgx.preconditioners.PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.preconditioners": [[273, "module-fipy.solvers.pyamgx.preconditioners"]], "default_iterations (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.LEGACY_TOLERANCE"]], "pyamgxsolver (class in fipy.solvers.pyamgx.pyamgxsolver)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver"]], "__repr__() (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver method)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver property)": [[274, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.default_tolerance"]], "fipy.solvers.pyamgx.pyamgxsolver": [[274, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_breakdowndivergence method)": [[275, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_convergence method)": [[275, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_iterationdivergence method)": [[275, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence.__str__"]], "fipy.solvers.pyamgx.pyamgxconvergence": [[275, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "pyamgx_breakdowndivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[275, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence"]], "pyamgx_convergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[275, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence"]], "pyamgx_iterationdivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[275, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence"]], "smoother (class in fipy.solvers.pyamgx.smoothers)": [[276, "fipy.solvers.pyamgx.smoothers.Smoother"]], "fipy.solvers.pyamgx.smoothers": [[276, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pysparse": [[277, "module-fipy.solvers.pysparse"]], "default_iterations (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.pysparse.linearcgssolver)": [[278, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pysparse.linearcgssolver.linearcgssolver method)": [[278, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver property)": [[278, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.pysparse.linearcgssolver": [[278, "module-fipy.solvers.pysparse.linearCGSSolver"]], "default_iterations (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pysparse.lineargmressolver)": [[279, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pysparse.lineargmressolver.lineargmressolver method)": [[279, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver property)": [[279, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pysparse.lineargmressolver": [[279, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "default_iterations (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[280, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[280, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[280, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[280, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.LEGACY_TOLERANCE"]], "linearinitialsolver (class in fipy.solvers.pysparse.linearinitialsolver)": [[280, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver"]], "__repr__() (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver method)": [[280, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver property)": [[280, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.default_tolerance"]], "fipy.solvers.pysparse.linearinitialsolver": [[280, "module-fipy.solvers.pysparse.linearInitialSolver"]], "default_iterations (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[281, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[281, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[281, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[281, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.LEGACY_TOLERANCE"]], "linearjorsolver (class in fipy.solvers.pysparse.linearjorsolver)": [[281, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver"]], "__repr__() (fipy.solvers.pysparse.linearjorsolver.linearjorsolver method)": [[281, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver property)": [[281, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.default_tolerance"]], "fipy.solvers.pysparse.linearjorsolver": [[281, "module-fipy.solvers.pysparse.linearJORSolver"]], "default_iterations (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[282, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[282, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[282, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[282, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pysparse.linearlusolver)": [[282, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pysparse.linearlusolver.linearlusolver method)": [[282, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver property)": [[282, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pysparse.linearlusolver": [[282, "module-fipy.solvers.pysparse.linearLUSolver"]], "default_iterations (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[283, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[283, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[283, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[283, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pysparse.linearpcgsolver)": [[283, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver method)": [[283, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver property)": [[283, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pysparse.linearpcgsolver": [[283, "module-fipy.solvers.pysparse.linearPCGSolver"]], "default_iterations (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[284, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[284, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[284, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[284, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.LEGACY_TOLERANCE"]], "linearrhssolver (class in fipy.solvers.pysparse.linearrhssolver)": [[284, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver"]], "__repr__() (fipy.solvers.pysparse.linearrhssolver.linearrhssolver method)": [[284, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver property)": [[284, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.default_tolerance"]], "fipy.solvers.pysparse.linearrhssolver": [[284, "module-fipy.solvers.pysparse.linearRHSSolver"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners)": [[285, "fipy.solvers.pysparse.preconditioners.JacobiPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners)": [[285, "fipy.solvers.pysparse.preconditioners.SSORPreconditioner"]], "fipy.solvers.pysparse.preconditioners": [[285, "module-fipy.solvers.pysparse.preconditioners"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners.jacobipreconditioner)": [[286, "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobipreconditioner": [[286, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "pysparsepreconditioner (class in fipy.solvers.pysparse.preconditioners.pysparsepreconditioner)": [[287, "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner.PysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsepreconditioner": [[287, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners.ssorpreconditioner)": [[288, "fipy.solvers.pysparse.preconditioners.ssorPreconditioner.SSORPreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorpreconditioner": [[288, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "pysparse_absolutetoleranceconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence"]], "pysparse_illconditioneddivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence"]], "pysparse_illconditionedpreconditionerdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence"]], "pysparse_iterationdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence"]], "pysparse_nonposdefpreconditioningdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence"]], "pysparse_outofrangedivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence"]], "pysparse_rhszeroconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence"]], "pysparse_relativetoleranceconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence"]], "pysparse_stagnateddivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_absolutetoleranceconvergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_illconditioneddivergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_illconditionedpreconditionerdivergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_iterationdivergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_nonposdefpreconditioningdivergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_outofrangedivergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_rhszeroconvergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_relativetoleranceconvergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_stagnateddivergence method)": [[289, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence.__str__"]], "fipy.solvers.pysparse.pysparseconvergence": [[289, "module-fipy.solvers.pysparse.pysparseConvergence"]], "default_iterations (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[290, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[290, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[290, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[290, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.LEGACY_TOLERANCE"]], "pysparsesolver (class in fipy.solvers.pysparse.pysparsesolver)": [[290, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver"]], "__repr__() (fipy.solvers.pysparse.pysparsesolver.pysparsesolver method)": [[290, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver property)": [[290, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.default_tolerance"]], "fipy.solvers.pysparse.pysparsesolver": [[290, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparsematrixsolver": [[291, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[292, "module-fipy.solvers.scipy"]], "default_iterations (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[293, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[293, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[293, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[293, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.scipy.linearbicgstabsolver)": [[293, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver method)": [[293, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver property)": [[293, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.scipy.linearbicgstabsolver": [[293, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "default_iterations (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[294, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[294, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[294, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[294, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.scipy.linearcgssolver)": [[294, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.scipy.linearcgssolver.linearcgssolver method)": [[294, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver property)": [[294, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.scipy.linearcgssolver": [[294, "module-fipy.solvers.scipy.linearCGSSolver"]], "default_iterations (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[295, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[295, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[295, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[295, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.scipy.lineargmressolver)": [[295, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.scipy.lineargmressolver.lineargmressolver method)": [[295, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver property)": [[295, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.scipy.lineargmressolver": [[295, "module-fipy.solvers.scipy.linearGMRESSolver"]], "default_iterations (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[296, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[296, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[296, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[296, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.scipy.linearlusolver)": [[296, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.scipy.linearlusolver.linearlusolver method)": [[296, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver property)": [[296, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.scipy.linearlusolver": [[296, "module-fipy.solvers.scipy.linearLUSolver"]], "default_iterations (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[297, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[297, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[297, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[297, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.scipy.linearpcgsolver)": [[297, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver method)": [[297, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver property)": [[297, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.scipy.linearpcgsolver": [[297, "module-fipy.solvers.scipy.linearPCGSolver"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners)": [[298, "fipy.solvers.scipy.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners)": [[298, "fipy.solvers.scipy.preconditioners.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners": [[298, "module-fipy.solvers.scipy.preconditioners"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners.ilupreconditioner)": [[299, "fipy.solvers.scipy.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.ilupreconditioner": [[299, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners.jacobipreconditioner)": [[300, "fipy.solvers.scipy.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobipreconditioner": [[300, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "scipypreconditioner (class in fipy.solvers.scipy.preconditioners.scipypreconditioner)": [[301, "fipy.solvers.scipy.preconditioners.scipyPreconditioner.ScipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipypreconditioner": [[301, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "scipy_breakdowndivergence (class in fipy.solvers.scipy.scipyconvergence)": [[302, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence"]], "scipy_convergence (class in fipy.solvers.scipy.scipyconvergence)": [[302, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence"]], "scipy_iterationdivergence (class in fipy.solvers.scipy.scipyconvergence)": [[302, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_breakdowndivergence method)": [[302, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_convergence method)": [[302, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_iterationdivergence method)": [[302, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence.__str__"]], "fipy.solvers.scipy.scipyconvergence": [[302, "module-fipy.solvers.scipy.scipyConvergence"]], "default_iterations (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[303, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[303, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[303, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[303, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.LEGACY_TOLERANCE"]], "scipykrylovsolver (class in fipy.solvers.scipy.scipykrylovsolver)": [[303, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver"]], "__repr__() (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver method)": [[303, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver property)": [[303, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.default_tolerance"]], "fipy.solvers.scipy.scipykrylovsolver": [[303, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "default_iterations (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[304, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[304, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[304, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[304, "fipy.solvers.scipy.scipySolver.ScipySolver.LEGACY_TOLERANCE"]], "scipysolver (class in fipy.solvers.scipy.scipysolver)": [[304, "fipy.solvers.scipy.scipySolver.ScipySolver"]], "__repr__() (fipy.solvers.scipy.scipysolver.scipysolver method)": [[304, "fipy.solvers.scipy.scipySolver.ScipySolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver property)": [[304, "fipy.solvers.scipy.scipySolver.ScipySolver.default_tolerance"]], "fipy.solvers.scipy.scipysolver": [[304, "module-fipy.solvers.scipy.scipySolver"]], "breakdownwarning": [[305, "fipy.solvers.solver.BreakdownWarning"]], "default_iterations (fipy.solvers.solver.solver attribute)": [[305, "fipy.solvers.solver.Solver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.solver.solver attribute)": [[305, "fipy.solvers.solver.Solver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.solver.solver attribute)": [[305, "fipy.solvers.solver.Solver.DEFAULT_TOLERANCE"]], "illconditionedpreconditionerwarning": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning"]], "illegalinputorbreakdownwarning": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning"]], "legacy_tolerance (fipy.solvers.solver.solver attribute)": [[305, "fipy.solvers.solver.Solver.LEGACY_TOLERANCE"]], "lossofprecisionwarning": [[305, "fipy.solvers.solver.LossOfPrecisionWarning"]], "matrixillconditionedwarning": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning"]], "maximumiterationwarning": [[305, "fipy.solvers.solver.MaximumIterationWarning"]], "normalconvergence": [[305, "fipy.solvers.solver.NormalConvergence"]], "parameterwarning": [[305, "fipy.solvers.solver.ParameterWarning"]], "preconditionernotpositivedefinitewarning": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning"]], "preconditionerwarning": [[305, "fipy.solvers.solver.PreconditionerWarning"]], "scalarquantityoutofrangewarning": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning"]], "solver (class in fipy.solvers.solver)": [[305, "fipy.solvers.solver.Solver"]], "solverconvergencewarning": [[305, "fipy.solvers.solver.SolverConvergenceWarning"]], "stagnatedsolverwarning": [[305, "fipy.solvers.solver.StagnatedSolverWarning"]], "__cause__ (fipy.solvers.solver.breakdownwarning attribute)": [[305, "fipy.solvers.solver.BreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__cause__"]], "__cause__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__cause__"]], "__cause__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__cause__"]], "__cause__ (fipy.solvers.solver.normalconvergence attribute)": [[305, "fipy.solvers.solver.NormalConvergence.__cause__"]], "__cause__ (fipy.solvers.solver.parameterwarning attribute)": [[305, "fipy.solvers.solver.ParameterWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionerwarning attribute)": [[305, "fipy.solvers.solver.PreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__cause__"]], "__cause__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__cause__"]], "__cause__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__cause__"]], "__context__ (fipy.solvers.solver.breakdownwarning attribute)": [[305, "fipy.solvers.solver.BreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__context__"]], "__context__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__context__"]], "__context__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__context__"]], "__context__ (fipy.solvers.solver.normalconvergence attribute)": [[305, "fipy.solvers.solver.NormalConvergence.__context__"]], "__context__ (fipy.solvers.solver.parameterwarning attribute)": [[305, "fipy.solvers.solver.ParameterWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionerwarning attribute)": [[305, "fipy.solvers.solver.PreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__context__"]], "__context__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__context__"]], "__context__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__context__"]], "__delattr__() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.__delattr__"]], "__delattr__() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__delattr__"]], "__getattribute__() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__getattribute__"]], "__reduce__() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.__reduce__"]], "__reduce__() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__reduce__"]], "__repr__() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__repr__"]], "__repr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__repr__"]], "__repr__() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__repr__"]], "__repr__() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.__repr__"]], "__repr__() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__repr__"]], "__repr__() (fipy.solvers.solver.solver method)": [[305, "fipy.solvers.solver.Solver.__repr__"]], "__repr__() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__repr__"]], "__repr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__repr__"]], "__setattr__() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.__setattr__"]], "__setattr__() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__setattr__"]], "__str__() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.__str__"]], "__str__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.__str__"]], "__str__() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.__str__"]], "__str__() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.__str__"]], "__str__() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__str__"]], "__str__() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.__str__"]], "__str__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.__str__"]], "add_note() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.add_note"]], "add_note() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.add_note"]], "add_note() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.add_note"]], "add_note() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.add_note"]], "add_note() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.add_note"]], "add_note() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.add_note"]], "add_note() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.add_note"]], "default_tolerance (fipy.solvers.solver.solver property)": [[305, "fipy.solvers.solver.Solver.default_tolerance"]], "fipy.solvers.solver": [[305, "module-fipy.solvers.solver"]], "with_traceback() (fipy.solvers.solver.breakdownwarning method)": [[305, "fipy.solvers.solver.BreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[305, "fipy.solvers.solver.IllConditionedPreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[305, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.lossofprecisionwarning method)": [[305, "fipy.solvers.solver.LossOfPrecisionWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.matrixillconditionedwarning method)": [[305, "fipy.solvers.solver.MatrixIllConditionedWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.maximumiterationwarning method)": [[305, "fipy.solvers.solver.MaximumIterationWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.normalconvergence method)": [[305, "fipy.solvers.solver.NormalConvergence.with_traceback"]], "with_traceback() (fipy.solvers.solver.parameterwarning method)": [[305, "fipy.solvers.solver.ParameterWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[305, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionerwarning method)": [[305, "fipy.solvers.solver.PreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[305, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.solverconvergencewarning method)": [[305, "fipy.solvers.solver.SolverConvergenceWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.stagnatedsolverwarning method)": [[305, "fipy.solvers.solver.StagnatedSolverWarning.with_traceback"]], "fipy.solvers.test": [[306, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[307, "module-fipy.solvers.trilinos"]], "az_breakdowndivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence"]], "az_illconditioneddivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence"]], "az_iterationdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence"]], "az_lossofaccuracyconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence"]], "az_normalconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence"]], "az_parameterdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_breakdowndivergence method)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_illconditioneddivergence method)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_iterationdivergence method)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_lossofaccuracyconvergence method)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_normalconvergence method)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_parameterdivergence method)": [[308, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence.__str__"]], "fipy.solvers.trilinos.aztecconvergence": [[308, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[309, "module-fipy.solvers.trilinos.comms"]], "epetracommwrapper (class in fipy.solvers.trilinos.comms.epetracommwrapper)": [[310, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[310, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[310, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.epetracommwrapper": [[310, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "maxall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MaxAll"]], "minall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MinAll"]], "parallelepetracommwrapper (class in fipy.solvers.trilinos.comms.parallelepetracommwrapper)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__repr__"]], "allgather() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.allgather"]], "fipy.solvers.trilinos.comms.parallelepetracommwrapper": [[311, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "serialepetracommwrapper (class in fipy.solvers.trilinos.comms.serialepetracommwrapper)": [[312, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[312, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[312, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.serialepetracommwrapper": [[312, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "default_iterations (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.trilinos.linearbicgstabsolver)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver method)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver property)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.trilinos.linearbicgstabsolver": [[313, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "default_iterations (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.trilinos.linearcgssolver)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgssolver.linearcgssolver method)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver property)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.trilinos.linearcgssolver": [[314, "module-fipy.solvers.trilinos.linearCGSSolver"]], "default_iterations (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.trilinos.lineargmressolver)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.trilinos.lineargmressolver.lineargmressolver method)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver property)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.trilinos.lineargmressolver": [[315, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "default_iterations (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.trilinos.linearlusolver)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.trilinos.linearlusolver.linearlusolver method)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver property)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.trilinos.linearlusolver": [[316, "module-fipy.solvers.trilinos.linearLUSolver"]], "default_iterations (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.trilinos.linearpcgsolver)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver method)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver property)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.trilinos.linearpcgsolver": [[317, "module-fipy.solvers.trilinos.linearPCGSolver"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.DomDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.JacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.MultilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.MultilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.MultilevelNSSAPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.MultilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.MultilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[318, "fipy.solvers.trilinos.preconditioners.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners": [[318, "module-fipy.solvers.trilinos.preconditioners"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners.domdecomppreconditioner)": [[319, "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domdecomppreconditioner": [[319, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners.icpreconditioner)": [[320, "fipy.solvers.trilinos.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icpreconditioner": [[320, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners.ilupreconditioner)": [[321, "fipy.solvers.trilinos.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.ilupreconditioner": [[321, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners.jacobipreconditioner)": [[322, "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobipreconditioner": [[322, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner)": [[323, "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner": [[323, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner)": [[324, "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner)": [[325, "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "multilevelpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelpreconditioner)": [[326, "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelpreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner)": [[327, "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner)": [[328, "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner)": [[329, "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner": [[329, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "trilinospreconditioner (class in fipy.solvers.trilinos.preconditioners.trilinospreconditioner)": [[330, "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.TrilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinospreconditioner": [[330, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "default_iterations (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[331, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[331, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[331, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[331, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.LEGACY_TOLERANCE"]], "trilinosaztecoosolver (class in fipy.solvers.trilinos.trilinosaztecoosolver)": [[331, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver method)": [[331, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver property)": [[331, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosaztecoosolver": [[331, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "default_iterations (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[332, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[332, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[332, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[332, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.LEGACY_TOLERANCE"]], "trilinosmltest (class in fipy.solvers.trilinos.trilinosmltest)": [[332, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest"]], "__repr__() (fipy.solvers.trilinos.trilinosmltest.trilinosmltest method)": [[332, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest property)": [[332, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.default_tolerance"]], "fipy.solvers.trilinos.trilinosmltest": [[332, "module-fipy.solvers.trilinos.trilinosMLTest"]], "default_iterations (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[333, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[333, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[333, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[333, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.LEGACY_TOLERANCE"]], "trilinosnonlinearsolver (class in fipy.solvers.trilinos.trilinosnonlinearsolver)": [[333, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver method)": [[333, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver property)": [[333, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosnonlinearsolver": [[333, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "default_iterations (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[334, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[334, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[334, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[334, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.LEGACY_TOLERANCE"]], "trilinossolver (class in fipy.solvers.trilinos.trilinossolver)": [[334, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver"]], "__repr__() (fipy.solvers.trilinos.trilinossolver.trilinossolver method)": [[334, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver property)": [[334, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinossolver": [[334, "module-fipy.solvers.trilinos.trilinosSolver"]], "l1error() (in module fipy.steppers)": [[335, "fipy.steppers.L1error"]], "l2error() (in module fipy.steppers)": [[335, "fipy.steppers.L2error"]], "linferror() (in module fipy.steppers)": [[335, "fipy.steppers.LINFerror"]], "error() (in module fipy.steppers)": [[335, "fipy.steppers.error"]], "fipy.steppers": [[335, "module-fipy.steppers"]], "residual() (in module fipy.steppers)": [[335, "fipy.steppers.residual"]], "sweepmonotonic() (in module fipy.steppers)": [[335, "fipy.steppers.sweepMonotonic"]], "pidstepper (class in fipy.steppers.pidstepper)": [[336, "fipy.steppers.pidStepper.PIDStepper"]], "fipy.steppers.pidstepper": [[336, "module-fipy.steppers.pidStepper"]], "pseudorkqsstepper (class in fipy.steppers.pseudorkqsstepper)": [[337, "fipy.steppers.pseudoRKQSStepper.PseudoRKQSStepper"]], "fipy.steppers.pseudorkqsstepper": [[337, "module-fipy.steppers.pseudoRKQSStepper"]], "stepper (class in fipy.steppers.stepper)": [[338, "fipy.steppers.stepper.Stepper"]], "fipy.steppers.stepper": [[338, "module-fipy.steppers.stepper"]], "abstractbaseclasserror": [[339, "fipy.terms.AbstractBaseClassError"]], "explicitvariableerror": [[339, "fipy.terms.ExplicitVariableError"]], "incorrectsolutionvariable": [[339, "fipy.terms.IncorrectSolutionVariable"]], "solutionvariablenumbererror": [[339, "fipy.terms.SolutionVariableNumberError"]], "solutionvariablerequirederror": [[339, "fipy.terms.SolutionVariableRequiredError"]], "termmultiplyerror": [[339, "fipy.terms.TermMultiplyError"]], "transienttermerror": [[339, "fipy.terms.TransientTermError"]], "vectorcoefferror": [[339, "fipy.terms.VectorCoeffError"]], "__cause__ (fipy.terms.abstractbaseclasserror attribute)": [[339, "fipy.terms.AbstractBaseClassError.__cause__"]], "__cause__ (fipy.terms.explicitvariableerror attribute)": [[339, "fipy.terms.ExplicitVariableError.__cause__"]], "__cause__ (fipy.terms.incorrectsolutionvariable attribute)": [[339, "fipy.terms.IncorrectSolutionVariable.__cause__"]], "__cause__ (fipy.terms.solutionvariablenumbererror attribute)": [[339, "fipy.terms.SolutionVariableNumberError.__cause__"]], "__cause__ (fipy.terms.solutionvariablerequirederror attribute)": [[339, "fipy.terms.SolutionVariableRequiredError.__cause__"]], "__cause__ (fipy.terms.termmultiplyerror attribute)": [[339, "fipy.terms.TermMultiplyError.__cause__"]], "__cause__ (fipy.terms.transienttermerror attribute)": [[339, "fipy.terms.TransientTermError.__cause__"]], "__cause__ (fipy.terms.vectorcoefferror attribute)": [[339, "fipy.terms.VectorCoeffError.__cause__"]], "__context__ (fipy.terms.abstractbaseclasserror attribute)": [[339, "fipy.terms.AbstractBaseClassError.__context__"]], "__context__ (fipy.terms.explicitvariableerror attribute)": [[339, "fipy.terms.ExplicitVariableError.__context__"]], "__context__ (fipy.terms.incorrectsolutionvariable attribute)": [[339, "fipy.terms.IncorrectSolutionVariable.__context__"]], "__context__ (fipy.terms.solutionvariablenumbererror attribute)": [[339, "fipy.terms.SolutionVariableNumberError.__context__"]], "__context__ (fipy.terms.solutionvariablerequirederror attribute)": [[339, "fipy.terms.SolutionVariableRequiredError.__context__"]], "__context__ (fipy.terms.termmultiplyerror attribute)": [[339, "fipy.terms.TermMultiplyError.__context__"]], "__context__ (fipy.terms.transienttermerror attribute)": [[339, "fipy.terms.TransientTermError.__context__"]], "__context__ (fipy.terms.vectorcoefferror attribute)": [[339, "fipy.terms.VectorCoeffError.__context__"]], "__delattr__() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.__delattr__"]], "__delattr__() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.__delattr__"]], "__delattr__() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.__delattr__"]], "__delattr__() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.__delattr__"]], "__delattr__() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.__delattr__"]], "__delattr__() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.__delattr__"]], "__getattribute__() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.__getattribute__"]], "__getattribute__() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.__getattribute__"]], "__getattribute__() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.__getattribute__"]], "__getattribute__() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.__getattribute__"]], "__getattribute__() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.__getattribute__"]], "__getattribute__() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.__getattribute__"]], "__reduce__() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.__reduce__"]], "__reduce__() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.__reduce__"]], "__reduce__() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.__reduce__"]], "__reduce__() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.__reduce__"]], "__reduce__() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.__reduce__"]], "__reduce__() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.__reduce__"]], "__repr__() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.__repr__"]], "__repr__() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.__repr__"]], "__repr__() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.__repr__"]], "__repr__() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.__repr__"]], "__repr__() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.__repr__"]], "__repr__() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.__repr__"]], "__repr__() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.__repr__"]], "__repr__() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.__repr__"]], "__setattr__() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.__setattr__"]], "__setattr__() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.__setattr__"]], "__setattr__() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.__setattr__"]], "__setattr__() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.__setattr__"]], "__setattr__() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.__setattr__"]], "__setattr__() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.__setattr__"]], "__str__() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.__str__"]], "__str__() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.__str__"]], "__str__() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.__str__"]], "__str__() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.__str__"]], "__str__() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.__str__"]], "__str__() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.__str__"]], "__str__() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.__str__"]], "__str__() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.__str__"]], "add_note() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.add_note"]], "add_note() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.add_note"]], "add_note() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.add_note"]], "add_note() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.add_note"]], "add_note() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.add_note"]], "add_note() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.add_note"]], "add_note() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.add_note"]], "add_note() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.add_note"]], "fipy.terms": [[339, "module-fipy.terms"]], "with_traceback() (fipy.terms.abstractbaseclasserror method)": [[339, "fipy.terms.AbstractBaseClassError.with_traceback"]], "with_traceback() (fipy.terms.explicitvariableerror method)": [[339, "fipy.terms.ExplicitVariableError.with_traceback"]], "with_traceback() (fipy.terms.incorrectsolutionvariable method)": [[339, "fipy.terms.IncorrectSolutionVariable.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablenumbererror method)": [[339, "fipy.terms.SolutionVariableNumberError.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablerequirederror method)": [[339, "fipy.terms.SolutionVariableRequiredError.with_traceback"]], "with_traceback() (fipy.terms.termmultiplyerror method)": [[339, "fipy.terms.TermMultiplyError.with_traceback"]], "with_traceback() (fipy.terms.transienttermerror method)": [[339, "fipy.terms.TransientTermError.with_traceback"]], "with_traceback() (fipy.terms.vectorcoefferror method)": [[339, "fipy.terms.VectorCoeffError.with_traceback"]], "fipy.terms.abstractbinaryterm": [[340, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractconvectionterm": [[341, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractdiffusionterm": [[342, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractupwindconvectionterm": [[343, "module-fipy.terms.abstractUpwindConvectionTerm"]], "advectionterm (class in fipy.terms.advectionterm)": [[344, "fipy.terms.advectionTerm.AdvectionTerm"]], "rhsvector (fipy.terms.advectionterm.advectionterm property)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.__eq__"]], "__hash__() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.__hash__"]], "__mul__() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.__mul__"]], "__neg__() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.__neg__"]], "__repr__() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.cacheRHSvector"]], "fipy.terms.advectionterm": [[344, "module-fipy.terms.advectionTerm"]], "justerrorvector() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.justResidualVector"]], "matrix (fipy.terms.advectionterm.advectionterm property)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.solve"]], "sweep() (fipy.terms.advectionterm.advectionterm method)": [[344, "fipy.terms.advectionTerm.AdvectionTerm.sweep"]], "fipy.terms.asymmetricconvectionterm": [[345, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryterm": [[346, "module-fipy.terms.binaryTerm"]], "cellterm (class in fipy.terms.cellterm)": [[347, "fipy.terms.cellTerm.CellTerm"]], "rhsvector (fipy.terms.cellterm.cellterm property)": [[347, "fipy.terms.cellTerm.CellTerm.RHSvector"]], "__eq__() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.__eq__"]], "__hash__() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.__hash__"]], "__mul__() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.__mul__"]], "__neg__() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.__neg__"]], "__repr__() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.__repr__"]], "__rmul__() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.__rmul__"]], "cachematrix() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.cacheRHSvector"]], "fipy.terms.cellterm": [[347, "module-fipy.terms.cellTerm"]], "justerrorvector() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.justErrorVector"]], "justresidualvector() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.justResidualVector"]], "matrix (fipy.terms.cellterm.cellterm property)": [[347, "fipy.terms.cellTerm.CellTerm.matrix"]], "residualvectorandnorm() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.residualVectorAndNorm"]], "solve() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.solve"]], "sweep() (fipy.terms.cellterm.cellterm method)": [[347, "fipy.terms.cellTerm.CellTerm.sweep"]], "centraldifferenceconvectionterm (class in fipy.terms.centraldiffconvectionterm)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm"]], "rhsvector (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__eq__"]], "__hash__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__hash__"]], "__mul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__mul__"]], "__neg__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__neg__"]], "__repr__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheRHSvector"]], "fipy.terms.centraldiffconvectionterm": [[348, "module-fipy.terms.centralDiffConvectionTerm"]], "justerrorvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justResidualVector"]], "matrix (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.solve"]], "sweep() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[348, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.sweep"]], "fipy.terms.coupledbinaryterm": [[349, "module-fipy.terms.coupledBinaryTerm"]], "diffusionterm (class in fipy.terms.diffusionterm)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm"]], "rhsvector (fipy.terms.diffusionterm.diffusionterm property)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.__eq__"]], "__hash__() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.__hash__"]], "__repr__() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.cacheRHSvector"]], "fipy.terms.diffusionterm": [[350, "module-fipy.terms.diffusionTerm"]], "justerrorvector() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.justResidualVector"]], "matrix (fipy.terms.diffusionterm.diffusionterm property)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.solve"]], "sweep() (fipy.terms.diffusionterm.diffusionterm method)": [[350, "fipy.terms.diffusionTerm.DiffusionTerm.sweep"]], "diffusiontermcorrection (class in fipy.terms.diffusiontermcorrection)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection"]], "rhsvector (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermcorrection": [[351, "module-fipy.terms.diffusionTermCorrection"]], "justerrorvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.solve"]], "sweep() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[351, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.sweep"]], "diffusiontermnocorrection (class in fipy.terms.diffusiontermnocorrection)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection"]], "rhsvector (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermnocorrection": [[352, "module-fipy.terms.diffusionTermNoCorrection"]], "justerrorvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.solve"]], "sweep() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[352, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.sweep"]], "explicitdiffusionterm (class in fipy.terms.explicitdiffusionterm)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm"]], "rhsvector (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__eq__"]], "__hash__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__hash__"]], "__repr__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheRHSvector"]], "fipy.terms.explicitdiffusionterm": [[353, "module-fipy.terms.explicitDiffusionTerm"]], "justerrorvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justResidualVector"]], "matrix (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.solve"]], "sweep() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[353, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.sweep"]], "fipy.terms.explicitsourceterm": [[354, "module-fipy.terms.explicitSourceTerm"]], "explicitupwindconvectionterm (class in fipy.terms.explicitupwindconvectionterm)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm"]], "rhsvector (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.explicitupwindconvectionterm": [[355, "module-fipy.terms.explicitUpwindConvectionTerm"]], "justerrorvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.solve"]], "sweep() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[355, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.sweep"]], "exponentialconvectionterm (class in fipy.terms.exponentialconvectionterm)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm"]], "rhsvector (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__eq__"]], "__hash__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__hash__"]], "__mul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__mul__"]], "__neg__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__neg__"]], "__repr__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheRHSvector"]], "fipy.terms.exponentialconvectionterm": [[356, "module-fipy.terms.exponentialConvectionTerm"]], "justerrorvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justResidualVector"]], "matrix (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.solve"]], "sweep() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[356, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.sweep"]], "faceterm (class in fipy.terms.faceterm)": [[357, "fipy.terms.faceTerm.FaceTerm"]], "rhsvector (fipy.terms.faceterm.faceterm property)": [[357, "fipy.terms.faceTerm.FaceTerm.RHSvector"]], "__eq__() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.__eq__"]], "__hash__() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.__hash__"]], "__mul__() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.__mul__"]], "__neg__() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.__neg__"]], "__repr__() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.__repr__"]], "__rmul__() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.__rmul__"]], "cachematrix() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.cacheRHSvector"]], "fipy.terms.faceterm": [[357, "module-fipy.terms.faceTerm"]], "justerrorvector() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.justResidualVector"]], "matrix (fipy.terms.faceterm.faceterm property)": [[357, "fipy.terms.faceTerm.FaceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.solve"]], "sweep() (fipy.terms.faceterm.faceterm method)": [[357, "fipy.terms.faceTerm.FaceTerm.sweep"]], "firstorderadvectionterm (class in fipy.terms.firstorderadvectionterm)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm"]], "rhsvector (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__eq__"]], "__hash__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__hash__"]], "__mul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__mul__"]], "__neg__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__neg__"]], "__repr__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheRHSvector"]], "fipy.terms.firstorderadvectionterm": [[358, "module-fipy.terms.firstOrderAdvectionTerm"]], "justerrorvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justResidualVector"]], "matrix (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.solve"]], "sweep() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[358, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.sweep"]], "hybridconvectionterm (class in fipy.terms.hybridconvectionterm)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm"]], "rhsvector (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__eq__"]], "__hash__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__hash__"]], "__mul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__mul__"]], "__neg__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__neg__"]], "__repr__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheRHSvector"]], "fipy.terms.hybridconvectionterm": [[359, "module-fipy.terms.hybridConvectionTerm"]], "justerrorvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justResidualVector"]], "matrix (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.solve"]], "sweep() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[359, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.sweep"]], "implicitdiffusionterm (in module fipy.terms.implicitdiffusionterm)": [[360, "fipy.terms.implicitDiffusionTerm.ImplicitDiffusionTerm"]], "fipy.terms.implicitdiffusionterm": [[360, "module-fipy.terms.implicitDiffusionTerm"]], "implicitsourceterm (class in fipy.terms.implicitsourceterm)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm"]], "rhsvector (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.RHSvector"]], "__eq__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__eq__"]], "__hash__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__hash__"]], "__mul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__mul__"]], "__neg__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__neg__"]], "__repr__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__repr__"]], "__rmul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__rmul__"]], "cachematrix() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheRHSvector"]], "fipy.terms.implicitsourceterm": [[361, "module-fipy.terms.implicitSourceTerm"]], "justerrorvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justResidualVector"]], "matrix (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.solve"]], "sweep() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[361, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.sweep"]], "fipy.terms.nondiffusionterm": [[362, "module-fipy.terms.nonDiffusionTerm"]], "powerlawconvectionterm (class in fipy.terms.powerlawconvectionterm)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm"]], "rhsvector (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__eq__"]], "__hash__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__hash__"]], "__mul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__mul__"]], "__neg__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__neg__"]], "__repr__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheRHSvector"]], "fipy.terms.powerlawconvectionterm": [[363, "module-fipy.terms.powerLawConvectionTerm"]], "justerrorvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justResidualVector"]], "matrix (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.solve"]], "sweep() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[363, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.sweep"]], "rhsvector (fipy.terms.residualterm.residualterm property)": [[364, "fipy.terms.residualTerm.ResidualTerm.RHSvector"]], "residualterm (class in fipy.terms.residualterm)": [[364, "fipy.terms.residualTerm.ResidualTerm"]], "__eq__() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.__eq__"]], "__hash__() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.__hash__"]], "__mul__() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.__mul__"]], "__neg__() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.__neg__"]], "__repr__() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.__repr__"]], "__rmul__() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.__rmul__"]], "cachematrix() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.cacheRHSvector"]], "fipy.terms.residualterm": [[364, "module-fipy.terms.residualTerm"]], "justerrorvector() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.justErrorVector"]], "justresidualvector() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.justResidualVector"]], "matrix (fipy.terms.residualterm.residualterm property)": [[364, "fipy.terms.residualTerm.ResidualTerm.matrix"]], "residualvectorandnorm() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.residualVectorAndNorm"]], "solve() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.solve"]], "sweep() (fipy.terms.residualterm.residualterm method)": [[364, "fipy.terms.residualTerm.ResidualTerm.sweep"]], "rhsvector (fipy.terms.sourceterm.sourceterm property)": [[365, "fipy.terms.sourceTerm.SourceTerm.RHSvector"]], "sourceterm (class in fipy.terms.sourceterm)": [[365, "fipy.terms.sourceTerm.SourceTerm"]], "__eq__() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.__eq__"]], "__hash__() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.__hash__"]], "__mul__() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.__mul__"]], "__neg__() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.__neg__"]], "__repr__() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.__repr__"]], "__rmul__() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.__rmul__"]], "cachematrix() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.cacheRHSvector"]], "fipy.terms.sourceterm": [[365, "module-fipy.terms.sourceTerm"]], "justerrorvector() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.justResidualVector"]], "matrix (fipy.terms.sourceterm.sourceterm property)": [[365, "fipy.terms.sourceTerm.SourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.solve"]], "sweep() (fipy.terms.sourceterm.sourceterm method)": [[365, "fipy.terms.sourceTerm.SourceTerm.sweep"]], "rhsvector (fipy.terms.term.term property)": [[366, "fipy.terms.term.Term.RHSvector"]], "term (class in fipy.terms.term)": [[366, "fipy.terms.term.Term"]], "__eq__() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.__eq__"]], "__hash__() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.__hash__"]], "__repr__() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.__repr__"]], "cachematrix() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.cacheMatrix"]], "cacherhsvector() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.cacheRHSvector"]], "fipy.terms.term": [[366, "module-fipy.terms.term"]], "justerrorvector() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.justErrorVector"]], "justresidualvector() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.justResidualVector"]], "matrix (fipy.terms.term.term property)": [[366, "fipy.terms.term.Term.matrix"]], "residualvectorandnorm() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.residualVectorAndNorm"]], "solve() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.solve"]], "sweep() (fipy.terms.term.term method)": [[366, "fipy.terms.term.Term.sweep"]], "fipy.terms.test": [[367, "module-fipy.terms.test"]], "rhsvector (fipy.terms.transientterm.transientterm property)": [[368, "fipy.terms.transientTerm.TransientTerm.RHSvector"]], "transientterm (class in fipy.terms.transientterm)": [[368, "fipy.terms.transientTerm.TransientTerm"]], "__eq__() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.__eq__"]], "__hash__() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.__hash__"]], "__mul__() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.__mul__"]], "__neg__() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.__neg__"]], "__repr__() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.__repr__"]], "__rmul__() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.__rmul__"]], "cachematrix() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.cacheRHSvector"]], "fipy.terms.transientterm": [[368, "module-fipy.terms.transientTerm"]], "justerrorvector() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.justErrorVector"]], "justresidualvector() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.justResidualVector"]], "matrix (fipy.terms.transientterm.transientterm property)": [[368, "fipy.terms.transientTerm.TransientTerm.matrix"]], "residualvectorandnorm() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.residualVectorAndNorm"]], "solve() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.solve"]], "sweep() (fipy.terms.transientterm.transientterm method)": [[368, "fipy.terms.transientTerm.TransientTerm.sweep"]], "fipy.terms.unaryterm": [[369, "module-fipy.terms.unaryTerm"]], "rhsvector (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.RHSvector"]], "upwindconvectionterm (class in fipy.terms.upwindconvectionterm)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm"]], "__eq__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.upwindconvectionterm": [[370, "module-fipy.terms.upwindConvectionTerm"]], "justerrorvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.solve"]], "sweep() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[370, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.sweep"]], "rhsvector (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.RHSvector"]], "vanleerconvectionterm (class in fipy.terms.vanleerconvectionterm)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm"]], "__eq__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__eq__"]], "__hash__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__hash__"]], "__mul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__mul__"]], "__neg__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__neg__"]], "__repr__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheRHSvector"]], "fipy.terms.vanleerconvectionterm": [[371, "module-fipy.terms.vanLeerConvectionTerm"]], "justerrorvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justResidualVector"]], "matrix (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.solve"]], "sweep() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[371, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.sweep"]], "fipy.testfipy": [[372, "module-fipy.testFiPy"]], "fipy.tests": [[373, "module-fipy.tests"]], "execbutnotest() (in module fipy.tests.doctestplus)": [[374, "fipy.tests.doctestPlus.execButNoTest"]], "fipy.tests.doctestplus": [[374, "module-fipy.tests.doctestPlus"]], "register_skipper() (in module fipy.tests.doctestplus)": [[374, "fipy.tests.doctestPlus.register_skipper"]], "report_skips() (in module fipy.tests.doctestplus)": [[374, "fipy.tests.doctestPlus.report_skips"]], "testmod() (in module fipy.tests.doctestplus)": [[374, "fipy.tests.doctestPlus.testmod"]], "fipy.tests.lateimporttest": [[375, "module-fipy.tests.lateImportTest"]], "deprecationerroringtestprogram (class in fipy.tests.test)": [[376, "fipy.tests.test.DeprecationErroringTestProgram"]], "finalize_options() (fipy.tests.test.test method)": [[376, "fipy.tests.test.test.finalize_options"]], "fipy.tests.test": [[376, "module-fipy.tests.test"]], "initialize_options() (fipy.tests.test.test method)": [[376, "fipy.tests.test.test.initialize_options"]], "test (class in fipy.tests.test)": [[376, "fipy.tests.test.test"]], "testprogram (class in fipy.tests.testprogram)": [[377, "fipy.tests.testProgram.TestProgram"]], "fipy.tests.testprogram": [[377, "module-fipy.tests.testProgram"]], "main (in module fipy.tests.testprogram)": [[377, "fipy.tests.testProgram.main"]], "physicalfield (class in fipy.tools)": [[378, "fipy.tools.PhysicalField"]], "sharedtemporaryfile() (in module fipy.tools)": [[378, "fipy.tools.SharedTemporaryFile"]], "__abs__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__abs__"]], "__add__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__add__"]], "__array__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__bool__"]], "__div__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__div__"]], "__eq__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__eq__"]], "__float__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__float__"]], "__ge__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__ge__"]], "__getitem__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__gt__"]], "__hash__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__hash__"]], "__le__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__le__"]], "__lt__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__lt__"]], "__mod__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__mod__"]], "__mul__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__mul__"]], "__ne__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__ne__"]], "__neg__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__pow__"]], "__radd__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__radd__"]], "__repr__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__repr__"]], "__rmul__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__rmul__"]], "__setitem__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__setitem__"]], "__str__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__str__"]], "__sub__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.__truediv__"]], "add() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.add"]], "allclose() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.allclose"]], "allequal() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.allequal"]], "arccos() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.arccos"]], "arccosh() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.arccosh"]], "arcsin() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.arcsin"]], "arctan() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.arctan"]], "arctan2() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.arctan2"]], "arctanh() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.arctanh"]], "ceil() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.ceil"]], "conjugate() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.conjugate"]], "converttounit() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.convertToUnit"]], "copy() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.copy"]], "cos() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.cos"]], "cosh() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.cosh"]], "divide() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.divide"]], "dot() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.dot"]], "fipy.tools": [[378, "module-fipy.tools"]], "floor() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.floor"]], "getsctype() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.inRadians"]], "insiunits() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.inUnitsOf"]], "itemset() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.itemset"]], "log() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.log"]], "log10() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.log10"]], "multiply() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.multiply"]], "numericvalue (fipy.tools.physicalfield property)": [[378, "fipy.tools.PhysicalField.numericValue"]], "parallelcomm (in module fipy.tools)": [[378, "fipy.tools.parallelComm"]], "put() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.put"]], "reshape() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.reshape"]], "serialcomm (in module fipy.tools)": [[378, "fipy.tools.serialComm"]], "shape (fipy.tools.physicalfield property)": [[378, "fipy.tools.PhysicalField.shape"]], "sign() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.sign"]], "sin() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.sin"]], "sinh() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.sinh"]], "sqrt() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.sqrt"]], "subtract() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.subtract"]], "sum() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.sum"]], "take() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.take"]], "tan() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.tan"]], "tanh() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.tanh"]], "tostring() (fipy.tools.physicalfield method)": [[378, "fipy.tools.PhysicalField.tostring"]], "unit (fipy.tools.physicalfield property)": [[378, "fipy.tools.PhysicalField.unit"]], "fipy.tools.comms": [[379, "module-fipy.tools.comms"]], "commwrapper (class in fipy.tools.comms.commwrapper)": [[380, "fipy.tools.comms.commWrapper.CommWrapper"]], "__getstate__() (fipy.tools.comms.commwrapper.commwrapper method)": [[380, "fipy.tools.comms.commWrapper.CommWrapper.__getstate__"]], "__repr__() (fipy.tools.comms.commwrapper.commwrapper method)": [[380, "fipy.tools.comms.commWrapper.CommWrapper.__repr__"]], "fipy.tools.comms.commwrapper": [[380, "module-fipy.tools.comms.commWrapper"]], "dummycomm (class in fipy.tools.comms.dummycomm)": [[381, "fipy.tools.comms.dummyComm.DummyComm"]], "__getstate__() (fipy.tools.comms.dummycomm.dummycomm method)": [[381, "fipy.tools.comms.dummyComm.DummyComm.__getstate__"]], "__repr__() (fipy.tools.comms.dummycomm.dummycomm method)": [[381, "fipy.tools.comms.dummyComm.DummyComm.__repr__"]], "fipy.tools.comms.dummycomm": [[381, "module-fipy.tools.comms.dummyComm"]], "print() (in module fipy.tools.debug)": [[382, "fipy.tools.debug.PRINT"]], "fipy.tools.debug": [[382, "module-fipy.tools.debug"]], "deprecate() (in module fipy.tools.decorators)": [[383, "fipy.tools.decorators.deprecate"]], "fipy.tools.decorators": [[383, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[384, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.dictwithdefault": [[385, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.numberdict": [[386, "module-fipy.tools.dimensions.NumberDict"]], "physicalfield (class in fipy.tools.dimensions.physicalfield)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField"]], "physicalunit (class in fipy.tools.dimensions.physicalfield)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit"]], "__abs__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__abs__"]], "__add__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__add__"]], "__array__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__bool__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__div__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__div__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__eq__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__eq__"]], "__float__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__float__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__ge__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ge__"]], "__getitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__gt__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__gt__"]], "__hash__ (fipy.tools.dimensions.physicalfield.physicalunit attribute)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__hash__"]], "__hash__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__hash__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__le__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__le__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__lt__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__lt__"]], "__mod__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__mod__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__mul__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__mul__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__ne__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ne__"]], "__neg__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__pow__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__pow__"]], "__radd__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__radd__"]], "__rdiv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rdiv__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__repr__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__repr__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__rmul__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rmul__"]], "__rtruediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rtruediv__"]], "__setitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__setitem__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__str__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__str__"]], "__sub__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.__truediv__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.__truediv__"]], "add() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.add"]], "allclose() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.allclose"]], "allequal() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.allequal"]], "arccos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.arccos"]], "arccosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.arccosh"]], "arcsin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.arcsin"]], "arctan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.arctan"]], "arctan2() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.arctan2"]], "arctanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.arctanh"]], "ceil() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.ceil"]], "conjugate() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.conjugate"]], "conversionfactorto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionFactorTo"]], "conversiontupleto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionTupleTo"]], "converttounit() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.convertToUnit"]], "copy() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.copy"]], "cos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.cos"]], "cosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.cosh"]], "divide() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.divide"]], "dot() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.dot"]], "fipy.tools.dimensions.physicalfield": [[387, "module-fipy.tools.dimensions.physicalField"]], "floor() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.floor"]], "getsctype() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.inRadians"]], "insiunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.inUnitsOf"]], "isangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.isAngle"]], "iscompatible() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.isCompatible"]], "isdimensionless() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionless"]], "isdimensionlessorangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionlessOrAngle"]], "isinverseangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.isInverseAngle"]], "itemset() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.itemset"]], "log() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.log"]], "log10() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.log10"]], "multiply() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.multiply"]], "name() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.name"]], "numericvalue (fipy.tools.dimensions.physicalfield.physicalfield property)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.numericValue"]], "put() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.put"]], "reshape() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.reshape"]], "setname() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalUnit.setName"]], "shape (fipy.tools.dimensions.physicalfield.physicalfield property)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.shape"]], "sign() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.sign"]], "sin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.sin"]], "sinh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.sinh"]], "sqrt() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.sqrt"]], "subtract() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.subtract"]], "sum() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.sum"]], "take() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.take"]], "tan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.tan"]], "tanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.tanh"]], "tostring() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.tostring"]], "unit (fipy.tools.dimensions.physicalfield.physicalfield property)": [[387, "fipy.tools.dimensions.physicalField.PhysicalField.unit"]], "read() (in module fipy.tools.dump)": [[388, "fipy.tools.dump.read"]], "write() (in module fipy.tools.dump)": [[388, "fipy.tools.dump.write"]], "fipy.tools.inline": [[389, "module-fipy.tools.inline"]], "fipy.tools.logging": [[390, "module-fipy.tools.logging"]], "conda_info() (in module fipy.tools.logging.environment)": [[391, "fipy.tools.logging.environment.conda_info"]], "fipy.tools.logging.environment": [[391, "module-fipy.tools.logging.environment"]], "package_info() (in module fipy.tools.logging.environment)": [[391, "fipy.tools.logging.environment.package_info"]], "platform_info() (in module fipy.tools.logging.environment)": [[391, "fipy.tools.logging.environment.platform_info"]], "l1norm() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.L1norm"]], "l2norm() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.L2norm"]], "linfnorm() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.LINFnorm"]], "all() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.all"]], "allclose() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.allclose"]], "allequal() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.allequal"]], "dot() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.dot"]], "fipy.tools.numerix": [[392, "module-fipy.tools.numerix"]], "getshape() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.getShape"]], "getunit() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.getUnit"]], "isclose() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.isclose"]], "nearest() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.nearest"]], "put() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.put"]], "rank() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.rank"]], "reshape() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.reshape"]], "sqrtdot() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.sqrtDot"]], "sum() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.sum"]], "take() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.take"]], "tostring() (in module fipy.tools.numerix)": [[392, "fipy.tools.numerix.tostring"]], "parse() (in module fipy.tools.parser)": [[393, "fipy.tools.parser.parse"]], "sharedtemporaryfile() (in module fipy.tools.sharedtempfile)": [[394, "fipy.tools.sharedtempfile.SharedTemporaryFile"]], "fipy.tools.sharedtempfile": [[394, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[395, "module-fipy.tools.test"]], "fipy.tools.vector": [[396, "module-fipy.tools.vector"]], "prune() (in module fipy.tools.vector)": [[396, "fipy.tools.vector.prune"]], "putadd() (in module fipy.tools.vector)": [[396, "fipy.tools.vector.putAdd"]], "fipy.tools.version": [[397, "module-fipy.tools.version"]], "fipy.variables": [[398, "module-fipy.variables"]], "fipy.variables.addoverfacesvariable": [[399, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticcelltofacevariable": [[400, "module-fipy.variables.arithmeticCellToFaceVariable"]], "betanoisevariable (class in fipy.variables.betanoisevariable)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable"]], "__abs__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__abs__"]], "__and__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__and__"]], "__array__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__bool__"]], "__call__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__call__"]], "__eq__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__invert__"]], "__le__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__le__"]], "__lt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ne__"]], "__new__() (fipy.variables.betanoisevariable.betanoisevariable static method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__or__"]], "__pow__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__str__"]], "all() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.all"]], "allclose() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.allclose"]], "any() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constrain"]], "constraintmask (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constraintMask"]], "copy() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.copy"]], "dot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dot"]], "facegrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceValue"]], "fipy.variables.betanoisevariable": [[401, "module-fipy.variables.betaNoiseVariable"]], "gaussgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.globalValue"]], "grad (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.mag"]], "max() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.max"]], "min() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.old"]], "rdot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.rdot"]], "release() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.release"]], "scramble() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.scramble"]], "setvalue() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.setValue"]], "shape (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.shape"]], "std() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.std"]], "unit (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.unit"]], "updateold() (fipy.variables.betanoisevariable.betanoisevariable method)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.updateOld"]], "value (fipy.variables.betanoisevariable.betanoisevariable property)": [[401, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.value"]], "fipy.variables.binaryoperatorvariable": [[402, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.celltofacevariable": [[403, "module-fipy.variables.cellToFaceVariable"]], "cellvariable (class in fipy.variables.cellvariable)": [[404, "fipy.variables.cellVariable.CellVariable"]], "__abs__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__abs__"]], "__and__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__and__"]], "__array__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__array__"]], "__array_wrap__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__array_wrap__"]], "__bool__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__bool__"]], "__call__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__call__"]], "__eq__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__eq__"]], "__ge__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__ge__"]], "__getitem__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__getitem__"]], "__getstate__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__getstate__"]], "__gt__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__gt__"]], "__hash__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__hash__"]], "__invert__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__invert__"]], "__le__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__le__"]], "__lt__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__lt__"]], "__ne__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__ne__"]], "__new__() (fipy.variables.cellvariable.cellvariable static method)": [[404, "fipy.variables.cellVariable.CellVariable.__new__"]], "__nonzero__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__nonzero__"]], "__or__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__or__"]], "__pow__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__pow__"]], "__repr__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__repr__"]], "__setstate__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__setstate__"]], "__str__() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.__str__"]], "all() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.all"]], "allclose() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.allclose"]], "any() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.any"]], "arithmeticfacevalue (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.cellVolumeAverage"]], "constrain() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.constrain"]], "constraintmask (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.constraintMask"]], "copy() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.copy"]], "dot() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.dot"]], "facegrad (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.faceGrad"]], "facegradaverage (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.faceGradAverage"]], "facevalue (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.faceValue"]], "fipy.variables.cellvariable": [[404, "module-fipy.variables.cellVariable"]], "gaussgrad (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.gaussGrad"]], "getsctype() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.getsctype"]], "globalvalue (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.globalValue"]], "grad (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.grad"]], "harmonicfacevalue (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.inBaseUnits"]], "inunitsof() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.leastSquaresGrad"]], "mag (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.mag"]], "max() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.max"]], "min() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.min"]], "minmodfacevalue (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.minmodFaceValue"]], "old (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.old"]], "rdot() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.rdot"]], "release() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.release"]], "setvalue() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.setValue"]], "shape (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.shape"]], "std() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.std"]], "unit (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.unit"]], "updateold() (fipy.variables.cellvariable.cellvariable method)": [[404, "fipy.variables.cellVariable.CellVariable.updateOld"]], "value (fipy.variables.cellvariable.cellvariable property)": [[404, "fipy.variables.cellVariable.CellVariable.value"]], "fipy.variables.constant": [[405, "module-fipy.variables.constant"]], "fipy.variables.constraintmask": [[406, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledcellvariable": [[407, "module-fipy.variables.coupledCellVariable"]], "distancevariable (class in fipy.variables.distancevariable)": [[408, "fipy.variables.distanceVariable.DistanceVariable"]], "__abs__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__abs__"]], "__and__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__and__"]], "__array__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__array__"]], "__array_wrap__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__array_wrap__"]], "__bool__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__bool__"]], "__call__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__call__"]], "__eq__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__eq__"]], "__ge__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__ge__"]], "__getitem__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__getitem__"]], "__getstate__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__getstate__"]], "__gt__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__gt__"]], "__hash__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__hash__"]], "__invert__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__invert__"]], "__le__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__le__"]], "__lt__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__lt__"]], "__ne__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__ne__"]], "__new__() (fipy.variables.distancevariable.distancevariable static method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__new__"]], "__nonzero__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__nonzero__"]], "__or__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__or__"]], "__pow__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__pow__"]], "__repr__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__repr__"]], "__setstate__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__setstate__"]], "__str__() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.__str__"]], "all() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.all"]], "allclose() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.allclose"]], "any() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.any"]], "arithmeticfacevalue (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.arithmeticFaceValue"]], "calcdistancefunction() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.calcDistanceFunction"]], "cellinterfaceareas (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.cellInterfaceAreas"]], "cellvolumeaverage (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.cellVolumeAverage"]], "constrain() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.constrain"]], "constraintmask (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.constraintMask"]], "copy() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.copy"]], "dot() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.dot"]], "extendvariable() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.extendVariable"]], "facegrad (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.faceGrad"]], "facegradaverage (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.faceGradAverage"]], "facevalue (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.faceValue"]], "fipy.variables.distancevariable": [[408, "module-fipy.variables.distanceVariable"]], "gaussgrad (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.gaussGrad"]], "getsctype() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.getsctype"]], "globalvalue (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.globalValue"]], "grad (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.grad"]], "harmonicfacevalue (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.leastSquaresGrad"]], "mag (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.mag"]], "max() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.max"]], "min() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.min"]], "minmodfacevalue (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.minmodFaceValue"]], "old (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.old"]], "rdot() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.rdot"]], "release() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.release"]], "setvalue() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.setValue"]], "shape (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.shape"]], "std() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.std"]], "unit (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.unit"]], "updateold() (fipy.variables.distancevariable.distancevariable method)": [[408, "fipy.variables.distanceVariable.DistanceVariable.updateOld"]], "value (fipy.variables.distancevariable.distancevariable property)": [[408, "fipy.variables.distanceVariable.DistanceVariable.value"]], "exponentialnoisevariable (class in fipy.variables.exponentialnoisevariable)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable"]], "__abs__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__abs__"]], "__and__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__and__"]], "__array__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__bool__"]], "__call__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__call__"]], "__eq__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__eq__"]], "__ge__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__gt__"]], "__hash__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__hash__"]], "__invert__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__invert__"]], "__le__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__le__"]], "__lt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__lt__"]], "__ne__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ne__"]], "__new__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable static method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__or__"]], "__pow__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__pow__"]], "__repr__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__setstate__"]], "__str__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__str__"]], "all() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.all"]], "allclose() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.allclose"]], "any() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constrain"]], "constraintmask (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constraintMask"]], "copy() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.copy"]], "dot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dot"]], "facegrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceValue"]], "fipy.variables.exponentialnoisevariable": [[409, "module-fipy.variables.exponentialNoiseVariable"]], "gaussgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.getsctype"]], "globalvalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.globalValue"]], "grad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.mag"]], "max() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.max"]], "min() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.min"]], "minmodfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.minmodFaceValue"]], "old (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.old"]], "rdot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.rdot"]], "release() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.release"]], "scramble() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.scramble"]], "setvalue() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.setValue"]], "shape (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.shape"]], "std() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.std"]], "unit (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.unit"]], "updateold() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.updateOld"]], "value (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[409, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.value"]], "fipy.variables.facegradcontributionsvariable": [[410, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.facegradvariable": [[411, "module-fipy.variables.faceGradVariable"]], "facevariable (class in fipy.variables.facevariable)": [[412, "fipy.variables.faceVariable.FaceVariable"]], "__abs__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__abs__"]], "__and__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__and__"]], "__array__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__array__"]], "__array_wrap__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__bool__"]], "__call__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__call__"]], "__eq__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__eq__"]], "__ge__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__ge__"]], "__getitem__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__getitem__"]], "__getstate__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__getstate__"]], "__gt__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__gt__"]], "__hash__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__hash__"]], "__invert__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__invert__"]], "__le__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__le__"]], "__lt__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__lt__"]], "__ne__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__ne__"]], "__new__() (fipy.variables.facevariable.facevariable static method)": [[412, "fipy.variables.faceVariable.FaceVariable.__new__"]], "__nonzero__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__nonzero__"]], "__or__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__or__"]], "__pow__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__pow__"]], "__repr__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__repr__"]], "__setstate__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__setstate__"]], "__str__() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.__str__"]], "all() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.all"]], "allclose() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.allclose"]], "any() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.any"]], "constrain() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.constrain"]], "constraintmask (fipy.variables.facevariable.facevariable property)": [[412, "fipy.variables.faceVariable.FaceVariable.constraintMask"]], "copy() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.copy"]], "divergence (fipy.variables.facevariable.facevariable property)": [[412, "fipy.variables.faceVariable.FaceVariable.divergence"]], "dot() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.dot"]], "fipy.variables.facevariable": [[412, "module-fipy.variables.faceVariable"]], "getsctype() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.getsctype"]], "inbaseunits() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.inUnitsOf"]], "mag (fipy.variables.facevariable.facevariable property)": [[412, "fipy.variables.faceVariable.FaceVariable.mag"]], "max() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.max"]], "min() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.min"]], "rdot() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.rdot"]], "release() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.release"]], "setvalue() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.setValue"]], "shape (fipy.variables.facevariable.facevariable property)": [[412, "fipy.variables.faceVariable.FaceVariable.shape"]], "std() (fipy.variables.facevariable.facevariable method)": [[412, "fipy.variables.faceVariable.FaceVariable.std"]], "unit (fipy.variables.facevariable.facevariable property)": [[412, "fipy.variables.faceVariable.FaceVariable.unit"]], "value (fipy.variables.facevariable.facevariable property)": [[412, "fipy.variables.faceVariable.FaceVariable.value"]], "gammanoisevariable (class in fipy.variables.gammanoisevariable)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable"]], "__abs__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__abs__"]], "__and__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__and__"]], "__array__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__bool__"]], "__call__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__call__"]], "__eq__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__invert__"]], "__le__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__le__"]], "__lt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ne__"]], "__new__() (fipy.variables.gammanoisevariable.gammanoisevariable static method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__or__"]], "__pow__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__str__"]], "all() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.all"]], "allclose() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.allclose"]], "any() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constrain"]], "constraintmask (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constraintMask"]], "copy() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.copy"]], "dot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dot"]], "facegrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceValue"]], "fipy.variables.gammanoisevariable": [[413, "module-fipy.variables.gammaNoiseVariable"]], "gaussgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.globalValue"]], "grad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.mag"]], "max() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.max"]], "min() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.old"]], "rdot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.rdot"]], "release() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.release"]], "scramble() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.scramble"]], "setvalue() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.setValue"]], "shape (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.shape"]], "std() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.std"]], "unit (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.unit"]], "updateold() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.updateOld"]], "value (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[413, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.value"]], "fipy.variables.gausscellgradvariable": [[414, "module-fipy.variables.gaussCellGradVariable"]], "gaussiannoisevariable (class in fipy.variables.gaussiannoisevariable)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable"]], "__abs__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__abs__"]], "__and__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__and__"]], "__array__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__bool__"]], "__call__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__call__"]], "__eq__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__invert__"]], "__le__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__le__"]], "__lt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ne__"]], "__new__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable static method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__or__"]], "__pow__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__str__"]], "all() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.all"]], "allclose() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.allclose"]], "any() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constrain"]], "constraintmask (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constraintMask"]], "copy() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.copy"]], "dot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dot"]], "facegrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceValue"]], "fipy.variables.gaussiannoisevariable": [[415, "module-fipy.variables.gaussianNoiseVariable"]], "gaussgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.globalValue"]], "grad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.mag"]], "max() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.max"]], "min() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.old"]], "rdot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.rdot"]], "release() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.release"]], "scramble() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.scramble"]], "setvalue() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.setValue"]], "shape (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.shape"]], "std() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.std"]], "unit (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.unit"]], "updateold() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.updateOld"]], "value (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[415, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.value"]], "fipy.variables.harmoniccelltofacevariable": [[416, "module-fipy.variables.harmonicCellToFaceVariable"]], "histogramvariable (class in fipy.variables.histogramvariable)": [[417, "fipy.variables.histogramVariable.HistogramVariable"]], "__abs__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__abs__"]], "__and__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__and__"]], "__array__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__array__"]], "__array_wrap__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__array_wrap__"]], "__bool__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__bool__"]], "__call__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__call__"]], "__eq__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__eq__"]], "__ge__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__ge__"]], "__getitem__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__getitem__"]], "__getstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__getstate__"]], "__gt__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__gt__"]], "__hash__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__hash__"]], "__invert__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__invert__"]], "__le__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__le__"]], "__lt__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__lt__"]], "__ne__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__ne__"]], "__new__() (fipy.variables.histogramvariable.histogramvariable static method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__new__"]], "__nonzero__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__nonzero__"]], "__or__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__or__"]], "__pow__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__pow__"]], "__repr__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__repr__"]], "__setstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__setstate__"]], "__str__() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.__str__"]], "all() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.all"]], "allclose() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.allclose"]], "any() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.any"]], "arithmeticfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.cellVolumeAverage"]], "constrain() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.constrain"]], "constraintmask (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.constraintMask"]], "copy() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.copy"]], "dot() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.dot"]], "facegrad (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.faceGrad"]], "facegradaverage (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.faceGradAverage"]], "facevalue (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.faceValue"]], "fipy.variables.histogramvariable": [[417, "module-fipy.variables.histogramVariable"]], "gaussgrad (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.gaussGrad"]], "getsctype() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.getsctype"]], "globalvalue (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.globalValue"]], "grad (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.grad"]], "harmonicfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.inBaseUnits"]], "inunitsof() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.leastSquaresGrad"]], "mag (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.mag"]], "max() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.max"]], "min() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.min"]], "minmodfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.minmodFaceValue"]], "old (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.old"]], "rdot() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.rdot"]], "release() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.release"]], "setvalue() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.setValue"]], "shape (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.shape"]], "std() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.std"]], "unit (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.unit"]], "updateold() (fipy.variables.histogramvariable.histogramvariable method)": [[417, "fipy.variables.histogramVariable.HistogramVariable.updateOld"]], "value (fipy.variables.histogramvariable.histogramvariable property)": [[417, "fipy.variables.histogramVariable.HistogramVariable.value"]], "fipy.variables.interfaceareavariable": [[418, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceflagvariable": [[419, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastsquarescellgradvariable": [[420, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelsetdiffusionvariable": [[421, "module-fipy.variables.levelSetDiffusionVariable"]], "meshvariable (class in fipy.variables.meshvariable)": [[422, "fipy.variables.meshVariable.MeshVariable"]], "__abs__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__abs__"]], "__and__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__and__"]], "__array__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__array__"]], "__array_wrap__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__array_wrap__"]], "__bool__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__bool__"]], "__call__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__call__"]], "__eq__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__eq__"]], "__ge__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__ge__"]], "__getitem__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__getitem__"]], "__getstate__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__getstate__"]], "__gt__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__gt__"]], "__hash__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__hash__"]], "__invert__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__invert__"]], "__le__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__le__"]], "__lt__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__lt__"]], "__ne__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__ne__"]], "__new__() (fipy.variables.meshvariable.meshvariable static method)": [[422, "fipy.variables.meshVariable.MeshVariable.__new__"]], "__nonzero__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__nonzero__"]], "__or__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__or__"]], "__pow__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__pow__"]], "__repr__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__repr__"]], "__setstate__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__setstate__"]], "__str__() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.__str__"]], "all() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.all"]], "allclose() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.allclose"]], "any() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.any"]], "constrain() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.constrain"]], "constraintmask (fipy.variables.meshvariable.meshvariable property)": [[422, "fipy.variables.meshVariable.MeshVariable.constraintMask"]], "copy() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.copy"]], "dot() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.dot"]], "fipy.variables.meshvariable": [[422, "module-fipy.variables.meshVariable"]], "getsctype() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.getsctype"]], "inbaseunits() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.inBaseUnits"]], "inunitsof() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.inUnitsOf"]], "mag (fipy.variables.meshvariable.meshvariable property)": [[422, "fipy.variables.meshVariable.MeshVariable.mag"]], "max() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.max"]], "min() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.min"]], "rdot() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.rdot"]], "release() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.release"]], "setvalue() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.setValue"]], "shape (fipy.variables.meshvariable.meshvariable property)": [[422, "fipy.variables.meshVariable.MeshVariable.shape"]], "std() (fipy.variables.meshvariable.meshvariable method)": [[422, "fipy.variables.meshVariable.MeshVariable.std"]], "unit (fipy.variables.meshvariable.meshvariable property)": [[422, "fipy.variables.meshVariable.MeshVariable.unit"]], "value (fipy.variables.meshvariable.meshvariable property)": [[422, "fipy.variables.meshVariable.MeshVariable.value"]], "fipy.variables.minmodcelltofacevariable": [[423, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modcellgradvariable": [[424, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modcelltofacevariable": [[425, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modfacegradvariable": [[426, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modphysicalfield": [[427, "module-fipy.variables.modPhysicalField"]], "modularvariable (class in fipy.variables.modularvariable)": [[428, "fipy.variables.modularVariable.ModularVariable"]], "__abs__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__abs__"]], "__and__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__and__"]], "__array__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__array__"]], "__array_wrap__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__array_wrap__"]], "__bool__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__bool__"]], "__call__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__call__"]], "__eq__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__eq__"]], "__ge__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__ge__"]], "__getitem__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__getitem__"]], "__getstate__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__getstate__"]], "__gt__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__gt__"]], "__hash__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__hash__"]], "__invert__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__invert__"]], "__le__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__le__"]], "__lt__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__lt__"]], "__ne__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__ne__"]], "__new__() (fipy.variables.modularvariable.modularvariable static method)": [[428, "fipy.variables.modularVariable.ModularVariable.__new__"]], "__nonzero__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__nonzero__"]], "__or__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__or__"]], "__pow__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__pow__"]], "__repr__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__repr__"]], "__setstate__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__setstate__"]], "__str__() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.__str__"]], "all() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.all"]], "allclose() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.allclose"]], "any() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.any"]], "arithmeticfacevalue (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.cellVolumeAverage"]], "constrain() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.constrain"]], "constraintmask (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.constraintMask"]], "copy() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.copy"]], "dot() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.dot"]], "facegrad (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.faceGrad"]], "facegradaverage (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.faceGradAverage"]], "facegradnomod (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.faceGradNoMod"]], "facevalue (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.faceValue"]], "fipy.variables.modularvariable": [[428, "module-fipy.variables.modularVariable"]], "gaussgrad (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.gaussGrad"]], "getsctype() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.getsctype"]], "globalvalue (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.globalValue"]], "grad (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.grad"]], "harmonicfacevalue (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.inBaseUnits"]], "inunitsof() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.leastSquaresGrad"]], "mag (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.mag"]], "max() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.max"]], "min() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.min"]], "minmodfacevalue (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.minmodFaceValue"]], "old (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.old"]], "rdot() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.rdot"]], "release() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.release"]], "setvalue() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.setValue"]], "shape (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.shape"]], "std() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.std"]], "unit (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.unit"]], "updateold() (fipy.variables.modularvariable.modularvariable method)": [[428, "fipy.variables.modularVariable.ModularVariable.updateOld"]], "value (fipy.variables.modularvariable.modularvariable property)": [[428, "fipy.variables.modularVariable.ModularVariable.value"]], "noisevariable (class in fipy.variables.noisevariable)": [[429, "fipy.variables.noiseVariable.NoiseVariable"]], "__abs__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__abs__"]], "__and__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__and__"]], "__array__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__bool__"]], "__call__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__call__"]], "__eq__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__eq__"]], "__ge__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__ge__"]], "__getitem__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__getstate__"]], "__gt__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__gt__"]], "__hash__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__hash__"]], "__invert__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__invert__"]], "__le__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__le__"]], "__lt__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__lt__"]], "__ne__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__ne__"]], "__new__() (fipy.variables.noisevariable.noisevariable static method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__new__"]], "__nonzero__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__nonzero__"]], "__or__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__or__"]], "__pow__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__pow__"]], "__repr__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__repr__"]], "__setstate__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__setstate__"]], "__str__() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.__str__"]], "all() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.all"]], "allclose() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.allclose"]], "any() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.constrain"]], "constraintmask (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.constraintMask"]], "copy() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.copy"]], "dot() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.dot"]], "facegrad (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.faceValue"]], "fipy.variables.noisevariable": [[429, "module-fipy.variables.noiseVariable"]], "gaussgrad (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.getsctype"]], "globalvalue (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.globalValue"]], "grad (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.mag"]], "max() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.max"]], "min() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.min"]], "minmodfacevalue (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.minmodFaceValue"]], "old (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.old"]], "rdot() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.rdot"]], "release() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.release"]], "scramble() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.scramble"]], "setvalue() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.setValue"]], "shape (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.shape"]], "std() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.std"]], "unit (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.unit"]], "updateold() (fipy.variables.noisevariable.noisevariable method)": [[429, "fipy.variables.noiseVariable.NoiseVariable.updateOld"]], "value (fipy.variables.noisevariable.noisevariable property)": [[429, "fipy.variables.noiseVariable.NoiseVariable.value"]], "fipy.variables.operatorvariable": [[430, "module-fipy.variables.operatorVariable"]], "scharfettergummelfacevariable (class in fipy.variables.scharfettergummelfacevariable)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable"]], "__abs__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__abs__"]], "__and__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__and__"]], "__array__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array__"]], "__array_wrap__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__bool__"]], "__call__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__call__"]], "__eq__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__eq__"]], "__ge__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ge__"]], "__getitem__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getitem__"]], "__getstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getstate__"]], "__gt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__gt__"]], "__hash__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__hash__"]], "__invert__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__invert__"]], "__le__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__le__"]], "__lt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__lt__"]], "__ne__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ne__"]], "__new__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable static method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__new__"]], "__nonzero__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__nonzero__"]], "__or__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__or__"]], "__pow__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__pow__"]], "__repr__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__repr__"]], "__setstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__setstate__"]], "__str__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__str__"]], "all() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.all"]], "allclose() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.allclose"]], "any() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.any"]], "constrain() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constrain"]], "constraintmask (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constraintMask"]], "copy() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.copy"]], "divergence (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.divergence"]], "dot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dot"]], "fipy.variables.scharfettergummelfacevariable": [[431, "module-fipy.variables.scharfetterGummelFaceVariable"]], "getsctype() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.getsctype"]], "inbaseunits() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inUnitsOf"]], "mag (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.mag"]], "max() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.max"]], "min() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.min"]], "rdot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.rdot"]], "release() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.release"]], "setvalue() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.setValue"]], "shape (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.shape"]], "std() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.std"]], "unit (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.unit"]], "value (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[431, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.value"]], "surfactantconvectionvariable (class in fipy.variables.surfactantconvectionvariable)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable"]], "__abs__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__abs__"]], "__and__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__and__"]], "__array__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__bool__"]], "__call__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__call__"]], "__eq__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__eq__"]], "__ge__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__gt__"]], "__hash__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__hash__"]], "__invert__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__invert__"]], "__le__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__le__"]], "__lt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__lt__"]], "__ne__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ne__"]], "__new__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable static method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__or__"]], "__pow__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__pow__"]], "__repr__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__setstate__"]], "__str__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__str__"]], "all() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.all"]], "allclose() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.allclose"]], "any() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.any"]], "constrain() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constrain"]], "constraintmask (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constraintMask"]], "copy() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.copy"]], "divergence (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.divergence"]], "dot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dot"]], "fipy.variables.surfactantconvectionvariable": [[432, "module-fipy.variables.surfactantConvectionVariable"]], "getsctype() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.getsctype"]], "inbaseunits() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inUnitsOf"]], "mag (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.mag"]], "max() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.max"]], "min() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.min"]], "rdot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.rdot"]], "release() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.release"]], "setvalue() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.setValue"]], "shape (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.shape"]], "std() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.std"]], "unit (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.unit"]], "value (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[432, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.value"]], "surfactantvariable (class in fipy.variables.surfactantvariable)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable"]], "__abs__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__abs__"]], "__and__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__and__"]], "__array__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__bool__"]], "__call__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__call__"]], "__eq__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__eq__"]], "__ge__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__gt__"]], "__hash__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__hash__"]], "__invert__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__invert__"]], "__le__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__le__"]], "__lt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__lt__"]], "__ne__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__ne__"]], "__new__() (fipy.variables.surfactantvariable.surfactantvariable static method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__or__"]], "__pow__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__pow__"]], "__repr__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__setstate__"]], "__str__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.__str__"]], "all() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.all"]], "allclose() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.allclose"]], "any() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.any"]], "arithmeticfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.cellVolumeAverage"]], "constrain() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.constrain"]], "constraintmask (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.constraintMask"]], "copy() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.copy"]], "dot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.dot"]], "facegrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.faceGrad"]], "facegradaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.faceGradAverage"]], "facevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.faceValue"]], "fipy.variables.surfactantvariable": [[433, "module-fipy.variables.surfactantVariable"]], "gaussgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.gaussGrad"]], "getsctype() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.getsctype"]], "globalvalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.globalValue"]], "grad (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.grad"]], "harmonicfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.inUnitsOf"]], "interfacevar (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.interfaceVar"]], "leastsquaresgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.leastSquaresGrad"]], "mag (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.mag"]], "max() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.max"]], "min() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.min"]], "minmodfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.minmodFaceValue"]], "old (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.old"]], "rdot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.rdot"]], "release() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.release"]], "setvalue() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.setValue"]], "shape (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.shape"]], "std() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.std"]], "unit (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.unit"]], "updateold() (fipy.variables.surfactantvariable.surfactantvariable method)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.updateOld"]], "value (fipy.variables.surfactantvariable.surfactantvariable property)": [[433, "fipy.variables.surfactantVariable.SurfactantVariable.value"]], "fipy.variables.test": [[434, "module-fipy.variables.test"]], "fipy.variables.unaryoperatorvariable": [[435, "module-fipy.variables.unaryOperatorVariable"]], "uniformnoisevariable (class in fipy.variables.uniformnoisevariable)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable"]], "__abs__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__abs__"]], "__and__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__and__"]], "__array__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__bool__"]], "__call__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__call__"]], "__eq__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__eq__"]], "__ge__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__gt__"]], "__hash__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__hash__"]], "__invert__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__invert__"]], "__le__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__le__"]], "__lt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__lt__"]], "__ne__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ne__"]], "__new__() (fipy.variables.uniformnoisevariable.uniformnoisevariable static method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__or__"]], "__pow__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__pow__"]], "__repr__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__setstate__"]], "__str__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__str__"]], "all() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.all"]], "allclose() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.allclose"]], "any() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constrain"]], "constraintmask (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constraintMask"]], "copy() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.copy"]], "dot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dot"]], "facegrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceValue"]], "fipy.variables.uniformnoisevariable": [[436, "module-fipy.variables.uniformNoiseVariable"]], "gaussgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.getsctype"]], "globalvalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.globalValue"]], "grad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.mag"]], "max() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.max"]], "min() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.min"]], "minmodfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.minmodFaceValue"]], "old (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.old"]], "rdot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.rdot"]], "release() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.release"]], "scramble() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.scramble"]], "setvalue() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.setValue"]], "shape (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.shape"]], "std() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.std"]], "unit (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.unit"]], "updateold() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.updateOld"]], "value (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[436, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.value"]], "variable (class in fipy.variables.variable)": [[437, "fipy.variables.variable.Variable"]], "__abs__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__abs__"]], "__and__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__and__"]], "__array__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__array__"]], "__array_wrap__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__array_wrap__"]], "__bool__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__bool__"]], "__call__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__call__"]], "__eq__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__eq__"]], "__ge__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__ge__"]], "__getitem__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__getitem__"]], "__getstate__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__getstate__"]], "__gt__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__gt__"]], "__hash__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__hash__"]], "__invert__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__invert__"]], "__le__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__le__"]], "__lt__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__lt__"]], "__ne__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__ne__"]], "__new__() (fipy.variables.variable.variable static method)": [[437, "fipy.variables.variable.Variable.__new__"]], "__nonzero__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__nonzero__"]], "__or__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__or__"]], "__pow__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__pow__"]], "__repr__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__repr__"]], "__setstate__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__setstate__"]], "__str__() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.__str__"]], "all() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.all"]], "allclose() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.allclose"]], "any() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.any"]], "constrain() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.constrain"]], "copy() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.copy"]], "fipy.variables.variable": [[437, "module-fipy.variables.variable"]], "getsctype() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.getsctype"]], "inbaseunits() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.inBaseUnits"]], "inunitsof() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.inUnitsOf"]], "mag (fipy.variables.variable.variable property)": [[437, "fipy.variables.variable.Variable.mag"]], "max() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.max"]], "min() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.min"]], "release() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.release"]], "setvalue() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.setValue"]], "shape (fipy.variables.variable.variable property)": [[437, "fipy.variables.variable.Variable.shape"]], "std() (fipy.variables.variable.variable method)": [[437, "fipy.variables.variable.Variable.std"]], "unit (fipy.variables.variable.variable property)": [[437, "fipy.variables.variable.Variable.unit"]], "value (fipy.variables.variable.variable property)": [[437, "fipy.variables.variable.Variable.value"]], "dummyviewer (class in fipy.viewers)": [[438, "fipy.viewers.DummyViewer"]], "meshdimensionerror": [[438, "fipy.viewers.MeshDimensionError"]], "viewer() (in module fipy.viewers)": [[438, "fipy.viewers.Viewer"]], "__cause__ (fipy.viewers.meshdimensionerror attribute)": [[438, "fipy.viewers.MeshDimensionError.__cause__"]], "__context__ (fipy.viewers.meshdimensionerror attribute)": [[438, "fipy.viewers.MeshDimensionError.__context__"]], "__delattr__() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.__delattr__"]], "__getattribute__() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.__getattribute__"]], "__reduce__() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.__reduce__"]], "__repr__() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.__repr__"]], "__setattr__() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.__setattr__"]], "__str__() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.__str__"]], "add_note() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.add_note"]], "plot() (fipy.viewers.dummyviewer method)": [[438, "fipy.viewers.DummyViewer.plot"]], "plotmesh() (fipy.viewers.dummyviewer method)": [[438, "fipy.viewers.DummyViewer.plotMesh"]], "setlimits() (fipy.viewers.dummyviewer method)": [[438, "fipy.viewers.DummyViewer.setLimits"]], "title (fipy.viewers.dummyviewer property)": [[438, "fipy.viewers.DummyViewer.title"]], "vars (fipy.viewers.dummyviewer property)": [[438, "fipy.viewers.DummyViewer.vars"]], "with_traceback() (fipy.viewers.meshdimensionerror method)": [[438, "fipy.viewers.MeshDimensionError.with_traceback"]], "matplotlibviewer() (in module fipy.viewers.matplotlibviewer)": [[439, "fipy.viewers.matplotlibViewer.MatplotlibViewer"]], "fipy.viewers.matplotlibviewer": [[439, "module-fipy.viewers.matplotlibViewer"]], "abstractmatplotlib2dviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer": [[440, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[440, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.vars"]], "abstractmatplotlibviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlibviewer)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlibviewer": [[441, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[441, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.vars"]], "matplotlib1dviewer (class in fipy.viewers.matplotlibviewer.matplotlib1dviewer)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib1dviewer": [[442, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.id"]], "lines (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.lines"]], "log (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.vars"]], "matplotlib2dcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer": [[443, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.vars"]], "matplotlib2dgridcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer": [[444, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.vars"]], "matplotlib2dgridviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridviewer)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridviewer": [[445, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.vars"]], "matplotlib2dviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dviewer)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.cmap"]], "collection (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.collection"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dviewer": [[446, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.vars"]], "matplotlibsparsematrixviewer (class in fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer)": [[447, "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer": [[447, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "matplotlibstreamviewer (class in fipy.viewers.matplotlibviewer.matplotlibstreamviewer)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibstreamviewer": [[448, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.id"]], "kwargs (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.kwargs"]], "log (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.vars"]], "matplotlibvectorviewer (class in fipy.viewers.matplotlibviewer.matplotlibvectorviewer)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibvectorviewer": [[449, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.vars"]], "fipy.viewers.matplotlibviewer.test": [[450, "module-fipy.viewers.matplotlibViewer.test"]], "mayaviclient (class in fipy.viewers.mayaviviewer)": [[451, "fipy.viewers.mayaviViewer.MayaviClient"]], "fipy.viewers.mayaviviewer": [[451, "module-fipy.viewers.mayaviViewer"]], "fps (fipy.viewers.mayaviviewer.mayaviclient property)": [[451, "fipy.viewers.mayaviViewer.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient method)": [[451, "fipy.viewers.mayaviViewer.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient method)": [[451, "fipy.viewers.mayaviViewer.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient method)": [[451, "fipy.viewers.mayaviViewer.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient property)": [[451, "fipy.viewers.mayaviViewer.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient property)": [[451, "fipy.viewers.mayaviViewer.MayaviClient.vars"]], "mayaviclient (class in fipy.viewers.mayaviviewer.mayaviclient)": [[452, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient"]], "fipy.viewers.mayaviviewer.mayaviclient": [[452, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fps (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[452, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[452, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[452, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[452, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[452, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[452, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.vars"]], "mayavidaemon (class in fipy.viewers.mayaviviewer.mayavidaemon)": [[453, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon"]], "fipy.viewers.mayaviviewer.mayavidaemon": [[453, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "main() (in module fipy.viewers.mayaviviewer.mayavidaemon)": [[453, "fipy.viewers.mayaviViewer.mayaviDaemon.main"]], "parse_command_line() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[453, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.parse_command_line"]], "setup_source() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[453, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.setup_source"]], "update_pipeline() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[453, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.update_pipeline"]], "view_data() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[453, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.view_data"]], "fipy.viewers.mayaviviewer.test": [[454, "module-fipy.viewers.mayaviViewer.test"]], "multiviewer (class in fipy.viewers.multiviewer)": [[455, "fipy.viewers.multiViewer.MultiViewer"]], "fipy.viewers.multiviewer": [[455, "module-fipy.viewers.multiViewer"]], "plot() (fipy.viewers.multiviewer.multiviewer method)": [[455, "fipy.viewers.multiViewer.MultiViewer.plot"]], "plotmesh() (fipy.viewers.multiviewer.multiviewer method)": [[455, "fipy.viewers.multiViewer.MultiViewer.plotMesh"]], "setlimits() (fipy.viewers.multiviewer.multiviewer method)": [[455, "fipy.viewers.multiViewer.MultiViewer.setLimits"]], "title (fipy.viewers.multiviewer.multiviewer property)": [[455, "fipy.viewers.multiViewer.MultiViewer.title"]], "vars (fipy.viewers.multiviewer.multiviewer property)": [[455, "fipy.viewers.multiViewer.MultiViewer.vars"]], "fipy.viewers.test": [[456, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[457, "module-fipy.viewers.testinteractive"]], "tsvviewer (class in fipy.viewers.tsvviewer)": [[458, "fipy.viewers.tsvViewer.TSVViewer"]], "fipy.viewers.tsvviewer": [[458, "module-fipy.viewers.tsvViewer"]], "plot() (fipy.viewers.tsvviewer.tsvviewer method)": [[458, "fipy.viewers.tsvViewer.TSVViewer.plot"]], "plotmesh() (fipy.viewers.tsvviewer.tsvviewer method)": [[458, "fipy.viewers.tsvViewer.TSVViewer.plotMesh"]], "setlimits() (fipy.viewers.tsvviewer.tsvviewer method)": [[458, "fipy.viewers.tsvViewer.TSVViewer.setLimits"]], "title (fipy.viewers.tsvviewer.tsvviewer property)": [[458, "fipy.viewers.tsvViewer.TSVViewer.title"]], "vars (fipy.viewers.tsvviewer.tsvviewer property)": [[458, "fipy.viewers.tsvViewer.TSVViewer.vars"]], "abstractviewer (class in fipy.viewers.viewer)": [[459, "fipy.viewers.viewer.AbstractViewer"]], "fipy.viewers.viewer": [[459, "module-fipy.viewers.viewer"]], "plot() (fipy.viewers.viewer.abstractviewer method)": [[459, "fipy.viewers.viewer.AbstractViewer.plot"]], "plotmesh() (fipy.viewers.viewer.abstractviewer method)": [[459, "fipy.viewers.viewer.AbstractViewer.plotMesh"]], "setlimits() (fipy.viewers.viewer.abstractviewer method)": [[459, "fipy.viewers.viewer.AbstractViewer.setLimits"]], "title (fipy.viewers.viewer.abstractviewer property)": [[459, "fipy.viewers.viewer.AbstractViewer.title"]], "vars (fipy.viewers.viewer.abstractviewer property)": [[459, "fipy.viewers.viewer.AbstractViewer.vars"]], "vtkcellviewer (class in fipy.viewers.vtkviewer)": [[460, "fipy.viewers.vtkViewer.VTKCellViewer"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer)": [[460, "fipy.viewers.vtkViewer.VTKFaceViewer"]], "vtkviewer() (in module fipy.viewers.vtkviewer)": [[460, "fipy.viewers.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer": [[460, "module-fipy.viewers.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[460, "fipy.viewers.vtkViewer.VTKCellViewer.plot"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[460, "fipy.viewers.vtkViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[460, "fipy.viewers.vtkViewer.VTKCellViewer.plotMesh"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[460, "fipy.viewers.vtkViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[460, "fipy.viewers.vtkViewer.VTKCellViewer.setLimits"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[460, "fipy.viewers.vtkViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer property)": [[460, "fipy.viewers.vtkViewer.VTKCellViewer.title"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[460, "fipy.viewers.vtkViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer property)": [[460, "fipy.viewers.vtkViewer.VTKCellViewer.vars"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[460, "fipy.viewers.vtkViewer.VTKFaceViewer.vars"]], "fipy.viewers.vtkviewer.test": [[461, "module-fipy.viewers.vtkViewer.test"]], "vtkcellviewer (class in fipy.viewers.vtkviewer.vtkcellviewer)": [[462, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer"]], "fipy.viewers.vtkviewer.vtkcellviewer": [[462, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[462, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[462, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[462, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[462, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[462, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.vars"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer.vtkfaceviewer)": [[463, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer"]], "fipy.viewers.vtkviewer.vtkfaceviewer": [[463, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[463, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[463, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[463, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[463, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[463, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.vars"]], "vtkviewer (class in fipy.viewers.vtkviewer.vtkviewer)": [[464, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer.vtkviewer": [[464, "module-fipy.viewers.vtkViewer.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[464, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[464, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[464, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[464, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[464, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.vars"]], "appveyor": [[465, "term-AppVeyor"]], "azure": [[465, "term-Azure"]], "buildbot": [[465, "term-Buildbot"]], "circleci": [[465, "term-CircleCI"]], "continuous integration": [[465, "term-Continuous-Integration"]], "github actions": [[465, "term-GitHub-Actions"]], "ipython": [[465, "term-IPython"]], "json": [[465, "term-JSON"]], "mpi": [[465, "term-MPI"]], "matplotlib": [[465, "term-Matplotlib"]], "mayavi": [[465, "term-MayaVi"], [465, "term-Mayavi"]], "numpy": [[465, "term-NumPy"]], "numeric": [[465, "term-Numeric"]], "openmp": [[465, "term-OpenMP"]], "pep 3000": [[465, "index-0"]], "petsc": [[465, "term-PETSc"]], "pyamg": [[465, "term-PyAMG"]], "pypi": [[465, "term-PyPI"]], "pytrilinos": [[465, "term-PyTrilinos"]], "pyrex": [[465, "term-Pyrex"]], "pysparse": [[465, "term-Pysparse"]], "python": [[465, "term-Python"]], "python 3": [[465, "term-Python-3"]], "pyxviewer": [[465, "term-PyxViewer"]], "scientificpython": [[465, "term-ScientificPython"]], "sphinx": [[465, "term-Sphinx"]], "travisci": [[465, "term-TravisCI"]], "trilinos": [[465, "term-Trilinos"]], "weave": [[465, "term-Weave"]], "windows": [[465, "term-Windows"]], "conda": [[465, "term-conda"]], "linux": [[465, "term-linux"]], "macos": [[465, "term-macOS"]], "mpi4py": [[465, "term-mpi4py"]], "numarray": [[465, "term-numarray"]], "pandas": [[465, "term-pandas"]], "petsc4py": [[465, "term-petsc4py"]], "pip": [[465, "term-pip"]], "pyamgx": [[465, "term-pyamgx"]], "package": [[473, "module-package"]], "package.subpackage": [[474, "module-package.subpackage"]], "base (class in package.subpackage.base)": [[475, "package.subpackage.base.Base"]], "method1() (package.subpackage.base.base method)": [[475, "package.subpackage.base.Base.method1"]], "method2() (package.subpackage.base.base method)": [[475, "package.subpackage.base.Base.method2"]], "package.subpackage.base": [[475, "module-package.subpackage.base"]], "object (class in package.subpackage.object)": [[476, "package.subpackage.object.Object"]], "method1() (package.subpackage.object.object method)": [[476, "package.subpackage.object.Object.method1"]], "method2() (package.subpackage.object.object method)": [[476, "package.subpackage.object.Object.method2"]], "package.subpackage.object": [[476, "module-package.subpackage.object"]]}})