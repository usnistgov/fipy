spellchecker: hunspell

matrix:
- name: python
  sources:
  - examples/**/*.py
  dictionary:
    wordlists:
    - .en-custom.txt
  pipeline:
  - pyspelling.filters.python:
      comments: false
  - pyspelling.filters.context:
      context_visible_first: true
      delimiters:
      # Ignore multiline content between fences (fences can have 3 or more back ticks)
      # ```
      # content
      # ```
      - open: '(?s)^(?P<open> *`{3,})$'
        close: '^(?P=open)$'
      # Ignore text between inline back ticks
      - open: '(- )?(?P<open>`+)'
        close: '(?P=open)'
      # Ignore doctest blocks
      #  Source consists of a PS1 line followed by zero or more PS2 lines.
      #  Want consists of any non-blank lines that do not start with PS1.
      #  Adapted from doctest.py: DocTestParser._EXAMPLE_RE
      - open: '(?P<source>(?:^(?P<indent>[ ]*)>>> .*)(?:\n(?=P<indent>)\.\.\. .*)*)\n?'
        content: ''
        close: '(?P<want>(?:(?![ ]*$)(?![ ]*>>> ).*$\n?)*)'
      # Ignore reStructuredText roles
      - open: ':(?:(attr|class|envvar|eq|exc|func|meth|math|mod|py:attr)):`'
        content: '[^`]*'
        close: '`'
      # Ignore reStructuredText literals
      - open: '::$'
        close: '(?P<literal>(?:((?P<indent>[ ]+).*$)|(\n))+)'
      # Ignore reStructuredText math directive
      - open: '\.\. math::.*$\n*'
        content: '(?P<first>(^(?P<indent>[ ]+).*$\n))(?P<other>(^([ \t]+.*|[ \t]*)$\n)*)'
        close: '(^(?![ \t]+.*$))'
      # Ignore reStructuredText directives
      - open: '\.\.\s+(image|literalinclude|tabularcolumns)::'
        close: '\n'
      # Ignore reStructuredText bibmissing
      - open: '\.\. \.\.\s+bibmissing::'
        close: '\n'
      # Ignore reStructuredText index
      - open: '\.\.\s+index::'
        close: '(?P<indexing>(?:((?P<indent>[ ]+).*$)|(\n))+)'
      # Ignore reStructuredText hyperlinks
      - open: '\s'
        content: '\w*'
        close: '_'
      # Ignore reStructredText hyperlink target
      - open: '\.\.[ \t]+_[^:]*:'
        close: '$'
      # Ignore positive and negative numbers
      - open: '\s'
        content: '[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
        close: '\s'
  - pyspelling.filters.url:
