# Conda package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda

variables:
  system.debug: true
  system.log: true

jobs:
  - job: Install
    strategy:
      matrix:
#         linux-py27:
#           image: ubuntu-latest
#           python_version: 2.7
#           conda_packages: '"traitsui<7.0.0" "gmsh<4.0"'
        linux-py39:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
#           conda_packages: 'gmsh pytrilinos'
#         macos-py27:
#           image: macos-latest
#           python_version: 2.7
#           conda_packages: '"traitsui<7.0.0" "gmsh<4.0"'
        macos-py39:
          image: macos-latest
          python_version: 3.9
          conda_packages: gmsh
#           conda_packages: 'gmsh pytrilinos'
#         windows-py39:
#           image: windows-latest
#           python_version: 3.9
#           conda_packages: gmsh

    pool:
      vmImage: $(image)

    steps:
    - template: templates/install.yml
      parameters:
        python_version: $(python_version)
        conda_packages: $(conda_packages)

  - job: Test
    dependsOn: Install
    strategy:
      matrix:
        linux-py27-pysparse:
          image: ubuntu-latest
          python_version: 2.7
          conda_packages: '"traitsui<7.0.0" "gmsh<4.0"'
          FIPY_SOLVERS: pysparse
          MPIRUN:
        linux-py39-petsc:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN:
        linux-py39-petsc-parallel:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN: 'mpirun -np 2'
        linux-py39-scipy:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: scipy
          MPIRUN:
        linux-py39-trilinos:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: 'gmsh pytrilinos'
          FIPY_SOLVERS: trilinos
          MPIRUN:
        macos-py27-pysparse:
          image: macos-latest
          python_version: 2.7
          conda_packages: '"traitsui<7.0.0" "gmsh<4.0"'
          FIPY_SOLVERS: pysparse
          MPIRUN:
        macos-py39-petsc:
          image: macos-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN:
        macos-py39-petsc-parallel:
          image: macos-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN: 'mpirun -np 2'
        macos-py39-scipy:
          image: macos-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: scipy
          MPIRUN:
        macos-py39-trilinos:
          image: macos-latest
          python_version: 3.9
          conda_packages: 'gmsh pytrilinos'
          FIPY_SOLVERS: trilinos
          MPIRUN:
        windows-py39-scipy:
          image: windows-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: scipy
          MPIRUN:

    pool:
      vmImage: $(image)

    steps:
    - bash: |
        conda env export --name myEnvironment
      displayName: Environment

    - bash: |
        source activate myEnvironment
        python setup.py install
        $MPIRUN python setup.py test --deprecation-errors
      env:
        FIPY_SOLVERS: $(FIPY_SOLVERS)
        MPIRUN: $(MPIRUN)
      displayName: Test

  - job: Docs
    dependsOn: Install

    variables:
      image: ubuntu-latest

    pool:
      vmImage: ubuntu-latest

    steps:
    - bash: |
        source activate myEnvironment
        pip install sphinxcontrib-bibtex
        pip install numpydoc
      displayName: Install pip packages

    - bash: |
        source activate myEnvironment
        export ETS_TOOLKIT=null
        python setup.py build_docs --html
        tar -czf html.tar.gz -C documentation/_build html
      displayName: HTML

    - publish: $(System.DefaultWorkingDirectory)/html.tar.gz
      artifact: html.tar.gz

    - publish: $(System.DefaultWorkingDirectory)/documentation/_build/html
      artifact: html

    - bash: |
        sudo apt-get --yes update
        sudo apt-get --yes install texlive-latex-base
        sudo apt-get --yes install texlive-fonts-recommended
        sudo apt-get --yes install texlive-fonts-extra
        sudo apt-get --yes install texlive-latex-extra
        sudo apt-get --yes install texlive-science
        sudo apt-get --yes install texlive-extra-utils
      displayName: Install LaTeX

    - bash: |
        source activate myEnvironment
        export ETS_TOOLKIT=null
        python setup.py build_docs --pdf
      displayName: PDF

    - publish: $(System.DefaultWorkingDirectory)/documentation/_build/latex/fipy.pdf
      artifact: fipy.pdf
