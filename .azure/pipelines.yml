# Conda package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda

variables:
  system.debug: true
  system.log: true

jobs:
  - job: Test
    strategy:
      matrix:
        linux-py27-pysparse:
          image: ubuntu-latest
          python_version: 2.7
          conda_packages: '"traitsui<7.0.0" "gmsh<4.0"'
          FIPY_SOLVERS: pysparse
          MPIRUN:
        linux-py39-petsc:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN:
        linux-py39-petsc-parallel:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN: 'mpirun -np 2'
        linux-py39-scipy:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: scipy
          MPIRUN:
        linux-py37-trilinos:
          image: ubuntu-latest
          python_version: 3.7
          conda_packages: 'gmsh pytrilinos'
          FIPY_SOLVERS: trilinos
          MPIRUN:
        linux-py37-trilinos-parallel:
          image: ubuntu-latest
          python_version: 3.7
          conda_packages: 'gmsh pytrilinos'
          FIPY_SOLVERS: trilinos
          MPIRUN: 'mpirun -np 2'
        macos-py27-pysparse:
          image: macos-latest
          python_version: 2.7
          conda_packages: '"traitsui<7.0.0" "gmsh<4.0"'
          FIPY_SOLVERS: pysparse
          MPIRUN:
        macos-py39-petsc:
          image: macos-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN:
        macos-py39-petsc-parallel:
          image: macos-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN: 'mpirun -np 2'
        macos-py39-scipy:
          image: macos-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: scipy
          MPIRUN:
        macos-py37-trilinos:
          image: macos-latest
          python_version: 3.7
          conda_packages: 'gmsh pytrilinos'
          FIPY_SOLVERS: trilinos
          MPIRUN:
        macos-py37-trilinos-parallel:
          image: macos-latest
          python_version: 3.7
          conda_packages: 'gmsh pytrilinos'
          FIPY_SOLVERS: trilinos
          MPIRUN: 'mpirun -np 2'
        windows-py39-scipy:
          image: windows-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: scipy
          MPIRUN:

    pool:
      vmImage: $(image)

    steps:
    - template: templates/install.yml
      parameters:
        python_version: $(python_version)
        conda_packages: $(conda_packages)

    - bash: |
        conda env export --name myEnvironment
      displayName: Environment

    - bash: |
        # lack of display causes tests to abort at VtkViewer
        # Workaround @ http://docs.enthought.com/mayavi/mayavi/tips.html#rendering-using-the-virtual-framebuffer
        # and https://github.com/wpilibsuite/RobotBuilder/blob/main/azure-pipelines.yml
        sudo apt-get update
        sudo apt-get --yes install xvfb
        Xvfb :10 &
      displayName: 'Install and start xvfb'
      condition: startsWith(variables.image, 'ubuntu')

    - bash: |
        source activate myEnvironment
        python setup.py install
        $MPIRUN python setup.py test --deprecation-errors
      env:
        FIPY_SOLVERS: $(FIPY_SOLVERS)
        MPIRUN: $(MPIRUN)
        OMP_NUM_THREADS: 1
        DISPLAY: ':10'
      displayName: Test

  - job: Docs
    variables:
      image: ubuntu-latest

    pool:
      vmImage: ubuntu-latest

    steps:
    - template: templates/install.yml
      parameters:
        python_version: 3.9
        conda_packages: 'sphinx future matplotlib pandas imagemagick'

    - bash: |
        source activate myEnvironment
        pip install sphinxcontrib-bibtex
        pip install numpydoc
      displayName: Install pip packages

    - bash: |
        source activate myEnvironment
        export ETS_TOOLKIT=null
        python setup.py build_docs --html
        tar -czf html.tar.gz -C documentation/_build html
      displayName: HTML

    - publish: $(System.DefaultWorkingDirectory)/html.tar.gz
      artifact: html.tar.gz

    - publish: $(System.DefaultWorkingDirectory)/documentation/_build/html
      artifact: html

    - bash: |
        sudo apt-get --yes update
        sudo apt-get --yes install texlive-latex-base
        sudo apt-get --yes install texlive-fonts-recommended
        sudo apt-get --yes install texlive-fonts-extra
        sudo apt-get --yes install texlive-latex-extra
        sudo apt-get --yes install texlive-science
        sudo apt-get --yes install texlive-extra-utils
      displayName: Install LaTeX

    - bash: |
        source activate myEnvironment
        export ETS_TOOLKIT=null
        python setup.py build_docs --pdf
      displayName: PDF

    - publish: $(System.DefaultWorkingDirectory)/documentation/_build/latex/fipy.pdf
      artifact: fipy.pdf

  - job: Spelling
    variables:
      image: ubuntu-latest

    pool:
      vmImage: ubuntu-latest

    steps:
    - template: templates/install.yml
      parameters:
        python_version: 3.9
        conda_packages: 'hunspell'

    - bash: |
        source activate myEnvironment
        pip install pyspelling
      displayName: Install pip packages

    - bash: |
        wget -O en_US.aff  https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.aff?id=a4473e06b56bfe35187e302754f6baaa8d75e54f
        wget -O en_US.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.dic?id=a4473e06b56bfe35187e302754f6baaa8d75e54f
      displayName: Obtain dictionaries

    - bash: |
        source activate myEnvironment
        pyspelling
      displayName: Check spelling

  - job: Lint
    variables:
      image: ubuntu-latest

    pool:
      vmImage: ubuntu-latest

    steps:
    - template: templates/install.yml
      parameters:
        python_version: 3.9
        conda_packages: 'numpy'

    - bash: |
        source activate myEnvironment
        pip install pylint
      displayName: Install pip packages

    - bash: |
        source activate myEnvironment
        pylint setup.py
      displayName: Check lint

  - job: Style
    variables:
      image: ubuntu-latest

    pool:
      vmImage: ubuntu-latest

    steps:
    - template: templates/install.yml
      parameters:
        python_version: 3.9
        conda_packages: 'numpy'

    - bash: |
        source activate myEnvironment
        pip install flake8
      displayName: Install pip packages

    - bash: |
        source activate myEnvironment
        flake8 setup.py
      displayName: Check style

  - job: Binaries
    strategy:
      matrix:
        unix:
          image: ubuntu-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: petsc
          MPIRUN:
        windows:
          image: windows-latest
          python_version: 3.9
          conda_packages: gmsh
          FIPY_SOLVERS: scipy
          MPIRUN:

    pool:
      vmImage: $(image)

    steps:
    - template: templates/install.yml
      parameters:
        python_version: $(python_version)
        conda_packages: $(conda_packages)

    - bash: git fetch origin --tags
      displayName: Fetch tags

    - bash: |
        source activate myEnvironment
        python setup.py bdist_egg
        python setup.py release --unix
      displayName: Build package
      condition: startsWith(variables.image, 'ubuntu')

    - bash: |
        source activate myEnvironment
        python setup.py bdist_egg
        python setup.py release --windows
      displayName: Build package
      condition: startsWith(variables.image, 'windows')

    - bash: |
        # lack of display causes tests to abort at VtkViewer
        # Workaround @ http://docs.enthought.com/mayavi/mayavi/tips.html#rendering-using-the-virtual-framebuffer
        # and https://github.com/wpilibsuite/RobotBuilder/blob/main/azure-pipelines.yml
        sudo apt-get update
        sudo apt-get --yes install xvfb
        Xvfb :10 &
      displayName: 'Install and start xvfb'
      condition: startsWith(variables.image, 'ubuntu')

    - bash: |
        source activate myEnvironment
        FIPY_VERSION=`python setup.py --version`
        mkdir tmp
        cd tmp
        cp ../dist/FiPy-${FIPY_VERSION}.tar.gz .
        tar zxvf FiPy-${FIPY_VERSION}.tar.gz
        cd FiPy-${FIPY_VERSION}
        python setup.py install
        cd ..
        python -c "import fipy; fipy.test()"
      env:
        DISPLAY: ':10'
      displayName: Test package
      condition: startsWith(variables.image, 'ubuntu')

    - bash: |
        source activate myEnvironment
        FIPY_VERSION=`python setup.py --version`
        mkdir tmp
        cd tmp
        cp ../dist/FiPy-${FIPY_VERSION}.zip .
        unzip FiPy-${FIPY_VERSION}.zip
        cd FiPy-${FIPY_VERSION}
        python setup.py install
        cd ..
        python -c "import fipy; fipy.test()"
      displayName: Test package
      condition: startsWith(variables.image, 'windows')

    - publish: $(System.DefaultWorkingDirectory)/dist/
      artifact: dist-$(Agent.OS)
