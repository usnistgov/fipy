# Conda package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda

trigger:
  tags:
    include:
    - '*'

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master
  always: true

variables:
  system.debug: true
  system.log: true

stages:
  - stage: Analyze
    dependsOn: []
    jobs:
    - job: spelling
      variables:
        image: ubuntu-latest

      pool:
        vmImage: ubuntu-latest

      steps:
      - template: templates/install.yml
        parameters:
          python_version: 3
          conda_packages: 'hunspell'

      - bash: |
          source activate myEnvironment
          pip install pyspelling
        displayName: Install pip packages

      - bash: |
          wget -O en_US.aff  https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.aff?id=a4473e06b56bfe35187e302754f6baaa8d75e54f
          wget -O en_US.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.dic?id=a4473e06b56bfe35187e302754f6baaa8d75e54f
        displayName: Obtain dictionaries

      - bash: |
          source activate myEnvironment
          pyspelling
        displayName: Check spelling

    - job: lint
      variables:
        image: ubuntu-latest

      pool:
        vmImage: ubuntu-latest

      steps:
      - template: templates/install.yml
        parameters:
          python_version: 3
          conda_packages: 'numpy'

      - bash: |
          source activate myEnvironment
          pip install pylint
        displayName: Install pip packages

      - bash: |
          source activate myEnvironment
          pylint setup.py
        displayName: Check lint

    - job: style
      variables:
        image: ubuntu-latest

      pool:
        vmImage: ubuntu-latest

      steps:
      - template: templates/install.yml
        parameters:
          python_version: 3
          conda_packages: 'numpy'

      - bash: |
          source activate myEnvironment
          pip install flake8
        displayName: Install pip packages

      - bash: |
          source activate myEnvironment
          flake8 setup.py
        displayName: Check style

  - stage: Test
    dependsOn: []
    jobs:
    - job:
      strategy:
        matrix:
          linux-py3k-petsc:
            image: ubuntu-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py petsc4py mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: petsc
            MPIRUN:
          linux-py3k-petsc-parallel:
            image: ubuntu-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py petsc4py mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: petsc
            MPIRUN: 'mpirun -np 2'
          linux-py3k-scipy:
            image: ubuntu-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: scipy
            MPIRUN:
          linux-py3k-trilinos:
            image: ubuntu-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py pytrilinos mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: trilinos
            MPIRUN:
          linux-py3k-trilinos-parallel:
            image: ubuntu-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py pytrilinos mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: trilinos
            MPIRUN: 'mpirun -np 2'
          macos-py27-pysparse:
            image: macos-latest
            python_version: 2.7
            conda_packages: 'numpy scipy matplotlib-base future packaging pysparse mayavi "traitsui<7.0.0" "gmsh<4.0"'
            FIPY_SOLVERS: pysparse
            MPIRUN:
          macos-py3k-petsc:
            image: macos-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py petsc4py mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: petsc
            MPIRUN:
          macos-py3k-petsc-parallel:
            image: macos-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py petsc4py mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: petsc
            MPIRUN: 'mpirun -np 2'
          macos-py3k-scipy:
            image: macos-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: scipy
            MPIRUN:
          macos-py3k-trilinos:
            image: macos-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py pytrilinos mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: trilinos
            MPIRUN:
          macos-py3k-trilinos-parallel:
            image: macos-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py pytrilinos mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: trilinos
            MPIRUN: 'mpirun -np 2'
          windows-py3k-scipy:
            image: windows-latest
            python_version: 3
            conda_packages: 'numpy scipy matplotlib-base future packaging mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: scipy
            MPIRUN:

      pool:
        vmImage: $(image)

      steps:
      - template: templates/install.yml
        parameters:
          python_version: $(python_version)
          conda_packages: $(conda_packages)

      - bash: |
          conda env export --name myEnvironment
        displayName: Environment

      - bash: |
          source activate myEnvironment
          python setup.py install
          $MPIRUN python setup.py test --deprecation-errors
        env:
          FIPY_SOLVERS: $(FIPY_SOLVERS)
          MPIRUN: $(MPIRUN)
          OMP_NUM_THREADS: 1
          QT_QPA_PLATFORM: offscreen
        displayName: Test

  - stage: Package
    dependsOn: []
    jobs:
    - job:
      strategy:
        matrix:
          unix:
            image: ubuntu-latest
            python_version: 3.10
            conda_packages: 'numpy scipy matplotlib-base future packaging mpich mpi4py petsc4py mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: petsc
            MPIRUN:
          windows:
            image: windows-latest
            python_version: 3.10
            conda_packages: 'numpy scipy matplotlib-base future packaging mayavi "gmsh <4.0|>=4.5.2"'
            FIPY_SOLVERS: scipy
            MPIRUN:

      pool:
        vmImage: $(image)

      steps:
      - template: templates/install.yml
        parameters:
          python_version: $(python_version)
          conda_packages: $(conda_packages)

      - bash: git fetch origin --tags --force
        displayName: Fetch tags

      - bash: |
          source activate myEnvironment
          python -m pip install --upgrade setuptools wheel
          python setup.py bdist_wheel
          python3 -m pip install check-wheel-contents
          check-wheel-contents dist/*.whl
        displayName: Build wheel
        condition: startsWith(variables.image, 'ubuntu')

      - bash: |
          conda env export --name myEnvironment
        displayName: Environment

      - bash: |
          source activate myEnvironment
          python setup.py release --unix
        displayName: Build source
        condition: startsWith(variables.image, 'ubuntu')

      - bash: |
          source activate myEnvironment
          python setup.py release --windows
        displayName: Build source
        condition: startsWith(variables.image, 'windows')

      - bash: |
          conda create --quiet --name wheelEnvironment --channel conda-forge python=3.10
          source activate wheelEnvironment
          mkdir tmp
          cd tmp
          python -m pip install ../dist/*.whl
          FIPY_SOLVERS=scipy python -c "import fipy; fipy.test()"
        env:
          QT_QPA_PLATFORM: offscreen
        displayName: Test wheel
        condition: startsWith(variables.image, 'ubuntu')

      - bash: |
          source activate myEnvironment
          FIPY_VERSION=`python setup.py --version`
          mkdir tmp
          cd tmp
          cp ../dist/FiPy-${FIPY_VERSION}.tar.gz .
          tar zxvf FiPy-${FIPY_VERSION}.tar.gz
          cd FiPy-${FIPY_VERSION}
          python setup.py install
          cd ..
          python -c "import fipy; fipy.test()"
        env:
          QT_QPA_PLATFORM: offscreen
        displayName: Test source
        condition: startsWith(variables.image, 'ubuntu')

      - bash: |
          source activate myEnvironment
          FIPY_VERSION=`python setup.py --version`
          mkdir tmp
          cd tmp
          cp ../dist/FiPy-${FIPY_VERSION}.zip .
          unzip FiPy-${FIPY_VERSION}.zip
          cd FiPy-${FIPY_VERSION}
          python setup.py install
          cd ..
          python -c "import fipy; fipy.test()"
        displayName: Test source
        condition: startsWith(variables.image, 'windows')

      - publish: $(System.DefaultWorkingDirectory)/dist/
        artifact: dist-$(Agent.OS)
