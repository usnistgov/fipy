parameters:
- name: conda_packages
  type: string
  default: ''
- name: conda_lock
  type: string
  default: environments/locks/conda-scipy-lock.yml

steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
    condition: or(startsWith(variables.image, 'macos'), startsWith(variables.image, 'ubuntu'))

  - bash: echo "##vso[task.prependpath]$CONDA/Scripts"
    displayName: Add conda to PATH
    condition: startsWith(variables.image, 'windows')

  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
  # We need to take ownership if we want to update conda or install packages globally
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation
    condition: startsWith(variables.image, 'macos')

  - bash: |
      sudo apt-get --yes install libglu1-mesa
      sudo apt-get --yes install libgl1-mesa-glx
      sudo apt-get --yes install libxrender1
    displayName: Install libGL
    condition: startsWith(variables.image, 'ubuntu')

  - bash: |
      conda config --set always_yes yes --set changeps1 no
      conda config --remove channels defaults
      conda config --set solver libmamba
    displayName: Configure Anaconda

  - bash: |
      conda install --channel=conda-forge --name=base conda-lock
      conda-lock install --name myEnvironment ${{ parameters.conda_lock }}
    displayName: Create Anaconda environment from lockfile
    condition: eq(variables['use_lockfile'], true)

  - bash: |
      conda env create --name myEnvironment \
        --file environments/environment.yml \
        --file environments/$(FIPY_SOLVERS)-environment.yml
    displayName: Create Anaconda environment from environments
    condition: eq(variables['use_lockfile'], false)

  - bash: |
      if [[ "${{ parameters.conda_packages }}" != "" ]]; then
        source activate myEnvironment
        # "Libmamba only supports a subset of the MatchSpec interface for
        # now.  You can only use ('name', 'version', 'build', 'channel',
        # 'subdir'), but you tried to use ('md5',)."
        conda install --solver classic --channel conda-forge ${{ parameters.conda_packages }}
      fi
    displayName: Install Anaconda packages

  - bash: |
      conda env export --name myEnvironment
    displayName: Environment
